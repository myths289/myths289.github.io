<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Less</title>
    <url>/2023/12/31/00_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B_%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# 课程简介_环境搭建

<h1 id="课程内容概览"><a href="#课程内容概览" class="headerlink" title="课程内容概览"></a>课程内容概览</h1><ul>
<li><p>Python环境搭建（Python解释器、Pycharm、环境变量等）</p>
</li>
<li><p>基础语法（条件、循环、输入输出、编码等）</p>
</li>
<li><p>数据类型（整型、布尔型、字符串、列表、字典、元组、集合等）</p>
</li>
<li><p>函数（文件操作、返回值、参数、作用域、装饰器、推导式等）</p>
</li>
<li><p>面向对象（类、对象、封装、继承、多态等）</p>
</li>
<li><p>包和模块（内置包、正则、时间处理、序列化等）</p>
</li>
<li><p>网络编程（socket、TCP、粘包等）</p>
</li>
<li><p>并发编程（多进程、多线程、锁、池）</p>
</li>
<li><p>数据库（MySQL、pymysql、数据库连接池、等）</p>
</li>
<li><p>自动化办公（excel、word、pdf等处理）</p>
</li>
<li><p>前端开发（ HTML、CSS、JavaScript、jQuery等）</p>
</li>
<li><p>Django Web框架（django、路由、视图、中间件、ORM等）</p>
</li>
<li><p>爬虫和可视化（requests、bs4、xpath、echars本地和web平台呈现）</p>
</li>
</ul>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><ul>
<li>笔记软件 Typora<ul>
<li>安装 Typora</li>
<li>配置图床</li>
</ul>
</li>
<li>目前该软件需要收费,破解方法百度或者B站找</li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li>Python 下载</li>
<li>Python 安装<ul>
<li>选择自定义安装 , 不能出现中文路径</li>
</ul>
</li>
<li>验证安装是否成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终端输入命令</span></span><br><span class="line">python --version # 查看版本号,出现版本号即为安装成功</span><br></pre></td></tr></table></figure>

<h2 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h2><h3 id="Pycharm-的下载安装"><a href="#Pycharm-的下载安装" class="headerlink" title="Pycharm 的下载安装"></a>Pycharm 的下载安装</h3><ul>
<li>开发软件 Pycharm <ul>
<li>安装 Pycharm </li>
<li>配置 python 解析器</li>
</ul>
</li>
<li>目前该软件需要收费,注册码百度或者B站找</li>
</ul>
<h3 id="配置-python-解析器"><a href="#配置-python-解析器" class="headerlink" title="配置 python 解析器"></a>配置 python 解析器</h3><p><img src="https://s1.vika.cn/space/2023/12/31/1449a40a446a422f85e044d82c0c0154" alt="image-20231231160649357"></p>
<h3 id="切换中文"><a href="#切换中文" class="headerlink" title="切换中文"></a>切换中文</h3><img src="https://s1.vika.cn/space/2023/12/31/006cf349f0f4488a8e4455075aa8f1ca" alt="image-20231231170457272" style="zoom:150%;" />

]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>使用 Github Pages 和 Hexo 搭建自己的独立博客</title>
    <url>/2023/12/10/hello-world%20copy%203/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Github Pages 和 Hexo 搭建自己的独立博客</title>
    <url>/2023/12/10/hello-world%20copy%202/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Github Pages 和 Hexo 搭建自己的独立博客</title>
    <url>/2023/12/10/hello-world%20copy/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Github Pages 和 Hexo 搭建自己的独立博客</title>
    <url>/2023/12/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>444444444444</title>
    <url>/2023/12/10/hello-world%20copy%204/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-1"><a href="#Create-a-new-post-1" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-1"><a href="#Run-server-1" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-1"><a href="#Generate-static-files-1" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-1"><a href="#Deploy-to-remote-sites-1" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-2"><a href="#Quick-Start-2" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-2"><a href="#Create-a-new-post-2" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-2"><a href="#Run-server-2" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-2"><a href="#Generate-static-files-2" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-2"><a href="#Deploy-to-remote-sites-2" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-3"><a href="#Quick-Start-3" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-3"><a href="#Create-a-new-post-3" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-3"><a href="#Run-server-3" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-3"><a href="#Generate-static-files-3" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-3"><a href="#Deploy-to-remote-sites-3" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-4"><a href="#Quick-Start-4" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-4"><a href="#Create-a-new-post-4" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-4"><a href="#Run-server-4" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-4"><a href="#Generate-static-files-4" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-4"><a href="#Deploy-to-remote-sites-4" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-5"><a href="#Quick-Start-5" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-5"><a href="#Create-a-new-post-5" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-5"><a href="#Run-server-5" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-5"><a href="#Generate-static-files-5" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-5"><a href="#Deploy-to-remote-sites-5" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-6"><a href="#Quick-Start-6" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-6"><a href="#Create-a-new-post-6" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-6"><a href="#Run-server-6" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-6"><a href="#Generate-static-files-6" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-6"><a href="#Deploy-to-remote-sites-6" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-7"><a href="#Quick-Start-7" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-7"><a href="#Create-a-new-post-7" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-7"><a href="#Run-server-7" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-7"><a href="#Generate-static-files-7" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-7"><a href="#Deploy-to-remote-sites-7" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-8"><a href="#Quick-Start-8" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-8"><a href="#Create-a-new-post-8" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-8"><a href="#Run-server-8" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-8"><a href="#Generate-static-files-8" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-8"><a href="#Deploy-to-remote-sites-8" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-9"><a href="#Quick-Start-9" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-9"><a href="#Create-a-new-post-9" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-9"><a href="#Run-server-9" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-9"><a href="#Generate-static-files-9" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-9"><a href="#Deploy-to-remote-sites-9" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-10"><a href="#Quick-Start-10" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-10"><a href="#Create-a-new-post-10" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-10"><a href="#Run-server-10" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-10"><a href="#Generate-static-files-10" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-10"><a href="#Deploy-to-remote-sites-10" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-11"><a href="#Quick-Start-11" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-11"><a href="#Create-a-new-post-11" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-11"><a href="#Run-server-11" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-11"><a href="#Generate-static-files-11" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-11"><a href="#Deploy-to-remote-sites-11" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start-12"><a href="#Quick-Start-12" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-12"><a href="#Create-a-new-post-12" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server-12"><a href="#Run-server-12" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files-12"><a href="#Generate-static-files-12" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites-12"><a href="#Deploy-to-remote-sites-12" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Less</title>
    <url>/2023/02/26/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/104_Less/10401_Less/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><h2 id="什么是CSS预处理器"><a href="#什么是CSS预处理器" class="headerlink" title="什么是CSS预处理器"></a>什么是CSS预处理器</h2><blockquote>
<p>Less中文网: <a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p>
</blockquote>
<ul>
<li><p>CSS 预处理器就是用某一种语言用来为 CSS 增加一些动态语言的的特性(变量、函数、继承等)，</p>
</li>
<li><p>CSS 预处理器可以让你的 CSS 更见简洁，适应性更强，代码更直观等诸多好处</p>
</li>
<li><p>简而言之:CSS 预处理器就是升级版 CSS</p>
</li>
</ul>
<h2 id="常见的CSS预处理器"><a href="#常见的CSS预处理器" class="headerlink" title="常见的CSS预处理器"></a>常见的CSS预处理器</h2><ul>
<li>Less(Leaner Style Sheets) 、Sass 、Stylus</li>
</ul>
<h2 id="为什么需要less"><a href="#为什么需要less" class="headerlink" title="为什么需要less"></a>为什么需要less</h2><ul>
<li><p>CSS 的语法虽然简单，但它同时也带来一些问题</p>
</li>
<li><p>CSS 需要书写大量看似没有逻辑的代码，不方便维护及扩展，也不利于复用</p>
</li>
<li><p>造成这些原因的本质源于 CSS 是一门非程序式的语言，没有变量 &#x2F; 函数 &#x2F; 作用域等概念</p>
</li>
</ul>
<h2 id="什么是less"><a href="#什么是less" class="headerlink" title="什么是less"></a>什么是less</h2><ul>
<li>Less 是一门 CSS 预处理语言，为 CSS 赋予了动态语言的特征。</li>
<li>它扩展了 CSS 语言，增加了变量、Mixin(混合)、嵌套、函数和运算等特性，使 CSS 更易维护和扩展</li>
<li>一句话:用类似 JS 的语法去写 CSS</li>
</ul>
<h2 id="less基本使用"><a href="#less基本使用" class="headerlink" title="less基本使用"></a>less基本使用</h2><ul>
<li>在浏览器中直接运行<ul>
<li>编写 .less 文件–&gt;引入 .less 文件–&gt; 引入less.js</li>
</ul>
</li>
<li>运行注意点:<ul>
<li>一定要先引入 less.css , 再引入 less.js</li>
<li>如果 less 代码是写到单独的文件中,一定要在服务端环境运行才能生效</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-class">.box</span>;</span><br><span class="line">  <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-class">.center</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="提前预编译"><a href="#提前预编译" class="headerlink" title="提前预编译"></a>提前预编译</h2><ul>
<li>编写 less 文件–&gt;利用工具转换为 css 文件–&gt;引入 css 文件</li>
<li><strong>VScode插件: Easy Less (推荐)</strong></li>
<li>考拉客户端: <a href="http://koala-app.com/index-zh.html">http://koala-app.com/index-zh.html</a></li>
<li>开源中国 : <a href="https://tool.oschina.net/less">https://tool.oschina.net/less</a></li>
<li>构建工具配置 loader 自动编译:</li>
<li>后续课程内容注意点:<ul>
<li>无需引入 less.js，无需在服务端运行</li>
</ul>
</li>
</ul>
<h2 id="Less的注释"><a href="#Less的注释" class="headerlink" title="Less的注释"></a>Less的注释</h2><ul>
<li>单行注释和多行注释:<ul>
<li>单行注释,不会被编译到 .css文件中</li>
<li>多行注释,会编译到 .css 文件中( 在 css 中仅支持 &#x2F;**&#x2F; 注释)</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释,不会被编译到.css文件中</span></span><br><span class="line"><span class="comment">/*多行注释,会编译到.css文件中*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Less的变量"><a href="#Less的变量" class="headerlink" title="Less的变量"></a>Less的变量</h2><ul>
<li><ol>
<li>变量的定义: 和 JS 中的变量基本一致</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@height:</span><span class="number">200px</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>变量的赋值 (和 js 一样可以将一个变量赋值给另外一个变量)</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@height:</span><span class="variable">@width</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>局部变量和全局变量:</li>
</ol>
<ul>
<li>和 js 一样, less 中的变量也有全局变量和局部变量, 定义在 { } 外面的就是全局的变量，什么地方都可以使用, 定义在 { } 里面的就是局部变量，只能在 { } 中使用</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义全局变量 */</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">100px</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*定义局部变量,优先使用就近的局部变量*/</span></span><br><span class="line">	<span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义全局变量 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*定义局部变量,优先使用就近的局部变量*/</span></span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意定: less 中的变量是延迟加载的，写到后面也能在前面使用</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>同一个变量,后定义的变量会覆盖前定义的变量</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@width:</span><span class="number">100px</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Less变量的插值"><a href="#Less变量的插值" class="headerlink" title="Less变量的插值"></a>Less变量的插值</h2><ul>
<li><ol>
<li>什么是变量插值?</li>
</ol>
<ul>
<li>在 less 中如果属性的取值可以直接使用变量，但是如果是属性名称或者选择器名称并不能直接使用变量, 如果属性名称或者选择器名称想使用变量中保存的值，那么必须使用变量插值的格式</li>
</ul>
</li>
<li><ol start="2">
<li>变量作为样式的属性名:</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@height:</span>height;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  @&#123;<span class="attribute">height&#125;</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>变量作为选择器</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@div:</span>div;</span><br><span class="line"><span class="variable">@&#123;div&#125;</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的运算"><a href="#Less的运算" class="headerlink" title="Less的运算"></a>Less的运算</h2><ul>
<li><p>和 CSS3 中新增的 calc 函数一样，都支持 + - * &#x2F; 运算</p>
</li>
<li><p>单位也可以写到后面,也可以两个都写</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:(<span class="number">200px</span> * <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">height</span>:(<span class="number">200px</span> / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的混合"><a href="#Less的混合" class="headerlink" title="Less的混合"></a>Less的混合</h2><ol>
<li>什么是 less 中的混合 ( Mix in )</li>
</ol>
<ul>
<li>将需要重复使用的代码封装到一个类中，在需要使用的地方调用封装好的类即可, 在预处理的时候 less 会自动将用到的封装好的类中的代码拷贝过来</li>
<li>本质就是 ctrl+c –&gt; ctrl +v</li>
</ul>
<ol start="2">
<li>less 中混合的注意点:</li>
</ol>
<ul>
<li>如果混合名称的后面没有 ()，那么在预处理的时候，会保留混合的代码</li>
<li>如果混合名称的后面加上 ()，那么在预处理的时候，不会保留混合的代码</li>
<li>使用混合类时,也可以在后面添加 (),也可以不加 (),效果同样</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* .box 类会被编译到 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>() &#123;</span><br><span class="line">  <span class="comment">/* .center 类不会被编译出现在 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-class">.box</span>;</span><br><span class="line">  <span class="selector-class">.center</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* .box 类会被编译到 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* .box 类会被编译到 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="comment">/* .center 类不会被编译出现在 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less带参数混合"><a href="#Less带参数混合" class="headerlink" title="Less带参数混合"></a>Less带参数混合</h2><ul>
<li><ol>
<li>Less 带参数混合</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.snail</span>(<span class="variable">@w</span>,<span class="variable">@h</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@w</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="variable">@h</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="variable">@c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="number">200px</span>,<span class="number">200px</span>,green)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="number">100px</span>,<span class="number">100px</span>,yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>带参数以及默认值的混合:</li>
</ol>
<ul>
<li>若传递了对应的参数,就用传递的参数</li>
<li>若不传参则使用默认值</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.snail</span>(<span class="variable">@w</span>:<span class="number">100px</span>,<span class="variable">@h</span>:<span class="number">100px</span>,<span class="variable">@c</span>:red)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@w</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="variable">@h</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="variable">@c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="number">200px</span>,<span class="number">200px</span>,green)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="comment">/*给指定的形参传递数据*/</span></span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="variable">@c</span>:yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="comment">/*给指定的形参传递数据*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="混合的可变参数"><a href="#混合的可变参数" class="headerlink" title="混合的可变参数"></a>混合的可变参数</h2><ul>
<li><ol>
<li>arguments 不定参数</li>
</ol>
<ul>
<li>可以传递任意多个参数,不传递参数也可以</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animate</span>(...)&#123;</span><br><span class="line">  <span class="attribute">transition</span>:<span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.animate</span>(all,<span class="number">4s</span>,linear,<span class="number">0s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">4s</span> linear <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>指定必须最少传递的参数个数</li>
</ol>
<ul>
<li>若传递的参数个数,少于必须传递的参数个数,就会报错</li>
<li>若使用了 <code>...</code> ,则必须写到形参的最后面</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animate</span>(<span class="variable">@name</span>,<span class="variable">@time</span>,...)&#123;</span><br><span class="line">  <span class="attribute">transition</span>:<span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.animate</span>(all,<span class="number">4s</span>,linear,<span class="number">0s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">4s</span> linear <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的匹配模式"><a href="#Less的匹配模式" class="headerlink" title="Less的匹配模式"></a>Less的匹配模式</h2><h3 id="混合的按需匹配模式"><a href="#混合的按需匹配模式" class="headerlink" title="混合的按需匹配模式:"></a>混合的按需匹配模式:</h3><ul>
<li>就是通过混合的第一个字符串形参,来确定具体要执行哪一个同名混合</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="selector-class">.triangle</span>(Down,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Top,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Top,<span class="number">80px</span>,red) <span class="comment">/* 通过第一个参数 Top 决定匹配那个类 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">  <span class="comment">/* 通过第一个参数 Top 决定匹配那个类 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="混合的通用匹配模式"><a href="#混合的通用匹配模式" class="headerlink" title="混合的通用匹配模式"></a>混合的通用匹配模式</h3><ul>
<li>无论同名的哪一个混合被匹配了，都会先执行通用匹配模式中的代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="comment">/*通用匹配模式:  @_ 会先执行通用匹配 */</span></span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Down,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Top,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Top,<span class="number">80px</span>,red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="comment">/*通用匹配模式:  @_ 会先执行通用匹配 */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在less中导入less"><a href="#在less中导入less" class="headerlink" title="在less中导入less"></a>在less中导入less</h2><ul>
<li>在 less 文件中导入其他 less 文件</li>
<li>导入文件时,后缀名<code>.less</code>可以省略</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;triangle.less&quot;</span>;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Top,<span class="number">80px</span>,red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="comment">/*通用匹配模式:  @_ 会先执行通用匹配 */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成两个相同的类时因为 triangle.less 的 .div 类中也调用了一次 triangle */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less中的内置函数"><a href="#Less中的内置函数" class="headerlink" title="Less中的内置函数"></a>Less中的内置函数</h2><ul>
<li><p>isnumber(56px);		&#x2F;&#x2F; &#x3D;&gt;true是否含数字</p>
</li>
<li><p>isstring(“string”);	   &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>iscolor(#ffO);	   	 &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>iscolor(blue);           &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>iskeyword (keyword) ;   &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>isurl(url(…));           &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>ispixe1 (56px);       &#x2F;&#x2F; &#x3D;true</p>
</li>
<li><p>isem(7.8em);         &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>ispercentage(7.8%);   &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>isunit(4rem,rem);     &#x2F;&#x2F; &#x3D;&gt;true是否为指定单位</p>
</li>
<li><p>isruleset (@rules);   &#x2F;&#x2F; &#x3D;&gt;true是否为变量</p>
</li>
</ul>
<h3 id="简单的变量使用"><a href="#简单的变量使用" class="headerlink" title="简单的变量使用"></a>简单的变量使用</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@str:</span><span class="string">&quot;./images/1.jpg&quot;</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:url(<span class="string">@str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;images/1.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="replace函数"><a href="#replace函数" class="headerlink" title="replace函数"></a>replace函数</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@str:</span><span class="string">&quot;./images/1.jpg&quot;</span>;</span><br><span class="line"><span class="comment">/* 将 @str 变量中的1替换为2  */</span></span><br><span class="line"><span class="variable">@str2:</span><span class="built_in">replace</span>(<span class="variable">@str</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:url(<span class="string">@str2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将 @str 变量中的1替换为2  */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;images/2.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="颜色饱和度"><a href="#颜色饱和度" class="headerlink" title="颜色饱和度"></a>颜色饱和度</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/*降低颜色饱和度*/</span></span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">desaturate</span>(yellow,<span class="number">50%</span>);</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/*增加颜色饱和度*/</span></span><br><span class="line">  	<span class="attribute">background</span>:<span class="built_in">saturate</span>(yellow,<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/*降低颜色饱和度*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#bfbf40</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/*增加颜色饱和度*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffff00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的层级结构"><a href="#Less的层级结构" class="headerlink" title="Less的层级结构"></a>Less的层级结构</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><ul>
<li>如果在某一个选择器的 { } 中直接写上了其它的选择器，会自动转换成后代选择器</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hover"><a href="#hover" class="headerlink" title=":hover"></a>:hover</h3><ul>
<li>这里的 &amp; 的作用，是告诉 less 在转换的时候不用后代来转换，直接拼接在当前选择器的后面即可</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="before"><a href="#before" class="headerlink" title="::before"></a>::before</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;子元素&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;子元素&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less中的继承"><a href="#Less中的继承" class="headerlink" title="Less中的继承"></a>Less中的继承</h2><ul>
<li>less 中的继承和 less 中混合的区别<ul>
<li>使用时的语法格式不同</li>
<li>转换之后的结果不同 (混合是直接拷贝,继承是并集选择器)</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span>:<span class="selector-tag">extend</span>(.center)&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="selector-class">.son</span>:<span class="selector-tag">extend</span>(.center)&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>,</span><br><span class="line"><span class="selector-class">.father</span>,</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less中的条件判断"><a href="#Less中的条件判断" class="headerlink" title="Less中的条件判断"></a>Less中的条件判断</h2><ul>
<li><p>less 中可以通过 when 给混合添加执行限定条件，只有条件满足(为真)才会执行混合中的代码</p>
</li>
<li><p>when 表达式中可以使用比较运算符<code> &gt;   &lt;    &lt;=   =   &gt;=</code>、逻辑运算符、或检查函数来进行条件判断</p>
</li>
</ul>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px时,才会执行混合   等于:一个等号 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="variable">@width</span> = <span class="number">100px</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px时,才会执行混合   等于:一个等号 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px 或者 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="variable">@width</span> = <span class="number">100px</span>),(<span class="variable">@height</span> = <span class="number">100px</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px 或者 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于 100px 且 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="variable">@width</span> = <span class="number">100px</span>)<span class="keyword">and</span>(<span class="variable">@height</span> = <span class="number">100px</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于 100px 且 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用检验函数"><a href="#使用检验函数" class="headerlink" title="使用检验函数"></a>使用检验函数</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 的单位是 px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="built_in">ispixel</span>(<span class="variable">@width</span>))&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 的单位是 px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2>]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>邂逅前端开发</title>
    <url>/2023/02/19/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/101_HTML_CSS/10101_WebBase/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="邂逅前端开发"><a href="#邂逅前端开发" class="headerlink" title="邂逅前端开发"></a>邂逅前端开发</h1><h2 id="软件的认识"><a href="#软件的认识" class="headerlink" title="软件的认识"></a>软件的认识</h2><h3 id="常见的软件"><a href="#常见的软件" class="headerlink" title="常见的软件"></a>常见的软件</h3><p><img src="https://s1.vika.cn/space/2023/02/19/2b3b01b1f6d94e81bef0ff657434b1a6"></p>
<h3 id="软件的定义"><a href="#软件的定义" class="headerlink" title="软件的定义"></a>软件的定义</h3><ul>
<li>专业的软件定义：<strong>一系列按照特定顺序组织的计算机数据和指令，是电脑的非有型部分</strong>。</li>
<li>软件开发是什么呢？<strong>就是告诉计算机一系列的指令，这些指令也称之为程序</strong>。</li>
<li>开发软件的这部分人就称之为 软件开发工程师，也称之为程序员。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/86a32bcb1e9c42cab0639a23445de936" alt="1670140185694"></p>
<h3 id="完善的软件系统"><a href="#完善的软件系统" class="headerlink" title="完善的软件系统"></a>完善的软件系统</h3><p><img src="https://s1.vika.cn/space/2023/02/19/d138e657367e4c36a8faab5cb4929db0" alt="1670140223633"></p>
<h2 id="前端开发工程师"><a href="#前端开发工程师" class="headerlink" title="前端开发工程师"></a>前端开发工程师</h2><h3 id="前端开发工程师-1"><a href="#前端开发工程师-1" class="headerlink" title="前端开发工程师"></a>前端开发工程师</h3><ul>
<li><p>开发系统中各个环节的不同部分都属于软件开发：</p>
<ul>
<li>这些开发者我们称之为<strong>软件开发工程师</strong>；</li>
<li>开发者、程序员、码农、IT 民工等等；</li>
</ul>
</li>
<li><p>按照职能的不同也可以划分两类：</p>
<ul>
<li>后端（Back-end）开发，称之为<strong>后端开发工程师</strong>；</li>
<li>前端（Front-end）开发，称之为<strong>前端开发工程师</strong>；</li>
</ul>
</li>
<li><p>前端开发工程师：</p>
<ul>
<li><strong>主要负责的：Web（网站、后台管理系统、手机 H5）、小程序端；</strong></li>
<li><strong>也可以做：移动端（Uniapp、React Native）、桌面端（Electron）、服务器开发（Node.js）；</strong></li>
</ul>
</li>
</ul>
<h3 id="前端行业发展"><a href="#前端行业发展" class="headerlink" title="前端行业发展"></a>前端行业发展</h3><ul>
<li><p>为什么要聊这个话题呢？</p>
<ul>
<li>时代的一粒灰，落在个人头上，就是一座山；</li>
<li>如何行业已经停滞，甚至是倒退，没有需求，那么你如何努力也改变不了现状；</li>
</ul>
</li>
<li><p>技术角度：</p>
<ul>
<li>新框架（Ember.js、Preact.js）、框架更新迭代（vue3、react18）、新工具（Vite）、新模式（工程化、低代码、微前端） 层出不穷；</li>
</ul>
</li>
<li><p>市场需求：</p>
<ul>
<li><strong>人才需求大、薪资高；</strong></li>
</ul>
</li>
</ul>
<h3 id="前端技术发展线路"><a href="#前端技术发展线路" class="headerlink" title="前端技术发展线路"></a>前端技术发展线路</h3><ul>
<li><p><strong>初级程序员</strong>（薪资 6k-10k，1~2 年）</p>
<ul>
<li>写一些简单的业务，负责项目某些模块的开发、维护；</li>
<li>遇到很多问题不知道如何处理，需要查询资料或者交流后可以解决；</li>
<li>代码通常写的杂乱无章，能用就行！</li>
</ul>
</li>
<li><p><strong>中级程序员</strong>（薪资 10k-20k，2~4 年）</p>
<ul>
<li>可以独立负责中小型项目，负责公司项目核心业务的开发、维护；</li>
<li>遇到大多数问题可以自行查到解决方案，有一定的自学能力，通过官网文档可以自学；</li>
<li>代码质量较高，遵守代码规范，并且会对组内其他人的代码有要求；</li>
</ul>
</li>
<li><p><strong>高级程序员</strong>（薪资 20k-50k，4~6 年）</p>
<ul>
<li>独立负责中大型项目，可以为公司项目搭建架构，创建内部的脚手架，公司内部的 UI 框架；</li>
<li>可以读懂框架源码，并且从一些开源框架中借鉴优秀的设计、架构、思想；</li>
<li>公司的核心员工，具备可替代性，成为公司技术不可或缺的一部分；</li>
</ul>
</li>
<li><p><strong>系统架构师</strong>（50k~）</p>
<ul>
<li>可以对大型项目进行系统架构，不再局限于某个领域（前端、后端?）或者某项技术（JavaScript、Java、 C++?）；</li>
<li>对技术领域 现有技术方案进行评估，对不同的场景给出对应的解决方案；</li>
<li>确定项目最终方案，并且对整个项目进行“核心架构”（包括完成 核心架构 实现的能力）；</li>
<li>保证项目的各个环节有序进行，包括项目的高性能、高可用、可扩展能力；</li>
</ul>
</li>
<li><p><strong>资深技术专家</strong>（50k~）</p>
<ul>
<li>专注于某一个特定领域<ul>
<li>比如前端包括不限于对框架源码、node、js 引擎进行定制化需求、优化；</li>
<li>比如后端包括不仅限于 JVM、线程池、SQL 调试、优化；</li>
<li>比如可以主导公司项目某些特定领域技术的落地，类似流媒体、即时通信技术等；</li>
</ul>
</li>
<li>某些人在行业内有一定的影响力，是某一块技术领域的 Top 人物；</li>
</ul>
</li>
</ul>
<h2 id="认识网页和网站"><a href="#认识网页和网站" class="headerlink" title="认识网页和网站"></a>认识网页和网站</h2><h3 id="什么是网页"><a href="#什么是网页" class="headerlink" title="什么是网页"></a>什么是网页</h3><ul>
<li>网页的专业术语叫做 Web Page；</li>
<li>打开浏览器查看到的页面，是网络中的一“页”, 通常是 HTML 格式的文件，它要通过浏览器来阅读；</li>
<li>网页的内容可以非常丰富：<strong>包括文字、链接、图片、音乐、视频等等</strong></li>
<li>网页是构成网站的基本元素，<strong>网页通常由图片、链接、文字、声音、视频等元素组成</strong>。</li>
<li>通常我们看到的网页，常见以<code>.htm</code>或<code>.html</code>后缀结尾的文件，因此将其<strong>俗称为 HTML 文件</strong>。</li>
<li><code>.htm</code> 和 <code>.html</code> 扩展名区别 :<ul>
<li>因历史遗留问题，<code>Win95\Win98</code> 系统的文件拓展名不能超过 3 字符，所以使用<code> .htm</code></li>
<li>但在 windows 后缀长度可以大于 3 位，所以 windows 下无所谓<code>.htm</code>与 <code>.html</code>，<code>.html </code>是为长文件的格式命名的</li>
<li>所以 <code>.htm</code> 是为了兼容过去的 DOS 命名格式存在的</li>
<li>现在统一使用 .html</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/9f223c2252f743779a1e982af15f964b" alt="1670143805729"></p>
<h3 id="什么是网站"><a href="#什么是网站" class="headerlink" title="什么是网站"></a>什么是网站</h3><ul>
<li>网站是什么呢？<ul>
<li><strong>网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。网站是由多个网页组成的</strong>；</li>
<li>通常一个网站由 N 个网页组成（- &gt;&#x3D; 1）；</li>
</ul>
</li>
</ul>
<h3 id="网页的显示过程"><a href="#网页的显示过程" class="headerlink" title="网页的显示过程"></a>网页的显示过程</h3><h4 id="用户角度"><a href="#用户角度" class="headerlink" title="用户角度"></a>用户角度</h4><ul>
<li>用户在浏览器输入一个网站；</li>
<li>浏览器会找到对应的服务器地址，请求静态资源（可以存放在世界上任何一个地方）；</li>
<li>服务器返回静态资源给浏览器；</li>
<li>浏览器对静态资源进行解析和展示；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/1f4622e44a8b47819db4901c1de4a2cd" alt="1670143919724"></p>
<h4 id="前端工程师角度"><a href="#前端工程师角度" class="headerlink" title="前端工程师角度"></a>前端工程师角度</h4><ul>
<li><strong>网页是由网页元素组成的，这些元素是利用 html 标签描述出来，然后通过浏览器解析来显示给用户的。</strong><ul>
<li>开发项目（HTML&#x2F;CSS&#x2F;JavaScript&#x2F;Vue&#x2F;React）</li>
<li>打包、部署项目到服务器里面</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/cd7c18af95a943dfb81895c614419569" alt="1670143954317"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/2282527d93a14267987fb826c1ac7ffe" alt="image-20220125132408920"></p>
<h3 id="HTML-XHTML-H5-区别"><a href="#HTML-XHTML-H5-区别" class="headerlink" title="HTML&#x2F;XHTML&#x2F;H5 区别"></a>HTML&#x2F;XHTML&#x2F;H5 区别</h3><ul>
<li><p>HTML 语法非常宽松, 容错性强;</p>
</li>
<li><p>XHTML 更为严格,它要求标签必须小写、标签必须严格闭合、标签中的属性必须使用引号引起等等;</p>
</li>
<li><p>HTML5 是 HTML 的下一个版本, 所以除了非常宽松,容错性强以外,还增加许多新的特性</p>
</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="什么是服务器"><a href="#什么是服务器" class="headerlink" title="什么是服务器"></a>什么是服务器</h3><ul>
<li>我们日常生活接触到的基本都属于客户端、前端的内容：<ul>
<li>比如浏览器、微信、QQ、小程序；</li>
</ul>
</li>
<li>我们知道自己的手机并不可能存放哪些多的数据和资源：<ul>
<li>比如你用《网易云听音乐》，音乐数据大部分都是存在“服务器”中的；</li>
</ul>
</li>
<li>那么服务到底是什么呢？<ul>
<li>服务器本质上也是一台类似于你电脑一样的主机；</li>
<li>但是这个主机有几个特点：<ul>
<li>二十四小时不关机的（稳定运行）；</li>
<li>没有显示器的；</li>
<li>一般装的是 Linux 操作系统（比如 centos）；</li>
</ul>
</li>
<li>服务器是<code>专门用于存储数据</code>电脑， 访问者可以<code>访问服务器上存储的资源</code></li>
<li>服务器<code>一旦关机</code>，访问者就<code>无法访问</code></li>
</ul>
</li>
</ul>
<h3 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h3><ul>
<li>那么我以后到公司是不是就看得见服务器了呢？<ul>
<li>目前公司大部分用的是<strong>云服务器</strong>（比如阿里云、腾讯云、华为云）；</li>
</ul>
</li>
</ul>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="浏览器的作用"><a href="#浏览器的作用" class="headerlink" title="浏览器的作用"></a>浏览器的作用</h3><ul>
<li>我们已经明确知道了网页的组成部分：HTML + CSS + JavaScript。</li>
<li>那么这些看起来枯燥的代码，是如何被渲染成多彩的网页呢？<ul>
<li>我们知道是通过浏览器来完成；</li>
</ul>
</li>
</ul>
<h3 id="常用浏览器"><a href="#常用浏览器" class="headerlink" title="常用浏览器"></a>常用浏览器</h3><ul>
<li><strong>浏览器是网页显示、运行的平台</strong>。常用的浏览器有<strong>IE、火狐（Firefox）、谷歌（Chrome）、Safari 和 Opera</strong>等。平时称为五大浏览器。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/939d61cb0c1f4584abb8dde6ec953b28"></p>
<blockquote>
<p>查看浏览器市场份额：<a href="https://tongji.baidu.com/research/site?source=index">https://tongji.baidu.com/research/site?source=index</a></p>
</blockquote>
<ul>
<li>浏览器最核心的部分是<strong>渲染引擎（Rendering Engine），一般也称为“浏览器内核”</strong><ul>
<li><strong>负责解析网页语法，并渲染（显示）网页</strong></li>
</ul>
</li>
<li>常见的国内的浏览器也有很多：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/cc238bd5474c4201b1d518b9a6cc627d" alt="1670144167088"></p>
<ul>
<li>安装最多和使用最广泛的浏览器：Chrome 浏览器</li>
</ul>
<h3 id="常见的浏览器内核"><a href="#常见的浏览器内核" class="headerlink" title="常见的浏览器内核"></a>常见的浏览器内核</h3><ul>
<li><p><strong>浏览器最核心的部分其实是 “浏览器内核”；</strong></p>
</li>
<li><p>浏览器内核（渲染引擎）： <strong>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面</strong>。</p>
</li>
<li><p>目前国内一般浏览器都会采用 <strong>Webkit&#x2F;Blink 内核</strong>，如 360、UC、QQ、搜狗等。</p>
<ul>
<li><strong>Trident</strong> （ 三叉戟）：IE、360 安全浏览器、搜狗高速浏览器、百度浏览器、UC 浏览器；</li>
<li><strong>Gecko</strong>（ 壁虎） ：Mozilla Firefox；</li>
<li><strong>Presto</strong>（急板乐曲）-&gt; Blink （眨眼）：Opera</li>
<li><strong>Webkit</strong> ：Safari、360 极速浏览器、搜狗高速浏览器、移动端浏览器（Android、iOS）</li>
<li>Webkit -&gt; <strong>Blink</strong> ：Google Chrome</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/7559f6a0b6be43af8f6dc542cae3b102"></p>
<ul>
<li>不同的浏览器内核有不同的解析、渲染规则，所以同一网页在不同内核的浏览器中的渲染效果也可能不同。</li>
</ul>
<h3 id="浏览器的访问过程"><a href="#浏览器的访问过程" class="headerlink" title="浏览器的访问过程"></a>浏览器的访问过程</h3><ul>
<li>01 当我们利用浏览器访问网页时,其实是<strong>有真实的物理文件传输</strong>的.<ul>
<li><code>浏览会先将网页上的内容缓存到本地文件夹中,然后再渲染出来呈现给用户查看</code></li>
</ul>
</li>
<li>02 平时我们在上网时会感觉到第二次访问网页会比第一次访问网页要快,就是因为第一次访问时已经将这个网页上的信息缓存到了本地</li>
<li>03 通过观察我们还发现缓存文件夹中除了缓存图片以外还缓存了一些例如<code>.js .css .html</code>等文件<ul>
<li>一个网页不是一个文件,而是一堆文件.</li>
<li>网页越复杂,那么组成这个网页的文件就越多</li>
</ul>
</li>
</ul>
<h3 id="浏览器请求数据的过程"><a href="#浏览器请求数据的过程" class="headerlink" title="浏览器请求数据的过程"></a>浏览器请求数据的过程</h3><ul>
<li>01 在浏览器地址栏输入 URL 地址,按下回车后, 浏览器会根据输入的 URL 地址发送<code>请求报文</code></li>
<li>02 服务器接收到请求报文，会对<code>请求报文</code>进行处理</li>
<li>03 服务器将处理完的结果通过<code>响应报文</code>返回给浏览器</li>
<li>04 浏览器<code>解析服务器返回的结果</code>，将结果显示出来</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4be1211af7ac4b84b3ff75571d562a42"></p>
<h3 id="统一资源定位符-URL"><a href="#统一资源定位符-URL" class="headerlink" title="统一资源定位符 URL"></a>统一资源定位符 URL</h3><h4 id="什么是-URL"><a href="#什么是-URL" class="headerlink" title="什么是 URL"></a>什么是 URL</h4><ul>
<li>我们在浏览器的地址栏中输入的地址其实就是 URL<ul>
<li>URL 全称 Uniform Resource Locator (<strong>统一资源定位符</strong>)</li>
<li>通俗点说：URL 无非就是一个给定的独特资源在 Web 上的地址。<ul>
<li>理论上说，每个有效的 URL 都指向一个唯一的资源；</li>
<li>这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/58eae9ffbb3f42dcae8cc7f75ec73a5b" alt="1670210394753"></p>
<h4 id="URL-的格式"><a href="#URL-的格式" class="headerlink" title="URL 的格式"></a>URL 的格式</h4><ul>
<li>URL 的标准格式如下：<ul>
<li><code>[协议类型]://[服务器地址]:[端口号]/[文件路径][文件名]?[查询]#[片段ID]</code></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/b9f901a6b5674a30bafeb079b1c138c4" alt="1670210482891"></p>
<ul>
<li>比如 :<ul>
<li><code>127.0.0.1/index.html </code>（浏览器会自动补全 <code>http:</code> 和：<code>80端口</code>,默认是 80 端口）</li>
<li><a href="https://link.jianshu.com/?t=http://127.0.0.1/index.html">http://127.0.0.1/index.html</a> （浏览器会自动补全：80）</li>
<li><a href="https://link.jianshu.com/?t=http://127.0.0.1:80/index.html">http://127.0.0.1:80/index.html</a> （完整格式）</li>
<li>协议类型:&#x2F;&#x2F;ip 地址:端口号&#x2F;资源路径&#x2F;资源名称</li>
</ul>
</li>
</ul>
<h4 id="URL-和-URI-的区别"><a href="#URL-和-URI-的区别" class="headerlink" title="URL 和 URI 的区别"></a>URL 和 URI 的区别</h4><ul>
<li>和 URI 的区别：<ul>
<li>URI &#x3D; Uniform Resource Identifier 统一资源标志符，用于标识 Web 技术使用的逻辑或物理资源。；</li>
<li>URL &#x3D; Uniform Resource Locator 统一资源定位符，俗称网络地址，相当于网络中的门牌号；</li>
</ul>
</li>
<li>URI 在某一个规则下能把一个资源独一无二的识别出来。<ul>
<li>URL 作为一个网络 Web 资源的地址，可以唯一将一个资源识别出来，所以 URL 是一个 URI；</li>
<li>所以 URL 是 URI 的一个子集；</li>
<li>但是 URI 并不一定是 URL</li>
</ul>
</li>
</ul>
<h4 id="URL-拆分"><a href="#URL-拆分" class="headerlink" title="URL 拆分"></a>URL 拆分</h4><ul>
<li>网络协议类型 <code>http://</code></li>
<li>服务器 IP 地址 <code>127.0.0.1</code><ul>
<li>由于 IP 地址全都是数字， 没有任何的含义，比较难以记忆。 所以在访问网页时最常见的不是 IP 地址 而是“<strong>域名</strong>”（一串有含义的字符）</li>
<li>例如： <a href="https://link.jianshu.com/?t=http://www.baidu.com">http://www.baidu.com</a> 和 <a href="http://111.13.100.92/">http://111.13.100.92:80/</a></li>
</ul>
</li>
<li>服务器端口号 <code>:80</code></li>
<li>资源路径 : 网页在服务器上的路径<ul>
<li>资源名称 <code>index.html</code></li>
</ul>
</li>
</ul>
<h4 id="URL-各部分的作用"><a href="#URL-各部分的作用" class="headerlink" title="URL 各部分的作用"></a>URL 各部分的作用</h4><ul>
<li><p>服务器 <strong>IP 地址</strong> 和 <strong>服务器端口号</strong> 它们两的作用：</p>
<ul>
<li><p>告诉浏览器要去什么地方才能找到对应的服务器， 也就是告诉浏览器服务器的详细地址</p>
</li>
<li><p>服务器 IP 地址相当于现实生活中的地址； 例如：广州市天河区棠安苑</p>
</li>
<li><p>服务器端口号相当于现实生活中的门牌号码； 例如： 9 栋 909 室</p>
</li>
<li><p>那么如果将地址和门牌号码结合在一起， 就是我的详细地址</p>
</li>
</ul>
</li>
<li><p>资源名称的作用：</p>
<ul>
<li>告诉服务器我需要获取哪一个文件</li>
</ul>
</li>
<li><p>资源名称</p>
<ul>
<li>需要访问的文件名称</li>
</ul>
</li>
</ul>
<h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><h4 id="什么是-HTTP-协议"><a href="#什么是-HTTP-协议" class="headerlink" title="什么是 HTTP 协议"></a>什么是 HTTP 协议</h4><ul>
<li>HTTP 是 Hypertext Transfer Protocol 的缩写, <strong>超文本传输协议</strong></li>
<li>什么是协议<ul>
<li>在现实生活中有很多的协议, 例如 租房协议&#x2F;买卖协议&#x2F;离婚协议</li>
<li>无论是什么协议他们都是一个共同点, 就是<strong>用来规范&#x2F;约束某一类事物</strong></li>
</ul>
</li>
<li>沟通问题<ul>
<li>沟通最常见的问题就是语言不通, 例如中国人和美国人沟通, 一个人说中文, 一个人说英文, 如果两个人都不懂中文或者英文, 那么就会出现沟通问题</li>
<li>如果要想解决沟通问题, 需要先拟定规定, 两个人都说中文, 或者两个人都说英文, 或者请一个既懂中文又懂英文的翻译</li>
</ul>
</li>
</ul>
<h4 id="HTTP-协议的作用"><a href="#HTTP-协议的作用" class="headerlink" title="HTTP 协议的作用"></a>HTTP 协议的作用</h4><ul>
<li><strong>HTTP 协议是用来规范&#x2F;约束哪一类事物</strong><ul>
<li><strong>浏览器访问网页其实就是去服务器请求数据</strong>, 所以浏览器需要和服务器沟通, 所以也会存在沟通问题</li>
<li>HTTP 协议就相当于我们让两个人都说中文或者都说英文一样, 就是提前规范两个人之间如何沟通, <strong>HTTP 协议也就是规范&#x2F;约束浏览器和服务器之间如何沟通</strong></li>
</ul>
</li>
</ul>
<h3 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h3><ul>
<li>搜索引擎优化（英语：search engine optimization，缩写为 SEO）是通过了解搜索引擎的运作规则来调整网站，以及提高网站在有关搜索引擎内排名的方式。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/9fe2a3e7c69e43fb8ebc84aa4578ced4" alt="1670210899189"></p>
<ul>
<li>后续还会讲解 SPA 以及 SSR 相关的概念 , 它们也有 SEO、首屏渲染速度有关；</li>
</ul>
<h2 id="计算机中的进制"><a href="#计算机中的进制" class="headerlink" title="计算机中的进制"></a>计算机中的进制</h2><h3 id="认识进制"><a href="#认识进制" class="headerlink" title="认识进制"></a>认识进制</h3><ul>
<li>进制的概念：<ul>
<li>维基百科：进位制是一种记数方式，亦称进位计数法或位值计数法。</li>
<li>通俗理解：当数字达到某个值时，进一位(比如从 1 位变成 2 位)。</li>
</ul>
</li>
<li>按照进制的概念，来理解一下十进制：<ul>
<li>当数字到 9 的时候，用一位已经表示不了了，那么就进一位变成 2 位</li>
</ul>
</li>
<li>按照上面的来理解，二进制、八进制、十六进制：<ul>
<li>二进制：当数字到 1 的时候，用一位已经表示不了了，那么就进一位。</li>
<li>八进制：当数字到 7 的时候，用一位已经表示不了了，那么就进一位。</li>
<li>十六进制：等等，用一位如何表示十六个数字呢？a(10)、b(11)、c(12) 、 d(13) 、 e(14) 、 f(15)</li>
</ul>
</li>
</ul>
<h3 id="计算机中的进制-1"><a href="#计算机中的进制-1" class="headerlink" title="计算机中的进制"></a>计算机中的进制</h3><ul>
<li>如何表示二进制、八进制、十六进制?<ul>
<li>二进制（0b 开头, binary）：其中的数字由 0、1 组成，可以回顾之前学习过的机器语言。</li>
<li>八进制（0o 开头, Octonary）：其中的数字由 0~7 组成。</li>
<li>十六进制（0x 开头, hexadecimal）：其中的数字由 0~9 和字母 a-f 组成（大小写都可以）</li>
</ul>
</li>
<li>十进制 or 二进制:<ul>
<li>虽然计算机更喜欢二进制, 但是编程中我们还是以十进制为主.</li>
<li>因为高级编程语言的目的就是更加接近自然语言, 让我们人类更容易理解.</li>
</ul>
</li>
</ul>
<h3 id="进制之间的转换-补充"><a href="#进制之间的转换-补充" class="headerlink" title="进制之间的转换(补充)"></a>进制之间的转换(补充)</h3><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="开发必备软件"><a href="#开发必备软件" class="headerlink" title="开发必备软件"></a>开发必备软件</h3><ul>
<li>Chrome 浏览器：开发必备浏览器<ul>
<li><a href="https://www.google.cn/chrome/index.html">https://www.google.cn/chrome/index.html</a></li>
</ul>
</li>
<li>VSCode 编辑器：开发推荐编辑器（编写代码）<ul>
<li><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
</ul>
</li>
<li>Xmind Zen 思维导图：思维导图笔记<ul>
<li><a href="https://www.xmind.cn/">https://www.xmind.cn/</a></li>
</ul>
</li>
<li>Typora：markdown 笔记软件</li>
</ul>
<h3 id="VSCode-的安装"><a href="#VSCode-的安装" class="headerlink" title="VSCode 的安装"></a>VSCode 的安装</h3><ul>
<li>VSCode 编辑器下载-安装：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>安装插件（增加功能）：右侧图标最后一项，Extensions，查找需要的插件（联网）<ul>
<li>中文插件：Chinese</li>
<li>颜色主题：atom one dark</li>
<li>文件夹图标：VSCode Great Icons</li>
<li>在浏览器中打开网页：open in browser、Live Sever</li>
<li>自动重命名标签：auto rename tag</li>
</ul>
</li>
<li>VSCode 的配置：<ul>
<li>Auto Save 自动保存</li>
<li>Font Size 修改代码字体大小</li>
<li>Word Wrap 代码自动换行</li>
<li>Render Whitespace 空格的渲染方式(个人推荐)</li>
<li>Tab Size 代码缩进<ul>
<li>推荐 2 个空格（公司开发项目基本都是 2 个空格）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="常用-VScode-插件"><a href="#常用-VScode-插件" class="headerlink" title="常用 VScode 插件"></a>常用 VScode 插件</h3><ul>
<li><strong>Atom One Dark Theme</strong> : 编辑器的颜色主题</li>
<li><strong>Auto Rename Tag</strong> : 自动关闭标签，在修改开始标记后，将自动插入结束标记</li>
<li><strong>background-cover</strong> : 修改 VScode 背景</li>
<li><strong>Beautify css&#x2F;sass&#x2F;scss&#x2F;less</strong> : 美化 css&#x2F;sass&#x2F;scss&#x2F;less</li>
<li><strong>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</strong> : 编辑器语言设置为 简体中文</li>
<li><strong>Code Runner</strong> : 快速运行调试代码</li>
<li><strong>CSS Peek</strong> : 快速定位 CSS</li>
<li><strong>Easy LESS</strong> : 自动编译 Less 生成 CSS</li>
<li><strong>EditorConfig for VS Code</strong> : 自动格式化代码的插件</li>
<li><strong>Guides</strong> : 缩进参考线</li>
<li><strong>Live Server</strong> : 实时加载功能的小型服务器</li>
<li><strong>open in browser</strong> : 在浏览器打开</li>
<li><strong>Open In Default Browser</strong> : 在默认浏览器打开</li>
<li><strong>Polacode</strong> : 代码截图生成图片</li>
<li><strong>Prettier</strong> : 前端代码格式化</li>
<li><strong>px to rem &amp; rpx &amp; vw (cssrem)</strong> : px 单位转 rem</li>
<li><strong>Vetur</strong> : .vue 文件语法高亮</li>
<li><strong>VSCode Great Icons</strong> : VScode 目录图标</li>
<li><strong>Vue 3 Snippets</strong> : 快速生成 Vue3 代码片段</li>
<li><strong>Vue VSCode Snippets</strong> : 生成 Vue 基本模板</li>
<li><strong>ESlint</strong> : 代码检测工具</li>
<li><strong>Error Lens</strong> : 编码时提示错误信息</li>
</ul>
<h3 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h3><h4 id="生成代码片段站点"><a href="#生成代码片段站点" class="headerlink" title="生成代码片段站点"></a>生成代码片段站点</h4><ul>
<li>站点 : <a href="https://snippet-generator.app/">https://snippet-generator.app/</a><ul>
<li>用于生成 VScode 代码片段</li>
</ul>
</li>
</ul>
<h4 id="示例与解析"><a href="#示例与解析" class="headerlink" title="示例与解析"></a>示例与解析</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;TM_FILENAME_BASE&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>$0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          $1, <span class="comment">//光标出现的第一个位置</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意这里的<code>$1,$2……$0</code>，这是你代码快捷生成之后鼠标光标的所在位置，光标会首先定位在$1,按 Tab 键切换到$2 的位置，以此类推，光标最后会定位在$0 的位置。</li>
<li>还有其他语法，在这里一并讲解：</li>
<li><strong>占位符</strong>：<ul>
<li>占位符是带有值的制表符，如将插入并选择占位符文本，以便可以轻松更改。说白了占位符<code>$&#123;1:foo&#125;</code>就是在<code>$1</code>的基础上，光标跳到<code>$1</code>位置的同时会自动生成并选中 foo，同样按 Tab 键切换到<code>$2</code>的位置。占位符可以嵌套，如 。<code>$&#123;1:foo&#125;</code> <code>$&#123;1:another $&#123;2:placeholder&#125;&#125;</code></li>
</ul>
</li>
<li><strong>选择</strong><ul>
<li>占位符可以作为有选择的值。语法是以逗号分隔的值的枚举，用竖线字符括起来，例如 。插入代码段并选择占位符时，选项将提示用户选取其中一个值。<code>$&#123;1|one,two,three|&#125;</code></li>
</ul>
</li>
<li><strong>变量</strong><ul>
<li>插入变量的值。如果未设置变量，则插入其默认值或空字符串。当变量未知（即未定义其名称）时，将插入变量的名称并将其转换为占位符。<code>$name</code> <code>$&#123;name:default&#125;</code></li>
<li>可以使用以下变量：<ul>
<li><code>TM_SELECTED_TEXT</code>当前选定的文本或空字符串</li>
<li><code>TM_CURRENT_LINE</code>当前行的内容</li>
<li><code>TM_CURRENT_WORD</code>光标下单词的内容或空字符串</li>
<li><code>TM_LINE_INDEX</code>基于零索引的行号</li>
<li><code>TM_LINE_NUMBER</code>基于一个索引的行号</li>
<li><code>TM_FILENAME</code>当前文档的文件名</li>
<li><code>TM_FILENAME_BASE</code>不带扩展名的当前文档的文件名 （比如这里你在用户代码片段中写了${TM_FILENAME_BASE}，在自动生成的代码里就会在这个位置自动填充上你的文件的不含扩展名的文件名）</li>
<li><code>TM_DIRECTORY</code>当前文档的目录</li>
<li><code>TM_FILEPATH</code>当前文档的完整文件路径</li>
<li><code>RELATIVE_FILEPATH</code>当前文档的相对（相对于打开的工作空间或文件夹）文件路径</li>
<li><code>CLIPBOARD</code>剪贴板的内容</li>
<li><code>WORKSPACE_NAME</code>打开的工作区或文件夹的名称</li>
<li><code>WORKSPACE_FOLDER</code>打开的工作区或文件夹的路径</li>
</ul>
</li>
<li>要插入当前日期和时间：<ul>
<li><code>CURRENT_YEAR</code>本年度</li>
<li><code>CURRENT_YEAR_SHORT</code>本年度的最后两位数</li>
<li><code>CURRENT_MONTH</code>以两位数字表示的月份（例如”02”）</li>
<li><code>CURRENT_MONTH_NAME</code>月份的全名（例如”七月”）</li>
<li><code>CURRENT_MONTH_NAME_SHORT</code>月份的短名称（例如”Jul”）</li>
<li><code>CURRENT_DATE</code>以两位数字表示的月份中的某一天（例如”08”）</li>
<li><code>CURRENT_DAY_NAME</code>日期的名称（例如”星期一”）</li>
<li><code>CURRENT_DAY_NAME_SHORT</code>日期的短名称（例如”星期一”）</li>
<li><code>CURRENT_HOUR</code>24 小时制格式的当前小时</li>
<li><code>CURRENT_MINUTE</code>当前分钟为两位数</li>
<li><code>CURRENT_SECOND</code>当前第二位为两位数</li>
<li><code>CURRENT_SECONDS_UNIX</code>自 Unix 纪元以来的秒数</li>
</ul>
</li>
<li>对于插入随机值：<ul>
<li><code>RANDOM</code>6 个随机的 Base-10 数字</li>
<li><code>RANDOM_HEX</code>6 个随机的 16 位基本数字</li>
<li><code>UUID</code>A 版本 4 UUID</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Chrome-浏览器开发者工具"><a href="#Chrome-浏览器开发者工具" class="headerlink" title="Chrome 浏览器开发者工具"></a>Chrome 浏览器开发者工具</h3><ul>
<li>打开 Chrome 调试工具：<ul>
<li>方式一：右键 – 检查</li>
<li>方式二：快捷键 – F12</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/885bba22470b42eb94305d880b05ce1a"></p>
<ul>
<li>其他技巧：<ul>
<li>快捷键：ctrl++ 可以调整页面或者调试工具的字体大小；</li>
<li>可以通过删除某些元素来查看网页结构;</li>
<li>可以通过增删 css 来调试网页样式;</li>
</ul>
</li>
</ul>
<h2 id="prettier-插件常用配置规则"><a href="#prettier-插件常用配置规则" class="headerlink" title="prettier 插件常用配置规则"></a>prettier 插件常用配置规则</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 使能每一种语言默认格式化规则</span></span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[css]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[less]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  prettier的配置 */</span></span><br><span class="line">  <span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span> <span class="comment">// 超过最大值换行</span></span><br><span class="line">  <span class="attr">&quot;prettier.tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="comment">// 缩进字节数</span></span><br><span class="line">  <span class="attr">&quot;prettier.useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 缩进不使用tab，使用空格</span></span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 句尾添加分号</span></span><br><span class="line">  <span class="comment">// 使用单引号代替双引号,false 不替换</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[vue]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;octref.vetur&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span></span><br><span class="line">  <span class="attr">&quot;prettier.proseWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//  (x) =&gt; &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</span></span><br><span class="line">  <span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class="line">  <span class="attr">&quot;prettier.bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 不格式化vue文件，vue文件的格式化单独设置</span></span><br><span class="line">  <span class="attr">&quot;prettier.disableLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 结尾是 \n \r \n\r auto</span></span><br><span class="line">  <span class="attr">&quot;prettier.endOfLine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//不让prettier使用eslint的代码格式进行校验</span></span><br><span class="line">  <span class="attr">&quot;prettier.eslintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 不使用prettier格式化的文件填写在项目的.prettierignore文件中</span></span><br><span class="line">  <span class="attr">&quot;prettier.ignorePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.prettierignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在jsx中把&#x27;&gt;&#x27; 是否单独放一行</span></span><br><span class="line">  <span class="attr">&quot;prettier.jsxBracketSameLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在jsx中使用单引号代替双引号</span></span><br><span class="line">  <span class="attr">&quot;prettier.jsxSingleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 格式化的解析器，默认是babylon</span></span><br><span class="line">  <span class="attr">&quot;prettier.parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babylon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Require a &#x27;prettierconfig&#x27; to format prettier</span></span><br><span class="line">  <span class="attr">&quot;prettier.requireConfig&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//不让prettier使用stylelint的代码格式进行校验</span></span><br><span class="line">  <span class="attr">&quot;prettier.stylelintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）</span></span><br><span class="line">  <span class="attr">&quot;prettier.trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 不让prettier使用tslint的代码格式进行校验</span></span><br><span class="line">  <span class="attr">&quot;prettier.tslintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="ESlint-常用配置规则"><a href="#ESlint-常用配置规则" class="headerlink" title="ESlint 常用配置规则"></a>ESlint 常用配置规则</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">&quot;no-array-constructor&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">&quot;no-bitwise&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">&quot;no-catch-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">&quot;no-class-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">&quot;no-cond-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">&quot;no-console&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">&quot;no-const-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">&quot;no-constant-condition&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">&quot;no-continue&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">&quot;no-control-regex&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">&quot;no-debugger&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">&quot;no-delete-var&quot;</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">&quot;no-div-regex&quot;</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">&quot;no-dupe-args&quot;</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">&quot;no-duplicate-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">&quot;no-else-return&quot;</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-character-class&quot;</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-label&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">&quot;no-ex-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">&quot;no-extend-native&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">&quot;no-extra-bind&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">&quot;no-extra-boolean-cast&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">&quot;no-fallthrough&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">&quot;no-floating-decimal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">&quot;no-implicit-coercion&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">&quot;no-implied-eval&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">&quot;no-inner-declarations&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;functions&quot;</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">&quot;no-invalid-regexp&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">&quot;no-invalid-this&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">&quot;no-irregular-whitespace&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">&quot;no-iterator&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">&quot;no-labels&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">&quot;no-lone-blocks&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">&quot;no-lonely-if&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">&quot;no-loop-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">&quot;no-mixed-requires&quot;</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">&quot;no-multi-str&quot;</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">&quot;no-native-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">&quot;no-negated-in-lhs&quot;</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">&quot;no-nested-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">&quot;no-new&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">&quot;no-new-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">&quot;no-new-object&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">&quot;no-new-require&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">&quot;no-new-wrappers&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">&quot;no-obj-calls&quot;</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">&quot;no-octal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">&quot;no-octal-escape&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">&quot;no-param-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">&quot;no-path-concat&quot;</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">&quot;no-process-env&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">&quot;no-process-exit&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">&quot;no-proto&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">&quot;no-regex-spaces&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">&quot;no-restricted-modules&quot;</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">&quot;no-script-url&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">&quot;no-sequences&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">&quot;no-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">&quot;no-shadow-restricted-names&quot;</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">&quot;no-spaced-func&quot;</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">&quot;no-sync&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">&quot;no-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">&quot;no-throw-literal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line"><span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">&quot;no-undef-init&quot;</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">&quot;no-undefined&quot;</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">&quot;no-unexpected-multiline&quot;</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">&quot;no-unneeded-ternary&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">&quot;no-unreachable&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">&quot;no-unused-expressions&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">&quot;no-useless-call&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">&quot;no-void&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">&quot;no-warning-comments&quot;</span>: [<span class="number">1</span>, &#123; <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>], <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">&quot;no-with&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">&quot;brace-style&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;1tbs&quot;</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">&quot;callback-return&quot;</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">&quot;comma-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;complexity&quot;</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">&quot;dot-location&quot;</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;dot-notation&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">&quot;eol-last&quot;</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">&quot;generator-star-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">&quot;guard-for-in&quot;</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">&quot;handle-callback-err&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">&quot;id-length&quot;</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">&quot;init-declarations&quot;</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">&quot;key-spacing&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">&quot;lines-around-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">&quot;max-depth&quot;</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">&quot;max-len&quot;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">&quot;max-nested-callbacks&quot;</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">&quot;max-params&quot;</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">&quot;max-statements&quot;</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">&quot;new-cap&quot;</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">&quot;new-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">&quot;newline-after-var&quot;</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">&quot;object-curly-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">&quot;object-shorthand&quot;</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">&quot;one-var&quot;</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">&quot;operator-assignment&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">&quot;operator-linebreak&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;after&quot;</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">&quot;prefer-const&quot;</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">&quot;prefer-spread&quot;</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">&quot;prefer-reflect&quot;</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">&quot;quotes&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>],<span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;quote-props&quot;</span>:[<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">&quot;radix&quot;</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">&quot;id-match&quot;</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">&quot;require-yield&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">&quot;semi&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">&quot;semi-spacing&quot;</span>: [<span class="number">0</span>, &#123;<span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">&quot;sort-vars&quot;</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">&quot;space-after-keywords&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">&quot;space-before-blocks&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-before-function-paren&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-in-parens&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-return-throw-case&quot;</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">&quot;space-unary-ops&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">&quot;spaced-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">&quot;strict&quot;</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">&quot;use-isnan&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">&quot;valid-jsdoc&quot;</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">&quot;valid-typeof&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">&quot;vars-on-top&quot;</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">&quot;wrap-iife&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;inside&quot;</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">&quot;wrap-regex&quot;</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">&quot;yoda&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>流式布局</title>
    <url>/2023/02/26/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10302_Percent/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h1><h2 id="什么是流式布局"><a href="#什么是流式布局" class="headerlink" title="什么是流式布局"></a>什么是流式布局</h2><ul>
<li><strong>流式布局，就是百分比布局，也称非固定像素布局。</strong></li>
<li><strong>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</strong></li>
<li>流式布局方式是移动 web 开发使用的比较常见的布局方式。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/43c46a3e474f4c628dc692b2f0e6fca0" alt="1656511289177"></p>
<ul>
<li>max-width 最大宽度 （max-height 最大高度）</li>
<li>min-width 最小宽度 （min-height 最小高度）</li>
</ul>
<h2 id="流式布局示例网站"><a href="#流式布局示例网站" class="headerlink" title="流式布局示例网站"></a>流式布局示例网站</h2><p><img src="https://s1.vika.cn/space/2023/02/26/1936148a92744d529d35cab2134adb48" alt="1656511329177"></p>
<h2 id="常用初始化样式"><a href="#常用初始化样式" class="headerlink" title="常用初始化样式"></a>常用初始化样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: -apple-system, Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二倍精灵图做法"><a href="#二倍精灵图做法" class="headerlink" title="二倍精灵图做法"></a>二倍精灵图做法</h2><ul>
<li>01 在 firework 里面把精灵图等比例缩放为原来的一半</li>
<li>02 之后根据大小 测量坐标</li>
<li>03 注意代码里面 background-size 也要写： 精灵图原来宽度的一半</li>
</ul>
<h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><ul>
<li><p>DPG 图片压缩技术</p>
<ul>
<li>京东自主研发推出 DPG 图片压缩技术，经测试该技术，可直接节省用户近 50% 的浏览流量，极大的提升了用户的网页打开速度。能够兼容 .jpeg，实现全平台、全部浏览器的兼容支持，经过内部和外部上万张图片的人眼浏览测试后发现，压缩后的图片和 webp 的清晰度对比没有差距。</li>
</ul>
</li>
<li><p>webp 图片格式</p>
<ul>
<li>谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有 JPEG 的 2&#x2F;3，并能节省大量的服务器宽带资源和数据空间</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>rem布局</title>
    <url>/2023/02/26/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10303_Rem/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="rem-适配布局"><a href="#rem-适配布局" class="headerlink" title="rem 适配布局"></a>rem 适配布局</h1><ul>
<li>思考:<ul>
<li>页面布局文字能否随着屏幕大小变化而变化？</li>
<li>流式布局和 flex 布局主要针对于宽度布局，那高度如何设置？</li>
<li>怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放？</li>
</ul>
</li>
</ul>
<h2 id="rem-单位"><a href="#rem-单位" class="headerlink" title="rem 单位"></a>rem 单位</h2><ul>
<li><p><strong>rem</strong> (root em)是一个相对单位，类似于 em，<strong>em 是父元素字体大小</strong>。</p>
</li>
<li><p>不同的是 <strong>rem 的基准是相对于 html 元素的字体大小。</strong></p>
<ul>
<li><strong>比如，根元素（ html ）设置 font-size&#x3D;12px; 非根元素设置 width:2rem; 则换成 px 表示就是 24px。</strong></li>
</ul>
</li>
<li><p>rem 的优势：父元素文字大小可能不一致， 但是整个页面只有一个 html ，可以很好来控制整个页面的元素大小</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 根html 为 12px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 此时 div 的字体大小就是 24px */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h2><ul>
<li>媒体查询（Media Query）是 CSS3 新语法。<ul>
<li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式</li>
<li>@media 可以针对不同的屏幕尺寸设置不同的样式</li>
<li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li>
<li>目前针对很多苹果手机、Android 手机，平板等设备都用得到多媒体查询</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6d45362a7b9540d195a8a53ed288de44" alt="1656556079314"></p>
<h2 id="媒体查询语法规范"><a href="#媒体查询语法规范" class="headerlink" title="媒体查询语法规范"></a>媒体查询语法规范</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) &#123;</span><br><span class="line">	CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用 @media 开头 注意 @ 符号</li>
<li>mediatype 媒体类型</li>
<li>关键字 and not only</li>
<li>media feature 媒体特性 必须有小括号包含</li>
</ul>
<h2 id="mediatype-查询类型"><a href="#mediatype-查询类型" class="headerlink" title="mediatype 查询类型"></a>mediatype 查询类型</h2><ul>
<li>将不同的终端设备划分成不同的类型，称为媒体类型</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d913028e5a624282bd6381c7917f3da7" alt="1656556163195"></p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li>关键字: 将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。<ul>
<li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li>
<li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li>
<li>only：指定某个特定的媒体类型，可以省略。</li>
</ul>
</li>
</ul>
<h2 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h2><ul>
<li>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。注意他们要加小括号包含</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ebfbc9ab4762418dad58f0c1d3c1174b" alt="1656556282794"></p>
<h2 id="媒体查询案例"><a href="#媒体查询案例" class="headerlink" title="媒体查询案例"></a>媒体查询案例</h2><ul>
<li>页面效果</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/017ec913d59646499081d5915660e80a" alt="1656556335356"></p>
<ul>
<li><p>实现思路</p>
<ul>
<li><p>01 按照从大到小的或者从小到大的思路</p>
</li>
<li><p>02 注意我们有最大值 max-width 和最小值 min-width 都是包含等于的</p>
</li>
<li><p>03 当屏幕小于 540 像素， 背景颜色变为蓝色 （x &lt;&#x3D; 539）</p>
</li>
<li><p>04 当屏幕大于等于 540 像素 并且小于等于 969 像素的时候 背景颜色为 绿色 ( 540&#x3D;&lt;x &lt;&#x3D; 969）</p>
</li>
<li><p>05 当屏幕大于等于 970 像素的时候，背景颜色为红色 （ x &gt;&#x3D; 970）</p>
</li>
<li><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0f36183432f14daf8014604324fa340d" alt="1656556468050"></p>
<h2 id="媒体查询与-rem"><a href="#媒体查询与-rem" class="headerlink" title="媒体查询与 rem"></a>媒体查询与 rem</h2><ul>
<li>rem 单位是跟着 html 来走的，有了 rem 页面元素可以设置不同大小尺寸</li>
<li>媒体查询可以根据不同设备宽度来修改样式</li>
<li>媒体查询 + rem 就可以实现不同设备宽度，实现页面元素大小的动态变化</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7c56580400104cb48be133fa27a5653c" alt="1656556546440"></p>
<h2 id="资源的分别引入"><a href="#资源的分别引入" class="headerlink" title="资源的分别引入"></a>资源的分别引入</h2><ul>
<li>当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets（样式表）。</li>
<li>原理，就是直接在 link 中判断设备的尺寸，然后引用不同的 css 文件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styleA.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width: 400px)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="rem-适配方案"><a href="#rem-适配方案" class="headerlink" title="rem 适配方案"></a>rem 适配方案</h2><ul>
<li>01 让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</li>
<li><strong>02 使用媒体查询根据不同设备按比例设置 html 的字体大小，然后页面元素使用 rem 做尺寸单位，当 html 字体大小变化,元素尺寸也会发生变化，从而达到等比缩放的适配。</strong></li>
</ul>
<h2 id="rem-实际开发适配方案"><a href="#rem-实际开发适配方案" class="headerlink" title="rem 实际开发适配方案"></a>rem 实际开发适配方案</h2><ul>
<li>01 按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；（媒体查询）</li>
<li>02 CSS 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/47011040d3d148c484ec058c13948123" alt="1656557355775"></p>
<h2 id="rem-适配方案技术使用"><a href="#rem-适配方案技术使用" class="headerlink" title="rem 适配方案技术使用"></a>rem 适配方案技术使用</h2><ul>
<li><p>技术方案 1</p>
<ul>
<li>less</li>
<li>媒体查询</li>
<li>rem</li>
</ul>
</li>
<li><p>技术方案 2（推荐）</p>
<ul>
<li>flexible.js</li>
<li>rem</li>
</ul>
</li>
<li><p>总结：</p>
<ul>
<li>01 两种方案现在都存在。</li>
<li>02 方案 2 更简单，现阶段大家无需了解里面的 js 代码。</li>
</ul>
</li>
</ul>
<h2 id="rem-实际开发适配方案-1"><a href="#rem-实际开发适配方案-1" class="headerlink" title="rem 实际开发适配方案 1"></a>rem 实际开发适配方案 1</h2><ul>
<li><p>rem + 媒体查询 + less 技术</p>
</li>
<li><ol>
<li>设计稿常见尺寸宽度</li>
</ol>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5d46d99ca40b4094bbe93529969fe25e" alt="1656557544955"></p>
<ul>
<li><p>一般情况下，我们以一套或两套效果图适应大部分的屏幕，放弃极端屏或对其优雅降级，牺牲一些效果现在基本以 750 为准。</p>
</li>
<li><ol start="2">
<li>动态设置 html 标签 font-size 大小</li>
</ol>
<ul>
<li>01 假设设计稿是 750px</li>
<li>02 假设我们把整个屏幕划分为 15 等份（划分标准不一,可以是 20 份,也可以是 10 等份）</li>
<li>03 每一份作为 html 字体大小，这里就是 50px</li>
<li>04 那么在 320px 设备的时候，字体大小为 320&#x2F;15 就是 21.33px</li>
<li>05 用我们页面元素的大小 除以不同的 html 字体大小会发现他们比例还是相同的</li>
<li>06 比如我们以 750 为标准设计稿</li>
<li>07 一个 100*100 像素的页面元素 在 750 屏幕下， 就是 100 &#x2F; 50 转换为 rem 是 2rem * 2rem 比例是 1 比 1</li>
<li>08 320 屏幕下，html 字体大小为 21.33 则 2rem &#x3D; 42.66px 此时宽和高都是 42.66 但是 宽和高的比例还是 1 比 1</li>
<li>09 但是已经能实现不同屏幕下,页面元素盒子等比例缩放的效果</li>
</ul>
</li>
<li><ol start="3">
<li>元素大小取值方法</li>
</ol>
<ul>
<li>01 最后的公式： 页面元素的 rem 值 &#x3D; 页面元素值（ px ） &#x2F; （屏幕宽度 &#x2F; 划分的份数）</li>
<li>02 屏幕宽度 &#x2F; 划分的份数 就是 html font-size 的大小</li>
<li>03 或者： 页面元素的 rem 值 &#x3D; 页面元素值（px） &#x2F; html font-size 字体大小</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尚硅谷: 方案一</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adapter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取布局视口宽度，因为开启了理想视口，布局视口=设备横向独立像素值</span></span><br><span class="line">  <span class="keyword">const</span> dpWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">  <span class="comment">// 计算根字体大小</span></span><br><span class="line">  <span class="keyword">const</span> rootFontSize = (dpWidth * <span class="number">100</span>) / <span class="number">375</span></span><br><span class="line">  <span class="comment">// 设置根字体大小</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = rootFontSize + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">adapter</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = adapter</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尚硅谷: 方案二</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adapter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取布局视口宽度，因为开启了理想视口，布局视口=设备横向独立像素值</span></span><br><span class="line">  <span class="keyword">const</span> dpWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">  <span class="comment">// 计算根字体大小</span></span><br><span class="line">  <span class="keyword">const</span> rootFontSize = dpWidth / <span class="number">10</span></span><br><span class="line">  <span class="comment">// 设置根字体大小</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = rootFontSize + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">adapter</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = adapter</span><br></pre></td></tr></table></figure>

<h2 id="案例-苏宁网移动端首页"><a href="#案例-苏宁网移动端首页" class="headerlink" title="案例-苏宁网移动端首页"></a>案例-苏宁网移动端首页</h2><ul>
<li>01 效果图展示</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0c450d96763a452bafb3b14cb0a0e8f3" alt="1656557768576"></p>
<ul>
<li><p>02 技术选型</p>
<ul>
<li>方案：我们采取单独制作移动页面方案</li>
<li>技术：布局采取 rem 适配布局（ less + rem + 媒体查询 ）</li>
<li>设计图： 本设计图采用 750px 设计尺寸</li>
</ul>
</li>
<li><p>03 设置视口标签以及引入初始化样式</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no,</span></span></span><br><span class="line"><span class="string"><span class="tag">initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/normalize.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>04 设置公共 common.less 文件</p>
<ul>
<li>01 新建 common.less 设置好最常见的屏幕尺寸，利用媒体查询设置不同的 html 字体大小，因为除了首页其他页面也需要</li>
<li>02 我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px</li>
<li>03 划分的份数我们定为 15 等份</li>
<li>04 因为我们 pc 端也可以打开我们苏宁移动端首页，我们默认 html 字体大小为 50px，注意这句话写到最上面</li>
</ul>
</li>
<li><p>05 新建 index.less 文件</p>
<ul>
<li>01 新建 index.less 这里面写首页的样式</li>
<li>02 将刚才设置好的 common.less 引入到 index.less 里面 语法：**@import “common”**</li>
<li>03 生成 index.css 引入到 index.html 里面</li>
</ul>
</li>
<li><p>06 body 样式</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rem-实际开发适配方案-2"><a href="#rem-实际开发适配方案-2" class="headerlink" title="rem 实际开发适配方案 2"></a>rem 实际开发适配方案 2</h2><ul>
<li>简洁高效的 rem 适配方案 flexible.js<ul>
<li>手机淘宝团队出的简洁高效 移动端适配库</li>
<li>我们再也不需要在写不同屏幕的媒体查询，因为里面 js 做了处理</li>
<li>它的原理是把当前设备划分为 10 等份，但是不同设备下，比例还是一致的。</li>
<li>我们要做的，就是确定好我们当前设备的 html 文字大小就可以了</li>
<li>比如当前设计稿是 750px ， 那么我们只需要把 html 文字大小设置为 75px(750px &#x2F; 10) 就可以</li>
<li>里面页面元素 rem 值： 页面元素的 px 值 &#x2F; 75</li>
<li>剩余的，让 flexible.js 来去算</li>
<li>github 地址：<a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></li>
</ul>
</li>
</ul>
<h2 id="案例-苏宁移动端首页"><a href="#案例-苏宁移动端首页" class="headerlink" title="案例-苏宁移动端首页"></a>案例-苏宁移动端首页</h2><ul>
<li><p>01 技术选型</p>
<ul>
<li>方案：我们采取单独制作移动页面方案</li>
<li>技术：布局采取 rem 适配布局 2（ flexible.js + rem）</li>
<li>设计图： 本设计图采用 750px 设计尺寸</li>
</ul>
</li>
<li><p>02 设置视口标签以及引入初始化样式还有 js 文件</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no,</span></span></span><br><span class="line"><span class="string"><span class="tag">initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/normalize.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们页面需要引入 这个 js 文件，在 index.html 中 引入 flexible.js 这个文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“js/flexible.js”</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>03 body 样式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>移动端开发基础</title>
    <url>/2023/02/26/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10301_WebMobileBase/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><h2 id="浏览器现状"><a href="#浏览器现状" class="headerlink" title="浏览器现状"></a>浏览器现状</h2><ul>
<li><p>PC 端常见浏览器</p>
<ul>
<li><strong>360 浏览器、谷歌浏览器、火狐浏览器、QQ 浏览器、百度浏览器、搜狗浏览器、IE 浏览器。</strong></li>
</ul>
</li>
<li><p>移动端常见浏览器</p>
<ul>
<li>UC 浏览器，QQ 浏览器，欧朋浏览器，百度手机浏览器，360 安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器 ，以及其他各种杂牌浏览器。</li>
</ul>
</li>
<li><p>国内的 UC 和 QQ，百度等手机浏览器都是根据 Webkit 修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于 Android 修改开发的一样。</p>
</li>
<li><p>总结：兼容移动端主流浏览器，处理 Webkit 内核浏览器即可。</p>
</li>
</ul>
<h2 id="手机屏幕现状"><a href="#手机屏幕现状" class="headerlink" title="手机屏幕现状"></a>手机屏幕现状</h2><ul>
<li>移动端设备屏幕尺寸非常多，碎片化严重。</li>
<li>Android 设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920 等，还有传说中的 2K，4k 屏。</li>
<li>近年来 iPhone 的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208 等。</li>
<li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li>
</ul>
<h2 id="常见的移动端屏幕尺寸"><a href="#常见的移动端屏幕尺寸" class="headerlink" title="常见的移动端屏幕尺寸"></a>常见的移动端屏幕尺寸</h2><p><img src="https://s1.vika.cn/space/2023/02/26/a837698c86b54537acd6ca5b5171ecec" alt="1656501267544"></p>
<ul>
<li>注：以上数据均参考自 <a href="https://material.io/devices/">https://material.io/devices/</a> 。</li>
<li>注：作为前端开发，不建议大家去纠结 dp，dpi，pt，ppi 等单位。</li>
</ul>
<h2 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h2><ul>
<li>又称:设备像素，物理像素是一个长度单位，单位是 px，1 个物理像素就是屏幕上的一个物理成像点,就是屏幕中一个微小的发光物理元器件(可简单理解为超级微小的灯泡)，是屏幕能显示的最小粒度。它由屏幕制造商决定，屏幕生产后无法修改。</li>
<li>例如 iPhone 6 的横向上拥有的物理像素为 750、纵向上拥有的物理像素为 1334，我们也可以用: 750*1334 表示。</li>
</ul>
<h2 id="CSS-像素"><a href="#CSS-像素" class="headerlink" title="CSS 像素"></a>CSS 像素</h2><ul>
<li>又称:逻辑像素，css 像素是一个抽象的长度单位，单位也是 px，它是为 Web 开发者创造的，用来精确的度量 Web 页面上的内容大小。我们在编写 css、js、less 中所使用的都是 css 像素</li>
</ul>
<h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><ul>
<li>屏幕分辨率指屏幕在:横向、纵向上所拥有的物理像素点总数。一般表示用 n * m 表示。<ul>
<li>例如: iPhone 6 的屏幕分辨率为 750 * 1334</li>
</ul>
</li>
<li>注意点:<ul>
<li><strong>屏幕分辨率是一个固定值，屏幕生产出来就确定了，无法修改!!</strong></li>
<li>屏幕分辨率、显示分辨率是两个概念，系统设置中可以修改的是:显示分辨率。</li>
<li>显示分辨率是设备当前所用到的物理像素点数，也可以说:屏幕分辨率 &gt;&#x3D; 显示分辨率。</li>
</ul>
</li>
<li>手机屏幕尺寸参数查询: <a href="https://uiiiuiii.com/screen/">https://uiiiuiii.com/screen/</a></li>
</ul>
<h2 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h2><ul>
<li>又称:屏幕像素密度，<strong>是指屏幕上每英寸里包含的物理像素点个数</strong>，单位是 ppi(pixels per inch)，其实这里还有另一个单位 dpi (dots per inch)，两个值的计算方式都一样，只是使用的场景不同。ppi 主要用来衡量屏幕，dpi 用来衡量打印机等。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ecb9507ca2974d99a0d27f8e3807d032" alt="1659588896358"></p>
<h2 id="物理像素比"><a href="#物理像素比" class="headerlink" title="物理像素比"></a>物理像素比</h2><ul>
<li><strong>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的</strong>。这是厂商在出厂时就设置好了,比如苹果 6\7\8 是 750* 1334</li>
<li>我们开发时候的 1px 不是一定等于 1 个物理像素的</li>
<li>PC 端页面，1 个 px 等于 1 个物理像素的，但是移动端就不尽相同</li>
<li><strong>一个 px 的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a837698c86b54537acd6ca5b5171ecec" alt="1656501267544"></p>
<ul>
<li>PC 端 和 早前的手机屏幕 &#x2F; 普通手机屏幕: 1 CSS 像素 &#x3D; 1 物理像素的</li>
<li>Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a680fd4dd3424c6cac6d7e94d01b727e" alt="1656505788678"></p>
<h2 id="移动端调试方法"><a href="#移动端调试方法" class="headerlink" title="移动端调试方法"></a>移动端调试方法</h2><ul>
<li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li>
<li>搭建本地 web 服务器，手机和服务器一个局域网内，通过手机访问服务器</li>
<li>使用外网服务器，直接 IP 或域名访问</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>移动端浏览器我们主要对 webkit 内核进行兼容</li>
<li>我们现在开发的移动端主要针对手机端开发</li>
<li>现在移动端碎片化比较严重，分辨率和屏幕尺寸大小不一</li>
<li>学会用谷歌浏览器模拟手机界面以及调试</li>
</ul>
<h2 id="PC-端视口"><a href="#PC-端视口" class="headerlink" title="PC 端视口"></a>PC 端视口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>) <span class="comment">// 宽度 = 内容区域宽度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>) <span class="comment">// 宽度 = 内容区域 + 滚动条</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerWidth</span>) <span class="comment">// 宽度 = 内容区域 + 滚动条 + 浏览器边框</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">width</span>) <span class="comment">// 宽度 = 当前显示器显示的分辨率的横向值</span></span><br></pre></td></tr></table></figure>

<h2 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h2><ul>
<li><p>视口（ viewport ）就是浏览器显示页面内容的屏幕区域。 视口可以分为 <strong>布局视口、视觉视口和理想视口</strong></p>
</li>
<li><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的 PC 端页面在手机上显示的问题。</p>
</li>
<li><p>iOS, Android 基本都将这个视口分辨率设置为 980px，所以 PC 上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/31467d306aa34d0aa9d085f6153cfd10" alt="1656501478263"></p>
<h2 id="视觉视口"><a href="#视觉视口" class="headerlink" title="视觉视口"></a>视觉视口</h2><ul>
<li>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</li>
<li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/705f33a9540342568280d5700fb4ecee" alt="1656501520825"></p>
<h2 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h2><ul>
<li><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p>
</li>
<li><p>理想视口，对设备来讲，是最理想的视口尺寸</p>
</li>
<li><p>需要手动添写 meta 视口标签通知浏览器操作</p>
</li>
<li><p>meta 视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p>
</li>
</ul>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul>
<li>视口就是浏览器显示页面内容的屏幕区域</li>
<li>视口分为布局视口、视觉视口和理想视口</li>
<li>我们移动端布局想要的是理想视口就是手机屏幕有多宽，我们的布局视口就有多宽</li>
<li>想要理想视口，我们需要给我们的移动端页面添加 meta 视口标签</li>
</ul>
<h2 id="meta-视口标签"><a href="#meta-视口标签" class="headerlink" title="meta 视口标签"></a>meta 视口标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/d862f110bb9942bdab2d29cd9e07194a" alt="1656505546837"></p>
<h2 id="标准的-viewport-设置"><a href="#标准的-viewport-设置" class="headerlink" title="标准的 viewport 设置"></a>标准的 viewport 设置</h2><ul>
<li><strong>视口宽度和设备保持一致</strong></li>
<li><strong>视口的默认缩放比例 1.0</strong></li>
<li><strong>不允许用户自行缩放</strong></li>
<li><strong>最大允许的缩放比例 1.0</strong></li>
<li><strong>最小允许的缩放比例 1.0</strong></li>
<li>viewport-fit 设置为 cover 值, 可以解决刘海屏的留白问题</li>
</ul>
<h2 id="多倍图"><a href="#多倍图" class="headerlink" title="多倍图"></a>多倍图</h2><ul>
<li>对于一张 50px * 50px 的图片,在手机 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</li>
<li>在标准的 viewport 设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</li>
<li>通常使用二倍图， 因为 iPhone 6\7\8 的影响,但是现在还存在 3 倍图, 4 倍图的情况，这个看实际开发公司需求</li>
<li>背景图片 注意缩放问题</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在 iphone8 下,物理像素比为 2  */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="comment">/*原始图片100*100px*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*原始图片100*100px*/</span></span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>尚硅谷:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 当物理像素比最小为 2 时,使用 2 倍图, 区分匹配的先后顺序 */</span></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 修改 img 的 src 属性 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">&#x27;../img/logo@2x.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 当物理像素比最小为 3 时,使用 3 倍图, 区分匹配的先后顺序 */</span></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 修改 img 的 src 属性 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">&#x27;../img/logo@3x.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="背景图缩放"><a href="#背景图缩放" class="headerlink" title="背景图缩放"></a>背景图缩放</h2><ul>
<li>background-size 属性规定背景图像的尺寸</li>
<li><strong>background-size: 背景图片宽度 背景图片高度;</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>可选值： 长度 | 百分比 | cover | contain;</li>
<li><strong>cover : 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</strong></li>
<li><strong>contain : 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</strong></li>
</ul>
<h2 id="多倍图切图"><a href="#多倍图切图" class="headerlink" title="多倍图切图"></a>多倍图切图</h2><ul>
<li>Photoshop 插件 : <strong>cutterman</strong></li>
</ul>
<h2 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h2><ul>
<li><ol>
<li>单独移动端页面（主流）</li>
</ol>
<ul>
<li>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b356040a43744ef990c7177f5b273205" alt="1656510014638"></p>
<ul>
<li><ol start="2">
<li>响应式兼容 PC 移动端</li>
</ol>
<ul>
<li>三星电子官网： <a href="http://www.samsung.com/cn/">www.samsung.com/cn/</a> ，通过判断屏幕宽度来改变样式，以适应不同终端。</li>
<li>缺点：制作麻烦， 需要花很大精力去调兼容性问题</li>
</ul>
</li>
<li><ol start="3">
<li>小结:</li>
</ol>
<ul>
<li>现在市场常见的移动端开发有 单独制作移动端页面 和 响应式页面 两种方案</li>
<li>现在<strong>市场主流的选择还是单独制作移动端页面</strong></li>
</ul>
</li>
</ul>
<h2 id="移动端浏览器的兼容性"><a href="#移动端浏览器的兼容性" class="headerlink" title="移动端浏览器的兼容性"></a>移动端浏览器的兼容性</h2><ul>
<li>移动端浏览器基本以 webkit 内核为主，因此我们就考虑 webkit 兼容性问题。</li>
<li>我们可以放心使用 H5 标签和 CSS3 样式。</li>
<li>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/15c46985dab7419786019383521a9a29" alt="1656510420226"></p>
<h2 id="CSS-初始化"><a href="#CSS-初始化" class="headerlink" title="CSS 初始化"></a>CSS 初始化</h2><ul>
<li>移动端 CSS 初始化推荐使用 <strong>normalize.css</strong></li>
<li>保护了有价值的默认值</li>
<li>修复了浏览器的 bug</li>
<li>是模块化的</li>
<li>拥有详细的文档</li>
<li>官网地址： <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></li>
</ul>
<h2 id="CSS-3-盒子模型"><a href="#CSS-3-盒子模型" class="headerlink" title="CSS 3 盒子模型"></a>CSS 3 盒子模型</h2><ul>
<li>传统模式宽度计算：盒子的宽度 &#x3D; CSS 中设置的 width + border + padding</li>
<li>CSS3 盒子模型： 盒子的宽度 &#x3D; CSS 中设置的宽度 width, 里面包含了 border 和 padding,也就是说，我们的 CSS3 中的盒子模型， padding 和 border 不会撑大盒子了</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/*传统盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: content-box;</span><br></pre></td></tr></table></figure>

<ul>
<li>传统 or CSS3 盒子模型:<ul>
<li>移动端可以全部 CSS3 盒子模型</li>
<li>PC 端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">-webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/*点击高亮我们需要清除 设置为transparent 完成透明*/</span></span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line">-webkit-appearance: none;</span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h2><ul>
<li><ol>
<li>单独制作移动端页面（主流）</li>
</ol>
<ul>
<li>流式布局（百分比布局）</li>
<li>flex 弹性布局（强烈推荐）</li>
<li>less+rem+媒体查询布局</li>
<li>混合布局</li>
</ul>
</li>
<li><ol start="2">
<li>响应式页面兼容移动端（其次）</li>
</ol>
<ul>
<li>媒体查询</li>
<li>bootstarp</li>
</ul>
</li>
</ul>
<h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><ul>
<li>为什么要做适配</li>
<li>由于移动端设备的屏幕尺寸大小不一，会出现:同一个元素，在两个不同的手机上显尔双果个一样(比例不同)。要想让同一个元素在不同设备上，显示效果一样，就需要适配，无论采用何种适配方式，中心原则永远是:等比。</li>
<li>主流的适配方式有三种:<ul>
<li>viewport 适配</li>
<li>rem 适配(主流方式,几乎完美适配).</li>
<li>vw 适配</li>
</ul>
</li>
</ul>
<h3 id="viewport-适配"><a href="#viewport-适配" class="headerlink" title="viewport 适配"></a>viewport 适配</h3><ul>
<li>方法:拿到设计稿之后，设置布局视口宽度为设计稿宽度，然后直接按照设计稿给宽高进行布局即可。·优点:不用复杂的计算，直接使用图稿上标注的 px 值</li>
<li>缺点:<ul>
<li>不能使用完整的 meta 标签，会导致在某些安卓手机上有兼容性问题</li>
<li>不希望适配的东西，例如边框，也强制参与了适配</li>
<li>图片会失真</li>
</ul>
</li>
</ul>
<h3 id="vw-适配"><a href="#vw-适配" class="headerlink" title="vw 适配"></a>vw 适配</h3><ul>
<li>vw 和 vh 是两个相对单位<ul>
<li>1 vw &#x3D; 等于布局视口宽度的 1%</li>
<li>1 vh &#x3D; 等于布局视口高度的 1%</li>
</ul>
</li>
</ul>
<h2 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h2><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><ul>
<li>移动端事件列表<ul>
<li>touchstart 元素上触摸开始时触发.</li>
<li>touchmove 元素上触摸移动时触发.</li>
<li>touchend 手指从元素上离开时触发.</li>
<li>touchcancel 触摸被打断时触发</li>
</ul>
</li>
<li>这几个事件最早出现于 IOS safari 中，为了向开发人员转达一些特殊的信息。</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><p>touchstart 事件可用于元素触摸的交互，比如页面跳转，标签页切换.</p>
</li>
<li><p>touchmove 事件可用于页面的滑动特效，网页游戏，画板</p>
</li>
<li><p>touchend 事件主要跟 touchmove 事件结合使用</p>
</li>
<li><p>touchcancel 使用率不高</p>
</li>
<li><p>注意:</p>
<ul>
<li>touchmove 事件触发后，即使手指离开了元素，touchmove 事件也会持续触发·</li>
<li>触发 touchmove 与 touchend 事件，一定要先触发 touchstart</li>
<li>事件的作用在于实现移动端的界面交互</li>
</ul>
</li>
</ul>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul>
<li><p>touches : 屏幕上的触点数</p>
</li>
<li><p>targetTouches : 当前元素上的触点数</p>
</li>
<li><p>changedTouches : 同时按下几个手指</p>
</li>
</ul>
<h3 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h3><ul>
<li>touch 事件结束后会默认触发元素的 click 事件，如没有设置完美视口，则事件触发的时间间隔为 300ms 左右，如设置完美视口则时间间隔为 30ms 左右(备注:具体的时间也看设备的特性). 如果 touch 事件隐藏了元素，则 click 动作将作用到新的元素上，触发新元素的 click 事件或页面跳转，此现象称为点击穿透</li>
</ul>
<h3 id="点击穿透解决方案一"><a href="#点击穿透解决方案一" class="headerlink" title="点击穿透解决方案一"></a>点击穿透解决方案一</h3><ul>
<li>给顶层元素,阻止默认行为 ( 类似于事件冒泡 )</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="点击穿透解决方案二"><a href="#点击穿透解决方案二" class="headerlink" title="点击穿透解决方案二"></a>点击穿透解决方案二</h3><ul>
<li>使背后的元素不具备 click 特性, 给背后的元素添加 touchXXX 事件,代替 click 事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  location.<span class="property">href</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="点击穿透解决方案三"><a href="#点击穿透解决方案三" class="headerlink" title="点击穿透解决方案三"></a>点击穿透解决方案三</h3><ul>
<li>让背后的元素暂时失去 click 事件，300 毫秒左右再复原</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*添加CSS样式,不再响应点击事件*/</span></span><br><span class="line"><span class="selector-id">#anode</span> &#123;</span><br><span class="line">  pointer-enents: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    anode.<span class="property">style</span>.<span class="property">pointerEvents</span> = <span class="string">&#x27;auto&#x27;</span> <span class="comment">//重新响应点击事件</span></span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="点击穿透解决方案四"><a href="#点击穿透解决方案四" class="headerlink" title="点击穿透解决方案四"></a>点击穿透解决方案四</h3><ul>
<li>延迟隐藏顶层元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    shade.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2023/02/19/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/101_HTML_CSS/10102_HTML/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="前言-基础班学习路线"><a href="#前言-基础班学习路线" class="headerlink" title="前言-基础班学习路线"></a>前言-基础班学习路线</h2><h3 id="基础班目标"><a href="#基础班目标" class="headerlink" title="基础班目标"></a>基础班目标</h3><ul>
<li><p>目标：基础班主要学习 PC 端网站布局。</p>
</li>
<li><p>最终网站：品优购静态网站。</p>
</li>
<li><p>目的： 精通网页布局，也是我们前端人员的必备技能。为后面学习 JavaScript 打下坚实基础。</p>
</li>
</ul>
<h3 id="基础班学习路线"><a href="#基础班学习路线" class="headerlink" title="基础班学习路线"></a>基础班学习路线</h3><p><img src="https://s1.vika.cn/space/2023/02/19/7a091ab6f0704b0584482681745e15fd" alt="image-20220125131616374"></p>
<h2 id="Web-标准与-W3C"><a href="#Web-标准与-W3C" class="headerlink" title="Web 标准与 W3C"></a>Web 标准与 W3C</h2><h3 id="为什么需要-Web-标准"><a href="#为什么需要-Web-标准" class="headerlink" title="为什么需要 Web 标准"></a>为什么需要 Web 标准</h3><ul>
<li><p><strong>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</strong></p>
</li>
<li><p>因为浏览器不同，如果不遵循 Web 标准,浏览器显示页面或者排版就有差异。</p>
</li>
<li><p>遵循 Web 标准除了<strong>可以让不同的开发人员写出的页面更标准、更统一</strong>外，还有以下优点：</p>
<ul>
<li><strong>1) 让 Web 的发展前景更广阔。</strong></li>
<li><strong>2) 内容能被更广泛的设备访问。</strong></li>
<li><strong>3) 更容易被搜寻引擎搜索。</strong></li>
<li><strong>4) 降低网站流量费用。</strong></li>
<li><strong>5) 使网站更易于维护。</strong></li>
<li><strong>6) 提高页面浏览速度。</strong></li>
</ul>
</li>
</ul>
<h3 id="Web-标准的构成"><a href="#Web-标准的构成" class="headerlink" title="Web 标准的构成"></a>Web 标准的构成</h3><ul>
<li><p>主要包括<strong>结构（Structure） 、表现（Presentation）和行为（Behavior）</strong>三个方面。</p>
</li>
<li><p>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。</p>
</li>
<li><p>简单理解： <code>结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中。</code></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/9ea413b92a7c4c5fa648890d39f920e7" alt="image-20220125133257922"></p>
<h3 id="W3C-简介"><a href="#W3C-简介" class="headerlink" title="W3C 简介"></a>W3C 简介</h3><ul>
<li>W3C 是英文 <code>World Wide Web Consortium </code>的缩写， 翻译过来就是 W3C 理事会或万维网联盟, <strong>W3C 是全球互联网最具权威的技术标准化组织</strong>.</li>
<li>W3C 于 1994 年 10 月在麻省理工学院计算机科学实验室成立。创建者是万维网的发明者 Tim Berners-Lee</li>
<li>W3C 负责 web 方面标准的制定，像 HTML、XHTML、CSS、XML 的标准就是由 W3C 来定制的。</li>
</ul>
<h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><h3 id="HTML-简介-1"><a href="#HTML-简介-1" class="headerlink" title="HTML 简介"></a>HTML 简介</h3><ul>
<li>HTML 指的是<strong>超文本标记语言</strong> (Hyper Text Markup Language) ，它<strong>是用来描述网页的一种语言</strong>。</li>
<li>HTML <strong>不是一种编程语言，而是一种标记语言</strong> (markup language)。</li>
<li>标记语言是一套标记标签 (markup tag)<ul>
<li>由无数个标记（标签、tag)组成；</li>
<li>是对某些内容进行特殊的标记，以供其他解释器识别处理；</li>
<li>比如使用<code>&lt;h2&gt;&lt;/h2&gt;</code>标记的文本会被识别为“标题”进行加粗、文字放大显示；</li>
<li>由标签和内容组成的称为元素（element）</li>
</ul>
</li>
<li>所谓超文本，有 2 层含义：<ul>
<li>表示不仅仅可以插入普通的文本（Text），还可以插入图片、音频、视频等内容；</li>
<li>还可以表示超链接（HyperLink），从一个网页跳转到另一个网页；与世界各地主机的文件连接（超级链接文本 ）。</li>
</ul>
</li>
</ul>
<h3 id="HTML-语法规范"><a href="#HTML-语法规范" class="headerlink" title="HTML 语法规范"></a>HTML 语法规范</h3><ul>
<li><ol>
<li>HTML 标签是由尖括号包围的关键词。</li>
</ol>
</li>
<li><ol start="2">
<li>HTML 标签通常是成对出现的，例如 <code>&lt;html&gt;</code> 和 <code>&lt;/html&gt; </code>，我们称为双标签。标签对中的第一个标签是开始标签，第二个标签是结束标签。</li>
</ol>
</li>
<li><ol start="3">
<li>有些特殊的标签必须是单个标签（极少情况），例如单标签: <code>&lt;br /&gt;</code></li>
</ol>
</li>
<li><ol start="4">
<li>标签的作用: <strong>是用来告诉浏览器, 给指定的内容添加语义的</strong></li>
</ol>
</li>
</ul>
<h3 id="网页基本机构"><a href="#网页基本机构" class="headerlink" title="网页基本机构"></a>网页基本机构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文档类型声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义当前文档显示的语言--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字符集:规定 HTML 文档应该使用哪种字符编码。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文档类型声明"><a href="#文档类型声明" class="headerlink" title="文档类型声明"></a>文档类型声明</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档类型声明--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>由于 HTML 有很多个版本的规范, 每个版本的规范之间又有一定的差异. 所以为了让浏览器能够正确的 编译&#x2F;解析&#x2F;渲染 我们的网页, 我们需要在 HTML 文件的第一行<strong>告诉浏览器, 我们当前这个网页是用哪一个版本的 HTML 规范来编写的,让浏览器用 HTML5 的标准去解析识别内容；</strong>浏览器只要知道了我们是用哪一个版本的规范来编写之后, 它就能够正确的 编译&#x2F;解析&#x2F;渲染我们的网页</p>
</li>
<li><p>不是一个 HTML 标签，它就是 文档类型声明</p>
</li>
<li><p>必须放在 HTML 文档的最前面，不能省略，省略了会出现兼容性问题；</p>
</li>
<li><p>HTML 的 DTD 文档声明和 XHTML 的 DTD 文档声明有何区别?</p>
</li>
<li><p><strong>XHTML 本身规定比如标签必须小写、必须严格闭合、必须使用引号引起属性等等</strong>, 而 HTML 会更加松散,没有这么严格</p>
</li>
<li><p>HTML 4.01 中的严格模式 :</p>
</li>
<li><p>Strict 表示<code>严格的</code>, 这种模式里面的要求更为严格.这种严格主要体现在有一些标签不能使用</p>
</li>
<li><p>例如 font 标签 &#x2F; u 标签等</p>
<ul>
<li>font 标签可以修改一个文本的字号、颜色、字体,但这和 HTML 的本质有冲突,因为 HTML 只能负责语义,不能负责样式,而 font 标签是用于修改样式的,所以在 Strict 中是不能使用 font 标签</li>
<li>u 标签可以给一个文本添加 下划线,但这和 HTML 的本质有冲突,因为 HTML 只能负责语义,不能负责样式,而 u 标签添加的下划线是样式.所以在 Strict 中是不能使用 u 标签</li>
</ul>
</li>
</ul>
<h3 id="lang-语言种类"><a href="#lang-语言种类" class="headerlink" title="lang 语言种类"></a>lang 语言种类</h3><ul>
<li><p>W3C 标准建议为 html 元素增加一个 lang 属性 ：</p>
<ul>
<li><strong>lang&#x3D;“en” 表示这个 HTML 文档的语言是英文；</strong></li>
<li><strong>lang&#x3D;“zh-CN” 表示这个 HTML 文档的语言是中文；</strong></li>
</ul>
</li>
<li><p>作用 ：</p>
<ul>
<li><strong>用来定义当前文档显示的语言。</strong></li>
<li>帮助语音合成工具确定要使用的发音;</li>
<li>帮助翻译工具确定要使用的翻译规则;</li>
</ul>
</li>
<li><p>简单来说,定义为 en 就是英文网页, 定义为 zh-CN 就是中文网页</p>
</li>
<li><p>其实对于文档显示来说，<code>定义成 en 的文档也可以显示中文，定义成 zh-CN 的文档也可以显示英文</code></p>
<ul>
<li><code>这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的</code></li>
</ul>
</li>
</ul>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul>
<li><ol>
<li><strong>字符集 (Character set) 就是字符的集合</strong>。以便计算机能够识别和存储各种文字。</li>
</ol>
<ul>
<li>在 HTML 文件中指定的字符集必须和保存这个文件的字符集一致, 否则还是会出现乱码</li>
<li>所以仅仅指定字符集不一定能解决乱码问题, 还需要保存文件的时候, 文件的保存格式必须和指定的字符集一致才能保证没有乱码问题</li>
</ul>
</li>
<li><ol start="2">
<li>在 head 标签内，可以通过 meta 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot; UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>charset 常用的值有：<strong>GB2312 、BIG5 、GBK 和 UTF-8</strong>，其中 <strong>UTF-8 也被称为万国码</strong>，<code>基本包含了全世界所有国家需要用到的字符</code>.</li>
</ol>
</li>
<li><ol start="4">
<li>注意：上面语法是必须要写的代码，否则可能引起乱码的情况。</li>
</ol>
<ul>
<li>一般情况下，尽量统一写成标准的 **”UTF-8”**，不要写成 “utf8” 或 “UTF8”。</li>
</ul>
</li>
<li><ol start="5">
<li>GBK(GB2312) 和 UTF-8 区别:</li>
</ol>
<ul>
<li>GBK(GB2312) 里面存储的字符比较少, 仅仅存储了汉字和一些常用外文<ul>
<li>体积比较小</li>
</ul>
</li>
<li>UTF-8 里面存储的世界上所有的文字<ul>
<li>体积比较大</li>
</ul>
</li>
</ul>
</li>
<li><ol start="6">
<li>那么在企业开发中我们应该使用 GBK(GB2312) 还是 UTF-8 呢?</li>
</ol>
<ul>
<li>如果你的网站仅仅包含中文, 那么推荐使用 GB2312, 因为它的体积更小, 访问速度更快</li>
<li>如果你的网站除了中文以外, 还包含了一些其它国家的语言 , 那么推荐使用 UTF-8</li>
<li>懒人推荐: <strong>不管三七二十一, 一律写 UTF-8 即可</strong></li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>以上三个代码 vscode 自动生成,基本不需要我们重写.</li>
<li><code>&lt;!DOCTYPE html&gt;</code> 文档类型声明,告诉浏览器这个页面采取 html5 版本来显示页面.</li>
<li><code>&lt;html lang=&quot;en&quot;&gt;</code> 告诉浏览器或者搜索引擎这是一个英文网站. 本页面采取英文来显示.</li>
<li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 必须写. 采取 UTF-8 来保存文字. 如果不写就会乱码.具体原理后面分析.</li>
</ul>
<p>keywords 关键字</p>
<ul>
<li>作用: <strong>告诉搜索引擎当前网页的关键词, 在 SEO 中非常重要, 能够提高搜索命中率</strong>, 让别人更容易找到你</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IT前言技术、iOS技术、HTML5技术、Android技术&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Description-描述"><a href="#Description-描述" class="headerlink" title="Description 描述"></a>Description 描述</h3><ul>
<li>作用: <strong>告诉搜索引擎当前网页的主要内容, 在 SEO 中非常重要, 当别人在搜索引擎中搜索到你的网站时,会自动将你网站的描述信息展示给用户, 能够提高搜索命中率,</strong> 让别人更容易找到你</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;江哥热爱于IT技术、iOS技术、HTML5技术、Android技术研究&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>Refresh</p>
<ul>
<li>作用: <strong>告诉浏览器多久自动刷新一次页面并指向新页面</strong>, 常用于新老域名交替时, 访问老域名自动跳转到新域名, 或用于一些需要定时刷新的聊天室等.</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2；URL=http://www.baidu.com/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML-标签结构"><a href="#HTML-标签结构" class="headerlink" title="HTML 标签结构"></a>HTML 标签结构</h2><h3 id="单-双标签元素"><a href="#单-双标签元素" class="headerlink" title="单&#x2F;双标签元素"></a>单&#x2F;双标签元素</h3><ul>
<li>双标签元素：我们会发现前面大部分看到的元素都是双标签的；<ul>
<li>html、body、head、h2、p、a 元素；</li>
</ul>
</li>
<li>单标签元素：也有一些元素是只有一个标签；<ul>
<li>br、img、hr、meta、input；</li>
</ul>
</li>
<li>HTML 元素不区分大小写，但是推荐使用小写</li>
</ul>
<h3 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h3><ul>
<li>双标签关系可以分为两类：<strong>包含关系和并列关系</strong>。</li>
<li>包含关系:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>并列关系:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-基本结构"><a href="#HTML-基本结构" class="headerlink" title="HTML 基本结构"></a>HTML 基本结构</h3><ul>
<li><p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。</p>
</li>
<li><p>HTML 页面也称为 HTML 文档.</p>
</li>
<li><p>HTML 文档的的后缀名必须是 <code>.html</code> 或 <code>.htm </code>，<strong>浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们</strong>。</p>
</li>
<li><p>此时，用浏览器打开这个网页，我们就可以预览我们写的第一个 HTML 文件了。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文档类型声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义当前文档显示的语言--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字符集:规定 HTML 文档应该使用哪种字符编码。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/220138555bb5497ea6744ae5e7e4b62b"></p>
<h3 id="常用的结构标签"><a href="#常用的结构标签" class="headerlink" title="常用的结构标签"></a>常用的结构标签</h3><h4 id="html-标签"><a href="#html-标签" class="headerlink" title="html 标签"></a>html 标签</h4><ul>
<li>作用:<ul>
<li>表示一个 HTML 文档的根（顶级元素），所以它也被称为<strong>根元素</strong>。</li>
<li><strong>用于告诉浏览器这是一个网页</strong>, 也就是说告诉浏览器我是一个 HTML 文档</li>
</ul>
</li>
<li>注意点:<ul>
<li><strong>其它所有的标签都必须写在 html 标签里面</strong>, 所有其他元素必须是此元素的后代 ，也就是写在 html 开始标签和结束标签中间 (文档类型声明除外)</li>
</ul>
</li>
</ul>
<h4 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h4><p>作用:</p>
<ul>
<li>规定文档相关的配置信息（也称之为元数据），包括文档的标题，引用的文档样式和脚本等。<ul>
<li>什么是元数据（meta data），是描述数据的数据；</li>
<li>这里我们可以理解成对整个页面的配置：</li>
<li>一般会至少包含如下 2 个设置。<ul>
<li>网页的标题：title 元素</li>
<li>网页的编码：meta 元素<ul>
<li>可以用于设置网页的字符编码，让浏览器更精准地显示每一个文字，不设置或者设置错误会导致乱码；</li>
<li>一般都使用 <code>utf-8</code> 编码，涵盖了世界上几乎所有的文字；</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如:</p>
<ul>
<li>指定网站的标题 &#x2F; 指定网站的小图片 ( 比如指定网站的 favicon 图标 )</li>
<li>添加网站的 SEO 相关的信息 (添加网站的 <strong>关键字 和 描述信息</strong>)</li>
<li>外挂一些外部的 css&#x2F;js 文件</li>
<li>添加一些浏览器适配相关的内容</li>
</ul>
<p>注意点:</p>
<ul>
<li>一般情况下, 写在 head 标签内部的内容都不会显示给用户查看, 也就是说一般情况下写在 head 标签内部的内容,大部分我们都看不到</li>
</ul>
<h4 id="link-标签"><a href="#link-标签" class="headerlink" title="link 标签"></a>link 标签</h4><ul>
<li>link 元素是外部资源链接元素，规范了文档与外部资源的关系<ul>
<li>link 元素通常是在 head 元素中</li>
</ul>
</li>
<li>最常用的链接是样式表（CSS）；<ul>
<li>此外也可以被用来创建站点图标（比如 “favicon” 图标）；</li>
</ul>
</li>
<li>link 元素常见的属性：<ul>
<li>href：此属性指定被链接资源的 URL。 URL 可以是绝对的，也可以是相对的。</li>
<li>rel：指定链接类型，常见的链接类型：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types</a><ul>
<li>icon：站点图标；</li>
<li>stylesheet：CSS 样式；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入 icon 图标--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入外部样式表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="title-标签"><a href="#title-标签" class="headerlink" title="title 标签"></a>title 标签</h4><ul>
<li>作用:<ul>
<li><strong>用于指定网站的标题</strong>, 并且这个标题, 会作为用户保存网站的默认标题</li>
</ul>
</li>
<li>注意点:<ul>
<li>title 标签必须写在 head 标签里面</li>
</ul>
</li>
</ul>
<h4 id="body-标签"><a href="#body-标签" class="headerlink" title="body 标签"></a>body 标签</h4><p>作用:</p>
<ul>
<li><strong>用于定义 HTML 文档中需要显示给用户查看的内容(文字&#x2F;图片&#x2F;音频&#x2F;视频)</strong><ul>
<li>body 元素里面的内容将是你在浏览器窗口中看到的东西，也就是网页的具体内容和结构。</li>
<li>之后学习的大部分 HTML 元素都是在 body 中编写呈现的；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点:</p>
<ul>
<li>虽然说有时候你可能将内容写到了别的地方,在网页中也能看到, 但是千万不要这么干, 一定要将需要显示的内容写在 body 中</li>
<li>一对 html 标签中(一个 html 开始标签和一个 html 结束标签) 只能有一对 body 标签</li>
</ul>
<h3 id="基本结构标签总结"><a href="#基本结构标签总结" class="headerlink" title="基本结构标签总结"></a>基本结构标签总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/d025422e893a4f51852313cb0892ae91" alt="image-20220125133942216"></p>
<h2 id="认识-HTML-元素"><a href="#认识-HTML-元素" class="headerlink" title="认识 HTML 元素"></a>认识 HTML 元素</h2><h3 id="认识元素"><a href="#认识元素" class="headerlink" title="认识元素"></a>认识元素</h3><ul>
<li>我们会发现<strong>HTML 本质上是由一系列的元素（Element）构成的</strong>；</li>
<li>什么是元素（Element）呢？<ul>
<li>元素是网页的一部分；</li>
<li>一个元素可以<strong>包含一个数据项，或是一块文本，或是一张照片，亦或是什么也不包含</strong>；</li>
</ul>
</li>
<li>那么 HTML 有哪些元素呢？<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></li>
</ul>
</li>
</ul>
<h3 id="元素的组成"><a href="#元素的组成" class="headerlink" title="元素的组成"></a>元素的组成</h3><p><img src="https://s1.vika.cn/space/2023/02/19/391015635e4a47f8a687c75b7fb2d8fa" alt="1670147270058"></p>
<ul>
<li><p>这个元素的主要部分有：</p>
<ul>
<li><p><strong>开始标签</strong>（Opening tag）：包含元素的名称（本例为 p），被左、右尖括号所包围。表示元素从这里开始或者开始起作用 ——在本例中即段落由此开始。</p>
</li>
<li><p><strong>结束标签</strong>（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾 —— 在本例中即段落在此结束。初学者常常会犯忘记包含结束标签的错误，这可能会产生一些奇怪的结果。</p>
</li>
<li><p><strong>内容</strong>（Content）：元素的内容，本例中就是所输入的文本本身。</p>
</li>
<li><p><strong>元素</strong>（Element）：开始标签、结束标签与内容相结合，便是一个完整的元素。</p>
</li>
</ul>
</li>
</ul>
<h3 id="元素的属性"><a href="#元素的属性" class="headerlink" title="元素的属性"></a>元素的属性</h3><p><img src="https://s1.vika.cn/space/2023/02/19/50d86667f7874e64a4d6754a720d15e3" alt="1670147351861"></p>
<ul>
<li>属性包含元素的额外信息，这些信息不会出现在实际的内容中。</li>
<li>一个属性必须包含如下内容：<ul>
<li>一个空格，在属性和元素名称之间。(如果已经有一个或多个属性，就与前一个属性之间有一个空格。)</li>
<li>属性名称，后面跟着一个等于号。</li>
<li>一个属性值，由一对引号“ ”引起来。</li>
</ul>
</li>
</ul>
<h3 id="属性的分类"><a href="#属性的分类" class="headerlink" title="属性的分类"></a>属性的分类</h3><ul>
<li>有些属性是公共的，所有 HTML 都可以设置和拥有 , 称之为 <strong>全局属性</strong><ul>
<li><strong>id</strong>：定义唯一标识符（ID），该标识符在整个文档中必须是唯一的。其目的是在链接（使用片段标识符），脚本或样式（使用 CSS）时标识元素。</li>
<li><strong>class</strong>：一个以空格分隔的元素的类名（classes ）列表，它允许 CSS 和 Javascript 通过类选择器或者 DOM 方法来选择和访问特定的元素；</li>
<li><strong>style</strong>：给元素添加内联样式；</li>
<li><strong>title</strong>：包含表示与其所属元素相关信息的文本。 这些信息通常可以作为提示呈现给用户，但不是必须的。</li>
</ul>
</li>
<li>有些属性是元素特有的，不是每一个元素都可以设置<ul>
<li>比如 meta 元素的 charset 属性、img 元素的 alt 属性等</li>
</ul>
</li>
</ul>
<h2 id="常用-HTML-标签"><a href="#常用-HTML-标签" class="headerlink" title="常用 HTML 标签"></a>常用 HTML 标签</h2><h3 id="常用的-HTML-标签"><a href="#常用的-HTML-标签" class="headerlink" title="常用的 HTML 标签"></a>常用的 HTML 标签</h3><ul>
<li>常用的元素（暂时掌握下面几个就够了，90%时间都在写这几个）：<ul>
<li>p 元素、h 元素；</li>
<li>img 元素、a 元素、iframe 元素；</li>
<li>div 元素、span 元素；</li>
</ul>
</li>
<li>下阶段学习的元素：<ul>
<li>ul、ol、li 元素；</li>
<li>button 元素、input 元素；</li>
<li>table、thead、tbody、thead、th、tr、td；</li>
</ul>
</li>
<li>HTML5 新增元素（后续学习）</li>
</ul>
<h3 id="标签语义"><a href="#标签语义" class="headerlink" title="标签语义"></a>标签语义</h3><ul>
<li>学习标签是有技巧的，重点是记住每个<strong>标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。</strong></li>
<li><strong>根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</strong></li>
<li><strong>用正确的元素做正确的事情。</strong></li>
<li>标签语义化的好处 :<ul>
<li>方便代码维护；</li>
<li>减少让开发者之间的沟通成本；</li>
<li>能让语音合成工具正确识别网页元素的用途，以便作出正确的反应；</li>
<li>有利于 SEO；</li>
<li>……</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/8de0b9929e11485f89dc5f4ec2f22ea1" alt="image-20220125135848686"></p>
<h3 id="h-标题标签"><a href="#h-标题标签" class="headerlink" title="h 标题标签"></a>h 标题标签</h3><ul>
<li><p>为了使网页更具有语义化，我们经常会在页面将一些比较重要的文字作为<strong>标题</strong>，这个时候我们可以使用 <strong>h 元素</strong>。HTML 提供了 6 个等级的网页标题，即 <strong>h1 - h6</strong> 。</p>
</li>
<li><p>单词 head 的缩写，意为<strong>头部、标题</strong>。</p>
</li>
<li><p>标签语义：作为标题使用，用于给文本添加标题语义,并且依据<strong>重要性递减</strong>。<code>&lt;h1&gt;</code> 级别最高，而<code>&lt;h6&gt;</code>级别最低。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一共六级选,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文字加粗一行显。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>由大到小依次减，<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>从重到轻随之变。<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>语法规范书写后，<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>具体效果刷新见。<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>特点：</p>
<ul>
<li><strong>加了标题的文字会变的加粗，字号也会变大</strong>。</li>
<li>一个标题独占一行。</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li>H 标签是用来给文本添加标题语义的, 而不是用来修改文本的样式的</li>
<li><strong>H 标签一共有 6 个, 从 H1~H6, 最多就只能到 6, 超过 6 则无效</strong></li>
<li>被 H 系列标签包裹的内容会独占一行</li>
<li>在 H 系列的标签中, H1 最大, H6 最小</li>
<li>在企业开发中, 一定要慎用 H 系列的标签, 特别是 H1 标签. <strong>在企业开发中一般情况下,一个界面中只能出现一个 H1 标签(和 SEO 有关)</strong></li>
</ul>
</li>
</ul>
<h3 id="p-段落标签"><a href="#p-段落标签" class="headerlink" title="p 段落标签"></a>p 段落标签</h3><ul>
<li><p>在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，<strong>p 标签用于定义段落，它可以将整个网页分为若干个段落。</strong></p>
</li>
<li><p>单词 paragraph [ˈpærəgræf] 的缩写，意为<strong>段落</strong>。</p>
</li>
<li><p><strong>标签语义：可以把 HTML 文档分割为若干段落。</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li><p>文本在一个段落中会根据浏览器窗口的大小自动换行。</p>
</li>
<li><p>在浏览器中会单独占一行</p>
</li>
<li><p>段落和段落之间会有空隙。</p>
</li>
</ul>
<p>注意点:</p>
<ul>
<li><code>p 标签中不要嵌套 块级标签 ,否则页面布局可能会出现错乱</code></li>
<li><code>特别是 p 标签中不能嵌套 div 标签</code></li>
</ul>
<h3 id="br-换行标签"><a href="#br-换行标签" class="headerlink" title="br 换行标签"></a>br 换行标签</h3><ul>
<li><p>在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 br</p>
</li>
<li><p>单词 break 的缩写，意为打断、<strong>换行</strong>。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    特点：</span></span><br><span class="line"><span class="comment">      1.&lt;br /&gt; 是个单标签。</span></span><br><span class="line"><span class="comment">      2.&lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>标签语义：强制换行</strong>。开发中已经不再使用</li>
<li>注意点:<ul>
<li>br 的意思是不另起一个段落进行强制换行, 而网页中 99.99% 需要换行时都是因为另起了一个段落, 所以应该用 p 来做</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a2f62cdd791d4c568a8c480574d9ad57" alt="image-20220125140816205"></p>
<h3 id="hr-标签"><a href="#hr-标签" class="headerlink" title="hr 标签"></a>hr 标签</h3><ul>
<li><p><strong>标签语义:在浏览器上显示一条分割线</strong></p>
</li>
<li><p>格式:</p>
<ul>
<li><code>&lt;hr/&gt;</code></li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li><strong>在浏览器中会单独占一行</strong></li>
<li>通过我的观察发现, HR 标签可以写<code>/</code>,也可以不写<code>/</code>, 如果不写<code>/</code>那么就是按照 HTML 的规范来编写, 如果写上<code>/</code>那么就是按照 XHTML 的规范来编写.</li>
<li>但是在 HTML5 中, 由于 HTML5 兼容 HTML 和 XHTML ,所以写不写都可以. 那么以后我们在做前端开发时, 要将标签闭合</li>
<li>由于 hr 标签是用来修改样式的, 所以不推荐使用. 今后开发中添加水平线一般都使用 CSS 盒子来做</li>
</ul>
</li>
</ul>
<h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><ul>
<li><p>在网页中，有时需要为文字设置<strong>粗体、斜体 或下划线</strong>等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。</p>
</li>
<li><p><strong>标签语义: 突出重要性, 比普通文字更重要.</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/046eb2cc58bd48da858179fb5b3b855d" alt="image-20220125140910359"></p>
<h3 id="div-和-span-标签"><a href="#div-和-span-标签" class="headerlink" title="div 和 span 标签"></a>div 和 span 标签</h3><h4 id="div-和-span-的历史"><a href="#div-和-span-的历史" class="headerlink" title="div 和 span 的历史"></a>div 和 span 的历史</h4><ul>
<li>在 HTML 中有两个特殊的元素 div 元素、span 元素：<ul>
<li>div 元素：division，分开、分配的意思；</li>
<li>span 元素：跨域、涵盖的意思；</li>
</ul>
</li>
<li>这两个元素有什么作用呢？无所用、无所不用。</li>
<li>产生的历史：<ul>
<li>网页的发展早期是没有 css，这个时候我们必须通过语义化元素来告知浏览器一段文字如何显示；</li>
<li>后来出现了 css，结构和样式需要分离，这个时候 html 只需要负责结构即可；</li>
<li>比如 h1 元素可以是一段普通的文本+CSS 修饰样式；</li>
<li>这个时候就出现了 div、span 来编写 HTML 结构所有的结构，样式都交给 css 来处理；</li>
</ul>
</li>
<li>所以，理论上来说：<ul>
<li>我们的页面可以没有 div、span；</li>
<li>我们的页面也可以全部都是 div、span；</li>
</ul>
</li>
</ul>
<h4 id="div-和-span-的区别"><a href="#div-和-span-的区别" class="headerlink" title="div 和 span 的区别"></a>div 和 span 的区别</h4><ul>
<li><strong>div 和 span 是没有语义的，它们就是一个盒子，用来装内容的。</strong><ul>
<li>div 标签用来布局，但是现在一行只能放一个 div。 大盒子<ul>
<li>一般作为其他元素的父容器，把其他元素包住，代表一个整体</li>
<li>用于把网页分割为多个独立的部分</li>
</ul>
</li>
<li>span 标签用来布局，一行上可以放多个 span。小盒子<ul>
<li>默认情况下，跟普通文本几乎没差别</li>
<li>用于区分特殊文本和普通文本，比如用来显示一些关键字</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 今日价格 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="img-图像标签"><a href="#img-图像标签" class="headerlink" title="img 图像标签"></a>img 图像标签</h3><ul>
<li><p>在 HTML 标签中，img 标签用于定义 HTML 页面中的图像。img 元素可以将一份图像嵌入 HTML 文档</p>
</li>
<li><p>单词 image 的缩写，意为图像。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/24.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;占位字符串&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示字符串&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/26.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;占位字符串&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示字符串&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/fc75ea5032784f22bfa53fcfa22fc992" alt="image-20220125142015659"></p>
<ul>
<li><strong>src 是 img 标签的必须属性,用于指定图像文件的路径和文件名</strong></li>
<li><strong>所谓属性：简单理解就是属于这个图像标签的特性。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/866ac3519abc4343bc7b18a8faccd6d2" alt="image-20220125142322960"></p>
<ul>
<li><p>标签的属性</p>
<ul>
<li>写在标签中 key&#x3D;”value” 这种格式的文本我们称之为标签属性</li>
<li><strong>src</strong>: src 是英文 source 的缩写, <strong>是 img 标签的必须属性</strong> , <strong>告诉浏览器需要插入的图片路径,</strong> 以便于浏览器到该路径下找到需要插入的图片<ul>
<li>网络图片：一个在线 URL 地址；<ul>
<li>网络图片的设置非常简单，给一个地址即可；</li>
</ul>
</li>
<li>本地图片：本地电脑上的图片，后续会和 html 一起部署到服务；</li>
</ul>
</li>
<li><strong>alt</strong>: <strong>规定图像的替代文本</strong><ul>
<li>alt 属性不是强制性的，有两个作用<ul>
<li>作用一：只有在 src 指定的路径下加载不到图片（错误的地址或者图片资源不存在），那么会显示 alt 指定的文本；</li>
<li>作用二：屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义；</li>
</ul>
</li>
</ul>
</li>
<li><strong>title</strong>: <strong>悬停文本</strong> (介绍这张图片, 只有在鼠标移动到图片上时才会显示)</li>
<li><strong>width</strong>: 设置图片显示的宽度,<strong>高度和宽度只设置一个,图片就能等比例拉伸</strong> , 不再使用,而是通过后面的 CSS 控制</li>
<li><strong>height</strong>: 设置图片显示的高度 , 不再使用,而是通过后面的 CSS 控制</li>
</ul>
</li>
<li><p>图像标签属性注意点：</p>
<ul>
<li>图像标签可以拥有多个属性，必须写在标签名的后面。</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均<strong>以 空格 分开</strong>。</li>
<li>属性采取键值对的格式，即 <strong>key&#x3D;”value”</strong> 的格式，属性 &#x3D;“属性值”。</li>
<li>img 标签添加的图片默认不是占一整行空间</li>
<li>如果想让图片等比拉伸, 只写高度或者宽度其中一个属性即可</li>
</ul>
</li>
</ul>
<h3 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h3><ul>
<li>在 HTML 标签中，a 标签用于定义<strong>超链接</strong>，<strong>作用是从一个页面链接到另一个页面</strong>。</li>
</ul>
<h4 id="超链接语法格式"><a href="#超链接语法格式" class="headerlink" title="超链接语法格式"></a>超链接语法格式</h4><ul>
<li>单词 anchor [ˈæŋkə(r)] 的缩写，意为：<strong>锚</strong>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部链接  外部链接要写 http:// --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内部链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 空链接,不跳转页面,会跳回到网页顶部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 空链接,不跳转页面,不会跳回到网页顶部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- img链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.taobao.com&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./taobao.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;淘宝&quot;</span> <span class="attr">title</span>=<span class="string">&quot;淘宝&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>a 标签的属性:</p>
<ul>
<li><strong>href</strong> (hypertext reference): <strong>指定跳转的目标地址</strong> , 也可以是一个本地地址</li>
<li><strong>target</strong> : 告诉浏览器是否保留原始界面,<ul>
<li><code>_blank</code>保留原页面,在新页面打开</li>
<li><code> _self</code>不保留原页面,在当前页面打开(默认)</li>
<li><code>_top</code> : 不保留原页面,在当前页面打开</li>
</ul>
</li>
<li><strong>title</strong> : <strong>悬停文本</strong>(介绍这个链接, 只有在鼠标移动到超链接上时才会显示)</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a9a635fcdaf44f91a38da5ae275a0126" alt="image-20220125143031583"></p>
<h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li>例如<code> &lt;a href=&quot;http://www.baidu.com&quot;&gt; 百度&lt;/a &gt;</code>。跳转到外部链接</li>
<li>例如 <code>&lt;a href=&quot;mailto:12345@qq.com&quot;&gt;发邮件到12345邮箱&lt;/a&gt;</code> . 给指定邮箱发邮件</li>
</ul>
<h4 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h4><ul>
<li>网站内部页面之间的相互链接. 直接在 href 属性中写内部页面的路径即可，例如 <code>&lt;a href=&quot;./index.html&quot;&gt;首页&lt;/a&gt;</code>。</li>
</ul>
<h4 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h4><ul>
<li>在很多网站我们会发现图片也是可以点击进行跳转的<ul>
<li>img 元素跟 a 元素一起使用，可以实现图片链接；</li>
</ul>
</li>
<li>实现思路：<ul>
<li>a 元素中不存放文字，而是存放一个 img 元素；</li>
<li>也就是 img 元素是 a 元素的内容；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xiaomi.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./xiaomi14.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;444&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="空链接"><a href="#空链接" class="headerlink" title="空链接"></a>空链接</h4><ul>
<li><p>本质是跳转到当前页面)</p>
</li>
<li><p>存在的意义: 在企业开发前期,其它界面都没有写出来，那么我们就不知道应该跳转到什么地方，所以就只能使用假链接来代替.当项目后期其它界面都已经完成时再将假链接替换为真链接</p>
</li>
<li><p>格式<code>&lt;a href=&quot;#&quot;&gt;江哥博客&lt;/a&gt; </code></p>
</li>
<li><p>格式<code>&lt;a href=&quot;javascript:;&quot;&gt;江哥博客&lt;/a&gt;</code></p>
</li>
<li><p>两者的区别:</p>
<ul>
<li><code>#</code> 会回到网页的顶部</li>
<li><code>javascript:;</code> 不会回到网页的顶部</li>
</ul>
</li>
</ul>
<h4 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h4><ul>
<li><p>用于跳转到当前页面的指定位置**(锚链接)**</p>
<ul>
<li>格式 <code>&lt;a href=&quot;#location&quot;&gt;跳转到指定位置&lt;/a&gt;  </code></li>
</ul>
</li>
<li><p>在页面的指定位置给任意标签添加一个 id 属性</p>
<ul>
<li>例如 <code>&lt;p id=&quot;location&quot;&gt;这个是目标&lt;/p&gt;  </code></li>
</ul>
</li>
<li><p>没有过渡动画</p>
</li>
<li><p>跳转到指定页面的指定位置**(锚链接)**</p>
</li>
<li><p>格式: <code>&lt;a href=&quot;01-锚点链接.html#location&quot;&gt;跳转到指定位置&lt;/a&gt;  </code></p>
</li>
<li><p>只需要在<code>01-锚点链接.html</code>页面添加一个 id 位置即可: <code>&lt;p id=&quot;location&quot;&gt;这个是目标&lt;/p&gt;  </code></p>
</li>
<li><p>下载(极力不推荐使用)</p>
</li>
<li><p>例如 <code>&lt;a href=&quot;girl.zip&quot;&gt;下载福利资源&lt;a/&gt;  </code></p>
</li>
</ul>
<h4 id="base-标签的使用"><a href="#base-标签的使用" class="headerlink" title="base 标签的使用"></a>base 标签的使用</h4><ul>
<li><p>base 标签和 a 标签结合使用</p>
<ul>
<li>如果每个 a 标签都想在新页面中打开,那么逐个设置 a 标签的 target 属性比较麻烦, 这时我们可以使用 base 和 a 标签结合的方式,一次性设置所有 a 标签都在新页面中打开</li>
<li>格式: <code>&lt;base target=&quot;_blank&quot; /&gt;</code></li>
</ul>
</li>
<li><p>注意事项:</p>
<ul>
<li><strong>base 必须嵌套在 head 标签里面</strong></li>
<li>如果标签上指定了 target , base 中也指定了 target ,那么会按照标签上指定的来执行</li>
</ul>
</li>
</ul>
<h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><h4 id="什么需要注释"><a href="#什么需要注释" class="headerlink" title="什么需要注释"></a>什么需要注释</h4><ul>
<li>程序员才懂的冷笑话:<ul>
<li>在我写这段代码的时候, 只有我和上帝知道这段代码是什么意思.</li>
<li>一段时间之后, 只有上帝知道是什么意思了.</li>
</ul>
</li>
<li>为什么会出现这样的情况呢?<ul>
<li>随着学习的深入, 你的一个程序不再是几行代码就可以搞定的了.</li>
<li>可能我们需要写出有上千行, 甚至上万行的程序.</li>
<li>某些代码完成某个功能后, 你写的时候思路很清晰, 但是过段时间会出现忘记为什么这样写的情况, 这很正常.</li>
</ul>
</li>
<li>和同时协同开发<ul>
<li>在实际工作中, 一个项目通常是多人协作完成的. 可能是几个或者十几个等等.</li>
<li>这个时候, 你可能需要使用别人写出的代码功能, 别人也可能使用你的代码功能.</li>
<li>p 如果你的代码自己都看不懂了, 更何况你的同事呢?</li>
</ul>
</li>
</ul>
<h4 id="什么是注释"><a href="#什么是注释" class="headerlink" title="什么是注释"></a>什么是注释</h4><ul>
<li><p>简单来说，注释就是一段代码说明</p>
</li>
<li><p><code>&lt;!-- 注释内容 --&gt;</code></p>
</li>
<li><p>注释是只给开发者看的，浏览器并不会把注释显示给用户看</p>
</li>
<li><p>如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p>
</li>
<li><p>HTML 中的注释以<code>&lt;!--</code>开头，以 <code>--&gt;</code>结束。</p>
</li>
<li><p>一句话: 注释标签里面的内容是给程序猿看的, 这个代码是不执行,不显示到页面中的.</p>
</li>
</ul>
<h4 id="注释的意义"><a href="#注释的意义" class="headerlink" title="注释的意义:"></a>注释的意义:</h4><ul>
<li><strong>添加注释是为了更好地解释代码的功能，便于相关开发人员理解和阅读代码，程序是不会执行注释内容的。</strong></li>
<li>帮助我们自己理清代码的思路, 方便以后进行查阅.</li>
<li>与别人合作开发时, 添加注释, 可以减少沟通成本.(同事之间分模块开发)</li>
<li>开发自己的框架时, 加入适当的注释, 方便别人使用和学习.(开源精神)</li>
<li>可以临时注释掉一段代码, 方便调试.</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/f7d00ca2c69c48ef9095b75c7fdb8d3e" alt="image-20220125143927369"></p>
<h3 id="HTML-实体标签"><a href="#HTML-实体标签" class="headerlink" title="HTML 实体标签"></a>HTML 实体标签</h3><ul>
<li><p>我们想在页面上输出<code>&lt;h1&gt;</code>这些字符，但是 HTML 认为这是一个标签, 所以如果需要输出一些特殊的字符需要通过字符实体来实现</p>
</li>
<li><p>HTML 实体是一段以连字号（<code>&amp;</code>）开头、以分号（<code>;</code>）结尾的文本（字符串）：</p>
</li>
<li><p>实体常常用于显示保留字符（这些字符会被解析为 HTML 代码）和不可见的字符（如“不换行空格”）；</p>
</li>
<li><p>你也可以用实体来代替其他难以用标准键盘键入的字符；</p>
<ul>
<li><code>&amp;lt;</code>是英语 less than 小于的意思, 可以在页面上输出一个小于符号<code>&quot;&lt;&quot;</code></li>
<li><code>&amp;gt;</code>是英语 greater than 大于的意思, 可以在页面上输出一个大于符号<code>&quot;&gt;&quot;</code></li>
<li>html 中对空格，缩进，换行不敏感，如果同时出现多个空格缩进或者执行，页面只会把它们当作一个空格来解析。<ul>
<li>所以想要在 html 中输出空格必须使用<code>&amp;nbsp;</code>来实现, 一个<code>&amp;nbsp;</code>就代表一个空格</li>
<li>html 对中文空格敏感, 也就是说可以显示中文空格, 但是不推荐这样使用</li>
<li><code>&amp;nbsp;</code>是英语 non-breaking spacing, 翻译为 不打断 &#x2F; 空格 的意思</li>
</ul>
</li>
<li>在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</li>
<li>常见的字符实体 :</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ecc185c5ab1c4ba381445989a5ce53ee" alt="1670210216510"></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>1 <span class="symbol">&amp;lt;</span> 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  1 &lt; 2  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="其他不常用标签"><a href="#其他不常用标签" class="headerlink" title="其他不常用标签"></a>其他不常用标签</h3><ul>
<li><p>由于 HTML 现在只负责语义而不负责样式.但是 HTML 一开始有一部分标签连样式也包揽了, 所以这部分标签都被废弃了</p>
</li>
<li><p><strong>b、u、i、s</strong></p>
</li>
<li><p>以上标签自己带有样式, 有浓厚的样式作用, 今后一般都只作为 CSS 钩子使用</p>
</li>
<li><p>原则: 不到万不得已,切记不要使用如上标签. 大家可以到 BAT 的网站查看源代码, 几乎看不到以上标签</p>
<ul>
<li>b(Bold)作用: <strong>将文本字体加粗</strong><ul>
<li>格式:<code>&lt;b&gt;将文本字体加粗&lt;/b&gt;</code></li>
</ul>
</li>
<li>u(Underlined)作用: <strong>为文本添加下划线</strong><ul>
<li>格式:<code>&lt;u&gt;为文本添加下划线&lt;/u&gt;</code></li>
</ul>
</li>
<li>i(Italic)作用: <strong>显示斜体文本效果,多用于字体图标</strong><ul>
<li>格式:<code>&lt;i&gt;显示斜体文本效果&lt;/i&gt;</code></li>
</ul>
</li>
<li>s(Strikethrough)作用: <strong>为文本添加删除线</strong><ul>
<li>格式:<code>&lt;s&gt;为文本添加删除线&lt;/s&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>为了弥补 b、u、i、s 标签的不足, W3C 又推出了一组新的标签, 这些标签在显示上看似和 b u i s 标签没什么区别, <strong>但是在语义上却有重大区别</strong></p>
<ul>
<li>strong 作用: <strong>着重内容</strong><ul>
<li>格式:<code>&lt;strong&gt;着重内容&lt;/strong&gt;</code></li>
</ul>
</li>
<li>ins(Inserted)作用: <strong>新插入的文本</strong><ul>
<li>格式:<code>&lt;ins&gt;新插入的文本&lt;ins&gt;</code></li>
</ul>
</li>
<li>em(Emphasized)作用:<strong>强调内容</strong><ul>
<li>格式:<code>&lt;em&gt;强调内容&lt;em&gt;</code></li>
</ul>
</li>
<li>del(Deleted)作用: <strong>已删除的文本</strong><ul>
<li>格式:<code>&lt;del&gt;已删除的文本&lt;/del&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="路径-1"><a href="#路径-1" class="headerlink" title="路径"></a>路径</h3><ul>
<li><p>页面中的图片会非常多， 通常我们会新建一个文件夹来存放这些图像文件（images），这时再查找图像，就需要采用“路径”的方式来指定图像文件的位置。</p>
</li>
<li><p>路径可以分为：</p>
<ul>
<li><strong>相对路径</strong></li>
<li><strong>绝对路径</strong></li>
</ul>
</li>
</ul>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><ul>
<li>相对路径：<strong>以引用文件所在位置为参考基础，而建立出的目录路径</strong>。</li>
<li>这里简单来说，图片相对于 HTML 页面的位置</li>
<li>相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。<ul>
<li>对于网页来说，不管什么操作系统（Windows、Mac、Linux），路径分隔符都是 <code>/</code>，而不是<code> \</code></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/3fb30386c0a5430499ce9262afd22e32" alt="image-20220125142827136"></p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><ul>
<li><p>绝对路径：<strong>是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径</strong>。</p>
</li>
<li><p>例如，<code>D:\web\img\logo.gif</code> 或 完整的网络地址 <code>http://www.itcast.cn/./images/logo.gif</code>。</p>
</li>
</ul>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><h3 id="表格的主要作用"><a href="#表格的主要作用" class="headerlink" title="表格的主要作用"></a>表格的主要作用</h3><ul>
<li><p><strong>表格主要用于显示、展示数据</strong>，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。</p>
</li>
<li><p>一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p>
</li>
<li><p>Pink 老师总结: <strong>表格不是用来布局页面的,而是用来展示数据的.</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/7ceb91198406493086cbc8d630781052" alt="image-20220125144508564"></p>
<h3 id="table-表格的基本语法"><a href="#table-表格的基本语法" class="headerlink" title="table 表格的基本语法"></a>table 表格的基本语法</h3><ul>
<li><p>table 是用于定义表格的标签。</p>
</li>
<li><p>tr 标签用于定义表格中的行，必须嵌套在 table 标签中。</p>
</li>
<li><p>td 用于定义表格中的单元格，必须嵌套在 tr 标签中。</p>
<ul>
<li>td 指表格数据（table data），即数据单元格的内容。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>苏摹<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>白璎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/c36269e8e97c4fd6985e79ecdcfc6e43" alt="image-20220125145322577"></p>
<h3 id="表格的属性"><a href="#表格的属性" class="headerlink" title="表格的属性"></a>表格的属性</h3><p><img src="https://s1.vika.cn/space/2023/02/19/55584cda94db49f08620bcb55ea0dce1" alt="image-20220125145601613"></p>
<ul>
<li><p><strong>border</strong>: 默认情况下表格的边框宽度为 0 看不到, 通过 border 属性给表格指定边框宽度</p>
</li>
<li><p><strong>width</strong>: 默认情况下表格的宽度是由内容自动计算出来的, 可以通过 width 属性指定表格的宽度,可以给 table 标签和 td 标签使用</p>
</li>
<li><p><strong>height</strong>: 默认情况下表格的高度是由内容自动计算出来的, 可以通过 height 属性指定表格的高度,可以给 table 标签和 td 标签使用</p>
<ul>
<li>如果给 td 标签设置 widht&#x2F;height 属性，会修改当前单元格的宽度和高度，不会影响整个表格的宽度和高度</li>
</ul>
</li>
<li><p><strong>cellspacing</strong>: 外边距. 默认情况下单元格之间有 2 个像素的间隙, 可以通过 cellpadding 指定表格之间的间隙,只能给 table 标签使用</p>
</li>
<li><p><strong>cellpadding</strong>: 内边距. 默认情况下单元格边缘距离内容有 1 个像素的内边距, 可以通过 cellpadding 属性指定单元格边缘和内容之间的内边距,只能给 table 标签使用</p>
</li>
<li><p><strong>align</strong>: 规定表格相对周围元素的水平对齐方式, 它的取值有<code>center、left、right</code>, 水平对齐可以给 table 标签和 tr 标签和 td 标签使用</p>
<ul>
<li>给 table 设置 align 属性, 是让表格在<code>浏览器</code>中 居左&#x2F;居右&#x2F;居中</li>
<li>给 tr 设置 align 属性, 是让当前行中<code>所有内容</code>居左&#x2F;居右&#x2F;居中</li>
<li>给 td 设置 align 属性,是让当前单元格中<code>所有内容</code>居左&#x2F;居右&#x2F;居中</li>
<li>该属性仅仅作为了解, 企业开发中用 css 代替, 因为 HTML 仅仅用于说明语义</li>
<li>如果 td 中设置了 align 属性, tr 中也设置了 align 属性, 那么单元格中的内容会按照 td 中设置的来对齐</li>
</ul>
</li>
<li><p><strong>valign</strong>: 规定表格相对周围元素的垂直对齐方式, 它的取值有 <code>top/middle/bottom</code> , 垂直对齐只能给 tr 标签和 td 标签使用</p>
<ul>
<li>给 table 设置 valign 属性, 无效</li>
<li>给 tr 设置 valign 属性, 是让当前行中<code>所有内容</code>居上&#x2F;居中&#x2F;居下</li>
<li>给 td 设置 valign 属性,是让当前单元格中<code>所有内容</code>居上&#x2F;居中&#x2F;居下</li>
<li>如果 td 中设置了 valign 属性, tr 中也设置了 valign 属性, 那么单元格中的内容会按照 td 中设置的来对齐</li>
</ul>
</li>
<li><p><strong>bgcolor</strong>:规定表格的背景颜色</p>
<ul>
<li>给 table 设置 bgcolor 属性, 是给整个表格设置背景颜色</li>
<li>给 tr 设置 bgcolor 属性, 是给当前行设置背景颜色</li>
<li>给 td 设置 bgcolor 属性, 是给当前单元格设置背景颜色</li>
<li>该属性仅仅作为了解, 企业开发中用 css 代替, 因为 HTML 仅仅用于说明语义</li>
</ul>
</li>
</ul>
<h3 id="th-表头单元格"><a href="#th-表头单元格" class="headerlink" title="th 表头单元格"></a>th 表头单元格</h3><ul>
<li><p>一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.</p>
</li>
<li><p>th 标签<strong>表示 HTML 表格的表头部分</strong>(table head 的缩写)</p>
</li>
</ul>
<h3 id="小说排行榜案例"><a href="#小说排行榜案例" class="headerlink" title="小说排行榜案例"></a>小说排行榜案例</h3><ul>
<li><p>案例分析:</p>
<ul>
<li><p>01 先制作表格的结构.</p>
<ul>
<li><p>1 第一行里面是 th 表头单元格</p>
</li>
<li><p>2 第二行开始里面是 td 普通单元格</p>
</li>
<li><p>3 单元格里面可以放任何元素,文字,链接,图片等都可以</p>
</li>
</ul>
</li>
<li><p>02 书写表格属性.</p>
<ul>
<li><p>1 用到宽度高度边框 cellpadding 和 cellspacing</p>
</li>
<li><p>2 表格浏览器中对齐 align</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4f3b0bb75f8e476faa233d9f3dba0744" alt="image-20220125145909556"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--...--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h3><ul>
<li>使用场景:因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 <strong>表格头部和表格主体两大部分.</strong></li>
<li>在表格标签中，分别用：<strong>thead 标签表示表格的头部区域、tbody 标签表示表格的主体区域.</strong> 这样可以更好的分清表格结构。<ul>
<li>01 <strong>thead 用于定义表格的头部</strong>。thead 内部必须拥有 tr 标签。 一般是位于第一行。</li>
<li>02 <strong>tbody 用于定义表格的主体，主要用于放数据本体 。</strong></li>
<li>03 <strong>tfoot 用于定义表格的底部</strong></li>
<li>04 以上标签都是放在 table 标签中。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>苏摹<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>白璎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>电视剧:镜双城<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p><img src="https://s1.vika.cn/space/2023/02/19/9a973f4864064b6e895eb07304da3056" alt="image-20220125150348729"></p>
<ul>
<li><p>特殊情况下,可以把多个单元格合并为一个单元格, 这里同学们会最简单的合并单元格即可.</p>
</li>
<li><p>01 合并单元格方式</p>
<ul>
<li>跨行合并：<strong>rowspan&#x3D;”合并单元格的个数”</strong></li>
<li>跨列合并：<strong>colspan&#x3D;”合并单元格的个数”</strong></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/3f847bb322614a0e815c872a59295a60" alt="image-20220125150450192"></p>
<ul>
<li><p>02 目标单元格</p>
<ul>
<li>跨行：最上侧单元格为目标单元格, 写合并代码</li>
<li>跨列：最左侧单元格为目标单元格, 写合并代码</li>
</ul>
</li>
<li><p>03 合并单元格的步骤</p>
<ul>
<li>01 先确定是跨行还是跨列合并。</li>
<li>02 找到目标单元格. 写上合并方式 &#x3D; 合并的单元格数量。比如：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>。</li>
<li>03 删除多余的单元格。</li>
</ul>
</li>
</ul>
<h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><ul>
<li>border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>collapse 单词是合并的意思</p>
</li>
<li><p><strong>border-collapse: collapse; 表示相邻边框合并在一起</strong></p>
</li>
</ul>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul>
<li><p>表格是用来显示数据的，那么<strong>列表就是给一堆数据添加列表语义，也就是告诉搜索引擎,告诉浏览器这一堆数据是一个整体,也可以用来布局。</strong></p>
</li>
<li><p>列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。</p>
</li>
<li><p>根据使用情景不同，列表可以分为三大类：<strong>无序列表、有序列表和自定义列表。</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/94ea74683d314442bdd3f43695aba643" alt="image-20220125150739397"></p>
<h3 id="ul-无序列表"><a href="#ul-无序列表" class="headerlink" title="ul 无序列表"></a>ul 无序列表</h3><ul>
<li>ul 标签表示 HTML 页面中项目的<strong>无序列表</strong>，一般会以项目符号呈现列表项，而列表项使用 li 标签定义。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e772a029d5c44212ac3e8a88d2e4a87f" alt="image-20220125151040931"></p>
<ul>
<li><strong>无序列表的各个列表项之间没有顺序级别之分，是并列的。</strong></li>
<li><strong>ul 标签中只能嵌套 li 标签</strong>，直接在 ul 标签中输入其他标签或者文字的做法是不被允许的。</li>
<li>li 标签相当于一个容器，可以容纳所有任意元素。</li>
<li>无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。</li>
<li>注意点:<ul>
<li><strong>浏览器会给无需列表自动添加先导符号, 一定要记住 ul 标签是用来给一堆数据添加列表语义的,而不是用来给他们添加小圆点的</strong></li>
<li>ul 标签和 li 标签是一个整体，是一个组合.所以一般情况下 ul 标签和 li 标签都是一起出现，都是结合在一起使用, 不会单个出现.也就是说不会单独使用一个 ul 标签或者单独使用一个 li 标签，</li>
<li>由于 ul 和 li 是一个整体, 所以 <strong>ul 里面不推荐包裹其它标签</strong>, 永远记住 ul 里面最好只写 li 标签</li>
<li>虽然 ul 中推荐只能写 li 标签, 但是 li 标签是一个容器标签, li 标签中可以添加任意标签, 甚至可以添加 ul 标签</li>
<li>其实 ul 还有一个 type 属性, 可以修改<code>先导符号</code>的样式, 取值有<code>disc、square、circle</code>几种**(不推荐使用)**</li>
</ul>
</li>
<li>ul 应用场景:<ul>
<li>导航条</li>
<li>商品列表等</li>
<li>新闻列表</li>
</ul>
</li>
</ul>
<h3 id="ol-有序列表"><a href="#ol-有序列表" class="headerlink" title="ol 有序列表"></a>ol 有序列表</h3><ul>
<li><p><strong>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。</strong></p>
</li>
<li><p>在 HTML 标签中，ol 标签用于定义<strong>有序列表</strong>，列表排序以数字来显示，并且使用 li 标签来定义列表项。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/69bfcb8dca9444d0ae6a18d091d5a996" alt="image-20220125151153327"></p>
<ul>
<li>ol 中只能嵌套 li，直接在 ol 标签中输入其他标签或者文字的做法是不被允许的。</li>
<li>li 标签相当于一个容器，可以容纳所有元素。</li>
<li>有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。</li>
<li>ol 应用场景:<ul>
<li>xxx 排行榜</li>
<li>其实 ol 应用场景并不多, 因为能用 ol 做的, 用 ul 都能做</li>
</ul>
</li>
</ul>
<h3 id="dl-定义列表"><a href="#dl-定义列表" class="headerlink" title="dl 定义列表"></a>dl 定义列表</h3><ul>
<li><strong>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/81e7c5ca48e6459187c4309021df4a3d" alt="image-20220125151233337"></p>
<ul>
<li><p>在 HTML 标签中，dl 标签用于定义<strong>描述列表（或定义列表）</strong>，该标签会与 dt（定义项目&#x2F;名字）和 dd（描述每一个项目&#x2F;名字）一起使用。</p>
</li>
<li><p>dl 里面只能包含 dt 和 dd。</p>
</li>
<li><p>dt 和 dd 个数没有限制，经常是一个 dt 对应多个 dd。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/168a6466ffe54484a5dd7fd191b50130" alt="image-20220125151402895"></p>
<ul>
<li><p>dl 应用场景:</p>
<ul>
<li>网站底部相关信息</li>
<li>但凡看到一堆内容都是用于描述某一个内容的时候就要想到 dl</li>
</ul>
</li>
<li><p>注意事项:</p>
<ul>
<li>dl 是一个<code>组标签</code>, 一定是一坨一坨的出现, 也就是说 dt 和 dd 标签不能单独存在, 必须包裹在 dl 里面</li>
<li>由于 dl 和 dt、dd 是一个整体, 所以 dl 里面不推荐包裹其它标签,<strong>推荐一个 dt 对应多个 dd,其他标签嵌套在 dd 中</strong></li>
<li>dd 和 dt 和 li 标签一样是容器标签, 里面可以添加任意标签</li>
<li>定义列表非常灵活, 可以给一个 dt 配置多个 dd, 但是最好不要出现多个 dt 对应一个 dd, dd 的语义是描述离它最近的一个 dt, 所以其它 dt 相当于没有描述, 而定义列表存在的意义就是既可以列出每一个条目又可以对每一个条目进行描述</li>
<li>定义列表非常灵活, 可以将多个 dt+dd 组合拆分为多个 dl</li>
</ul>
</li>
</ul>
<h3 id="列表总结"><a href="#列表总结" class="headerlink" title="列表总结"></a>列表总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/ac262e54eea949f5ba7f86d3e86121e9" alt="image-20220125151445426"></p>
<ul>
<li><p>学会什么时候用无序列表， 什么时候用自定义列表。</p>
</li>
<li><p>无序列表和自定义列表代码怎么写？</p>
</li>
<li><p>列表布局在学习完 CSS 后再来完成。</p>
</li>
</ul>
<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="表单标签的作用"><a href="#表单标签的作用" class="headerlink" title="表单标签的作用"></a>表单标签的作用</h3><ul>
<li><p>使用<strong>表单目的是为了收集用户信息</strong>。</p>
</li>
<li><p>在我们网页中，我们也需要跟用户进行交互，收集用户资料，此时就需要表单。</p>
</li>
</ul>
<h3 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h3><ul>
<li>在 HTML 中，<code>一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息 3 个部分构成</code>。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/78410ec2e2154804b3b02443adcc9657" alt="image-20220125151628382"></p>
<h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h3><ul>
<li><p><strong>表单域是一个包含表单元素的区域。</strong></p>
</li>
<li><p>在 HTML 标签中， <strong>form 标签用于定义表单域,用以实现用户信息的收集和传递</strong>。</p>
</li>
<li><p>form 会把它范围内的表单元素信息提交给服务器.</p>
</li>
<li><p>基础班来说,我们暂时不用表单域提交数据,只需要写上 form 标签即可. 就业班等学习服务器编程阶段会重新讲解.</p>
</li>
<li><p>这里只需要记住两点:</p>
<ul>
<li>在我们写表单元素之前,应该有个表单域把他们进行包含.</li>
<li>表单域是 form 标签.</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/95ce2cbaf96a44b5aeef77d09e15acdc" alt="image-20220125151733433"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/03d27b99f130411db2d285937371edfb" alt="image-20220125152240262"></p>
<ul>
<li>请求方式的对比 :</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a3c8fe64a09e4c7eb70b80d7cd5a0fbd" alt="1670252590678"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/048b3e4118b944cbadb0a3e294c382b3" alt="1670252606919"></p>
<h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><ul>
<li>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。</li>
</ul>
<h4 id="input-表单元素"><a href="#input-表单元素" class="headerlink" title="input 表单元素"></a>input 表单元素</h4><ul>
<li><p>在英文单词中，input 是输入的意思，而在表单元素中, <strong>input 标签用于收集用户信息</strong>。</p>
</li>
<li><p>在 input 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>input 标签为单标签</li>
</ul>
<h4 id="input-的-type-属性"><a href="#input-的-type-属性" class="headerlink" title="input 的 type 属性"></a>input 的 type 属性</h4><ul>
<li>通过 type 属性设置不同的属性值用来指定不同的控件类型 :</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e87a3fbb9ddd4bc98779d44d861791ef"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 文本框 type=&quot;text&quot; --&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 密码框 type=&quot;password&quot; --&gt;</span></span><br><span class="line">  密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单选框 type=&quot;radio&quot; name值相同单选框互斥 label包裹则文字与表单控件关联(写法一) checked=&quot;checked&quot;默认选中--&gt;</span></span><br><span class="line">  姓名:</span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 复选框 type=&quot;checkbox&quot; 虽原本已经互斥,但也要有相同name值 label包裹则文字与表单控件关联(写法二) checked=&quot;checked&quot;默认选中--&gt;</span></span><br><span class="line">  爱好:</span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;happy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;eat&quot;</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;happy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;eat&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;run&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;happy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 按钮 type=&quot;button|submit|reset&quot; 普通按钮|提交按钮|重置按钮 提交和重置要放在form中功能才生效--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 图片提交按钮 type=&quot;image&quot; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/24.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 文件域 type=&quot;file&quot; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="input-的其他属性"><a href="#input-的其他属性" class="headerlink" title="input 的其他属性"></a>input 的其他属性</h4><ul>
<li>除 type 属性外，input 标签还有其他很多属性，其常用属性如下：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/fc818f46fe034f56bece834c8a51e5ae" alt="image-20220125154606654"></p>
<ul>
<li><p>name 和 value 是每个表单元素都有的属性值,主要给后台人员使用.</p>
</li>
<li><p>name 表单元素的名字, 要求 <strong>单选按钮和复选框要有相同的 name 值.</strong></p>
</li>
<li><p>checked 属性主要针对于单选按钮和复选框, 主要作用一打开页面,就要可以<strong>默认选中</strong>某个表单元素.</p>
</li>
<li><p>maxlength 是用户可以在表单元素输入的<strong>最大字符数</strong>, 一般较少使用.</p>
</li>
</ul>
<h4 id="常用的几个功能"><a href="#常用的几个功能" class="headerlink" title="常用的几个功能"></a>常用的几个功能</h4><ul>
<li><ol>
<li>有些表单元素想刚打开页面就默认显示几个文字怎么做?</li>
</ol>
<ul>
<li>答: 可以给这些表单元素设置 value 属性&#x3D;“值”</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>页面中的表单元素很多，如何区别不同的表单元素?</li>
</ol>
<ul>
<li>答: name 属性：当前 input 表单的名字，后台可以通过这个 name 属性找到这个表单。页面中的表单很多，name 的主要作用就是用于区别不同的表单。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>如果页面一打开就让某个单选按钮或者复选框是选中状态?</li>
</ol>
<ul>
<li>答: checked 属性：表示默认选中状态。用于单选按钮和复选按钮。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性 别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>如何让 input 表单元素展示不同的形态? 比如单选按钮或者文本框</li>
</ol>
<ul>
<li>答: type 属性：type 属性可以让 input 表单元素设置不同的形态</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;“请输入用户名”&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h4><ul>
<li><p>label 标签为 input 元素<strong>定义标注（标签）</strong>。</p>
</li>
<li><p>label 标签用于绑定一个表单元素, 当点击 label 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>核心： <strong>label 标签的 for 属性值要与相关元素的 id 属性值相同。</strong></p>
</li>
<li><p>该功能的另一种写法:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单选框 type=&quot;radio&quot; name值相同单选框互斥 文字与表单控件关联 checked=&quot;checked&quot;默认选中--&gt;</span></span><br><span class="line">姓名:</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--给多选框添加绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;basketball&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;basketball&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="select-下拉框"><a href="#select-下拉框" class="headerlink" title="select 下拉框"></a>select 下拉框</h4><ul>
<li>使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用 select 标签控件定义<strong>下拉列表</strong>。</li>
<li><strong>select 中至少包含一对 option</strong> 。</li>
<li><strong>在 option 中定义 selected &#x3D;“ selected “ 时，当前项即为默认选中项。</strong></li>
<li>◼ select 常用属性<ul>
<li> <strong>multiple</strong>：可以多选</li>
<li> <strong>size</strong>：显示多少项</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- selet下拉框 selected=&quot;selected&quot;默认选中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;桂林&quot;</span>&gt;</span>桂林<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;柳州&quot;</span>&gt;</span>柳州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北海&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>北海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;贺州&quot;</span>&gt;</span>贺州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;梧州&quot;</span>&gt;</span>梧州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对下拉列表进行分组</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;北京&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>通州区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;广州&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>天河区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>越秀区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>黄浦区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="textarea-文本域"><a href="#textarea-文本域" class="headerlink" title="textarea 文本域"></a>textarea 文本域</h4><ul>
<li><p>使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 textarea 标签。</p>
</li>
<li><p>在表单元素中，textarea 标签是用于<strong>定义多行文本输入</strong>的控件。</p>
</li>
<li><p>使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。</p>
<ul>
<li><p>通过 textarea 标签可以轻松地创建多行文本输入框。</p>
</li>
<li><p>cols&#x3D;“每行中的字符数” ，rows&#x3D;“显示的行数”，我们在实际开发中不会使用，都是用 CSS 来改变大小。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">	文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>◼ 缩放的 CSS 设置</p>
<ul>
<li> 禁止缩放：resize: none;</li>
<li> 水平缩放：resize: horizontal;</li>
<li> 垂直缩放：resize: vertical;</li>
<li> 水平垂直缩放：resize: both;</li>
</ul>
</li>
<li><p>禁止文本域拖拽大小</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><ul>
<li>作用: 定义可点击按钮（多数情况下，用于通过配合 JavaScript 启动脚本）</li>
<li><code>&lt;input type=&quot;button&quot; value=&quot;我是按钮&quot;/&gt;</code></li>
</ul>
<h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><ul>
<li><p>作用:定义图像形式的提交按钮</p>
</li>
<li><p><code>&lt;input type=&quot;image&quot; src=&quot;./1.jpg&quot;/&gt;</code></p>
</li>
</ul>
<h4 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h4><ul>
<li><p>作用: 定义重置按钮。<strong>重置按钮会清除表单中的所有数据</strong></p>
</li>
<li><p><code>&lt;input type=&quot;reset&quot;/&gt;</code></p>
<p>注意事项:</p>
<ul>
<li>这个按钮不需要写 value 自动就有 “重置” 文字</li>
<li>reset 只对 form 表单中表单项有效果</li>
</ul>
</li>
</ul>
<h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><ul>
<li><p>作用:定义提交按钮。提交按钮会把表单数据发送到 <strong>action 属性指定的地址</strong></p>
</li>
<li><p><code>&lt;input type=&quot;submit&quot;/&gt;</code></p>
</li>
<li><p>注意事项:</p>
<ul>
<li>这个按钮不需要写 value 自动就有 “提交” 文字</li>
<li>要想通过 submit 提交数据到服务器, <strong>被提交的表单项都必须设置 name 属性</strong></li>
<li>默认明文传输 (GET) 不安全, 可以将 method 属性设置为 POST 改为非明文传输(学到 Ajax 再理解)</li>
</ul>
</li>
</ul>
<h4 id="datalist-列表标签"><a href="#datalist-列表标签" class="headerlink" title="datalist 列表标签"></a>datalist 列表标签</h4><ul>
<li>作用: 给输入框绑定待选项</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">datalist</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>待选项内容<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如何给输入框绑定待选列表<ul>
<li>搞一个输入框</li>
<li>搞一个 datalist 列表</li>
<li>给 datalist 列表标签添加一个 id</li>
<li>给输入框添加一个 list 属性,将 datalist 的 id 对应的值赋值给 list 属性即可</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">请输入你的车型: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;cars&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>奔驰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>奥迪<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>路虎<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>宾利<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="表单控件总结"><a href="#表单控件总结" class="headerlink" title="表单控件总结"></a>表单控件总结</h4><ul>
<li><p>01 表单元素我们学习了三大组: <strong>input 输入表单元素 select 下拉表单元素 textarea 文本域表单元素</strong>.</p>
</li>
<li><p>02 这三组表单元素都应该包含在 form 表单域里面,并且有 name 属性.</p>
</li>
<li><p>03 有三个名字非常相似的标签:</p>
<ul>
<li><ol>
<li>表单域 form 使用场景: 提交区域内表单元素给后台服务器</li>
</ol>
</li>
<li><ol start="2">
<li>文件域 file 是 input type 属性值, 使用场景: 上传文件</li>
</ol>
</li>
<li><ol start="3">
<li>文本域 textarea 使用场景: 可以输入多行文字, 比如 留言板 网站介绍等…</li>
</ol>
</li>
</ul>
</li>
<li><p>04 我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2023/02/19/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/101_HTML_CSS/10103_CSS/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><h3 id="CSS的起源"><a href="#CSS的起源" class="headerlink" title="CSS的起源"></a>CSS的起源</h3><ul>
<li>在 web 早期（1990-1993）, html 是一个很局限的语言。几乎完全由用于描述段落，超链接，列表和标题的结构化元素组成。</li>
<li>随着万维网的出现（用户交互体验的加强），对 html 的要求越来越大，人们迫切需要 html 增加新的元素，去完成一个特定的功能</li>
<li>迫于压力，html 开始出现<code>b u i s</code>等标签。但是 html 是一种描述结构的语言，也开始描述外在表现了。几年之后这种随便的做法暴露出严重的问题：<ul>
<li>由于 html 既写结构又写样式，导致页面缺乏结构性，降低了网页的可访问性。</li>
<li>页面维护越来越困难</li>
</ul>
</li>
<li>1994年，哈肯·维姆·莱和伯特·波斯合作设计CSS，在1996年的时候发布了CSS1；<ul>
<li>直到1997年初，W3C组织才专门成立了CSS的工作组，1998年5月发布了CSS2；</li>
<li>在2006~2009非常流行 “DIV+CSS”布局的方式来替代所有的html标签；</li>
<li>从CSS3开始，所有的CSS分成了不同的模块（modules），每一个“modules”都有于CSS2中额外增加的功能，以及向后兼容。</li>
<li>直到2011年6月7日，CSS 3 Color Module终于发布为W3C Recommendation。</li>
</ul>
</li>
<li>与 html 相比，<ul>
<li><strong>CSS 支持更丰富的文档外观，CSS 可以为任何元素的文本和背景设置颜色；</strong></li>
<li><strong>允许在任何元素外围设置边框；允许改变文本的大小，装饰（如下划线），间隔，甚至可以确定是否显示文本。</strong> </li>
<li>对HTML进行布局，按照某种结构显示（CSS进行布局 – 浮动、flex、grid）；</li>
</ul>
</li>
</ul>
<h3 id="HTML的局限性"><a href="#HTML的局限性" class="headerlink" title="HTML的局限性"></a>HTML的局限性</h3><ul>
<li>说起 HTML，这其实是个非常单纯的家伙，他只关注内容的语义。</li>
<li>比如 h1 表明这是一个大标题，p 表明这是一个段落，img 表明这儿有一个图片，a 表示此处有链接。</li>
<li>很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点：丑。</li>
<li>虽然 HTML 可以做简单的样式，但是带来的是无尽的臃肿和繁琐…</li>
</ul>
<h3 id="CSS-官方文档"><a href="#CSS-官方文档" class="headerlink" title="CSS 官方文档"></a>CSS 官方文档</h3><ul>
<li>CSS官方文档地址 : <a href="https://www.w3.org/TR/?tag=css">https://www.w3.org/TR/?tag=css</a></li>
<li>CSS推荐文档地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E5%85%B3%E9%94%AE%E5%AD%97%E7%B4%A2%E5%BC%95">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E5%85%B3%E9%94%AE%E5%AD%97%E7%B4%A2%E5%BC%95</a></li>
<li>由于浏览器版本、CSS版本等问题，查询某些CSS是否可用：<ul>
<li>可以到 <a href="https://caniuse.com/">https://caniuse.com/</a> 查询 CSS 属性的可用性；</li>
<li>这个网站在后续的 browserlist 工具中我们再详细说明；</li>
</ul>
</li>
</ul>
<h3 id="认识-CSS"><a href="#认识-CSS" class="headerlink" title="认识 CSS"></a>认识 CSS</h3><ul>
<li><strong>CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.</strong><ul>
<li>有时我们也会称之为 <strong>CSS 样式表</strong> 或 <strong>级联样式表</strong>。</li>
</ul>
</li>
<li><strong>CSS 也是一种语言吗</strong><ul>
<li>MDN解释：CSS 也不是真正的编程语言，甚至不是标记语言。它是一门样式表语言；</li>
<li>维基百科解释：是一种计算机语言，但是不算是一种编程语言；</li>
</ul>
</li>
<li><strong>CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。</strong></li>
<li>CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：<strong>CSS 可以美化 HTML , 让 HTML 更漂亮，让页面布局更简单</strong>。</li>
<li><strong>CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离。</strong></li>
</ul>
<h3 id="CSS语法规范"><a href="#CSS语法规范" class="headerlink" title="CSS语法规范"></a>CSS语法规范</h3><ul>
<li><p>使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则。</p>
</li>
<li><p>CSS 规则由两个主要的部分构成：<strong>选择器以及一条或多条声明</strong>。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/6883619fb908415e87d13dfc319b2c0e" alt="image-20220125202012284"></p>
<ul>
<li><p>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式</p>
</li>
<li><p><strong>属性和属性值以 “键值对” 的形式出现</strong></p>
</li>
<li><p><strong>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</strong></p>
</li>
<li><p>属性和属性值之间用英文<code>:</code>分开</p>
</li>
<li><p>多个 “键值对” 之间用英文<code>;</code>进行区分</p>
</li>
<li><p>所有的样式，都包含在 style 标签内，表示是样式表。style 一般写到 head 结束标签的上方。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&gt;</span><br><span class="line">        <span class="selector-tag">h4</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p>注意点:</p>
<ul>
<li>style 标签必须写在 head 标签的开始标签和结束标签之间(也就是必须和 title 标签是兄弟关系)</li>
<li>style 标签中的 type 属性其实可以不用写, 默认就是 <code>type=&quot;text/css&quot;</code></li>
<li>设置样式时必须按照固定的格式来设置. <code>key: value;</code>其中<code>:</code>不能省略, 分号大多数情况下也不能省略(当有多个属性时, 最后一个可以省略)</li>
</ul>
<h3 id="CSS的注释"><a href="#CSS的注释" class="headerlink" title="CSS的注释"></a>CSS的注释</h3><ul>
<li>CSS 代码也可以添加注释来方便阅读：<ul>
<li>CSS 的注释和HTML的注释是不一样的；</li>
<li><code>/* 我是被注释的内容 */</code></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;<span class="comment">/*字体颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h3><h4 id="样式书写风格"><a href="#样式书写风格" class="headerlink" title="样式书写风格"></a>样式书写风格</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125; <span class="comment">/*不推荐*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="样式大小写"><a href="#样式大小写" class="headerlink" title="样式大小写"></a>样式大小写</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐  强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。 */</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">H3</span> &#123;</span><br><span class="line">	<span class="attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	属性值前面，冒号后面，保留一个空格</span></span><br><span class="line"><span class="comment">	选择器（标签）和大括号中间保留一个空格  */</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h2><ul>
<li><p>按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类：</p>
<ul>
<li><p><strong>1) 行内样式表（行内式）</strong></p>
</li>
<li><p><strong>2) 内部样式表（嵌入式）</strong></p>
</li>
<li><p><strong>3) 外部样式表（链接式）</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><ul>
<li><strong>内部样式表（内嵌样式表）是写到 html 页面内部,是将所有的 CSS 代码抽取出来，单独放到一个 style 标签中。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>style 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的 head 标签中</p>
</li>
<li><p>通过此种方式，可以方便控制当前整个页面中的元素样式设置</p>
</li>
<li><p>代码结构清晰，但是并没有实现结构与样式完全分离</p>
</li>
<li><p>使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式</p>
</li>
</ul>
<h3 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h3><ul>
<li><strong>行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。</strong>适合于修改简单样式.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span>青春不常在，抓紧谈恋爱<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>style 其实就是标签的属性</p>
</li>
<li><p>在双引号中间，写法要符合 CSS 规范</p>
</li>
<li><p>可以控制当前的标签设置样式</p>
</li>
<li><p>由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用</p>
</li>
<li><p>使用行内样式表设定 CSS，通常也被称为行内式引入</p>
</li>
</ul>
<h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><ul>
<li><p>实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:<strong>样式单独写到 CSS 文件中，之后把 CSS 文件引入到 HTML 页面中使用.</strong></p>
</li>
<li><p>引入外部样式表分为两步：</p>
<ul>
<li><ol>
<li>新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。</li>
</ol>
</li>
<li><ol start="2">
<li>在 HTML 页面的 head 标签中，使用 link  标签引入这个文件。</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/9764c74d24b5480e89c84c179b41b522" alt="image-20220125210838193"></p>
<ul>
<li>使用外部样式表设定 CSS，通常也被称为外链式或链接式引入，这种方式是开发中常用的方式</li>
</ul>
<h3 id="import方法导入"><a href="#import方法导入" class="headerlink" title="@import方法导入"></a>@import方法导入</h3><ul>
<li>可以在style元素或者CSS文件中使用@import导入其他的CSS文件</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(./other.css)</span><br><span class="line">.red&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS引入方式总结"><a href="#CSS引入方式总结" class="headerlink" title="CSS引入方式总结"></a>CSS引入方式总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/75e6b871af964fefa298919918be9c37" alt="image-20220125210933047"></p>
<h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><h3 id="选择器的作用"><a href="#选择器的作用" class="headerlink" title="选择器的作用"></a>选择器的作用</h3><ul>
<li><strong>选择器(选择符)就是根据不同需求把不同的标签选出来,这就是选择器的作用。</strong> 简单来说，就是<strong>选择标签用的</strong>。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4273760a2a564e8a9db9e3bce3a0d76e" alt="image-20220125202658584"></p>
<ul>
<li><p>以上 CSS 做了两件事：</p>
<ul>
<li><ol>
<li>找到所有的 h1 标签。 选择器（选对人）。</li>
</ol>
</li>
<li><ol start="2">
<li>设置这些标签的样式，比如颜色为红色（做对事）。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h3><ul>
<li><p>选择器分为 <strong>基础选择器 和 复合选择器</strong> 两个大类，我们这里先讲解一下基础选择器。</p>
</li>
<li><p>基础选择器是由单个选择器组成的</p>
</li>
<li><p>基础选择器又包括：<strong>标签选择器、类选择器、id 选择器 和 通配符选择器</strong></p>
</li>
</ul>
<h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><ul>
<li><strong>标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     <span class="selector-tag">div</span>&#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">background-color</span>: red;</span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>作用:</p>
<p>  ​    标签选择器可以<strong>把某一类标签全部选择出来</strong>，比如所有的 div 标签和所有的 span 标签。</p>
</li>
<li><p>优点:</p>
<p>  ​    <strong>能快速为页面中同类型的标签统一设置样式。</strong></p>
</li>
<li><p>缺点:</p>
<p>  ​    <strong>不能设计差异化样式，只能选择全部的当前标签。</strong></p>
</li>
</ul>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul>
<li><p>如果想要<strong>差异化选择不同的标签</strong>，单独选一个或者某几个标签，可以使用类选择器.</p>
</li>
<li><p>例如，将所有拥有 red 类的 HTML 元素均为红色:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.red</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>结构需要用 class 属性来调用, class : 类的意思:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">‘red’</span>&gt;</span> 变红色 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点<code>.</code>显示。</p>
</li>
<li><p>类选择器使用<code>.</code>（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。</p>
</li>
<li><p>可以理解为给这个标签起了一个名字，来表示。</p>
</li>
<li><p>长名称或词组可以使用中横线来为选择器命名。</p>
</li>
<li><p><strong>不要使用纯数字、中文等命名，尽量使用英文字母来表示。</strong></p>
</li>
<li><p><strong>命名要有意义，尽量使别人一眼就知道这个类名的目的。</strong></p>
</li>
<li><p>命名规范：见附件（ Web 前端开发规范手册.doc）</p>
</li>
<li><p>记忆口诀：样式点定义，结构类调用。一个或多个，开发最常用。</p>
</li>
</ul>
<h3 id="类选择器案例"><a href="#类选择器案例" class="headerlink" title="类选择器案例"></a>类选择器案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/6585a07439054265bb043bca4722afd0" alt="image-20220125203907045"></p>
<ul>
<li><p>通过这个案例练习两个地方:</p>
<ul>
<li>类选择器的使用</li>
<li>div 就是一个盒子,用来装网页内容的.</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="类选择器-多类名"><a href="#类选择器-多类名" class="headerlink" title="类选择器-多类名"></a>类选择器-多类名</h3><ul>
<li><p>我们<strong>可以给一个标签指定多个类名，从而达到更多的选择目的</strong>。 这些类名都可以选出这个标签.</p>
</li>
<li><p>简单理解就是一个标签有多个名字.</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/af2c2e1a432f4a0bae19df7614ec5643" alt="image-20220125204109291"></p>
<ul>
<li>01 多类名使用方式<ul>
<li>在标签 class 属性中写 多个类名</li>
<li>多个类名中间必须用空格分开</li>
<li>这个标签就可以分别具有这些类名的样式</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>02 多类名开发中使用场景</p>
<ul>
<li><ol>
<li>可以把一些标签元素相同的样式(共同的部分)放到一个类里面.</li>
</ol>
</li>
<li><ol start="2">
<li>这些标签都可以调用这个公共的类,然后再调用自己独有的类.</li>
</ol>
</li>
<li><ol start="3">
<li>从而节省 CSS 代码,统一修改也非常方便.</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pink fontWeight font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20&quot;</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 pink&quot;</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14&quot;</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>各个类名中间用空格隔开</p>
</li>
<li><p>简单理解：<strong>就是给某个标签添加了多个类</strong>，或者这个标签有多个名字</p>
</li>
<li><p>这个标签就可以分别具有这些类名的样式</p>
</li>
<li><p>从而节省 CSS 代码,统一修改也非常方便.</p>
</li>
<li><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的</p>
</li>
</ul>
<h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul>
<li><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p>
</li>
<li><p>HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以 <code>#</code> 来定义。</p>
</li>
<li><p>注意：同一个 id 名在每个 HTML 文档中只能出现一次。口诀: 样式 <code># </code>定义,结构 id 调用</p>
<ul>
<li>不要用标签名作为 id 值</li>
</ul>
</li>
<li><p>例如，将 id 为 nav 元素中的内容设置为红色。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="id-和-类选择器的区别"><a href="#id-和-类选择器的区别" class="headerlink" title="id 和 类选择器的区别"></a>id 和 类选择器的区别</h3><ul>
<li>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。</li>
<li>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。</li>
<li>id 选择器和类选择器最大的不同在于使用次数上。</li>
<li>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，<strong>id 选择器经常和 JavaScript 搭配使用</strong>。</li>
<li>在企业开发中到底用 id 选择器还是用 class 选择器?<ul>
<li>id 一般情况下是给 js 使用的, 所以除非特殊情况, 否则不要使用 id 去设置样式</li>
<li>在企业开发中一个开发人员对类的使用可以看出这个开发人员的技术水平</li>
<li>一般情况下在企业开发中要注重冗余代码的抽取, 可以将一些公共的代码抽取到一个类选择器中, 然后让标签和这个类选择器绑定即可</li>
</ul>
</li>
</ul>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul>
<li>在 CSS 中，通配符选择器使用 <code>* </code>定义，它<strong>表示选取页面中所有元素（标签）</strong>。</li>
<li>通配符选择器自动给所有的元素使用样式</li>
<li>特殊情况才使用，一般用来给所有元素作一些通用性的设置<ul>
<li> 比如内边距、外边距;</li>
<li> 比如重置一些内容;</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效率比较低，尽量不要使用;</li>
</ul>
<h3 id="基础选择器总结"><a href="#基础选择器总结" class="headerlink" title="基础选择器总结"></a>基础选择器总结</h3><ul>
<li><p>每个基础选择器都有使用场景，都需要掌握 </p>
</li>
<li><p>如果是修改样式， 类选择器是使用最多的</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/d262684a5f20492dbfee0d213311f623" alt="image-20220125205031588"></p>
<h2 id="CSS-复合选择器"><a href="#CSS-复合选择器" class="headerlink" title="CSS 复合选择器"></a>CSS 复合选择器</h2><h3 id="什么是复合选择器"><a href="#什么是复合选择器" class="headerlink" title="什么是复合选择器"></a>什么是复合选择器</h3><ul>
<li><p>在 CSS 中，可以根据选择器的类型把选择器分为 基础选择器 和 复合选择器，复合选择器 是建立在 基础选择器 之上，对基本选择器进行组合形成的。</p>
</li>
<li><p>复合选择器可以更准确、更高效的选择目标元素（标签）</p>
</li>
<li><p><strong>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</strong></p>
</li>
<li><p>常用的复合选择器包括：<strong>后代选择器、子选择器、并集选择器、伪类选择器等等</strong></p>
</li>
</ul>
<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><ul>
<li>后代选择器又称为包含选择器，<strong>可以选择父元素里面的后代元素</strong>。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123; <span class="attribute">color</span>:red &#125; <span class="comment">/* 选择 ul 里面所有的 li标签元素 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>元素1 和 元素2 中间用空格隔开</p>
</li>
<li><p>元素1 是父级，元素2 是子级，最终选择的是元素2</p>
</li>
<li><p>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</p>
</li>
<li><p>元素1 和 元素2 可以是任意基础选择器</p>
</li>
</ul>
<h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><ul>
<li>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。简单理解就是选亲儿子元素.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>:red &#125; <span class="comment">/* 表示选择div元素里面的所有直接后代(子元素) p元素。 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>元素1 和 元素2 中间用 大于号 隔开</li>
<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>
<li>元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</li>
<li>注意点:<ul>
<li>子元素选择器只会查找儿子, 不会查找其他被嵌套的标签</li>
<li>子元素选择器之间需要用<code>&gt;</code>符号连接, 并且不能有空格</li>
<li>子元素选择器不仅仅可以使用标签名称, 还可以使用其它选择器</li>
<li>子元素选择器可以通过<code>&gt;</code>符号一直延续下去</li>
</ul>
</li>
</ul>
<h3 id="后代和子元素选择器区别"><a href="#后代和子元素选择器区别" class="headerlink" title="后代和子元素选择器区别"></a>后代和子元素选择器区别</h3><ul>
<li><ol>
<li>后代选择器和子元素选择器之间的区别:</li>
</ol>
<ul>
<li>后代选择器使用<strong>空格</strong>作为连接符号</li>
<li>子元素选择器使用<code>&gt;</code>作为连接符号</li>
<li>后代选择器会选中指定标签中, 所有的特定后代标签, 也就是会选中儿子&#x2F;孙子…, 只要是被放到指定标签中的特定标签都会被选中</li>
<li>子元素选择器只会选中指定标签中, 所有的特定的直接标签, 也就是只会选中特定的儿子标签</li>
</ul>
</li>
<li><ol start="2">
<li>后代选择器和子元素选择器之间的共同点:</li>
</ol>
<ul>
<li>后代选择器和子元素选择器都可以使用 <strong>标签名称 &#x2F; id 名称 &#x2F; class 名称</strong> 来作为选择器</li>
<li>后代选择器和子元素选择器都可以通过各自的连接符号一直延续下去</li>
<li>选择器1&gt;选择器2&gt;选择器3&gt;选择器4{ }</li>
</ul>
</li>
<li><ol start="3">
<li>在企业开发中如何选择:</li>
</ol>
<ul>
<li>如果想选中指定标签中的所有特定的标签, 那么就使用后代选择器</li>
<li>如果只想选中指定标签中的所有特定儿子标签, 那么就使用子元素选择器</li>
</ul>
</li>
</ul>
<h3 id="选择器案例"><a href="#选择器案例" class="headerlink" title="选择器案例"></a>选择器案例</h3><ul>
<li><ol>
<li>请将下面的链接文字修改为红色。</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>请将下面的大肘子文字修改为红色。</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>大肘子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>猪头<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>猪尾巴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hot</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><ul>
<li>什么是交集选择器?</li>
<li>作用: <strong>给所有选择器选中的标签中, 相交的那部分标签设置属性</strong><ul>
<li>在开发中通常为了精准的选择某一个元素;</li>
</ul>
</li>
<li>格式:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择器1选择器2&#123;</span></span><br><span class="line"><span class="comment">    属性: 值;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>选择器和选择器之间没有任何的连接符号</li>
<li>选择器可以使用 <strong>标签名称 &#x2F; id名称 &#x2F; class名称</strong></li>
<li>交集选择器仅仅作为了解, 企业开发中用的并不多</li>
</ul>
</li>
</ul>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><ul>
<li>并集选择器可以选择多组标签, 同时为他们定义相同的样式。</li>
<li>在开发中通常为了给多个元素设置相同的样式;</li>
<li>并集选择器是各选择器通过英文逗号<code>,</code>连接而成，任何形式的选择器都可以作为并集选择器的一部分。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">div</span> &#123; <span class="attribute">color</span>: red; &#125; <span class="comment">/* 选择 ul 和 div标签元素 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>元素1 和 元素2 中间用逗号隔开</p>
</li>
<li><p>逗号可以理解为和的意思</p>
</li>
<li><p><strong>并集选择器通常用于集体声明</strong></p>
</li>
</ul>
<h3 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h3><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><ul>
<li>什么是相邻兄弟选择器 CSS2</li>
<li><strong>作用: 给指定标签后面紧跟的那个标签设置属性</strong></li>
<li>格式:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择器1+选择器2&#123;</span></span><br><span class="line"><span class="comment">    属性:值;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="selector-tag">h1</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>相邻兄弟选择器必须通过<code>+</code>连接</li>
<li><strong>相邻兄弟选择器只能选中紧跟其后的那个标签, 不能选中被隔开的标签</strong></li>
</ul>
</li>
</ul>
<h4 id="通用兄弟-CSS3"><a href="#通用兄弟-CSS3" class="headerlink" title="通用兄弟(CSS3)"></a>通用兄弟(CSS3)</h4><ul>
<li>什么是通用兄弟选择器 </li>
<li><strong>作用: 给指定选择器后面的所有选择器选中的所有标签设置属性</strong> , 前面的不会选中</li>
<li>格式:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择器1~选择器2&#123;</span></span><br><span class="line"><span class="comment">    属性:值;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="selector-tag">h1</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>通用兄弟选择器必须用<code>~</code>连接</li>
<li><strong>通用兄弟选择器选中的是指定选择器后面某个选择器选中的所有标签, 无论有没有被隔开都可以选中</strong></li>
</ul>
</li>
</ul>
<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><h4 id="伪类选择器的作用"><a href="#伪类选择器的作用" class="headerlink" title="伪类选择器的作用"></a>伪类选择器的作用</h4><ul>
<li><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>
</li>
<li><p>伪类选择器书写最大的特点是用冒号<code>:</code>表示，比如 <code>:hover</code> 、 <code>:first-child</code> 。</p>
</li>
<li><p>因为伪类选择器很多，比如有链接伪类、结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。</p>
</li>
</ul>
<h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 未访问过的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 已经访问过的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标经过的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 点击未松开时的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>链接伪类选择器注意事项:</p>
<ul>
<li>为了确保生效，请按照 LVHA 的循顺序声明 <strong>:link－:visited－:hover－:active</strong>。</li>
</ul>
</li>
<li><p>记忆法：love hate 或者 lv 包包 hao 。</p>
<ul>
<li><strong>因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</strong></li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><ol>
<li>a 标签的伪类选择器可以单独出现也可以一起出现</li>
</ol>
</li>
<li><ol start="2">
<li>a 标签的伪类选择器如果一起出现，那么有严格的顺序要求, 编写的顺序必须要遵守爱恨原则 love hate</li>
</ol>
</li>
<li><ol start="3">
<li>如果默认状态的样式和被访问过状态的样式一样，那么可以缩写</li>
</ol>
</li>
<li><ol start="4">
<li>在企业开发中编写 a 标签的伪类选择器最好写在标签选择器的后面</li>
</ol>
</li>
<li><ol start="5">
<li>在企业开发中和 a 标签盒子相关的属性都写在标签选择器中(显示模式&#x2F;宽度&#x2F;高度&#x2F;padding&#x2F;margin)</li>
</ol>
</li>
<li><ol start="6">
<li>在企业开发中和 a 标签文字&#x2F;背景相关的都写在伪类选择器中</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* a 是标签选择器 所有的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red; <span class="comment">/* 鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>除了a元素，:hover、:active也能用在其他元素上</li>
<li>直接给a元素设置样式，相当于给a元素的所有动态伪类都设置了同一个样式<ul>
<li>相当于a:link、a:visited、a:hover、a:active、a:focus 的 color 都是 gray</li>
</ul>
</li>
</ul>
<h4 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title=":focus伪类选择器"></a>:focus伪类选择器</h4><ul>
<li><p><strong>:focus 伪类选择器用于选取获得焦点的表单元素。</strong></p>
</li>
<li><p>焦点就是光标，一般情况 input 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>因为链接a元素可以被键盘的Tab键选中聚焦，所以:focus也适用于a元素</li>
</ul>
<h4 id="其他伪类选择器"><a href="#其他伪类选择器" class="headerlink" title="其他伪类选择器"></a>其他伪类选择器</h4><ul>
<li><p>目标伪类</p>
<ul>
<li><code>:target</code></li>
</ul>
</li>
<li><p>语言伪类</p>
<ul>
<li><code>:lang( )</code></li>
</ul>
</li>
<li><p>元素状态伪类</p>
<ul>
<li><code>:enabled、:disabled、:checked</code></li>
</ul>
</li>
<li><p>结构伪类</p>
<ul>
<li><code>:nth-child( )、:nth-last-child( )、:nth-of-type( )、:nth-last-of-type( )</code></li>
<li><code>:first-child、:last-child、:first-of-type、:last-of-type</code></li>
<li><code>:root、:only-child、:only-of-type、:empty</code></li>
</ul>
</li>
<li><p>否定伪类</p>
<ul>
<li><code>:not()</code></li>
</ul>
</li>
</ul>
<h3 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/8cf650672ab24fdd9cd4b157c165f71d" alt="image-20220125221910599"></p>
<h3 id="序选择器-CSS3"><a href="#序选择器-CSS3" class="headerlink" title="序选择器(CSS3)"></a>序选择器(CSS3)</h3><ul>
<li><p>序选择器是 CSS3 中新增的选择器最具代表性的就是序选择器</p>
</li>
<li><p>什么是序选择器?</p>
<ul>
<li><strong>作用: 选中指定的任意标签然后设置属性</strong></li>
</ul>
</li>
<li><p>格式:</p>
<ul>
<li><ol>
<li>同级别的第几个</li>
</ol>
<ul>
<li><strong>:first-child</strong> 选中同级别中的第一个标签</li>
<li><strong>:last-child</strong> 选中同级别中的最后一个标签</li>
<li><strong>:nth-child(n)</strong> 选中同级别中的第 n 个标签</li>
<li><strong>:nth-last-child(n)</strong> 选中同级别中的倒数第n个标签</li>
<li><strong>:only-child</strong> 选中父元素中唯一的标签</li>
<li>注意点: 不区分类型</li>
</ul>
</li>
<li><ol start="2">
<li>同级别同类型的第几个</li>
</ol>
<ul>
<li><strong>:first-of-type</strong> 选中同级别中同类型的第一个标签</li>
<li><strong>:last-of-type</strong>  选中同级别中同类型的最后一个标签</li>
<li><strong>:nth-of-type(n)</strong> 选中同级别中同类型的第 n 个标签</li>
<li><strong>:nth-last-of-type(n)</strong>  选中同级别中同类型的倒数第 n 个标签</li>
<li><strong>:only-of-type</strong> 选中父元素中唯一类型的某个标签</li>
</ul>
</li>
<li><ol start="3">
<li>其它用法</li>
</ol>
<ul>
<li><strong>:nth-child(odd)</strong> 选中同级别中的所有奇数</li>
<li><strong>:nth-child(even)</strong> 选中同级别中的所有偶数</li>
<li><strong>:nth-child(xn+y)</strong><ul>
<li>x 和 y 是用户自定义的, 而 <strong>n 是一个计数器, 从 0 开始递增</strong></li>
</ul>
</li>
<li><strong>:nth-of-type(odd)</strong> 选中同级别中同类型的所有奇数</li>
<li><strong>:nth-of-type(even)</strong> 选中同级别中同类型的所有偶数</li>
<li><strong>:nth-of-type(xn+y)</strong><ul>
<li>x 和 y 是用户自定义的, 而 n 是一个计数器, 从 0 开始递增</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="CSS字体样式"><a href="#CSS字体样式" class="headerlink" title="CSS字体样式"></a>CSS字体样式</h2><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><h4 id="字体的使用"><a href="#字体的使用" class="headerlink" title="字体的使用"></a>字体的使用</h4><ul>
<li><p>CSS Fonts (字体)属性<strong>用于定义字体系列、大小、粗细、和文字样式（如斜体）</strong>。</p>
</li>
<li><p>CSS <strong>使用 font-family 属性定义文本的字体系列</strong>。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">font-family</span>: Arial,<span class="string">&quot;Microsoft Yahei&quot;</span>, <span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>各种字体之间必须使用英文状态下的逗号隔开</li>
<li>一般情况下,如果<strong>有空格隔开的多个单词组成的字体,需要加引号.</strong></li>
<li><strong>尽量使用系统默认自带的字体</strong>，保证在任何用户的浏览器中都能正确显示,如果设置的字体不存在, 那么系统会使用默认的字体来显示</li>
<li>最常见的几个字体：<code>body &#123;font-family: &#39;Microsoft YaHei&#39;,tahoma,arial,&#39;Hiragino Sans GB&#39;; &#125;</code><ul>
<li>会先使用第一种字体,没有就往后继续使用,依次下去,最后还没有,就使用电脑默认字体</li>
</ul>
</li>
<li>默认一般使用<strong>宋体</strong></li>
<li>如果想给中文和英文分别单独设置字体, 怎么办?<ul>
<li>但凡是中文字体, 里面都包含了英文</li>
<li>但凡是英文字体, 里面都没有包含中文</li>
<li>也就是说中文字体可以处理英文, 而英文字体不能处理中文</li>
<li>注意点: 如果想给界面中的英文单独设置字体, 那么英文的字体必须写在中文的前面</li>
</ul>
</li>
</ul>
<h4 id="字体原理"><a href="#字体原理" class="headerlink" title="字体原理"></a>字体原理</h4><ul>
<li>首先, 我们需要通过一些渠道获取到希望使用的字体(不是开发来做的事情):<ul>
<li>对于某些收费的字体, 我们需要获取到对应的授权;</li>
<li>对于某些公司定制的字体, 需要设计人员来设计;</li>
<li>对于某些免费的字体, 我们需要获取到对应的字体文件;</li>
</ul>
</li>
<li>其次, 在我们的CSS代码当中使用该字体(重要):<ul>
<li>具体的过程看后面的操作流程;</li>
</ul>
</li>
<li>最后, 在部署静态资源时, 将HTML&#x2F;CSS&#x2F;JavaScript&#x2F;Font一起部署在静态服务器中;</li>
<li>用户的角度:<ul>
<li>浏览器一个网页时, 因为代码中有引入字体文件, 字体文件会被一起下载下来;</li>
<li>浏览器会根据使用的字体在下载的字体文件中查找、解析、使用对应的字体；</li>
<li>在浏览器中使用对应的字体显示内容；</li>
</ul>
</li>
</ul>
<h4 id="自定义字体的使用"><a href="#自定义字体的使用" class="headerlink" title="自定义字体的使用"></a>自定义字体的使用</h4><ul>
<li>使用过程如下：<ul>
<li>1.将字体放到对应的目录中</li>
<li>2.通过@font-face来引入字体, 并且设置格式</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span> : <span class="string">&quot;fontName&quot;</span>;</span><br><span class="line">	<span class="attribute">src</span> : <span class="built_in">url</span>(<span class="string">./font/font.ttf</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>:<span class="string">&quot;fontName&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字体的兼容性"><a href="#字体的兼容性" class="headerlink" title="字体的兼容性"></a>字体的兼容性</h4><ul>
<li><p>我们刚才使用的字体文件是 .ttf, 它是TrueType字体.</p>
<ul>
<li>在开发中某些浏览器可能不支持该字体, 所以为了浏览器的兼容性问题, 我们需要有对应其他格式的字体;</li>
</ul>
</li>
<li><p>TrueType字体：拓展名是 .ttf</p>
<ul>
<li>OpenType&#x2F;TrueType字体：拓展名是 .ttf、.otf，建立在TrueType字体之上</li>
<li>Embedded OpenType字体：拓展名是 .eot， OpenType字体的压缩版</li>
<li>SVG字体：拓展名是 .svg、 .svgz</li>
<li>WOFF表示Web Open Font Format web开放字体：拓展名是 .woff，建立在TrueType字体之上</li>
</ul>
</li>
<li><p>这里我们提供一个网站来生产对应的字体文件:</p>
<ul>
<li><a href="https://font.qqe2.com/#">https://font.qqe2.com/#</a> 暂时可用</li>
</ul>
</li>
<li><p>可以如下格式编写:</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/1533317f2bde4c219aacdaa74016c4e6"></p>
<ul>
<li>src 用于指定字体资源</li>
<li>url 指定资源的路径</li>
<li>format 用于帮助浏览器快速识别字体的格式;</li>
</ul>
<h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><ul>
<li><strong>CSS 使用 font-size 属性定义字体大小</strong>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>px（像素）大小是我们网页的最常用的单位<ul>
<li>也可以使用em单位(不推荐)：1em代表100%，2em代表200%，0.5em代表50%</li>
<li>也可以使用百分比 : 基于父元素的font-size计算，比如50%表示等于父元素font-size的一半</li>
</ul>
</li>
<li><strong>谷歌浏览器默认的文字大小为16px</strong></li>
<li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小</li>
<li>可以给 body 指定整个页面文字的大小</li>
</ul>
<h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><ul>
<li><strong>CSS 使用 font-weight 属性设置文本字体的粗细。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/ea4814fd72db4a82bd94dd73798e4689" alt="image-20220125205429621"></p>
<ul>
<li>学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗</li>
<li>实际开发时，我们更喜欢用数字表示粗细</li>
<li>strong、b、h1~h6 等标签的 font-weight 默认就是 bold</li>
</ul>
<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><ul>
<li><strong>CSS 使用 font-style 属性设置文本的风格。</strong></li>
<li>font-style用于设置文字的常规、斜体显示<ul>
<li><strong>normal</strong>：常规显示</li>
<li><strong>italic</strong>(斜体)：用字体的斜体显示(通常会有专门的字体)</li>
<li><strong>oblique</strong>(倾斜)：文本倾斜显示(仅仅是让文字倾斜)</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">font-style</span>: oblique;<span class="comment">/* 文本倾斜显示(仅仅是让文字倾斜) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意： <strong>平时我们很少给文字加斜体，反而要给斜体标签（em，i）改为不倾斜字体。</strong></li>
<li>em、i、cite、address、var、dfn 等元素的 font-style 默认就是 italic</li>
</ul>
<h3 id="字体复合样式"><a href="#字体复合样式" class="headerlink" title="字体复合样式"></a>字体复合样式</h3><ul>
<li>字体属性可以把以上文字样式综合来写, 这样可以更节约代码:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">font</span>: font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</p>
</li>
<li><p><strong>不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</strong></p>
</li>
</ul>
<h3 id="字体属性总结"><a href="#字体属性总结" class="headerlink" title="字体属性总结"></a>字体属性总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/9bc21cf0804c4b9d99d1f05cbb75c907" alt="image-20220125205741387"></p>
<h2 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h2><ul>
<li>CSS Text（文本）属性可定义文本的外观，比如<strong>文本的颜色、对齐文本、装饰文本、文本缩进、行间距等</strong>。</li>
</ul>
<h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><ul>
<li>color 属性用来设置文本内容的前景色,包括文字、装饰线、边框、外轮廓等的颜色</li>
<li>开发中最常用的是十六进制.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/7ac8fa75039e417090c4e747f7518e90" alt="image-20220125205909394"></p>
<ul>
<li>颜色关键字（color keywords）：<ul>
<li>是不区分大小写的标识符，它表示一个具体的颜色；</li>
<li>可以表示哪些颜色呢？</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/color_value#%E8%AF%AD%E6%B3%95">https://developer.mozilla.org/zh-CN/docs/Web/CSS/color_value#%E8%AF%AD%E6%B3%95</a></li>
</ul>
</li>
<li>RGB颜色：<ul>
<li>RGB是一种色彩空间，通过R（red，红色）、G（green，绿色）、B（blue，蓝色）三原色来组成了不同的颜色；<ul>
<li>也就是通过调整这三个颜色不同的比例，可以组合成其他的颜色；</li>
</ul>
</li>
<li>RGB 各个原色的取值范围是 0~255；</li>
</ul>
</li>
<li>RGB颜色可以通过以#为前缀的十六进制字符和函数（rgb()、rgba()）标记表示。</li>
<li>方式一：十六进制符号：#RRGGBB[AA]<ul>
<li>R（红）、G（绿）、B （蓝）和A （alpha）是十六进制字符（0–9、A–F）；A是可选的。</li>
<li>比如，#ff0000等价于#ff0000ff；</li>
</ul>
</li>
<li>方式二：十六进制符号：#RGB[A]<ul>
<li>R（红）、G（绿）、B （蓝）和A （alpha）是十六进制字符（0–9、A–F）；</li>
<li>三位数符号（#RGB）是六位数形式（#RRGGBB）的减缩版。<ul>
<li>比如，#f09和#ff0099表示同一颜色。</li>
</ul>
</li>
<li>四位数符号（#RGBA）是八位数形式（#RRGGBBAA）的减缩版。<ul>
<li>比如，#0f38和#00ff3388表示相同颜色。</li>
</ul>
</li>
</ul>
</li>
<li>方式三：函数符： <code>rgb[a](R, G, B[, A])</code><ul>
<li>R（红）、G（绿）、B （蓝）可以是<code>&lt;number&gt;</code>（数字），或者<code>&lt;percentage&gt;</code>（百分比），255相当于100%。</li>
<li>A（alpha）可以是0到1之间的数字，或者百分比，数字1相当于100%（完全不透明）。</li>
</ul>
</li>
</ul>
<h3 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h3><ul>
<li><strong>text-align 属性用于设置元素内文本内容的水平对齐方式。</strong><ul>
<li>MDN: 定义行内内容（例如文字）如何相对它的块父元素对齐;</li>
</ul>
</li>
<li>格式: <code>text-align: center;</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: justify;<span class="comment">/* 两端对齐 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/b1e2def77c0743d6b38e9eafc7e5aad9" alt="image-20220125205958447"></p>
<h3 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h3><ul>
<li><strong>text-decoration 属性规定添加到文本的修饰。</strong>可以<strong>给文本添加下划线、删除线、上划线</strong>等。</li>
<li>格式: <code>text-decoration: underline;</code></li>
<li>a 元素有下划线的本质是默认被添加了 text-decoration 属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>：underline；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/3042013e2d794df9a43be9435614a4bf" alt="image-20220125210057599"></p>
<ul>
<li>pink 老师总结: 重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.</li>
</ul>
<h3 id="文字大小写转换"><a href="#文字大小写转换" class="headerlink" title="文字大小写转换"></a>文字大小写转换</h3><ul>
<li>text-transform用于设置文字的大小写转换<ul>
<li>Transform单词是使变形&#x2F;变换(形变);</li>
</ul>
</li>
<li>text-transform有几个常见的值:<ul>
<li><strong>capitalize</strong>：(使…首字母大写, 资本化的意思)将每个单词的首字符变为大写</li>
<li><strong>uppercase</strong>：(大写字母)将每个单词的所有字符变为大写</li>
<li><strong>lowercase</strong>：(小写字母)将每个单词的所有字符变为小写</li>
<li><strong>none</strong>：没有任何影响</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: capitalize;<span class="comment">/*将每个单词的首字符变为大写*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实际开发中用JavaScript代码转化的更多</li>
</ul>
<h3 id="字间距-词间距"><a href="#字间距-词间距" class="headerlink" title="字间距&#x2F;词间距"></a>字间距&#x2F;词间距</h3><ul>
<li>letter-spacing、word-spacing 分别用于设置字母、单词之间的间距<ul>
<li>默认是0，可以设置为负数</li>
</ul>
</li>
</ul>
<h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><ul>
<li><strong>text-indent 属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">text-indent</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">text-indent</span>: <span class="number">2em</span>;<span class="comment">/* 缩进2个文字 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。</strong></li>
</ul>
<h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><ul>
<li><strong>line-height 属性用于设置行间的距离（行高）</strong>。可以<strong>控制文字行与行之间的距离</strong>.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/70d8de93651c4cdab8b1198f84437b69" alt="image-20220125210328680"></p>
<ul>
<li>行高的严格定义是：<strong>两行文字基线（baseline）之间的间距</strong></li>
<li>基线（baseline）：<strong>与小写字母x最底部对齐的线</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/13e5b1819c0146f28765bbd7a6c3badd" alt="1670214806164"></p>
<ul>
<li><p>小技巧:单行文字垂直居中</p>
<ul>
<li><p>CSS 没有给我们提供文字垂直居中的代码. 这里我们可以使用一个小技巧来实现.</p>
<ul>
<li>解决方案: <strong>让文字的行高等于盒子的高度 就可以让文字在当前盒子内垂直居中</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>单行文字垂直居中的原理:</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/b5450b07f0904098bb143ca99e0a5f70" alt="image-20220125223145108"></p>
<ul>
<li>简单理解: <strong>行高的上空隙和下空隙把文字挤到中间了</strong>. 是如果行高小于盒子高度,文字会偏上,如果行高大于盒子高度,则文字偏下</li>
</ul>
<h3 id="文本属性总结"><a href="#文本属性总结" class="headerlink" title="文本属性总结"></a>文本属性总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/ceb5806584534a9786a2cfb930a67a13" alt="image-20220125210407938"></p>
<h2 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h2><h3 id="什么是元素显示模式"><a href="#什么是元素显示模式" class="headerlink" title="什么是元素显示模式"></a>什么是元素显示模式</h3><ul>
<li><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p>
</li>
<li><p>元素显示模式就是元素（标签）以什么方式进行显示，比如 div 自己占一行，比如一行可以放多个 span。</p>
</li>
<li><p>HTML 元素一般分为<strong>块元素和行内元素</strong>两种类型。</p>
</li>
</ul>
<h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul>
<li><p>常见的块元素有<code>h1~h6、p、div、ul、ol、li</code>等，其中 div 标签是最典型的块元素。</p>
</li>
<li><p>块级元素的特点：</p>
<ul>
<li><p><strong>1) 比较霸道，自己独占一行。</strong></p>
</li>
<li><p><strong>2) 高度，宽度、外边距以及内边距都可以控制。</strong></p>
</li>
<li><p><strong>3) 宽度默认是容器（父级宽度）的100%。</strong></p>
</li>
<li><p><strong>4) 是一个容器及盒子，里面可以放行内或者块级元素。</strong></p>
</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li><strong>文字类的元素内部不能使用块级元素</strong></li>
<li><strong>p 标签主要用于存放文字，因此 p 里面不能放块级元素，特别是不能放 div 标签,否则浏览器会解析出错</strong></li>
<li><strong>同理， h1~h6 等都是文字类块级标签，里面也不能放其他块级元素</strong></li>
</ul>
</li>
</ul>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul>
<li><p>常见的行内元素有 <code>a、strong、b、em、i、del、s、ins、u、span</code>等，其中 span 标签是最典型的行内元素。</p>
</li>
<li><p>有的地方也将行内元素称为内联元素。</p>
</li>
<li><p>行内元素的特点：</p>
<ul>
<li><strong>01 相邻行内元素在一行上显示，一行可以显示多个。</strong></li>
<li><strong>02 高、宽直接设置是无效的。</strong></li>
<li><strong>03 默认宽度就是它本身内容的宽度。</strong></li>
<li><strong>04 行内元素只能容纳文本或其他行内元素。</strong></li>
<li><strong>05 行内元素设置宽高样式不生效</strong></li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li><p><strong>链接里面不能再放链接</strong></p>
</li>
<li><p><strong>特殊情况链接 a 里面可以放块级元素，但是给 a 转换一下块级模式最安全</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul>
<li>在行内元素中有几个特殊的标签 —— <code>img 、input 、td</code>，它们同时具有块元素和行内元素的特点。也称它们为行内块元素。</li>
<li>行内块元素的特点：<ul>
<li><strong>01 和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。</strong></li>
<li><strong>02  默认宽度就是它本身内容的宽度（行内元素特点）。</strong></li>
<li><strong>03 高度，行高、外边距以及内边距都可以控制（块级元素特点）。</strong></li>
</ul>
</li>
</ul>
<h3 id="元素显示模式总结"><a href="#元素显示模式总结" class="headerlink" title="元素显示模式总结"></a>元素显示模式总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/e7060f332ad846c7a29e875bce32c6ce" alt="image-20220125222358332"></p>
<ul>
<li><strong>学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。</strong></li>
</ul>
<h3 id="元素显示模式的转换"><a href="#元素显示模式的转换" class="headerlink" title="元素显示模式的转换"></a>元素显示模式的转换</h3><ul>
<li>特殊情况下，我们需要元素模式的转换，简单理解: 一个模式的元素需要另外一种模式的特性</li>
<li>比如想要增加链接 a 的触发范围。</li>
<li>转换为块元素：<strong>display:block;</strong><ul>
<li>独占父元素的一行</li>
<li>可以随意设置宽高</li>
<li>高度默认由内容决定</li>
</ul>
</li>
<li>转换为行内元素：<strong>display:inline;</strong><ul>
<li>跟其他行内级元素在同一行显示;</li>
<li>不可以随意设置宽高;</li>
<li>宽高都由内容决定;</li>
</ul>
</li>
<li>转换为行内块：<strong>display: inline-block;</strong><ul>
<li>跟其他行内级元素在同一行显示</li>
<li>可以随意设置宽高</li>
<li>可以这样理解<ul>
<li>对外来说，它是一个行内级元素</li>
<li>对内来说，它是一个块级元素</li>
</ul>
</li>
</ul>
</li>
<li>隐藏元素 : <strong>display:none;</strong></li>
</ul>
<h3 id="元素显示模式案例"><a href="#元素显示模式案例" class="headerlink" title="元素显示模式案例"></a>元素显示模式案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/e5bece087cc6466dad3d9c1630235ce1"></p>
<ul>
<li><p>案例的核心思路分为两步:</p>
<ul>
<li><ol>
<li>把链接 a 转换为 行块级元素, 这样链接就可以设置宽度和高度,并在同一行显示</li>
</ol>
</li>
<li><ol start="2">
<li>鼠标经过a 给 链接设置背景颜色</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>体育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>汽车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>好用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><ul>
<li><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p>
</li>
<li><p>本质：让一个元素在页面中隐藏或者显示出来。</p>
</li>
</ul>
<h3 id="display-显示隐藏"><a href="#display-显示隐藏" class="headerlink" title="display 显示隐藏"></a>display 显示隐藏</h3><ul>
<li><p><strong>display 属性用于设置一个元素应如何显示。</strong></p>
<ul>
<li><strong>display: none ；</strong>隐藏对象, 元素不显示出来, 并且也不占据位置, 不占据任何空间(和不存在一样);</li>
<li><strong>display：block ；</strong>除了转换为块级元素之外，同时还有显示元素的意思</li>
</ul>
</li>
<li><p><strong>display 隐藏元素后，不再占有原来的位置。</strong></p>
</li>
<li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。</p>
</li>
</ul>
<h3 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h3><ul>
<li><p>visibility 属性用于指定一个元素应可见还是隐藏。</p>
<ul>
<li><strong>visibility：visible ;</strong> 默认为 visible, 元素是可见的;</li>
<li><strong>visibility：hidden;</strong> 元素隐藏,虽然元素不可见, 但是会占据元素应该占据的空间;</li>
</ul>
</li>
<li><p><strong>visibility 隐藏元素后，继续占有原来的位置。</strong></p>
</li>
<li><p>如果隐藏元素想要原来位置， 就用 visibility：hidden</p>
</li>
<li><p>如果隐藏元素不想要原来位置， 就用 display：none (用处更多 重点）</p>
</li>
</ul>
<h3 id="overflow-溢出显示隐藏"><a href="#overflow-溢出显示隐藏" class="headerlink" title="overflow 溢出显示隐藏"></a>overflow 溢出显示隐藏</h3><ul>
<li><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p>
<ul>
<li><strong>visible</strong>：溢出的内容照样可见</li>
<li><strong>hidden</strong>：溢出的内容直接裁剪</li>
<li><strong>scroll</strong>：溢出的内容被裁剪，但可以通过滚动机制查看<ul>
<li>会一直显示滚动条区域，滚动条区域占用的空间属于 width、height</li>
</ul>
</li>
<li><strong>auto</strong>：自动根据内容是否溢出来决定是否提供滚动机制</li>
</ul>
</li>
<li><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</p>
</li>
<li><p>但是如果有定位的盒子， 请慎用 overflow:hidden; 因为它会隐藏多余的部分。</p>
</li>
</ul>
<h3 id="设置透明度"><a href="#设置透明度" class="headerlink" title="设置透明度"></a>设置透明度</h3><ul>
<li>rgba设置颜色, 将a的值设置为 0<ul>
<li>rgba的a设置的是alpha值, 可以设置透明度, 不影响子元素;</li>
</ul>
</li>
<li>opacity设置透明度, 设置为 0<ul>
<li>设置整个元素的透明度, 会影响所有的子元素;</li>
</ul>
</li>
</ul>
<h3 id="显示与隐藏总结"><a href="#显示与隐藏总结" class="headerlink" title="显示与隐藏总结"></a>显示与隐藏总结</h3><ul>
<li><ol>
<li>display 显示隐藏元素 但是不保留位置</li>
</ol>
</li>
<li><ol start="2">
<li>visibility 显示隐藏元素 但是保留原来的位置</li>
</ol>
</li>
<li><ol start="3">
<li>overflow 溢出显示隐藏 但是只是对于溢出的部分处理</li>
</ol>
</li>
</ul>
<h3 id="显示与隐藏案例"><a href="#显示与隐藏案例" class="headerlink" title="显示与隐藏案例"></a>显示与隐藏案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/58b6b0a76a0043b599919e8abbde7791" alt="image-20220126195011220"></p>
<ul>
<li>练习元素的显示与隐藏</li>
<li>练习元素的定位</li>
<li>核心原理： 原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。</li>
<li>遮罩的盒子不占有位置， 就需要用绝对定位 和 display 配合使用。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">123</span>, <span class="number">124</span>, <span class="number">214</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS背景样式"><a href="#CSS背景样式" class="headerlink" title="CSS背景样式"></a>CSS背景样式</h2><ul>
<li><p>通过 CSS 背景属性，可以给页面元素添加背景样式。</p>
</li>
<li><p>背景属性可以设置<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</strong>等。</p>
</li>
</ul>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><ul>
<li><p><strong>background-color 属性定义了元素的背景颜色。</strong></p>
</li>
<li><p><strong>一般情况下元素背景颜色默认值是 transparent（透明）</strong>，我们也可以手动指定背景颜色为透明色。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:transparent; <span class="comment">/*指定背景颜色为透明色*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:red; <span class="comment">/*指定背景颜色为红色*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><ul>
<li><strong>background-image 属性描述了元素的背景图像。</strong>实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片</li>
<li>优点是非常便于控制位置. (精灵图也是一种运用场景)</li>
<li>如果设置了多张图片<ul>
<li>设置的第一张图片将显示在最上面，其他图片按顺序层叠在下面</li>
<li>如果设置了背景图片后，元素没有具体的宽高，背景图片是不会显示出来的</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">././images/24.jpg</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/534670977adf43e59c5417bf715839f0" alt="image-20220125223535480"></p>
<ul>
<li>注意：背景图片后面记得加 url ， 同时里面的路径不要加引号。</li>
</ul>
<h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><ul>
<li>如果需要在 HTML 页面上<strong>对背景图像进行平铺，可以使用 background-repeat 属性。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/*背景不平铺*/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/5ac4ac722cc341a797312c317d3c02ed" alt="image-20220125223635207"></p>
<h3 id="背景定位"><a href="#背景定位" class="headerlink" title="背景定位"></a>背景定位</h3><ul>
<li><strong>利用 background-position 属性可以改变图片在背景中的位置。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: x y;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/8666973bb3de4142852e10b7b7c333e1" alt="image-20220125224011071"></p>
<ul>
<li><p>01 参数是方位名词</p>
<ul>
<li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left top 和 top left 效果一致</li>
<li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li>
</ul>
</li>
<li><p>02 参数是精确单位</p>
<ul>
<li>如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</li>
<li>如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</li>
</ul>
</li>
<li><p>03 参数是混合单位</p>
<ul>
<li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</li>
</ul>
</li>
</ul>
<h3 id="背景固定"><a href="#背景固定" class="headerlink" title="背景固定"></a>背景固定</h3><ul>
<li><p><strong>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</strong></p>
</li>
<li><p>background-attachment 后期可以制作视差滚动的效果。</p>
</li>
<li><p>可以设置以下 3 个值:</p>
<ul>
<li><strong>scroll</strong>：此关键属性值表示背景相对于元素本身固定， 而不是随着它的内容滚动</li>
<li><strong>local</strong>：此关键属性值表示背景相对于元素的内容固定。如果一个元素拥有滚动机制，背景将会随着元素的内容滚动.</li>
<li><strong>fixed</strong>：此关键属性值表示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : scroll; <span class="comment">/*背景和内容一起滚动*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : fixed; <span class="comment">/*背景固定位置不动,不会随着内容而动*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景复合写法"><a href="#背景复合写法" class="headerlink" title="背景复合写法"></a>背景复合写法</h3><ul>
<li><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性 background 中。从而节约代码量.这是实际开发中，我们更提倡的写法。</p>
</li>
<li><p>当使用简写属性时，没有特定的书写顺序,一般习惯约定顺序为：</p>
<ul>
<li><strong>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y fixed top ;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 背景颜色 图片 平铺 是否滚动 图片位置 */</span></span><br><span class="line"><span class="attribute">background</span>:<span class="number">#ccc</span> <span class="built_in">url</span>(<span class="string">./images/24.jpg</span>) no-repeat fixed center top;</span><br></pre></td></tr></table></figure>

<h3 id="背景颜色透明-CSS3"><a href="#背景颜色透明-CSS3" class="headerlink" title="背景颜色透明(CSS3)"></a>背景颜色透明(CSS3)</h3><ul>
<li>CSS3 为我们提供了背景颜色半透明的效果</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>最后一个参数是 alpha 透明度，取值范围在 0~1之间</p>
</li>
<li><p>我们习惯把 0.3 的 0 省略掉，写为 <code>background: rgba(0, 0, 0, .3);</code></p>
</li>
<li><p>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</p>
</li>
<li><p>CSS3 新增属性，是 IE9+ 版本浏览器才支持的</p>
</li>
<li><p>但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</p>
</li>
</ul>
<h3 id="背景样式总结"><a href="#背景样式总结" class="headerlink" title="背景样式总结"></a>背景样式总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/30154c75b34f4630beac57830686fc40" alt="image-20220125225147543"></p>
<ul>
<li><strong>背景图片:实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</strong></li>
</ul>
<h3 id="背景样式综合案例"><a href="#背景样式综合案例" class="headerlink" title="背景样式综合案例"></a>背景样式综合案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/49c547a81bf044d7a0d272d2c7e8cc51" alt="image-20220125225248774"></p>
<ul>
<li><p>练习价值:</p>
<ol>
<li><p>链接属于行内元素, 但是此时需要宽度高度,因此需要模式转换.</p>
</li>
<li><p>里面文字需要水平居中和垂直居中. 因此需要单行文字垂直居中的代码.</p>
</li>
<li><p>链接里面需要设置背景图片.因此需要用到背景的相关属性设置.</p>
</li>
<li><p>鼠标经过变化背景图片,因此需要用到伪类选择器.</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">./images/bg.png</span>) no-repeat left top;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/bgc.png</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="背景尺寸大小"><a href="#背景尺寸大小" class="headerlink" title="背景尺寸大小"></a>背景尺寸大小</h3><ul>
<li>background-size 属性指定背景图片大小。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: length|percentage|cover|contain;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>length</th>
<th>设置背景图片高度和宽度。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为 <strong>auto</strong>(自动)</th>
</tr>
</thead>
<tbody><tr>
<td>percentage</td>
<td>将计算相对于背景定位区域的百分比。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为”auto(自动)”</td>
</tr>
<tr>
<td>cover</td>
<td>此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。</td>
</tr>
<tr>
<td>contain</td>
<td>此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: <span class="number">600px</span> <span class="number">400px</span>; <span class="comment">/* 像素值设置背景图片高度和宽度。只给出一个值，第二个是设置为 auto (自动) */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span>  <span class="number">90%</span>; <span class="comment">/* 百分比  只给出一个值，第二个是设置为 auto (自动) */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: cover; <span class="comment">/* cover 拉伸图片到能覆盖整个容器的最小大小*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: contain; <span class="comment">/* contain 拉伸图片到达容器边缘就停止拉伸*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景图片定位区域-CSS3"><a href="#背景图片定位区域-CSS3" class="headerlink" title="背景图片定位区域(CSS3)"></a>背景图片定位区域(CSS3)</h3><ul>
<li><strong>background-origin 属性规定 background-position 属性相对于什么位置来定位</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: padding-box|border-box|content-box;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">padding-box</td>
<td align="left">背景图像填充框的相对位置</td>
</tr>
<tr>
<td align="left">border-box</td>
<td align="left">背景图像边界框的相对位置</td>
</tr>
<tr>
<td align="left">content-box</td>
<td align="left">背景图像的相对位置的内容框</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: padding-box; <span class="comment">/*背景图片从padding开始,背景图片会填充padding的区域 默认值*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-origin</span>: border-box; <span class="comment">/*背景图片从边框开始,会填充border区域,但是border依旧处于最上层显示*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-origin</span>: content-box; <span class="comment">/*背景图片从内容区域开始,填充内容区域*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景绘制区域-CSS3"><a href="#背景绘制区域-CSS3" class="headerlink" title="背景绘制区域(CSS3)"></a>背景绘制区域(CSS3)</h3><ul>
<li><strong>background-clip 属性规定背景的绘制区域。</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-box</td>
<td align="left">背景被裁剪到边框盒。</td>
</tr>
<tr>
<td align="left">padding-box</td>
<td align="left">背景被裁剪到内边距框。</td>
</tr>
<tr>
<td align="left">content-box</td>
<td align="left">背景被裁剪到内容框。</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-clip</span>: border-box;  <span class="comment">/* 背景被裁剪到边框盒。 从边框开始填充,填充到边框的下方 (测试时能填充右边框和下角边框的底层,但无法填充到左边框和上边框的底层)*/</span></span><br><span class="line">      </span><br><span class="line"><span class="attribute">background-clip</span>: padding-box;  <span class="comment">/* 背景被裁剪到内边距框。从 padding 区域开始填充满整个 padding 区域,不会填充到边框区域 */</span></span><br><span class="line">      </span><br><span class="line"><span class="attribute">background-clip</span>: content-box;  <span class="comment">/* 背景被裁剪到内容框。从 content 内容区域开始填充满整个 content 内容区域,不会填充到 padding 区域*/</span></span><br></pre></td></tr></table></figure>

<h3 id="多重背景图片"><a href="#多重背景图片" class="headerlink" title="多重背景图片"></a>多重背景图片</h3><h4 id="多重背景图片-1"><a href="#多重背景图片-1" class="headerlink" title="多重背景图片"></a>多重背景图片</h4><ul>
<li><strong>CSS 允许您通过 background-image 属性为一个元素添加多幅背景图像。</strong> </li>
<li>不同的背景图像的各个属性之间用逗号隔开，并且图像会彼此堆叠，其中的第一幅图像最靠近观看者。</li>
<li>下面的例子有两幅背景图像，第一幅图像是花朵（与底部和右侧对齐），第二幅图像是纸张背景（与左上角对齐）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">flower.gif</span>), <span class="built_in">url</span>(<span class="string">paper.gif</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: right bottom, left top;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat, repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多重背景的简写"><a href="#多重背景的简写" class="headerlink" title="多重背景的简写"></a>多重背景的简写</h4><ul>
<li><p>多重背景图像可以使用单独的背景属性（如上所述）或 <code>background</code> 简写属性来指定。</p>
</li>
<li><p>下面的例子使用 <code>background</code> 简写属性（结果与上例相同）：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">flower.gif</span>) right bottom no-repeat, <span class="built_in">url</span>(<span class="string">paper.gif</span>) left top repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多重背景的尺寸"><a href="#多重背景的尺寸" class="headerlink" title="多重背景的尺寸"></a>多重背景的尺寸</h4><ul>
<li>在处理多重背景时，<code>background-size</code> 属性还可以接受多个设置背景尺寸的值（使用逗号分隔的列表）。</li>
<li>下面的例子指定了三幅背景图像，每幅图像有不同的 background-size 值：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">tree.png</span>) left top no-repeat, <span class="built_in">url</span>(<span class="string">flower.gif</span>) right bottom no-repeat, </span><br><span class="line">  	<span class="built_in">url</span>(<span class="string">paper.gif</span>) left top repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50px</span>, <span class="number">130px</span>, auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图片和背景图片的区别"><a href="#图片和背景图片的区别" class="headerlink" title="图片和背景图片的区别"></a>图片和背景图片的区别</h3><ul>
<li><ol>
<li>背景图片仅仅是一个装饰, 不会占用位置,,插入图片会占用位置</li>
</ol>
</li>
<li><ol start="2">
<li>背景图片有定位属性, 所以可以很方便的控制图片的位置, 插入图片没有定位属性, 所有控制图片的位置不太方便</li>
</ol>
</li>
<li><ol start="3">
<li>插入图片的语义比背景图片的语义要强, 所以<strong>在企业开发中如果你的图片想被搜索引擎收录, 那么推荐使用插入图片</strong></li>
</ol>
<ul>
<li>img，作为网页内容的重要组成部分，比如广告图片、LOGO图片、文章配图、产品图片</li>
<li>background-image，可有可无。有，能让网页更加美观。无，也不影响用户获取完整的网页内容信息</li>
</ul>
</li>
</ul>
<h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><h4 id="为什么需要精灵图"><a href="#为什么需要精灵图" class="headerlink" title="为什么需要精灵图"></a>为什么需要精灵图</h4><p><img src="https://s1.vika.cn/space/2023/02/19/0c150f9c0e364233ae1ae98344af3c97" alt="image-20220126195415766"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/7680543262b647f89c07729d31168f78" alt="image-20220126195457475"></p>
<ul>
<li><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>
</li>
<li><p>因此，<strong>精灵图的目的: 就是为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度</strong>，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。</p>
</li>
<li><p>核心原理：<strong>将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</strong></p>
</li>
</ul>
<h4 id="精灵图的使用"><a href="#精灵图的使用" class="headerlink" title="精灵图的使用"></a>精灵图的使用</h4><ul>
<li><p>使用精灵图核心：</p>
<ul>
<li>01 精灵技术主要针对于背景图片使用。<strong>就是把多个小背景图片整合到一张大图片中。</strong></li>
<li>02 这个大图片也称为 sprites <strong>精灵图</strong> 或者 <strong>雪碧图</strong></li>
<li>03 移动背景图片位置， 此时可以使用 background-position 。</li>
<li>04 移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>
<li>05 因为一般情况下都是往上 &#x2F; 往左移动，所以数值是负值。</li>
<li>06 使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>
</ul>
</li>
<li><p>使用精灵图核心总结：</p>
<ul>
<li>精灵图主要针对于小的背景图片使用。</li>
<li>主要借助于背景位置来实现 : background-position 。</li>
<li>一般情况下精灵图都是负值。（千万注意网页中的坐标： x 轴右边走是正值，左边走是负值， y 轴同理。）</li>
</ul>
</li>
</ul>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul>
<li>页面布局要学习三大核心, 盒子模型, 浮动 和 定位. 学习好盒子模型能非常好的帮助我们布局页面.</li>
</ul>
<h3 id="网页布局的本质"><a href="#网页布局的本质" class="headerlink" title="网页布局的本质"></a>网页布局的本质</h3><ul>
<li><p>网页布局过程：</p>
<p> 01 先准备好相关的网页元素，网页元素基本都是盒子 Box 。</p>
<p> 02 利用 CSS 设置好盒子样式，然后摆放到相应位置。</p>
<p> 03 往盒子里面装内容.</p>
</li>
<li><p><strong>网页布局的核心本质： 就是利用 CSS 摆盒子。</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e7d977c733ed4381ae545258e29b18bb" alt="image-20220126130551732"></p>
<h3 id="盒子模型-1"><a href="#盒子模型-1" class="headerlink" title="盒子模型"></a>盒子模型</h3><ul>
<li><ol>
<li>所谓 盒子模型：就是把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li>
</ol>
</li>
<li><ol start="2">
<li>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，<strong>它包括：边框、外边距、内边距、和 实际内容</strong></li>
</ol>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e213ff2993c14095a965a1bbaa33534f" alt="image-20220126130720500"></p>
<ul>
<li><ol start="3">
<li>盒模型宽度和高度</li>
</ol>
<ul>
<li>内容的宽度和高度<ul>
<li>就是通过 width &#x2F; height 属性设置的宽度和高度, 对于行内级元素来说, 设置宽高是无效的!</li>
<li>另外我们还可以设置如下属性:<ul>
<li>min-width：最小宽度，无论内容多少，宽度都大于或等于min-width</li>
<li>max-width：最大宽度，无论内容多少，宽度都小于或等于max-width</li>
<li>移动端适配时, 可以设置最大宽度和最小宽度;</li>
</ul>
</li>
<li>下面两个属性不常用:<ul>
<li>min-height：最小高度，无论内容多少，高度都大于或等于min-height</li>
<li>max-height：最大高度，无论内容多少，高度都小于或等于max-height</li>
</ul>
</li>
</ul>
</li>
<li>元素的宽度和高度<ul>
<li>宽度 &#x3D; 左边框 + 左内边距 + width + 右内边距 + 右边框</li>
<li>高度 同理可证</li>
</ul>
</li>
<li>规律<ul>
<li>增加了 padding &#x2F; border 之后元素的宽高也会发生变化</li>
<li>如果增加了 padding &#x2F; border 之后还想保持元素的宽高, 那么就必须减去内容的宽高</li>
</ul>
</li>
<li>元素空间的宽度和高度<ul>
<li>宽度 &#x3D; 左外边距 + 左边框 + 左内边距 + width + 右内边距 + 右边框 + 右外边距</li>
<li>高度 同理可证</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><h4 id="什么是边框"><a href="#什么是边框" class="headerlink" title="什么是边框"></a>什么是边框</h4><ul>
<li><p>边框就是环绕在标签宽度和高度周围的线条</p>
</li>
<li><p><strong>border 可以设置元素的边框。</strong>边框有三部分组成: <strong>边框宽度(粗细) 边框样式 边框颜色</strong></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width border-style border-color;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/b3a090bdd62e407c9eec4eacb05c8166" alt="image-20220126130818759"></p>
<ul>
<li><p>边框样式 border-style 可以设置如下值：</p>
<ul>
<li>none：没有边框,即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线</li>
<li>dotted：边框为点线</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*边框简写 没有顺序*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 只设定上边框， 其余三边的边框同理 */</span></span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red; </span><br></pre></td></tr></table></figure>

<ul>
<li><p>边框会影响盒子实际大小:</p>
</li>
<li><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决:</p>
<ul>
<li>01 测量盒子大小的时候,不量边框.</li>
<li>02 如果测量的时候包含了边框,则需要 width &#x2F; height 减去边框宽度</li>
</ul>
</li>
<li><p>案例:请给一个 200 * 200 的盒子，设置上边框为红色，其余边框为蓝色（提示：一定注意边框的层叠性）</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   <span class="selector-tag">div</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">border</span>:<span class="number">2px</span> solid blue; <span class="comment">/* 所有边框设置为 blue */</span></span><br><span class="line">       <span class="attribute">border-top</span>: <span class="number">2px</span> solid red; <span class="comment">/* 上边框设置为 red  层叠性*/</span></span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="同时设置四条边"><a href="#同时设置四条边" class="headerlink" title="同时设置四条边"></a>同时设置四条边</h4><ul>
<li><p><strong>border</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p>注意点:</p>
<ul>
<li>连写格式中颜色属性可以省略, 省略之后默认就是黑色</li>
<li>连写格式中样式不能省略, 省略之后就看不到边框了</li>
<li>连写格式中大小可以省略, 省略之后还是可以看到边框,不写边框大小,谷歌浏览器默认为 3px</li>
</ul>
</li>
<li><p>示例代码:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: red;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">5px</span> solid blue;</span><br><span class="line">       <span class="comment">/*border: 5px solid;*/</span></span><br><span class="line">       <span class="comment">/*border: 5px blue;*/</span></span><br><span class="line">       <span class="comment">/*border: solid blue;*/</span></span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="分别设置四条边"><a href="#分别设置四条边" class="headerlink" title="分别设置四条边"></a>分别设置四条边</h4><ul>
<li><p><strong>border-top</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p><strong>border-right</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p><strong>border-bottom</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p><strong>border-left</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p>示例代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top</span>:<span class="number">5px</span> solid blue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right</span>:<span class="number">10px</span> dashed green;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>:<span class="number">15px</span> dotted purple;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left</span>:<span class="number">20px</span> double pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="按要素连写"><a href="#按要素连写" class="headerlink" title="按要素连写"></a>按要素连写</h4><ul>
<li><p><strong>border-width</strong>: 上 右 下 左;</p>
</li>
<li><p><strong>border-style</strong>: 上 右 下 左;</p>
</li>
<li><p><strong>border-color</strong>: 上 右 下 左;</p>
</li>
<li><p>注意点:</p>
<ul>
<li><p>这三个属性的取值是按照顺时针来赋值, 也就是按照 上右下左 来赋值, 而不是按照日常生活中的 上下左右</p>
</li>
<li><p>这三个属性的取值省略时的规律</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 下 &gt; 左边的取值和右边的一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 &gt; 左边的取值和右边的一样 下边的取值和上边一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 &gt; 右下左边取值和上边一样</p>
</li>
</ul>
</li>
<li><p>示例代码:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border-width</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border-style</span>: solid dashed dotted double;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border-color</span>: blue green purple pink;</span></span><br><span class="line"><span class="language-css">       <span class="comment">/*border-color: blue green purple;*/</span> <span class="comment">/* 上 左右 下*/</span></span></span><br><span class="line"><span class="language-css">       <span class="comment">/*border-color: blue green;*/</span> <span class="comment">/* 上下 左右 */</span></span></span><br><span class="line"><span class="language-css">       <span class="comment">/*border-color: blue;*/</span> <span class="comment">/* 四边颜色相同 */</span></span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="按方向和要素连写"><a href="#按方向和要素连写" class="headerlink" title="按方向和要素连写"></a>按方向和要素连写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 上边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top-style</span>: solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top-color</span>: blue;</span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 右边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right-style</span>: dashed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right-color</span>: green;</span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 下边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-width</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-style</span>: dotted;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-color</span>: purple;</span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 左边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-style</span>: double;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>同一个选择器中如果设置了多个边框属性, 后面的会覆盖前面的(层叠性)</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">5px</span> solid red;</span><br><span class="line">   <span class="attribute">border-right</span>:<span class="number">5px</span> dashed red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="外轮廓"><a href="#外轮廓" class="headerlink" title="外轮廓"></a>外轮廓</h3><ul>
<li>outline表示元素的外轮廓<ul>
<li>不占用空间</li>
<li>默认显示在border的外面</li>
</ul>
</li>
<li>outline相关属性有<ul>
<li>outline-width: 外轮廓的宽度</li>
<li>outline-style：取值跟border的样式一样，比如solid、dotted等</li>
<li>outline-color: 外轮廓的颜色</li>
<li>outline：outline-width、outline-style、outline-color的简写属性，跟border用法类似</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><ul>
<li><strong>padding 属性用于设置内边距，即边框与内容之间的距离。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4266238d1a774ca6b5d429bc65b6c7af" alt="image-20220126131952807"></p>
<ul>
<li>padding 属性（简写属性）可以有一到四个值。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/59aaaf9f315045589638d36f7bd85c85" alt="image-20220126132022561"></p>
<ul>
<li><p>以上 4 种情况，我们实际开发都会遇到。</p>
</li>
<li><p>当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>
<ul>
<li><strong>01 内容和边框有了距离，添加了内边距。</strong></li>
<li><strong>02 padding 影响了盒子实际大小。</strong></li>
</ul>
</li>
<li><p>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</p>
</li>
<li><p><strong>×××</strong> 如果盒子本身没有指定 width &#x2F; height 属性, 则此时 padding 不会撑开盒子大小.( <strong>×××</strong>, 测试时即使不给盒子宽高,只设置 padding 也会撑大盒子)</p>
</li>
<li><p>解决方案: 如果要保证盒子跟效果图大小保持一致，则让 width &#x2F; height 减去多出来的内边距大小即可。</p>
</li>
<li><p>内边距案例：新浪导航案例 padding 影响盒子好处,<strong>用左右内边距撑开盒子,以加大盒子之间的水平间距</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ef13a7d4f7fc4342b0dd1dbe3d0c9f01"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">480px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">5px</span> solid orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>设为首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机新浪网<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>移动客户端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>关注我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><ul>
<li><ol>
<li><strong>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</strong></li>
</ol>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ed6ef042e9c54a5bbdfb573c240e029f" alt="image-20220126133404521"></p>
<ul>
<li>margin 简写方式代表的意义跟 padding 完全一致。</li>
<li><strong>margin: 0 auto;</strong> 可以让块级元素水平居中</li>
<li><ol start="2">
<li>单独设置四条边,<strong>可选值: 百分比 | 像素值 | auto</strong></li>
</ol>
<ul>
<li>示例代码:</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-left</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>同时设置四条边</li>
</ol>
<ul>
<li><p><strong>margin: 上 右 下 左;</strong></p>
</li>
<li><p>注意点:</p>
<ul>
<li><p>这三个属性的取值省略时的规律</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 下 &gt; 左边的取值和右边的一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 &gt; 左边的取值和右边的一样 下边的取值和上边一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 &gt; 右下左边取值和上边一样</p>
</li>
<li><p>外边距的那一部分是没有背景颜色的</p>
</li>
</ul>
</li>
<li><p>示例代码:</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">40px</span> <span class="number">80px</span> <span class="number">160px</span>; <span class="comment">/* 上 右 下 左 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*margin:20px 40px 80px;*/</span> <span class="comment">/* 上 左右 下*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*margin:20px 40px;*/</span> <span class="comment">/* 上下 左右*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*margin:20px;*/</span> <span class="comment">/* 四边 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="两个居中属性的区别"><a href="#两个居中属性的区别" class="headerlink" title="两个居中属性的区别"></a>两个居中属性的区别</h3><ul>
<li><code>text-align:center;</code>和<code>margin:0 auto;</code>区别<ul>
<li><strong>text-align: center;</strong> 是设置盒子中存储的文字 &#x2F; 图片水平居中</li>
<li><strong>margin:0 auto;</strong> 是让盒子自己水平居中</li>
</ul>
</li>
<li>示例代码:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>53-盒子居中和内容居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*文字图片会居中*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*text-align: center;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*盒子自身会居中*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    我是文字<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/girl.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外边距典型应用"><a href="#外边距典型应用" class="headerlink" title="外边距典型应用"></a>外边距典型应用</h3><ul>
<li><p>外边距可以让块级盒子水平居中，但是必须满足两个条件：</p>
<ul>
<li><p>盒子必须指定了宽度（width）。</p>
</li>
<li><p>盒子左右的外边距都设置为 auto 。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>常见的写法，以下三种都可以：</p>
<ul>
<li><p><strong>margin-left: auto; margin-right: auto;</strong></p>
</li>
<li><p><strong>margin: auto;</strong></p>
</li>
<li><p><strong>margin: 0 auto;</strong></p>
</li>
</ul>
</li>
<li><p>注意：<strong>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</strong></p>
</li>
</ul>
<h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><ul>
<li><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
</li>
<li><p>主要有两种情况:</p>
<ul>
<li><strong>01 相邻块元素垂直外边距的合并</strong><ul>
<li>margin-top传递</li>
<li>如果块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</li>
<li>margin-bottom传递<ul>
<li>如果块级元素的底部线和父元素的底部线重写，并且父元素的高度是auto，那么这个块级元素的margin-bottom值会传递给父元素</li>
</ul>
</li>
</ul>
</li>
<li><strong>02 嵌套块元素垂直外边距的塌陷</strong></li>
</ul>
</li>
<li><p>01 相邻块元素垂直外边距的合并</p>
<ul>
<li>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。而是取两个值中的较大者,这种现象被称为相邻块元素垂直外边距的合并。也可以叫做上下外边距折叠,水平外边距不会折叠</li>
<li>解决方案：尽量只给一个盒子添加 margin 值。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/14eacbd8ffff4bf281b44f605d795355" alt="image-20220126134101197"></p>
<ul>
<li><p>02 嵌套块元素垂直外边距的塌陷</p>
<p>-<br>  对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e678717d3cdf487ba9d1ac1f1a4b2b75" alt="image-20220126134320927"></p>
<ul>
<li>解决方案：<ul>
<li>01 可以为父元素定义上边框。</li>
<li>02 可以为父元素定义上内边距。</li>
<li>03 <strong>可以为父元素添加 overflow:hidden</strong>。</li>
</ul>
</li>
<li>还有其他方法，比如浮动、固定，绝对定位的盒子不会有塌陷问题，后面咱们再总结。</li>
<li>建议<ul>
<li>margin一般是用来设置兄弟元素之间的间距</li>
<li>padding一般是用来设置父子元素之间的间距</li>
</ul>
</li>
</ul>
<h3 id="清除默认内外边距"><a href="#清除默认内外边距" class="headerlink" title="清除默认内外边距"></a>清除默认内外边距</h3><ul>
<li>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>; <span class="comment">/* 清除内边距 */</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>; <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</li>
</ul>
<h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/831a7a6beec2467298e30f2f761fc2fd" alt="image-20220126134833459"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">30px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">63</span>, <span class="number">62</span>, <span class="number">62</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.appraise</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.info</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/26.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>快递牛,整体不错蓝牙可以说秒连,红米给力<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;appraise&quot;</span>&gt;</span>来自于 117384232 的评价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>Redmi AirDots真无线蓝... | <span class="tag">&lt;<span class="name">span</span>&gt;</span>99.9元<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>案例总结:</p>
<ul>
<li><p>01 布局为啥用不同盒子,我只想用 div ？</p>
<ul>
<li>标签都是有语义的, 合理的地方用合理的标签。比如产品标题 就用 h , 大量文字段落就用 p</li>
</ul>
</li>
<li><p>02 为啥用辣么多类名？</p>
<ul>
<li>类名就是给每个盒子起了一个名字,可以更好的找到这个盒子, 选取盒子更容易,后期维护也方便。</li>
</ul>
</li>
<li><p>03 到底用 margin 还是 padding？</p>
<ul>
<li>大部分情况两个可以混用，两者各有优缺点，但是根据实际情况，总是有更简单的方法实现。</li>
</ul>
</li>
</ul>
</li>
<li><p>案例2:快报模块</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e056f2cc58a74d9396b26778793ce72a" alt="image-20220126140430358"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">275px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">170px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">49</span>, <span class="number">49</span>, <span class="number">49</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>品优购快报<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】爆款耳机5折秒!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】母亲节,健康好礼低至5折!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】爆款耳机5折秒!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】9.9元洗100张照片!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】长虹智能空调立省1000<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h2><h3 id="传统网页布局的三种方式"><a href="#传统网页布局的三种方式" class="headerlink" title="传统网页布局的三种方式"></a>传统网页布局的三种方式</h3><ul>
<li><p>网页布局的本质——用 CSS 来摆放盒子。 把盒子摆放到相应位置.</p>
</li>
<li><p>CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>
<ul>
<li><strong>普通流（标准流）</strong></li>
<li><strong>浮动</strong></li>
<li><strong>定位</strong></li>
</ul>
</li>
<li><p>什么是网页的布局方式?</p>
<ul>
<li><strong>网页的布局方式其实就是指浏览器是如何对网页中的元素进行排版的</strong></li>
</ul>
</li>
<li><p>标准流(文档流&#x2F;普通流)排版方式</p>
<ul>
<li>其实浏览器默认的排版方式就是标准流的排版方式</li>
<li>在 CSS 中将元素分为三类, 分别是块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素</li>
<li>在标准流中有两种排版方式, 一种是垂直排版, 一种是水平排版 <ul>
<li>垂直排版, 如果元素是块级元素, 那么就会垂直排版</li>
<li>水平排版, 如果元素是行内元素 &#x2F; 行内块级元素, 那么就会水平排版</li>
</ul>
</li>
</ul>
</li>
<li><p>浮动流排版方式</p>
<ul>
<li>浮动流是一种 “半脱离标准流” 的排版方式</li>
<li>浮动流只有一种排版方式, 就是水平排版. 它只能设置某个元素左对齐或者右对齐</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li>浮动流中没有居中对齐, 也就是没有 center 这个取值</li>
<li>在浮动流中是<strong>不可以使用 margin: 0 auto;</strong></li>
</ul>
</li>
<li><p>特点:</p>
<ul>
<li>在浮动流中是不区分块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素的</li>
<li>无论是块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素都可以水平排版</li>
<li>在浮动流中无论是块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素都可以设置宽高</li>
<li>综上所述, 浮动流中的元素和标准流中的行内块级元素很像</li>
</ul>
</li>
</ul>
<h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><ul>
<li><p>所谓的标准流: 就是标签按照规定好默认方式排列.</p>
<ul>
<li><strong>块级元素会独占一行，从上向下顺序排列。</strong></li>
</ul>
</li>
<li><p>常用元素：<strong>div、hr、p、h1~h6、ul、ol、dl、form、table</strong></p>
</li>
<li><p><strong>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</strong></p>
<ul>
<li>常用元素：<strong>span、a、i、em</strong> 等</li>
</ul>
</li>
<li><p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>
</li>
<li><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>
</li>
<li><p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>
</li>
</ul>
<h3 id="为什么需要浮动"><a href="#为什么需要浮动" class="headerlink" title="为什么需要浮动"></a>为什么需要浮动</h3><ul>
<li>01 如何让多个块级盒子( div )水平排列成一行？<ul>
<li>比较难，虽然转换为行内块元素可以实现一行显示，但是他们之间会有大的空白缝隙，很难控制。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/d54b0347a9d843bcadcc870a9c9e418a" alt="image-20220126145914499"></p>
<ul>
<li>02  如何实现两个盒子的左右对齐？</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/43b568280aae4ff8a955eb2f62f95875" alt="image-20220126150037468"></p>
<ul>
<li><p>总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>
</li>
<li><p>浮动最典型的应用：<strong>可以让多个块级元素一行内排列显示</strong>。</p>
</li>
<li><p>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</strong></p>
</li>
</ul>
<h3 id="什么是浮动"><a href="#什么是浮动" class="headerlink" title="什么是浮动"></a>什么是浮动</h3><ul>
<li><strong>float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</strong><ul>
<li>定位元素会层叠在浮动元素上面</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/9e83137d235845a8ab56ccf08664f880" alt="image-20220126150224595"></p>
<h3 id="浮动的特性"><a href="#浮动的特性" class="headerlink" title="浮动的特性"></a>浮动的特性</h3><ul>
<li><p>01 加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>
<ul>
<li>01 <strong>浮动元素会脱离标准流(脱标)</strong></li>
<li>02 浮动的元素会一行内显示并且元素顶部对齐</li>
<li>03 浮动的元素会具有行内块元素的特性.</li>
<li>04 脱离标准普通流的控制（浮） 移动到指定位置（动）, （俗称脱标）</li>
<li>05 浮动的盒子不再保留原先的位置</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/131f70f0a0c04a24ad3f6c1dbc967f63" alt="image-20220126150522641"></p>
<ul>
<li>02 <strong>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。</strong><ul>
<li>注意： 浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/659ac15cba78499b9164440defc22339" alt="image-20220126150621896"></p>
<ul>
<li><p>03 浮动元素会具有行内块元素特性</p>
<ul>
<li><p>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。</p>
</li>
<li><p>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</p>
</li>
<li><p>浮动的盒子中间是没有缝隙的，是紧挨着一起的</p>
</li>
<li><p>行内元素同理</p>
</li>
</ul>
</li>
</ul>
<h3 id="浮动元素的使用"><a href="#浮动元素的使用" class="headerlink" title="浮动元素的使用"></a>浮动元素的使用</h3><ul>
<li><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>
<ul>
<li><strong>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置. 符合网页布局第一准侧.</strong></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/02d87d0801144dbf98656d01fd24a720" alt="image-20220126150935210"></p>
<h3 id="浮动案例-小米布局案例"><a href="#浮动案例-小米布局案例" class="headerlink" title="浮动案例:小米布局案例"></a>浮动案例:小米布局案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/488a247427fc4f9faf1aef82c95e155d" alt="image-20220126151038377"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="浮动案例-小米布局案例-1"><a href="#浮动案例-小米布局案例-1" class="headerlink" title="浮动案例:小米布局案例"></a>浮动案例:小米布局案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/e74d66e5e6e44841959a28f8ea1dbbd6" alt="image-20220126151151248"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="浮动案例-小米布局案例-2"><a href="#浮动案例-小米布局案例-2" class="headerlink" title="浮动案例:小米布局案例"></a>浮动案例:小米布局案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/ea5cffafc4af4a80bc7db267277b6de6" alt="image-20220126151321935"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="浮动元素字围现象"><a href="#浮动元素字围现象" class="headerlink" title="浮动元素字围现象"></a>浮动元素字围现象</h3><ul>
<li>什么是浮动元素字围现象?<ul>
<li>浮动元素不会挡住没有浮动元素中的文字, 没有浮动的文字会自动给浮动的元素让位置,这个就是浮动元素字围现象</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/*background-color: red;*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p><img src="/images/clearfix.png"></p>
<h3 id="为什么需要清除浮动"><a href="#为什么需要清除浮动" class="headerlink" title="为什么需要清除浮动"></a>为什么需要清除浮动</h3><ul>
<li><strong>父级元素高度坍塌: 由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/2e93c6f03ec341bc89467dff18ebedbc" alt="image-20220126152009774"></p>
<ul>
<li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li>
</ul>
<h3 id="清除浮动的本质"><a href="#清除浮动的本质" class="headerlink" title="清除浮动的本质"></a>清除浮动的本质</h3><ul>
<li><p><strong>清除浮动的本质是清除浮动元素造成的影响</strong></p>
</li>
<li><p>如果父盒子本身有高度，则不需要清除浮动</p>
</li>
<li><p><strong>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></p>
</li>
</ul>
<h3 id="清除浮动-1"><a href="#清除浮动-1" class="headerlink" title="清除浮动"></a>清除浮动</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/8fd7c535e3d64a0da468ce7ff66d3672" alt="image-20220126152402006"></p>
<ul>
<li><p>我们实际工作中， 几乎只用 <strong>clear: both;</strong></p>
</li>
<li><p>清除浮动的策略是: 闭合浮动.</p>
</li>
</ul>
<h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><h4 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h4><ul>
<li><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>
</li>
<li><p><strong>额外标签法会在浮动元素末尾添加一个空的标签。</strong>例如<code> &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签（如 br 等）。</p>
</li>
<li><p>优点： 通俗易懂，书写方便</p>
<ul>
<li>缺点： 添加许多无意义的标签，结构化较差</li>
</ul>
</li>
<li><p>注意： <strong>要求这个新的空标签必须是块级元素。</strong></p>
</li>
<li><p>额外标签法总结:</p>
<ul>
<li><p>01 清除浮动本质是?</p>
<ul>
<li><strong>清除浮动的本质是清除浮动元素脱离标准流造成的影响</strong></li>
</ul>
</li>
<li><p>02 清除浮动策略是?</p>
<ul>
<li><strong>闭合浮动. 只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</strong></li>
</ul>
</li>
<li><p>03 额外标签法?</p>
<ul>
<li><strong>隔墙法, 就是在最后一个浮动的子元素后面添加一个额外标签, 添加 清除浮动样式.</strong></li>
<li>实际工作可能会遇到,但是不常用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="父级添加-overflow-属性"><a href="#父级添加-overflow-属性" class="headerlink" title="父级添加 overflow 属性"></a>父级添加 overflow 属性</h4><ul>
<li><p><strong>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</strong></p>
</li>
<li><p>注意是给父元素添加代码</p>
<ul>
<li>优点：代码简洁</li>
<li>缺点：无法显示溢出的部分</li>
</ul>
</li>
</ul>
<h4 id="父级添加-after-伪元素"><a href="#父级添加-after-伪元素" class="headerlink" title="父级添加 after 伪元素"></a>父级添加 after 伪元素</h4><ul>
<li><p><strong>:after 方式是额外标签法的升级版。也是给父元素添加</strong></p>
</li>
<li><p>优点：没有增加标签，结构更简单</p>
<ul>
<li><p>缺点：照顾低版本浏览器</p>
</li>
<li><p>代表网站： 百度、淘宝网、网易等</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; <span class="comment">/* IE6、7 专有 */</span></span><br><span class="line">	*zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="父级添加双伪元素"><a href="#父级添加双伪元素" class="headerlink" title="父级添加双伪元素"></a>父级添加双伪元素</h4><ul>
<li><p>优点：代码更简洁</p>
</li>
<li><p>缺点：照顾低版本浏览器</p>
</li>
<li><p>代表网站：小米、腾讯等</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="清除浮动总结"><a href="#清除浮动总结" class="headerlink" title="清除浮动总结"></a>清除浮动总结</h3><ul>
<li>父级没高度。子盒子浮动了。影响下面布局了，我们就应该清除浮动了。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/8365a098f412495bbfc7d8551e8ac8c0" alt="image-20220126153501334"></p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="为什么需要浮动-1"><a href="#为什么需要浮动-1" class="headerlink" title="为什么需要浮动"></a>为什么需要浮动</h3><ul>
<li><p>01 浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。</p>
</li>
<li><p>02 定位则是可以让盒子自由的在某个盒子内移动位置或者固定在屏幕中某个位置，并且可以压住其他盒子。</p>
</li>
</ul>
<h3 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h3><ul>
<li><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p>
</li>
<li><p>定位 &#x3D; 定位模式 + 边偏移 。</p>
</li>
<li><p><strong>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</strong></p>
</li>
<li><ol>
<li>定位模式:</li>
</ol>
<ul>
<li>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/548c0e98a20d4657bbeeaa08ff5596c3" alt="image-20220126163755591"></p>
<ul>
<li><ol start="2">
<li>边偏移:</li>
</ol>
<ul>
<li>边偏移就是定位的盒子移动到最终位置。有 top、bottom、left 和 right 4 个属性。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ff12fb1434494dee9cc24b75e4005887" alt="image-20220126163836275"></p>
<h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><ul>
<li>静态定位是元素的默认定位方式，无定位的意思。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">position</span>:static;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>静态定位按照标准流特性摆放位置，它没有边偏移</p>
</li>
<li><p>静态定位在布局时很少用到</p>
</li>
</ul>
<h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><ul>
<li>相对定位是元素在移动位置的时候，是相对于它原来的位置来说的（自恋型）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: relative; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>相对定位的特点：（务必记住）</p>
<ul>
<li>01 它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</li>
<li>02 原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。</li>
</ul>
</li>
<li><p>因此，<strong>相对定位并没有脱标。</strong></p>
</li>
</ul>
<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><ul>
<li>绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的（拼爹型）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: absolute; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>绝对定位的特点：（务必记住）</p>
<ul>
<li>01 如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document 文档）。</li>
<li>02 如果祖先元素有定位（相对、绝对、固定定位），则以最近一级有定位的祖先元素为参考点移动位置。</li>
<li>03 绝对定位不再占有原先的位置。（脱标）</li>
</ul>
</li>
<li><p>所以<strong>绝对定位是脱离标准流的。</strong></p>
</li>
</ul>
<h3 id="子绝父相的由来"><a href="#子绝父相的由来" class="headerlink" title="子绝父相的由来"></a>子绝父相的由来</h3><ul>
<li><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>
</li>
<li><p>这个“子绝父相”太重要了，是我们学习定位的口诀，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>
<ul>
<li><p>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>
</li>
<li><p>父盒子需要加定位限制子盒子在父盒子内显示。</p>
</li>
<li><p>父盒子布局时，需要占有位置，因此父盒子只能是相对定位。</p>
</li>
</ul>
</li>
<li><p>这就是子绝父相的由来，所以相对定位经常用来作为绝对定位的父级。</p>
</li>
<li><p>总结： 因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</p>
</li>
<li><p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，子绝父绝也会遇到。</p>
</li>
</ul>
<h3 id="定位案例"><a href="#定位案例" class="headerlink" title="定位案例"></a>定位案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/1c185dd6c53c414097770c880700d5a1" alt="image-20220126170905241"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 fixed"></a>固定定位 fixed</h3><ul>
<li><strong>固定定位是元素固定于浏览器可视区的位置。</strong>主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: fixed; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>固定定位的特点：（务必记住）</p>
</li>
<li><p>01 以浏览器的可视窗口为参照点移动元素。</p>
<ul>
<li><strong>跟父元素没有任何关系</strong></li>
<li><strong>不随滚动条滚动。</strong></li>
</ul>
</li>
<li><p>02 固定定位不在占有原先的位置。</p>
<ul>
<li><strong>固定定位也是脱标的</strong>，其实固定定位也可以看做是一种特殊的绝对定位。</li>
</ul>
</li>
</ul>
<h3 id="定位案例-1"><a href="#定位案例-1" class="headerlink" title="定位案例"></a>定位案例</h3><ul>
<li>两侧固定广告:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4856172cbbe443b983157318221646bc" alt="image-20220126171053091"></p>
<ul>
<li><p>小算法：</p>
<ul>
<li>01 让固定定位的盒子 left: 50%. 走到浏览器可视区（也可以看做版心） 的一半位置。</li>
<li>02 让固定定位的盒子 margin-left: 版心宽度的一半距离。 多走 版心宽度的一半位置</li>
</ul>
</li>
<li><p>就可以让固定定位的盒子贴着版心右侧对齐了。</p>
</li>
</ul>
<h3 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h3><ul>
<li><strong>粘性定位可以被认为是相对定位和固定定位的混合。</strong> Sticky 粘性的</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: sticky; <span class="attribute">top</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>粘性定位的特点：</p>
<ul>
<li>01 以浏览器的可视窗口为参照点移动元素（固定定位特点）</li>
<li>02 粘性定位占有原先的位置（相对定位特点）</li>
<li>03 必须添加 top 、left、right、bottom 其中一个才有效</li>
</ul>
</li>
<li><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>
</li>
</ul>
<h3 id="定位总结"><a href="#定位总结" class="headerlink" title="定位总结"></a>定位总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/6c1a6ed83dde48709f55e3880405480a" alt="image-20220126172831497"></p>
<ul>
<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点：01 是否占有位置（脱标否） 02 以谁为基准点移动位置。</p>
</li>
<li><p>学习定位重点学会子绝父相。</p>
</li>
</ul>
<h3 id="定位扩展"><a href="#定位扩展" class="headerlink" title="定位扩展"></a>定位扩展</h3><ul>
<li><p>01 绝对定位的盒子居中</p>
<ul>
<li>加了绝对定位的盒子不能通过 margin:0 auto 水平居中，但是可以通过以下计算方法实现水平和垂直居中。<ul>
<li>01 left: 50%; 让盒子的左侧移动到父级元素的水平中心位置。</li>
<li>02 margin-left: -100px; 让盒子向左移动自身宽度的一半。</li>
</ul>
</li>
</ul>
</li>
<li><p>02 定位特殊特性</p>
<ul>
<li>绝对定位和固定定位也和浮动类似。<ul>
<li>01 行内元素添加绝对或者固定定位，可以直接设置高度和宽度。添加相对定位,设置高度和宽度无效</li>
<li>02 块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</li>
</ul>
</li>
</ul>
</li>
<li><p>03 脱标的盒子不会触发外边距塌陷</p>
<ul>
<li>浮动元素、绝对定位(固定定位）元素的都不会触发外边距合并的问题。</li>
</ul>
</li>
<li><p>04 绝对定位（固定定位）会完全压住盒子</p>
<ul>
<li>浮动元素只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</li>
<li>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</li>
<li>浮动之所以不会压住文字，因为<strong>浮动产生的目的最初是为了做文字环绕效果的。</strong> 文字会围绕浮动元素</li>
</ul>
</li>
</ul>
<h3 id="定位案例-2"><a href="#定位案例-2" class="headerlink" title="定位案例"></a>定位案例</h3><ul>
<li>淘宝焦点图布局</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/91842588664346bd89efdb23710ee538"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h3><ul>
<li>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序 (z轴)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">z-index</span>: <span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>数值可以是正整数、负整数或 0, 默认是 auto，数值越大，盒子越靠上</p>
</li>
<li><p>如果属性值相同，则按照书写顺序，后来居上</p>
</li>
<li><p>数字后面不能加单位</p>
</li>
<li><p><strong>只有定位的盒子才有 z-index 属性</strong></p>
</li>
</ul>
<h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul>
<li>什么是继承性?<ul>
<li><strong>作用: 给父元素设置一些属性, 子元素也可以使用, 这个我们就称之为继承性</strong></li>
</ul>
</li>
<li>CSS的某些属性具有继承性(Inherited):<ul>
<li>如果一个属性具备继承性, 那么在该元素上设置后, 它的后代元素都可以继承这个属性;</li>
<li>当然, 如果后代元素自己有设置该属性, 那么优先使用后代元素自己的属性(不管继承过来的属性权重多高);</li>
</ul>
</li>
<li>如何知道一个属性是否具有继承性呢?<ul>
<li>常见的font-size&#x2F;font-family&#x2F;font-weight&#x2F;line-height&#x2F;color&#x2F;text-align都具有继承性;</li>
</ul>
</li>
<li>示例代码:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--p会变成红色--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意点:</p>
<ul>
<li>并不是所有的属性都可以继承, 只有以 color &#x2F; font- &#x2F; text- &#x2F; line- 开头的属性才可以继承</li>
<li>在 CSS 的继承中不仅仅是儿子可以继承, 只要是后代都可以继承</li>
</ul>
</li>
<li><p>继承性中的特殊性</p>
<ul>
<li>a 标签的文字颜色和下划线是不能继承的</li>
<li>h 标签的文字大小是不能继承的, h 标签的字号大小默认相对于父元素的字体大小, em 为单位,各级标题大小不同</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--a 的颜色和下划线不继承, H 的字体大小不继承  --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景:<ul>
<li>一般用于统一设置网页上的一些共性信息, 例如网页的文字颜色, 字体,文字大小等内容</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ul>
<li>CSS 全称 Cascading StyleSheet (层叠式样式表), 其中的层叠就是指层叠性</li>
<li>什么是层叠性?<ul>
<li><strong>作用: 层叠性就是CSS处理冲突的一种能力</strong></li>
<li>对于一个元素来说, 相同一个属性我们可以通过不同的选择器给它进行多次设置;</li>
<li>那么属性会被一层层覆盖上去;</li>
<li>但是最终只有一个会生效;</li>
</ul>
</li>
<li>那么多个样式属性覆盖上去, 哪一个会生效呢?<ul>
<li>判断一: 选择器的权重, 权重大的生效, 根据权重可以判断出优先级;</li>
<li>判断二: 先后顺序, 权重相同时, 后面设置的生效;</li>
</ul>
</li>
<li>示例代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  	<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">  	    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  	&#125;</span></span><br><span class="line"><span class="language-css">  	<span class="selector-class">.para</span>&#123;</span></span><br><span class="line"><span class="language-css">  	    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最终显示蓝色, 因为红色被覆盖掉了 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>层叠性只有在多个选择器选中”同一个标签”, 然后又设置了”相同的属性”, 才会发生层叠性</li>
</ul>
</li>
</ul>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul>
<li>什么是优先级?<ul>
<li><strong>作用:当多个选择器选中同一个标签, 并且给同一个标签设置相同的属性时, 如何层叠就由优先级来确定</strong></li>
</ul>
</li>
<li>优先级判断的三种方式:</li>
<li><ol>
<li>间接选中就是指继承</li>
</ol>
<ul>
<li>如果是间接选中, 那么就是谁离目标标签比较近就听谁的</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> 	<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示蓝色 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>相同选择器(直接选中)</li>
</ol>
<ul>
<li>如果都是直接选中, 并且都是同类型的选择器, 那么就是谁写在后面就听谁的</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示红色 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>不同选择器(直接选中)</li>
</ol>
<ul>
<li>如果都是直接选中, 并且不是相同类型的选择器, 那么就会按照选择器的优先级来层叠</li>
<li>id &gt; 类 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认</li>
<li>注意点:<ul>
<li>通配符选择器也是直接选中</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-id">#identity</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.para</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   *&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示紫色 id 选择器的优先级较高--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="优先级权重"><a href="#优先级权重" class="headerlink" title="优先级权重"></a>优先级权重</h3><ul>
<li>什么是优先级的权重?<ul>
<li><strong>作用: 当多个选择器混合在一起使用时, 我们可以通过计算权重来判断谁的优先级最高</strong></li>
</ul>
</li>
<li>权重的计算规则<ul>
<li>首先先计算选择器中有多少个 id , id 多的选择器优先级最高</li>
<li>如果 id 的个数一样, 那么再看类名的个数, 类名个数多的优先级最高</li>
<li>如果类名的个数一样, 那么再看标签名称的个数, 标签名称个数多的优先级最高</li>
<li>如果 id 个数一样, 类名个数也一样, 标签名称个数也一样, 那么就不会继续往下计算了, 那么此时谁写在后面听谁的</li>
</ul>
</li>
<li>注意点:<ul>
<li><strong>只有选择器是直接选中标签的才需要计算权重, 否则一定会听直接选中的选择器的</strong></li>
</ul>
</li>
<li>示例代码:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-id">#identity1</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.box1</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id多最终显示红色 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id一样, 比类多, 最终显示蓝色 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#identity1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#identity1</span> <span class="selector-tag">ul</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id一样, 类一样, 比标签多最终显示红色 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> <span class="selector-tag">li</span> <span class="selector-id">#identity2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-id">#identity1</span> <span class="selector-tag">ul</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id一样, 类一样, 标签一样, 最终显示红色 谁写在后面听谁的--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h3><ul>
<li>什么是!important</li>
<li><strong>作用: 用于提升某个直接选中标签的选择器中的某个属性的优先级的, 可以将被指定的属性的优先级提升为最高</strong></li>
<li>示例代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#identity</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.para</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink ;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示绿色 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>!important 只能用于直接选中, 不能用于间接选中</li>
<li>通配符选择器选中的标签也是直接选中的</li>
<li>!important 只能提升被指定的属性的优先级, 其它的属性的优先级不会被提升</li>
<li>!important 必须写在属性值得分号前面</li>
<li>!important 前面的感叹号不能省略</li>
</ul>
</li>
</ul>
<h2 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h2><h3 id="常见布局-1"><a href="#常见布局-1" class="headerlink" title="常见布局"></a>常见布局</h3><p><img src="https://s1.vika.cn/space/2023/02/19/05e10192ccee43e596022ac6cd601763" alt="image-20220126151437660"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/ad017362b26c4546bdacbe9b8f8f4783" alt="image-20220126151549463"></p>
<h3 id="布局注意点"><a href="#布局注意点" class="headerlink" title="布局注意点"></a>布局注意点</h3><ul>
<li><p>01 浮动和标准流的父盒子搭配。</p>
<ul>
<li>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</li>
</ul>
</li>
<li><p>02 一个元素浮动了，理论上其余的兄弟元素也要浮动。</p>
<ul>
<li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。</li>
<li>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</li>
</ul>
</li>
</ul>
<h3 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h3><ul>
<li>建议遵循以下顺序：<ul>
<li>01 布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li>02 自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li>
<li>03 文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li>
<li>04 其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background:linear-gradient …</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="网页布局总结"><a href="#网页布局总结" class="headerlink" title="网页布局总结"></a>网页布局总结</h3><ul>
<li><p>通过盒子模型，清楚知道大部分 html 标签是一个盒子。</p>
</li>
<li><p>01 标准流</p>
<ul>
<li>可以让盒子上下排列或者左右排列，垂直的块级盒子显示就用标准流布局。</li>
</ul>
</li>
<li><p>02 浮动</p>
<ul>
<li>可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局。</li>
</ul>
</li>
<li><p>03 定位</p>
<ul>
<li><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局。</p>
</li>
<li><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p>
</li>
<li><p>通过 CSS 浮动、定位 可以让每个盒子排列成为网页。</p>
</li>
</ul>
</li>
</ul>
<h2 id="学成在线案例"><a href="#学成在线案例" class="headerlink" title="学成在线案例"></a>学成在线案例</h2><h3 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h3><ul>
<li><p>我们本次采取结构与样式相分离思想：</p>
<ul>
<li>01 创建 study 目录文件夹 (用于存放我们这个页面的相关内容)。</li>
<li>02 study 目录内新建 images 文件夹，用于保存图片。</li>
<li>03 新建首页文件 index.html（以后我们的网站首页统一规定为 index.html )。</li>
<li>04 新建 style.css 样式文件。我们本次采用外链样式表。</li>
<li>05 将样式引入到我们的 HTML 页面文件中。</li>
<li>06 样式表写入清除内外边距的样式，来检测样式表是否引入成功。</li>
</ul>
</li>
</ul>
<h3 id="页面布局分析"><a href="#页面布局分析" class="headerlink" title="页面布局分析"></a>页面布局分析</h3><ul>
<li>为了提高网页制作的效率，布局时通常有以下的布局流程：<ul>
<li>01 必须确定页面的版心（可视区），我们测量可得知。</li>
<li>02 分析页面中的行模块，以及每个行模块中的列模块。其实页面布局，就是一行行罗列而成的。</li>
<li>03 制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要。</li>
<li>04 开始运用盒子模型的原理，通过 DIV+CSS 布局来控制网页的各个模块。</li>
</ul>
</li>
</ul>
<h3 id="确定版心"><a href="#确定版心" class="headerlink" title="确定版心"></a>确定版心</h3><ul>
<li>这个页面的版心是 1200 像素，每个版心都要水平居中对齐，可以定义版心为公共类：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="头部制作"><a href="#头部制作" class="headerlink" title="头部制作"></a>头部制作</h3><p><img src="https://s1.vika.cn/space/2023/02/19/d1e8f66496c341f0889bd86197fa23ac" alt="image-20220126154654411"></p>
<ul>
<li><p>1 号是版心盒子 header 1200 * 42 的盒子水平居中对齐，上下给一个 margin 值就可以</p>
</li>
<li><p>版心盒子里面包含 2 号盒子 logo</p>
</li>
<li><p>版心盒子里面包含 3 号盒子 nav 导航栏</p>
</li>
<li><p>版心盒子里面包含 4 号盒子 search 搜索框</p>
</li>
<li><p>版心盒子里面包含 5 号盒子 user 个人信息</p>
</li>
<li><p>注意：要求里面的 4 个盒子必须都是浮动</p>
</li>
</ul>
<h3 id="banner制作"><a href="#banner制作" class="headerlink" title="banner制作"></a>banner制作</h3><p><img src="https://s1.vika.cn/space/2023/02/19/316e04ced27443189f83dfd38a799023" alt="image-20220126154802525"></p>
<ul>
<li><p>1 号盒子是通栏的大盒子 banner，不给宽度，给高度，给一个蓝色背景</p>
</li>
<li><p>2 号盒子是版心，要水平居中对齐</p>
</li>
<li><p>3 号盒子版心内，左对齐 subnav 侧导航栏</p>
</li>
<li><p>4 号盒子版心内，右对齐 course 课程</p>
</li>
</ul>
<h3 id="精品推荐模块"><a href="#精品推荐模块" class="headerlink" title="精品推荐模块"></a>精品推荐模块</h3><p><img src="https://s1.vika.cn/space/2023/02/19/9b51f7953b5b45a09d1776c2ed0bf5e0" alt="image-20220126154856440"></p>
<ul>
<li><p>大盒子水平居中 goods 精品，注意此处有个盒子阴影</p>
</li>
<li><p>1 号盒子是标题 H3 左侧浮动</p>
</li>
<li><p>2 号盒子里面放链接左侧浮动， goods-item 距离可以控制链接的左右外边距（注意行内元素只给左右内外边距）</p>
</li>
<li><p>3 号盒子右浮动 mod 修改</p>
</li>
</ul>
<h3 id="精品推荐大模块"><a href="#精品推荐大模块" class="headerlink" title="精品推荐大模块"></a>精品推荐大模块</h3><p><img src="https://s1.vika.cn/space/2023/02/19/5ef6bce1cf6145fbab6ced8bf1f6640b" alt="image-20220126155005493"></p>
<ul>
<li><p>1 号盒子为最大的盒子， box 版心水平居中对齐</p>
</li>
<li><p>2 号盒子为上面部分，box-hd 里面左侧标题 H3 左浮动，右侧链接 a 右浮动</p>
</li>
<li><p>3 号盒子为底下部分，box-bd 里面是无序列表，有 10 个小 li 组成</p>
</li>
<li><p>小 li 外边距的问题，这里有个小技巧：给 box-hd 宽度为 1215 就可以一行装开 5 个 li</p>
</li>
<li><p>复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。</p>
</li>
</ul>
<h3 id="底部模块"><a href="#底部模块" class="headerlink" title="底部模块"></a>底部模块</h3><p><img src="https://s1.vika.cn/space/2023/02/19/bc709adeb5e64274a138f0cab495c120" alt="image-20220126155140849"></p>
<ul>
<li><p>1 号盒子是通栏大盒子，底部 footer 给高度，底色是白色</p>
</li>
<li><p>2 号盒子版心水平居中</p>
</li>
<li><p>3 号盒子版权 copyright 左对齐</p>
</li>
<li><p>4 号盒子链接组 links 右对齐</p>
</li>
</ul>
<h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h3 id="favicon图标的制作"><a href="#favicon图标的制作" class="headerlink" title="favicon图标的制作"></a>favicon图标的制作</h3><ul>
<li><p>01 把图标切成 .png 图片。</p>
</li>
<li><p>02 把 png 图片转换为 ico 图标，这需要借助于第三方转换网站，例如比特虫: <a href="http://www.bitbug.net/">http://www.bitbug.net/</a></p>
</li>
<li><p>03 在 head 标签中通过 link 标签引入即可</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><h4 id="字体图标使用场景"><a href="#字体图标使用场景" class="headerlink" title="字体图标使用场景"></a>字体图标使用场景</h4><ul>
<li><p>字体图标使用场景： 主要用于显示网页中通用、常用的一些小图标。</p>
</li>
<li><p>精灵图是有诸多优点的，但是缺点很明显。</p>
<ul>
<li><p>01 图片文件还是比较大的。</p>
</li>
<li><p>02 图片本身放大和缩小会失真。</p>
</li>
<li><p>03 一旦图片制作完毕想要更换非常复杂。</p>
</li>
</ul>
</li>
<li><p>此时，有一种技术的出现很好的解决了以上问题，就是字体图标 iconfont。</p>
</li>
<li><p><strong>字体图标可以为前端工程师提供一种方便高效的图标使用方式，展示的是图标，本质属于字体。</strong></p>
</li>
</ul>
<h4 id="字体图标的优点"><a href="#字体图标的优点" class="headerlink" title="字体图标的优点"></a>字体图标的优点</h4><ul>
<li><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。<strong>一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</strong></p>
</li>
<li><p><strong>灵活性</strong>：<strong>本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</strong></p>
</li>
<li><p><strong>兼容性</strong>：几乎支持所有的浏览器，请放心使用</p>
</li>
<li><p>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</p>
</li>
<li><p>总结：</p>
<ul>
<li>01 如果遇到一些结构和样式比较简单的小图标，就用字体图标。</li>
<li>02 如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</li>
</ul>
</li>
</ul>
<h4 id="字体图标的下载"><a href="#字体图标的下载" class="headerlink" title="字体图标的下载"></a>字体图标的下载</h4><ul>
<li><p>icomoon 字库: <code> http://icomoon.io</code>  推荐指数 ★★★★★</p>
<ul>
<li>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</li>
</ul>
</li>
<li><p>阿里 iconfont 字库:<code>http://www.iconfont.cn/</code>推荐指数 ★★★★★</p>
<ul>
<li>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI 制作图标上传生成。 重点是，免费！</li>
</ul>
</li>
</ul>
<h4 id="icomoon-字体图标引入"><a href="#icomoon-字体图标引入" class="headerlink" title="icomoon 字体图标引入"></a>icomoon 字体图标引入</h4><ul>
<li>01 把下载包里面的 fonts 文件夹放入页面根目录下</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/035b9f2fb6ff4e998f213fcd1a9fa4ad" alt="image-20220126200551822"></p>
<ul>
<li>02 在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过 css 引入到我们页面中。<ul>
<li>一定注意字体文件路径的问题。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>03 html 标签内添加小图标。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/854e160f7510419faed8add41ca77f07" alt="image-20220126200812402"></p>
<ul>
<li>给标签定义字体</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;icomoon&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>务必保证 这个字体和上面 @font-face 里面的字体保持一致</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e2c3f1ec0b5845bab2c766e47d9a0280" alt="image-20220126200928363"></p>
<h4 id="iconmoon-图标的追加"><a href="#iconmoon-图标的追加" class="headerlink" title="iconmoon 图标的追加"></a>iconmoon 图标的追加</h4><ul>
<li><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>
</li>
<li><p>把压缩包里面的 selection.json 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a985b24c9dca49ea8511ba16b2340c35" alt="image-20220126201113870"></p>
<h3 id="阿里矢量图标的使用"><a href="#阿里矢量图标的使用" class="headerlink" title="阿里矢量图标的使用"></a>阿里矢量图标的使用</h3><h4 id="不同类型图标优缺点"><a href="#不同类型图标优缺点" class="headerlink" title="不同类型图标优缺点"></a>不同类型图标优缺点</h4><ul>
<li><p>unicode是字体在网页端最原始的应用方式，特点是：</p>
<ul>
<li><p>兼容性最好，支持ie6+，及所有现代浏览器。</p>
</li>
<li><p>支持按字体的方式去动态调整图标大小，颜色等等。</p>
</li>
<li><p>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</p>
</li>
</ul>
</li>
<li><p>font-class 是 unicode 使用方式的一种变种，主要是解决unicode书写不直观，语意不明确的问题。</p>
<ul>
<li>与unicode使用方式相比，具有如下特点：<ul>
<li>兼容性良好，支持ie8+，及所有现代浏览器。</li>
<li>相比于unicode语意明确，书写更直观。可以很容易分辨这个icon是什么。</li>
<li>因为使用class来定义图标，所以当要替换图标时，只需要修改class里面的unicode引用。</li>
<li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li>
</ul>
</li>
</ul>
</li>
<li><p>symbol 引用 :</p>
<ul>
<li>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code">文章</a> 这种用法其实是做了一个svg的集合，与上面两种相比具有如下特点：<ul>
<li>支持多色图标了，不再受单色限制。</li>
<li>通过一些技巧，支持像字体那样，通过<code>font-size</code>,<code>color</code>来调整样式。</li>
<li>兼容性较差，支持 ie9+,及现代浏览器。</li>
<li>浏览器渲染 svg 的性能一般，还不如png。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="不同类型图标的使用"><a href="#不同类型图标的使用" class="headerlink" title="不同类型图标的使用"></a>不同类型图标的使用</h4><ul>
<li><ol start="0">
<li>地址: 阿里 iconfont 字库:<code>http://www.iconfont.cn/</code></li>
</ol>
</li>
<li><ol>
<li>找到需要的图标,添加到购物车,加入项目中</li>
</ol>
</li>
<li><ol start="2">
<li>在我的项目中找到需要的图标</li>
</ol>
<ul>
<li><ol>
<li>unicode 引用:</li>
</ol>
<ul>
<li><ol>
<li>生产在线链接,拷贝项目生成的 font-face 样式添加到 style 样式中</li>
</ol>
</li>
<li><ol start="2">
<li>挑选相应图标并获取字体编码，应用于页面,如:<code>&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe600;&lt;/i&gt;</code></li>
</ol>
</li>
<li><ol start="3">
<li>修改字体图标的样式,通过 <code>.iconfont</code>类名修改,并添加 <code>font-family:&quot;iconfont&quot; !important;</code> 样式,字体图标才能生效,其他样式可自行添加</li>
</ol>
</li>
</ul>
</li>
<li><ol start="2">
<li>Font class 形式 :</li>
</ol>
<ul>
<li><ol>
<li>生成在线链接, 在 head 标签中 通过 link 标签 引入即可</li>
</ol>
</li>
<li><ol start="2">
<li>使用图标时,复制图标代码到标签的 class 属性中:例如:<code>&lt;i class=&quot;iconfont icon-gouwuchekong&quot;&gt;&lt;/i&gt;</code></li>
</ol>
</li>
<li><ol start="3">
<li>修改字符图标样式,通过 <code>.iconfont</code> 类名修改</li>
</ol>
</li>
</ul>
</li>
<li><ol start="3">
<li>symbol 类型的图标使用:</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 01 拷贝项目下面生成的 symbol 代码到 head 中,通过 script 标签引入在线链接 */</span></span><br><span class="line"><span class="comment">/* 02 加入通用的 CSS 代码到 style 中,其他自定义样式,也可以通过 .icon 类名添加 */</span></span><br><span class="line">    <span class="selector-class">.icon</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">       <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">       fill: currentColor;</span><br><span class="line">       <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 03 挑选相应图标并获取类名，应用于页面即可：*/</span></span><br><span class="line">    &lt;svg class=&quot;<span class="attribute">icon</span>&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=<span class="string">&quot;#icon-xxx&quot;</span>&gt;&lt;/use&gt;</span><br><span class="line">    &lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字体文件格式"><a href="#字体文件格式" class="headerlink" title="字体文件格式"></a>字体文件格式</h3><ul>
<li><p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>
</li>
<li><p>01 TureType(.ttf) 格式 .ttf 字体是 Windows 和 Mac 的最常见的字体，支持这种字体的浏览器有 IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>
</li>
<li><p>02 Web Open Font Format(.woff) 格式 woff 字体，支持这种字体的浏览器有 IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>
</li>
<li><p>03 Embedded Open Type(.eot)格 式 .eot 字体是IE专用字体，支持这种字体的浏览器有 IE4+；</p>
</li>
<li><p>04 SVG(.svg) 格式 .svg 字体是基于 SVG 字体渲染的一种格式，支持这种字体的浏览器有 Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>
</li>
</ul>
<h3 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h3><h4 id="CSS-三角"><a href="#CSS-三角" class="headerlink" title="CSS 三角"></a>CSS 三角</h4><ul>
<li><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p>
</li>
<li><p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p>
<ul>
<li>容器的宽高设置为 0 , 边框设置为很大,再依次修改四边边框的颜色即可实现</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/7f240e45d7b5417eb662415f9f6699e5" alt="1659498410531"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">100px</span> solid red;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CSS三角强化"><a href="#CSS三角强化" class="headerlink" title="CSS三角强化"></a>CSS三角强化</h4><p><img src="https://s1.vika.cn/space/2023/02/19/5826ae1c15704cc08e4bf34c2e54c632"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">	<span class="attribute">border-style</span>: solid;</span><br><span class="line">	<span class="attribute">border-width</span>: <span class="number">22px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><ul>
<li><p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>
</li>
<li><p>更改用户的鼠标样式</p>
</li>
<li><p>表单轮廓</p>
</li>
<li><p>防止表单域拖拽</p>
</li>
</ul>
<h4 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h4><ul>
<li>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123; <span class="attribute">cursor</span>: pointer; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/16428150a1804fef8170362ed19c9410" alt="image-20220126201907067"></p>
<h4 id="轮廓线"><a href="#轮廓线" class="headerlink" title="轮廓线"></a>轮廓线</h4><ul>
<li>给表单添加 outline: 0; 或者 outline: none; 样式之后，就可以去掉输入框默认的蓝色边框。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;<span class="attribute">outline</span>: none; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a>防止拖拽文本域</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123; <span class="attribute">resize</span>: none;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vertical-align-属性应用"><a href="#vertical-align-属性应用" class="headerlink" title="vertical-align 属性应用"></a>vertical-align 属性应用</h3><ul>
<li><p>CSS 的 vertical-align 属性使用场景： <strong>经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</strong></p>
</li>
<li><p>官方解释： <strong>用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效。</strong></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/493e7c6d5ea04a59922d839d6e4a48b3" alt="image-20220126202228825"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/24abadf385794d5a98059a2982179f5b" alt="image-20220126202320778"></p>
<h4 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h4><ul>
<li>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/205a4dbfc0614738a903066e4f5e2f62" alt="image-20220126202450615"></p>
<ul>
<li>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle 就可以让文字和图片垂直居中对齐了。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="解决图片底部的默认空白"><a href="#解决图片底部的默认空白" class="headerlink" title="解决图片底部的默认空白"></a>解决图片底部的默认空白</h4><ul>
<li><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>
</li>
<li><p>主要解决方法有两种：</p>
<ul>
<li><strong>01 给图片添加 vertical-align:middle | top| bottom 等。 （提倡使用的）</strong></li>
<li><strong>02 把图片转换为块级元素 display: block;</strong></li>
</ul>
</li>
</ul>
<h3 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h3><h4 id="单行文本溢出显示"><a href="#单行文本溢出显示" class="headerlink" title="单行文本溢出显示"></a>单行文本溢出显示</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="comment">/*（ 默认 normal 自动换行） */</span></span><br><span class="line">  <span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多行文本溢出显示"><a href="#多行文本溢出显示" class="headerlink" title="多行文本溢出显示"></a>多行文本溢出显示</h4><ul>
<li>多行文本溢出显示省略号，有较大兼容性问题， 适合于 webKit 浏览器或移动端（移动端大部分是 webkit 内核）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="comment">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  <span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</li>
</ul>
<h3 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h3><h4 id="margin负值运用"><a href="#margin负值运用" class="headerlink" title="margin负值运用"></a>margin负值运用</h4><p><img src="https://s1.vika.cn/space/2023/02/19/4b01727973054f87a72769e737ba7f69"></p>
<ul>
<li><p>01 让每个盒子 margin 往左侧移动 -1px 正好压住相邻盒子边框</p>
</li>
<li><p>02 鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加 z-index ）</p>
</li>
</ul>
<h4 id="文字围绕浮动元素"><a href="#文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h4><p><img src="https://s1.vika.cn/space/2023/02/19/553f84c37d6a4ee1afcc270ac0712e39"></p>
<h4 id="行内块巧妙运用"><a href="#行内块巧妙运用" class="headerlink" title="行内块巧妙运用"></a>行内块巧妙运用</h4><p><img src="https://s1.vika.cn/space/2023/02/19/7f4b150f25fc42a3a4dc1cc52fd4742a"></p>
<ul>
<li>页码在页面中间显示:<ul>
<li>01 把这些链接盒子转换为行内块， 之后给父级指定 text-align:center;</li>
<li>02 利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li>
</ul>
</li>
</ul>
<h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><ul>
<li><ol>
<li>方法一: 要使用 CSS 重置，请在您的网页中包含以下源文件：</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span> = <span class="string">&quot;text/css&quot;</span> <span class="attr">href</span> = <span class="string">&quot;http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css&quot;</span> &gt;</span>   </span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>方法二: 直接在 css 文件中添加以下 <strong>reset.css</strong> 的样式:</li>
</ol>
<ul>
<li>(尽量减少使用通配符选择器,因为通配符选择器会遍历页面中所有标签,性能低)</li>
</ul>
</li>
<li><ol start="3">
<li>方法三:也可以直接安装 reset.css 依赖包:</li>
</ol>
<ul>
<li>安装依赖:<strong>npm install @mudas&#x2F;reset.css -S</strong></li>
<li>导入依赖:<strong>import “@mudas&#x2F;reset.css”;</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* reset.css */</span></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, pre,</span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">caption</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">abbr</span>, acronym &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-variant</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: text-top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: text-bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, select &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: inherit;</span><br><span class="line">  <span class="attribute">font-size</span>: inherit;</span><br><span class="line">  <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">  *<span class="attribute">font-size</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">legend</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS样式规则顺序"><a href="#CSS样式规则顺序" class="headerlink" title="CSS样式规则顺序"></a>CSS样式规则顺序</h2><img src="https://s1.vika.cn/space/2023/02/19/af638bfe26c04a2e987fe1011bad1399" style="zoom:150%;" />









































]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>flex弹性布局</title>
    <url>/2023/02/26/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10304_Flex/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="flex-弹性布局"><a href="#flex-弹性布局" class="headerlink" title="flex 弹性布局"></a>flex 弹性布局</h1><h2 id="认识-flexbox"><a href="#认识-flexbox" class="headerlink" title="认识 flexbox"></a>认识 flexbox</h2><ul>
<li>Flexbox 翻译为弹性盒子:<ul>
<li>弹性盒子是一种用于按行或按列布局元素的一维布局方法 ;</li>
<li>元素可以膨胀以填充额外的空间, 收缩以适应更小的空间;</li>
<li>通常我们使用 Flexbox 来进行布局的方案称之为 flex 布局(flex layout);</li>
</ul>
</li>
<li>flex 布局是目前 web 开发中使用最多的布局方案：<ul>
<li>flex 布局（Flexible 布局，弹性布局）;</li>
<li>目前特别在移动端可以说已经完全普及;</li>
<li>在 PC 端也几乎已经完全普及和使用, 只有非常少数的网站依然在用浮动来布局</li>
</ul>
</li>
</ul>
<h2 id="与传统布局的对比"><a href="#与传统布局的对比" class="headerlink" title="与传统布局的对比"></a>与传统布局的对比</h2><ul>
<li><p>传统布局</p>
<ul>
<li>兼容性好</li>
<li>布局繁琐</li>
<li>局限性，不能在移动端很好的布局</li>
</ul>
</li>
<li><p>flex 弹性布局</p>
<ul>
<li>操作方便，布局极为简单，移动端应用很广泛</li>
<li>PC 端浏览器支持情况较差</li>
<li>IE 11 或更低版本，不支持或仅部分支持</li>
</ul>
</li>
<li><p>建议：</p>
<ul>
<li>如果是 PC 端页面布局，我们还是传统布局。</li>
<li>如果是移动端或者不考虑兼容性问题的 PC 端页面布局，我们还是使用 flex 弹性布局</li>
</ul>
</li>
</ul>
<h2 id="flex-布局初体验"><a href="#flex-布局初体验" class="headerlink" title="flex 布局初体验"></a>flex 布局初体验</h2><p><img src="https://s1.vika.cn/space/2023/02/26/1a5797a10cc84dae91561595a2f3a001" alt="1656553355551"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 01 给 div 只需要添加 “display：flex” 即可 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fac090</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 02 span 直接给宽度和高度，背景颜色，还有蓝色边框*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#95b3d7</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#116ddd</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-布局原理"><a href="#flex-布局原理" class="headerlink" title="flex 布局原理"></a>flex 布局原理</h2><ul>
<li><p>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</p>
</li>
<li><p><strong>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</strong></p>
</li>
<li><p>伸缩布局 &#x3D; 弹性布局 &#x3D; 伸缩盒布局 &#x3D; 弹性盒布局 &#x3D; flex 布局</p>
</li>
<li><p>采用 Flex 布局的元素，称为 <strong>Flex 伸缩容器</strong>（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 <strong>Flex 伸缩项</strong>（flex item），简称”项目”。</p>
<ul>
<li>体验中 div 就是 flex 父容器。</li>
<li>体验中 span 就是 子容器 ,也叫 flex 项目</li>
<li>子容器可以横向排列也可以纵向排列</li>
</ul>
</li>
<li><p>总结 flex 布局原理：</p>
<ul>
<li>就是通过给父盒子添加 flex 属性，来控制子盒子的位置和排列方式</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/101eac6b5771471aa7c713f3f8350221" alt="1656553831510"></p>
<h2 id="flex-布局父元素常见属性"><a href="#flex-布局父元素常见属性" class="headerlink" title="flex 布局父元素常见属性"></a>flex 布局父元素常见属性</h2><ul>
<li><p>以下由 6 个属性是对父元素设置的</p>
<ul>
<li><p><strong>flex-direction</strong>：设置主轴的方向</p>
</li>
<li><p><strong>justify-content</strong>：设置主轴上的子元素排列方式</p>
</li>
<li><p><strong>flex-wrap</strong>：设置子元素是否换行</p>
</li>
<li><p><strong>align-content</strong>：设置侧轴上的子元素的排列方式（多行）</p>
</li>
<li><p><strong>align-items</strong>：设置侧轴上的子元素排列方式（单行）</p>
</li>
<li><p><strong>flex-flow</strong>：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</p>
</li>
</ul>
</li>
</ul>
<h2 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h2><ul>
<li>01 主轴与侧轴<ul>
<li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和 y 轴<ul>
<li>默认主轴方向就是 x 轴方向，水平向右</li>
<li>默认侧轴方向就是 y 轴方向，水平向下</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a69f0458ce5a4433999c05a829c811c9" alt="1656554108426"></p>
<ul>
<li>02 属性值<ul>
<li>flex-direction 属性决定主轴的方向（即项目的排列方向）</li>
<li>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/79a128a05f924139a389d27a8c6deeb6" alt="1656554168421"></p>
<ul>
<li>在伸缩布局中，默认情况下水平方向是主轴，默认情况下主轴的起点在伸缩容器的最左边,默认情况下所有的伸缩项都是从主轴的起点开始排版的, 但是我们也可以通过属性来修改主轴的起点的位置<ul>
<li><strong>flex-direction: 用于修改主轴起点的位置</strong></li>
<li><strong>row: 起点在伸缩容器的最左边，终点在伸缩容器的最右边.从左至右的排版，默认的取值</strong></li>
<li><strong>row-reverse: 起点在伸缩容器的最右边，终点在伸缩容器的最左边，从右至左的排版</strong></li>
<li><strong>column: 起点在伸缩容器的最顶部，终点在伸缩容器的最底部，从上至下的排版</strong><ul>
<li>注意点:在伸缩布局中主轴和侧轴永远都是十字交叉的，只要主轴的方向发生了变化，侧轴也会发生变化</li>
</ul>
</li>
<li><strong>column-reverse: 起点在伸缩容器的最底部，终点在伸缩容器的最顶部，从下至上的排版</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row; <span class="comment">/* 伸缩项从左到右排列 默认项 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row-reverse; <span class="comment">/* 伸缩项从右到左排列 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column; <span class="comment">/* 设置主轴为 y 轴,伸缩项从上到下排列 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column-reverse; <span class="comment">/* 设置主轴为 y 轴,伸缩项从下到上排列 */</span></span><br></pre></td></tr></table></figure>

<h2 id="justify-content-主轴元素排列"><a href="#justify-content-主轴元素排列" class="headerlink" title="justify-content 主轴元素排列"></a>justify-content 主轴元素排列</h2><ul>
<li><strong>justify-content 属性定义了项目在主轴上的对齐方式</strong></li>
<li>注意： 使用这个属性之前一定要确定好主轴是哪个</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/8ae75e7d4c834a9bb2ae63670c902f5c" alt="1656554254171"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row; <span class="comment">/* 主轴为 x 轴*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-start; <span class="comment">/* 伸缩项从左到右排列 类似于左对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end; <span class="comment">/* 伸缩项从右到左排列 类似于右对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center; <span class="comment">/* 居中对齐 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between; <span class="comment">/* 两端贴边,再平分剩余空间 类似于两端对齐 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-around; <span class="comment">/* 平分剩余空间 */</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-wrap-子元素换行"><a href="#flex-wrap-子元素换行" class="headerlink" title="flex-wrap 子元素换行"></a>flex-wrap 子元素换行</h2><ul>
<li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap 属性定义，flex 布局中默认是不换行的。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/dd36735cd10f4bd5b9ccf0f6b9d23696" alt="1656554319839"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.默认情况下如果伸缩容器的一行放不下所有的伸缩项，那么系统会自动等比压缩所有的伸缩项</span></span><br><span class="line"><span class="comment">2.在伸缩容器中有一个叫做 flex-wrap 属性，专门用于控制放不下是否需要换行的</span></span><br><span class="line"><span class="comment">默认的取值:</span></span><br><span class="line"><span class="comment">	flex-wrap : 不换行</span></span><br><span class="line"><span class="comment">	wrap : 放不下就换行而不是等比压缩</span></span><br><span class="line"><span class="comment">	wrap-reverse : 放不下就换行，以行为单位进行反转*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap-reverse;</span><br></pre></td></tr></table></figure>

<h2 id="align-items-侧轴元素排列-单行"><a href="#align-items-侧轴元素排列-单行" class="headerlink" title="align-items 侧轴元素排列(单行)"></a>align-items 侧轴元素排列(单行)</h2><ul>
<li>该属性是控制子项在侧轴（默认是 y 轴）上的排列方式 在子项为单项（单行）的时候使用</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/aea6e1c21d7342ce8b23f085ebd3956e" alt="1656554369596"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 告诉浏览器排版好的伸缩项需要和侧轴的起点对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start;</span><br><span class="line"><span class="attribute">align-items</span>: flex-end;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* baseline:让所有伸缩项中的基线在一条直线上对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: baseline;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* stretch (拉伸对齐/等高对齐):</span></span><br><span class="line"><span class="comment">让所有的伸缩项的高度变为侧轴的高度</span></span><br><span class="line"><span class="comment">注意点:</span></span><br><span class="line"><span class="comment">	如果需要设置为拉伸对齐，那么伸缩项不能设置高度,如果伸缩项设置了高度，那么拉伸对齐就会失效 */</span></span><br><span class="line"><span class="attribute">align-items</span>: stretch;</span><br></pre></td></tr></table></figure>

<h2 id="align-content-侧轴元素排列-多行"><a href="#align-content-侧轴元素排列-多行" class="headerlink" title="align-content 侧轴元素排列(多行)"></a>align-content 侧轴元素排列(多行)</h2><ul>
<li>设置子项在侧轴上的排列方式,并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a687a5a6c5044189b9bf3597d8e814ac" alt="1656554491124"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在伸缩容器中有一个叫做 align-content 的属性，是专门用于设置换行之后的对齐方式的</span></span><br><span class="line"><span class="comment">注意点:只有伸缩项发生了换行这个属性才有效</span></span><br><span class="line"><span class="comment">		flex-start: 换行之后和侧轴的起点对齐，一行接一行</span></span><br><span class="line"><span class="comment">		flex-end: 换行之后和侧轴的终点对齐，将所有换行之后的内容当做一个整体来操作</span></span><br><span class="line"><span class="comment">		center: 换行之后和侧轴的中点对齐</span></span><br><span class="line"><span class="comment">		space-between: 换行之后在侧轴上两端对齐</span></span><br><span class="line"><span class="comment">		space-around: 换行之后在侧轴上环绕对齐</span></span><br><span class="line"><span class="comment">		stretch: 以行为单位进行拉伸，拉伸的部分以空白填充，保证拉伸之后所有的行加起来能够填满侧轴</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">align-content</span>: flex-start;</span><br><span class="line"><span class="attribute">align-content</span>: flex-end;</span><br><span class="line"><span class="attribute">align-content</span>: center;</span><br><span class="line"><span class="attribute">align-content</span>: space-between;</span><br><span class="line"><span class="attribute">align-content</span>: space-around;</span><br><span class="line"><span class="attribute">align-content</span>: stretch;</span><br></pre></td></tr></table></figure>

<h2 id="align-content-和-align-items-区别"><a href="#align-content-和-align-items-区别" class="headerlink" title="align-content 和 align-items 区别"></a>align-content 和 align-items 区别</h2><ul>
<li><strong>align-items 适用于单行情况</strong>下， 只有上对齐、下对齐、居中和 拉伸</li>
<li><strong>align-content 适应于换行（多行）的情况</strong>下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li>
<li>总结: 就是<strong>单行找 align-items 多行找 align-content</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/8ad07c1ea32448609f78d5efcb3c52b6" alt="1656554620130"></p>
<h2 id="flex-flow-复合属性"><a href="#flex-flow-复合属性" class="headerlink" title="flex-flow 复合属性"></a>flex-flow 复合属性</h2><ul>
<li>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br></pre></td></tr></table></figure>

<ul>
<li>flex-direction：设置主轴的方向</li>
<li>flex-wrap：设置子元素是否换行</li>
<li>flex-flow：复合属性，<strong>相当于同时设置了 flex-direction 和 flex-wrap</strong></li>
</ul>
<h2 id="flex-布局子项常见属性"><a href="#flex-布局子项常见属性" class="headerlink" title="flex 布局子项常见属性"></a>flex 布局子项常见属性</h2><ul>
<li>flex 子项目占的份数</li>
<li>align-self 控制子项自己在侧轴的排列方式</li>
<li>order 属性定义子项的排列顺序（前后顺序）</li>
</ul>
<h2 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h2><ul>
<li>flex 属性定义子项目分配剩余空间，用 flex 来表示占多少份数。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="align-self-子项在侧轴的排列"><a href="#align-self-子项在侧轴的排列" class="headerlink" title="align-self 子项在侧轴的排列"></a>align-self 子项在侧轴的排列</h2><ul>
<li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</li>
<li>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">/* 设置自己在侧轴上的排列方式 */</span></span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果在伸缩容器中通过 align-items:来控制伸缩项的对齐方式，是一次性控制所有伸缩项的对齐方式,如果想单独的控制某一个伸缩项在侧轴上的对齐方式，那么需要将控制对齐方式的属性写到伸缩项中 */</span></span><br><span class="line"><span class="comment">/* align-items:写到伸缩容器中, 控制所有伸缩项 */</span></span><br><span class="line"><span class="comment">/* align-self:写到伸缩项中, 控制编写对应代码的那个伸缩项 */</span></span><br><span class="line"><span class="comment">/* align-self:的取值和 align-items 的取值是一样的，只是控制的范围和书写的位置不同而已 */</span></span><br><span class="line"><span class="attribute">align-self</span>: flex-start;</span><br><span class="line"><span class="attribute">align-self</span>: flex-end;</span><br><span class="line"><span class="attribute">align-self</span>: center;</span><br></pre></td></tr></table></figure>

<h2 id="order-定义项目的排列顺序"><a href="#order-定义项目的排列顺序" class="headerlink" title="order 定义项目的排列顺序"></a>order 定义项目的排列顺序</h2><ul>
<li>数值越小，排列越靠前，默认为 0。属于伸缩项的属性</li>
<li>注意：和 z-index 不一样。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	默认情况下每一个伸缩项都有一个 order 属性，用于决定排序的先后顺序默认情况下所有伸缩项的 order 属性的取值都是 0</span></span><br><span class="line"><span class="comment">	我们可以通过修改 order 属性的取值来实现伸缩项的排序</span></span><br><span class="line"><span class="comment">	排序的规则:从小到大的排序，越小的显示在越前面，越大的显示在越后面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-grow-扩充属性"><a href="#flex-grow-扩充属性" class="headerlink" title="flex-grow 扩充属性"></a>flex-grow 扩充属性</h2><ul>
<li><p><strong>在伸缩项中有一个 flex-grow 属性，用于控制当所有伸缩项的宽度总和小于伸缩容器宽度的时候如何扩充自己，以便于所有伸缩项宽度的总和能够填满整个伸缩容器</strong></p>
</li>
<li><p>默认情况下 flex-grow 的取值是 0，表示我们设置的宽度是多少就按照多少来显示，不进行任何的扩充</p>
</li>
<li><p>注意点:</p>
<ul>
<li>只有当所有伸缩项的宽度总和小于伸缩容器宽度的时候, flex-grow 这个属性才有效</li>
</ul>
</li>
<li><p>flex-grow 扩充的公式</p>
<ul>
<li>1 利用伸缩容器宽度 – 所有伸缩项的总宽度 &#x3D; 剩余空间<ul>
<li>600 - 300 &#x3D; 300</li>
</ul>
</li>
<li>2 利用剩余空间 &#x2F; 所有需要扩充份数的总和 &#x3D; 每一份的大小<ul>
<li>300 &#x2F; (1 + 4 + 8)&#x3D; 23.07</li>
</ul>
</li>
<li>3 利用当前伸缩项的宽度＋需要的份数的宽度<ul>
<li>第一个伸缩项 &#x3D;100 + (1 * 23.07) &#x3D; 123.07</li>
<li>第二个伸缩项 &#x3D;100 + (4 * 23.07) &#x3D; 192.28</li>
<li>第三个伸缩项 &#x3D;100 + (8* 23.07) &#x3D; 284.56</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-grow</span>: <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-grow</span>: <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<h2 id="flex-shrink-缩小属性"><a href="#flex-shrink-缩小属性" class="headerlink" title="flex-shrink 缩小属性"></a>flex-shrink 缩小属性</h2><ul>
<li><p><strong>在伸缩项中有一个 flex-shrink 属性，用于控制当所有伸缩项的宽度总和大于伸缩容器宽度的时候如何缩小自己，以便于所有伸缩项宽度的总和能够填满整个伸缩容器</strong></p>
</li>
<li><p>默认情况下 flex-shrink 的取值是 1，表示当所有伸缩项宽度的总和大于伸缩容器宽度的时候等比缩小自己</p>
</li>
<li><p>注意点:</p>
<ul>
<li>只有当所有伸缩项的宽度总和大于伸缩容器宽度的时候, lex-shrink 这个属性才有效</li>
</ul>
</li>
<li><p>flex-shrink 扩充的公式</p>
<ul>
<li>1 利用所有伸缩项的宽度总和 – 伸缩容器宽度 &#x3D; 溢出的宽度<ul>
<li>900- 600 &#x3D; 300</li>
</ul>
</li>
<li>2 计算权重值<ul>
<li>利用每一个伸缩项需要的份数 * 当前伸缩项的宽度然后再相加, 1 * 300 + 4 _ 300 + 8_ 300 &#x3D; 3900</li>
</ul>
</li>
<li>3 计算每个伸缩项需要缩小的范围<ul>
<li>溢出的宽度 * 当前伸缩项的宽度 * 当前伸缩项需要的份数 &#x2F; 权重值 300 * 300 *1&#x2F;3900 &#x3D; 23.07</li>
<li>第一个伸缩项宽度 &#x3D; 300 - 23.07 &#x3D; 276.9 300 _ 300_ 4&#x2F;3900 &#x3D; 92.3</li>
<li>第二个伸缩项宽度 &#x3D; 300 - 92.3 &#x3D; 207.6</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">8</span>; <span class="comment">/* 值越大,缩小越狠 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>1 如果没有指定 flex-grow 属性，或者 flex-grow 的值是 0，那么当前的伸缩项不会被扩充</li>
<li>2 如果 flex-shrink 的值是 0，那么当前的伸缩项不会被缩小</li>
<li>3 注意点<ul>
<li>前面所写的注释都是说宽度扩充或者宽度缩小，但是这种说法是不严谨的也有可能扩充和缩小的是高度，到底是宽度还是高度是由主轴决定的, 扩充和缩小的是主轴方向上的值</li>
<li>也就是说如果主轴是水平方向的，那么扩充和缩小的就是宽度, 也就是说如果主轴是垂直方向的，那么扩充和缩小的就是高度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="flex-basis-设置宽度"><a href="#flex-basis-设置宽度" class="headerlink" title="flex-basis 设置宽度"></a>flex-basis 设置宽度</h2><ul>
<li>1 在伸缩布局中可以通过 flex-basis 属性设置伸缩项的宽度<ul>
<li>注意点: flex-basis 只有在伸缩布局中才有效</li>
</ul>
</li>
<li>2 在伸缩布局中如果通过 flex-basis 设置了宽度，那么再通过 width 设置宽度就会无效, 也就是说 flex-basis 的优先级要高于 width 的优先级</li>
<li>3 在伸缩布局中如果同时通过 flex-basis 和 width 设置了宽度，而且一个设置的是 auto,一个设置的是具体的值,那么会按照具体的值来显示</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-basis</span>: <span class="number">100px</span>; <span class="comment">/*同时设置 width 和 flex-basis,会以 flex-basis 为准*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 同时设置 width 和 flex-basis,会以 具体值的 为准 */</span></span><br><span class="line"><span class="attribute">flex-basis</span>: auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-basis</span>: <span class="number">300px</span>; <span class="comment">/* 同时设置 width 和 flex-basis ,会以 具体值的 为准 */</span></span><br><span class="line"><span class="attribute">width</span>: auto;</span><br></pre></td></tr></table></figure>

<h2 id="伸缩项属性连写"><a href="#伸缩项属性连写" class="headerlink" title="伸缩项属性连写"></a>伸缩项属性连写</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* flex:扩充缩小宽度; */</span></span><br><span class="line"><span class="comment">/* 默认值: flex:0 1 auto; */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="携程网案例"><a href="#携程网案例" class="headerlink" title="携程网案例"></a>携程网案例</h2><ul>
<li><p>技术选型</p>
<ul>
<li>方案：我们采取单独制作移动页面方案</li>
<li>技术：布局采取 flex 布局</li>
</ul>
</li>
<li><p>设置视口标签以及引入初始化样式</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no,</span></span></span><br><span class="line"><span class="string"><span class="tag">initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/normalize.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常用初始化样式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">14px</span>/<span class="number">1.5</span> Tahoma, <span class="string">&#x27;Lucida Grande&#x27;</span>, Verdana, <span class="string">&#x27;Microsoft</span></span><br><span class="line"><span class="string">    Yahei&#x27;</span>, STXihei, hei;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>常见模块命名</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c4db1f35f13042b1b9b157c7ce45d39d" alt="1656555457323"></p>
<p><img src="https://s1.vika.cn/space/2023/02/26/f2a8bac22752479382d40e44bfcfa0dc" alt="1656555469979"></p>
<ul>
<li>常见 flex 布局思路</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b8f1cbbcfde44beabfd333c87502b64f" alt="1656555519273"></p>
<ul>
<li>背景线性渐变</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6ecd1382f101484cb5a3e77aae308117" alt="1656555584915"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* background: linear-gradient(起始方向, 颜色1, 颜色2, ...); */</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, red, blue);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, red, blue);</span><br></pre></td></tr></table></figure>

<ul>
<li>背景渐变必须添加浏览器私有前缀</li>
<li>起始方向可以是： 方位名词 或者 度数 ， 如果省略默认就是 top</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/2023/02/26/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/102_HTML5_CSS3/10201_HTML5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 新特性"></a>HTML5 新特性</h2><ul>
<li><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。</p>
</li>
<li><p>这些新特性都有兼容性问题，基本是 IE9+ 以上版本的浏览器才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p>
</li>
<li><p>声明：</p>
<ul>
<li>新特性增加了很多，但是我们专注于开发常用的新特性。</li>
<li>基础班我们讲解部分新特性，到了就业班还会继续讲解其他新特性。</li>
</ul>
</li>
</ul>
<h2 id="H5-新增语义化标签"><a href="#H5-新增语义化标签" class="headerlink" title="H5 新增语义化标签"></a>H5 新增语义化标签</h2><ul>
<li>以前布局，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“header”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“nav”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“content”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“footer”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>header：头部标签</li>
<li>nav：导航标签</li>
<li>article：内容标签</li>
<li>section：定义文档某个区域</li>
<li>aside：侧边栏标签</li>
<li>footer：尾部标签</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/39f15c8edad84403a317f53dd6eeac5d"></p>
<ul>
<li>注意：<ul>
<li><p>这种语义化标准主要是针对搜索引擎的</p>
</li>
<li><p>这些新标签,在页面中可以使用多次</p>
</li>
<li><p>在 IE9 中，需要把这些元素转换为块级元素</p>
</li>
<li><p>其实，我们移动端更喜欢使用这些标签</p>
</li>
<li><p>HTML5 还增加了很多其他标签，我们后面再慢慢学</p>
</li>
</ul>
</li>
</ul>
<h2 id="H5-新增多媒体标签"><a href="#H5-新增多媒体标签" class="headerlink" title="H5 新增多媒体标签"></a>H5 新增多媒体标签</h2><p><img src="https://s1.vika.cn/space/2023/02/26/0644c80c07bc458faad057d3281fd733"></p>
<h3 id="视频标签-video"><a href="#视频标签-video" class="headerlink" title="视频标签 video"></a>视频标签 video</h3><h4 id="支持的视频格式"><a href="#支持的视频格式" class="headerlink" title="支持的视频格式"></a>支持的视频格式</h4><ul>
<li>当前 video 元素支持三种视频格式： 尽量使用 .mp4 格式</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/bb8eea8de5f14790a1d3de0185f2894c" alt="image-20220126211655457"></p>
<h4 id="video标签的写法"><a href="#video标签的写法" class="headerlink" title="video标签的写法"></a>video标签的写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件地址&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">  您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span>标签播放视频<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>第二种格式存在的意义</p>
<ul>
<li>由于视频数据非常非常的重要, 所以五大浏览器厂商都不愿意支持别人的视频格式, 所以导致了没有一种视频格式是所有浏览器都支持的, 这个时候 W3C 为了解决这个问题, 所以推出了第二个 video 标签的格式</li>
<li>video 标签的第二种格式存在的意义就是为了解决浏览器适配问题. video 元素支持三种视频格式, 我们可以把这三种格式都通过 source 标签指定给 video 标签, 那么以后当浏览器播放视频时它就会从这三种中选择一种自己支持的格式来播放</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li>当前通过 video 标签的第二种格式虽然能够指定所有浏览器都支持的视频格式, 但是想让所有浏览器都通过 video 标签播放视频还有一个前提条件, 就是浏览器必须支持 HTML5标签, 否则同样无法播放</li>
<li>在过去的一些浏览器是不支持 HTML5 标签的, 所以为了让过去的一些浏览器也能够通过 video 标签来播放视频, 那么我们以后可以通过一个 JS 的框架叫做 <strong>html5media</strong> 来实现</li>
</ul>
</li>
</ul>
<h4 id="video标签的属性"><a href="#video标签的属性" class="headerlink" title="video标签的属性"></a>video标签的属性</h4><ul>
<li><strong>src</strong>: 告诉 video 标签需要播放的视频地址 <code>src=&quot;./1.mp4&quot;</code></li>
<li><strong>autoplay</strong>: 告诉 video 标签是否需要自动播放视频,默认不自动播放  <code>autoplay=&quot;autoplay&quot;</code></li>
<li><strong>controls</strong>: 告诉 video 标签是否需要显示控制条 <code>controls=&quot;controls&quot;</code></li>
<li><strong>poster</strong>: 告诉 video 标签视频没有播放之前显示的占位图片 <code>poster=&quot;./1.jpg&quot;</code></li>
<li><strong>loop</strong>: 告诉 video 标签循环播放视频. 一般用于做广告视频 <code>loop=&quot;loop&quot;</code></li>
<li><strong>preload</strong>: 告诉 video 标签预加载视频, 但是如果设置了 autoplay 属性, 那么 preload 属性就会失效</li>
<li><strong>muted</strong>:告诉 video 标签视频静音 <code>muted=&quot;muted&quot;</code></li>
<li><strong>width&#x2F;height</strong>: 和 img 标签中的一模一样</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/cdbf4c3a5eef48daa1a2c1d777d2fce0"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">poster</span>=<span class="string">&quot;./img/002.jpg&quot;</span> <span class="attr">loop</span> <span class="attr">muted</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/001.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签 audio"></a>音频标签 audio</h3><h4 id="支持的音频格式"><a href="#支持的音频格式" class="headerlink" title="支持的音频格式"></a>支持的音频格式</h4><ul>
<li>当前 audio 元素支持三种音频格式：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b6eef4860d5a4e848c0155bcff34ee80" alt="image-20220126212438882"></p>
<h4 id="audio标签的写法"><a href="#audio标签的写法" class="headerlink" title="audio标签的写法"></a>audio标签的写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件地址&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; audio controls=&quot;controls&quot; &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span> /&gt;</span></span><br><span class="line">  您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span>标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="audio标签常见属性"><a href="#audio标签常见属性" class="headerlink" title="audio标签常见属性"></a>audio标签常见属性</h4><ul>
<li>audio 标签常见属性:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/2a6cfae9a1ad4a63a646213b029d5075" alt="image-20220126212557296"></p>
<ul>
<li><strong>谷歌浏览器把音频和视频自动播放禁止了</strong></li>
<li>注意点: <ul>
<li>audio 标签的使用和 video 标签的使用基本一样, video 中能够使用的属性在 audio 标签中大部分都能够使用, 并且功能都一样. </li>
<li>不过有3个属性不能用, height &#x2F; width &#x2F; poster</li>
</ul>
</li>
</ul>
<h3 id="多媒体标签总结"><a href="#多媒体标签总结" class="headerlink" title="多媒体标签总结"></a>多媒体标签总结</h3><ul>
<li><p>音频标签和视频标签使用方式基本一致</p>
</li>
<li><p>浏览器支持情况不同</p>
</li>
<li><p>谷歌浏览器把音频和视频自动播放禁止了</p>
</li>
<li><p>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过 JavaScript 解决）</p>
</li>
<li><p>视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</p>
</li>
</ul>
<h2 id="H5-新增的-input-类型"><a href="#H5-新增的-input-类型" class="headerlink" title="H5 新增的 input 类型"></a>H5 新增的 input 类型</h2><p><img src="https://s1.vika.cn/space/2023/02/26/c40ff3bfa1524d6e90b4353f95ddc9f0" alt="image-20220126212900102"></p>
<h3 id="邮箱验证"><a href="#邮箱验证" class="headerlink" title="邮箱验证"></a>邮箱验证</h3><ul>
<li>可以自动校验输入的内容是否符合邮箱的格式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="URL地址校验"><a href="#URL地址校验" class="headerlink" title="URL地址校验"></a>URL地址校验</h3><ul>
<li>可以自动校验输入的内容是否是 URL 地址</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">域名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="输入框中只能输入数字"><a href="#输入框中只能输入数字" class="headerlink" title="输入框中只能输入数字"></a>输入框中只能输入数字</h3><ul>
<li>限制输入框只能输入数字</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML5 中 input 类型增加了很多 type 类型, 例如 color、date 但是都不兼容, 后面讲到浏览器兼容时会重点讲解</li>
</ul>
<h3 id="取色器"><a href="#取色器" class="headerlink" title="取色器"></a>取色器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML5 中 inpu t类型增加了很多 type 类型, 例如 color、date 但是都不兼容, 后面讲到浏览器兼容时会重点讲解</li>
</ul>
<h2 id="H5-新增的表单属性"><a href="#H5-新增的表单属性" class="headerlink" title="H5 新增的表单属性"></a>H5 新增的表单属性</h2><p><img src="https://s1.vika.cn/space/2023/02/26/51bc77823640472295bbd1b38e81eeea" alt="image-20220126213015011"></p>
<ul>
<li>可以通过以下设置方式修改 placeholder 里面的字体颜色：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/2023/02/26/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/102_HTML5_CSS3/10202_CSS3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="CSS3-的现状"><a href="#CSS3-的现状" class="headerlink" title="CSS3 的现状"></a>CSS3 的现状</h2><ul>
<li><p>新增的 CSS3 特性有兼容性问题，ie9+ 才支持</p>
</li>
<li><p>移动端支持优于 PC 端</p>
</li>
<li><p>不断改进中</p>
</li>
<li><p>应用相对广泛</p>
</li>
<li><p>现阶段主要学习：新增选择器和盒子模型以及其他特性</p>
</li>
</ul>
<h3 id="CSS3-盒子模型"><a href="#CSS3-盒子模型" class="headerlink" title="CSS3 盒子模型"></a>CSS3 盒子模型</h3><ul>
<li><p><strong>CSS3 中可以通过 box-sizing 来指定盒模型，有 2 个值：即可指定为 content-box、border-box</strong>，这样我们计算盒子大小的方式就发生了改变。</p>
</li>
<li><p>可以分成两种情况：</p>
<ul>
<li>**box-sizing : content-box; ** : 盒子大小为 width &#x2F; height + padding + border （以前默认的）</li>
<li><strong>box-sizing : border-box;</strong> : 盒子大小为 width &#x2F; height</li>
</ul>
</li>
<li><p><strong>如果盒子模型我们改为了 box-sizing: border-box ， 那 padding 和 border 就不会撑大盒子了（前提 padding 和 border 不会超过 width 宽度）</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--增加padding / border 之后元素宽高会变大--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--增加padding/border之后元素宽不会变大--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS3-滤镜-filter"><a href="#CSS3-滤镜-filter" class="headerlink" title="CSS3 滤镜 filter"></a>CSS3 滤镜 filter</h3><ul>
<li>filter CSS 属性<strong>将模糊或颜色偏移等图形效果应用于元素。</strong></li>
<li>blur 函数: 模糊处理,数值越大越模糊</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/95ebd456162a45cbbff7d17a0d523b76" alt="image-20220126220324724"></p>
<h3 id="CSS3-calc-函数"><a href="#CSS3-calc-函数" class="headerlink" title="CSS3 calc 函数"></a>CSS3 calc 函数</h3><ul>
<li>calc() 此 CSS 函数让你在声明 CSS 属性值时执行一些计算。</li>
<li>括号里面可以使用<code>+ - \* /</code>来进行计算。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br></pre></td></tr></table></figure>

<h2 id="CSS-3-圆角边框与阴影"><a href="#CSS-3-圆角边框与阴影" class="headerlink" title="CSS 3 圆角边框与阴影"></a>CSS 3 圆角边框与阴影</h2><h3 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h3><ul>
<li>01 什么是边框圆角<ul>
<li>在 CSS3 中，新增了圆角边框样式，将直角的边框变为圆角的边框,这样我们的盒子就可以变圆角了。</li>
<li><strong>border-radius 属性用于设置元素的外边框圆角。</strong></li>
<li>参数值可以为 像素值 或 百分比 的形式</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: length;</span><br></pre></td></tr></table></figure>

<ul>
<li>02 边框的格式<ul>
<li>该属性是一个简写属性，可以跟四个值，分别代表<strong>左上角、右上角、右下角、左下角</strong></li>
<li>分开写：<strong>border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和 border-bottom-left-radius</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>; <span class="comment">/*左上 右上 右下 左下*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>; <span class="comment">/*左上 右上左下 右下*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">50px</span>; <span class="comment">/*左上右下 右上左下*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span>; <span class="comment">/*左上 右下 右上 左下*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当边框圆角的值 &gt; 边框宽度的时候，外边框和内边框都会变成圆角</span></span><br><span class="line"><span class="comment">	 当边框圆角的值 &lt;= 外边宽度的时候，外边框是圆角，内边框是直角 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>03 将正方形变为圆形的技巧<ul>
<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>04 系统如何绘制圆角<ul>
<li>首先根据指定的值找到圆心</li>
<li>按照指定的值作为半径绘制圆弧</li>
</ul>
</li>
<li>05 绘制半圆</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="comment">/*绘制半圆*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>06 绘制椭圆</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="comment">/*绘制椭圆*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>07 兼容性 :<ul>
<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用.</li>
</ul>
</li>
</ul>
<p>圆角边框案例:</p>
<p><img src="https://s1.vika.cn/space/2023/02/26/dc75652423ca4bd79aa7324a711739ce"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">background</span>:red;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;新人福利&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul>
<li>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/808ede7781e84cc4b0dd82cf3cfcf2a7" alt="image-20220126142335889"></p>
<ul>
<li>注意:<ul>
<li>01 默认的是外阴影 ( outset ), 但是不可以写这个单词,否则造成阴影无效</li>
<li>02 盒子阴影不占用空间，不会影响其他盒子排列。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span> <span class="number">#ccc</span>;</span><br></pre></td></tr></table></figure>

<h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><ul>
<li><strong>text-shadow:水平偏移 垂直偏移 模糊度 阴影颜色</strong></li>
<li>不写文字阴影颜色,则颜色默认和文字颜色一样</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*水平偏移 垂直偏移 模糊度 阴影颜色*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image-source</span>: <span class="built_in">ur1</span>(<span class="string">&#x27;images/border.jpg&#x27;</span>); <span class="comment">/* 告诉浏览器让哪一张图片成为边框 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果只通过 source 指定了哪一张图片作为边框的图片，默认情况下会将图片放到边框的四个顶点</li>
<li>如果设置了边框图片，那么就不会显示边框颜色，边框图片的优先级高于边框颜色</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image-slice</span>: <span class="number">70</span> <span class="number">70</span> <span class="number">70</span> <span class="number">70</span>; <span class="comment">/* 告诉浏览器如何对指定的边框图片进行切割 */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image-width</span>: <span class="number">10px</span>; <span class="comment">/* 告诉浏览器边框图片显示的宽度，并不是指定边框的宽度 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:如果通过 border-image-width 指定了边框图片的宽度，那么默认的边框宽度就会失效</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 告诉浏览器除了边框图片四个角以外的图片如何填充，默认是拉伸 */</span></span><br><span class="line"><span class="attribute">border-image-repeat</span>: stretch; <span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">border-image-repeat</span>: repeat;</span><br><span class="line"><span class="attribute">border-image-repeat</span>: round;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 告诉浏览器边框图片需要向外移动多少 */</span></span><br><span class="line"><span class="attribute">border-image-outset</span>: <span class="number">10px</span> <span class="number">30px</span> <span class="number">50px</span> <span class="number">70px</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 边框图片的连写 */</span></span><br><span class="line"><span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/border.jpg&#x27;</span>) <span class="number">70</span> fill repeat;</span><br></pre></td></tr></table></figure>

<h2 id="CSS-3-渐变"><a href="#CSS-3-渐变" class="headerlink" title="CSS 3 渐变"></a>CSS 3 渐变</h2><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*默认从上到下渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red,green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从下到上渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to top,red,green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从左到右渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,red,green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从右到左渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to left, red, green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指定度数渐变 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">70deg</span>, red, green);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>至少需要传递 2 个颜色,至多没有上限</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, green, yellow);</span><br></pre></td></tr></table></figure>

<ul>
<li>默认情况下会自动计算纯色和渐变色的范围，但是我们也可以手动指定</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red <span class="number">50px</span>, green);</span><br></pre></td></tr></table></figure>

<h3 id="镜像渐变"><a href="#镜像渐变" class="headerlink" title="镜像渐变"></a>镜像渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* 径向渐变:默认从中心点向四周扩散 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red, green);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 可以通过 at 关键字的方式修改开始渐变的位置  */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(at <span class="number">50px</span> <span class="number">50px</span>, red, green);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 径向渐变也可以指定扩散的范围 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">50px</span>, red, green);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果需要同时指定扩散的位置和扩散的范围，那么范围必须写到 at 前面 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">100px</span> at <span class="number">50px</span> <span class="number">50px</span>, red, green);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3 新增选择器"></a>CSS3 新增选择器</h2><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul>
<li><p>属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者 id 选择器。</p>
</li>
<li><p>格式:</p>
<ul>
<li><p><strong>[attribute]</strong></p>
</li>
<li><p>作用:<strong>根据指定的属性名称找到对应的标签, 然后设置属性</strong></p>
</li>
<li><p><strong>[attribute&#x3D;value]</strong></p>
</li>
<li><p>作用: 找到有指定属性, 并且属性的取值等于 value 的标签, 然后设置属性</p>
</li>
<li><p>最常见的应用场景, 就是用于区分 input 属性</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d96679165f2c4c4da90805f51c376a83" alt="image-20220126221554352"></p>
<ul>
<li>注意：类选择器、属性选择器、伪类选择器，权重为 10。</li>
<li>属性的取值是以什么开头的<ul>
<li><strong>[attribute|&#x3D;value]</strong> CSS2</li>
<li><strong>[attribute^&#x3D;value]</strong> CSS3</li>
<li>两者之间的区别:<ul>
<li>CSS2 中的只能找到 value 开头,并且 value 是被<code>-</code>和其它内容隔开的</li>
<li>CSS3 中的只要是以 value 开头的都可以找到, 无论有没有被<code>-</code>隔开</li>
</ul>
</li>
</ul>
</li>
<li>属性的取值是以什么结尾的<ul>
<li><strong>[attribute$&#x3D;value]</strong> CSS3</li>
<li>属性的取值是否包含某个特定的值得</li>
<li><strong>[attribute~&#x3D;value]</strong> CSS2</li>
<li><em><em>[attribute</em>&#x3D;value]</em>* CSS3</li>
<li>两者之间的区别:<ul>
<li>CSS2 中的只能找到独立的单词, 也就是包含 value ,并且 value 是被空格隔开的</li>
<li>CSS3 中的只要包含 value 就可以找到, 无论有没有被隔开</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><ul>
<li>结构伪类选择器主要根据文档结构来选择元素，常用于选择父级选择器里面的子元素</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e3b4f558f2be4e638b44e7cbe7a5da51" alt="image-20220126221624514"></p>
<ul>
<li><p>注意：类选择器、属性选择器、伪类选择器，权重为 10。</p>
</li>
<li><p>nth-child（n） 选择某个父元素的一个或多个特定的子元素（重点）</p>
<ul>
<li><p>n 可以是数字，关键字和公式</p>
<ul>
<li><p>n 如果是数字，就是选择第 n 个子元素， 数字从 1 开始…</p>
</li>
<li><p>n 可以是关键字：even 偶数，odd 奇数</p>
</li>
<li><p>n 可以是公式：常见的公式如下 ( 如果 n 是公式，则从 0 开始计算，但是第 0 个元素或者超出了元素的个数会被忽略 )</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/768c9629222847fb9aea52d9ef11fb14" alt="image-20220126221705022"></p>
<ul>
<li><p>nth-child 和 nth-of-type 的区别：</p>
<ul>
<li><p><strong>01 nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第 n 个孩子，然后看看是否和 E 匹配</strong></p>
</li>
<li><p><strong>02 nth-of-type 对父元素里面指定子元素进行排序选择。先去匹配 E ，然后再根据 E 找第 n 个孩子</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="结构伪类选择器总结"><a href="#结构伪类选择器总结" class="headerlink" title="结构伪类选择器总结"></a>结构伪类选择器总结</h3><ul>
<li><p>结构伪类选择器一般用于选择父级里面的第几个孩子</p>
</li>
<li><p>nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第 n 个孩子，然后看看是否和 E 匹配,匹配就会生效,不匹配就不会生效</p>
</li>
<li><p>nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配 E ，然后再根据 E 找第 n 个孩子</p>
</li>
<li><p>关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式</p>
</li>
<li><p>如果是无序列表，我们肯定用 nth-child 更多</p>
</li>
<li><p>类选择器、属性选择器、伪类选择器，权重为 10。</p>
</li>
</ul>
<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul>
<li>伪元素选择器可以帮助我们利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构。</li>
<li>◼ 常用的伪元素有<ul>
<li> :first-line、::first-line : 针对首行文本设置属性</li>
<li> :first-letter、::first-letter : 针对首字母设置属性</li>
<li> :before、**::before**</li>
<li> :after、**::after**</li>
</ul>
</li>
<li>为了区分伪元素和伪类，建议伪元素使用 2 个冒号，比如::first-line</li>
<li>::before 和::after 用来在一个元素的内容之前或之后插入其他内容（可以是文字、图片)<ul>
<li>常通过 content 属性来为一个元素添加修饰性的内容。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a154523d4e214231be1cdfba774bda44" alt="image-20220126221813980"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&#x27;hello ~~&#x27;</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&#x27; 该学习啦~~&#x27;</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>李银河<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>::before 和 ::after 创建一个元素，但是属于行内元素</p>
</li>
<li><p>新创建的这个元素在 DOM 树中是找不到的，所以我们称为伪元素</p>
</li>
<li><p>语法： <strong>element::before { }</strong></p>
</li>
<li><p><strong>before 和 after 必须有 content 属性</strong></p>
</li>
<li><p><strong>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素</strong></p>
</li>
<li><p>伪元素选择器和标签选择器一样，权重为 1</p>
</li>
</ul>
<h3 id="伪元素选择器案例"><a href="#伪元素选择器案例" class="headerlink" title="伪元素选择器案例"></a>伪元素选择器案例</h3><ul>
<li>伪元素选择器使用场景一：<ul>
<li>伪元素字体图标</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c5bf60a1712848d59f0ecd46446d552e"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>伪元素选择器使用场景二：<ul>
<li>仿土豆效果</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面before遮罩层显示出来 */</span></span><br><span class="line"><span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="comment">/* 显示元素 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>伪元素选择器使用场景三：<ul>
<li>伪元素清除浮动</li>
</ul>
</li>
<li>001 额外标签法也称为隔墙法，是 W3C 推荐的做法。<ul>
<li>注意： 要求这个新的空标签必须是块级元素。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/846a244b8df0480a88bc649f640e1066"></p>
<ul>
<li><p>002 伪元素选择器使用场景 3：伪元素清除浮动</p>
</li>
<li><p>后面两种伪元素清除浮动算是第一种额外标签法的一个升级和优化。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/423a41eb0a6f43f5b52f363052b93e73" alt="image-20220126215848472"></p>
<ul>
<li><p>003 伪元素选择器使用场景 3：伪元素清除浮动</p>
</li>
<li><p>后面两种伪元素清除浮动算是第一种额外标签法的一个升级和优化。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/891ebe968cd34d62b9d6844307e4035f" alt="image-20220126215824883"></p>
<h2 id="CSS-3-过渡模块"><a href="#CSS-3-过渡模块" class="headerlink" title="CSS 3 过渡模块"></a>CSS 3 过渡模块</h2><h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><ul>
<li><ol>
<li>过渡三要素</li>
</ol>
<ul>
<li><strong>1.1 必须要有属性发生变化</strong></li>
<li><strong>1.2 必须告诉系统哪个属性需要执行过渡效果</strong></li>
<li><strong>1.3 必须告诉系统过渡效果持续时长</strong></li>
</ul>
</li>
<li><ol start="2">
<li>注意点</li>
</ol>
<ul>
<li><strong>当多个属性需要同时执行过渡效果时用逗号隔开即可</strong></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.2 告诉系统哪个属性需要执行过渡效果*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-property</span>: width, background-color;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.3 告诉系统过渡效果持续的时长*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-duration</span>: <span class="number">3s</span>, <span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.1 变化的属性 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡效果的其他属性"><a href="#过渡效果的其他属性" class="headerlink" title="过渡效果的其他属性"></a>过渡效果的其他属性</h3><ul>
<li><p>告诉系统延迟多少秒之后才开始过渡动画</p>
<ul>
<li><code>transition-delay: 1s;</code></li>
</ul>
</li>
<li><p>告诉系统过渡效果的运动的速度</p>
<ul>
<li><strong>linear:匀速 ease:逐渐减速 ease-in:加速 ease-out:减速 ease-in-out:先加速后减速</strong></li>
<li><code>transition-timing-function: ease-in-out;</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.2 告诉系统哪个属性需要执行过渡效果*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-property</span>: width;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.3 告诉系统过渡效果持续的时长*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-duration</span>: <span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.4 告诉系统延迟多少秒之后才开始过渡动画*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.5 告诉系统过渡动画的运动的速度*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.5 linear:匀速  ease:逐渐减速 ease-in:加速 ease-out:减速 ease-in-out:先加速后减速*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-timing-function</span>: ease-in-out;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.1 变化的属性*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡效果的简写"><a href="#过渡效果的简写" class="headerlink" title="过渡效果的简写"></a>过渡效果的简写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.2 格式: 过渡属性 过渡时长 运动速度 延迟时间 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.3 和分开写一样，如果想给多个属性添加过渡效果也是用逗号隔开即可*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.4 连写时可以省略后面的两个参数，因为只要编写了前面的两个参数就已经满足了过渡的三要素*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transition: width 2s linear 0.5s,background-color 2s linear 0.5s; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.5 如果多个属性运动的速度/延迟的时间/持续时间都一样,那么可以简写为:*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.1 变化的属性*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡案例-弹性效果"><a href="#过渡案例-弹性效果" class="headerlink" title="过渡案例_弹性效果"></a>过渡案例_弹性效果</h3><ul>
<li><ol>
<li>编写过渡套路</li>
</ol>
<ul>
<li>1.1 不要管过渡，先编写基本界面</li>
<li>1.2 修改我们认为需要修改的属性</li>
<li>1.3 再回过头去给被修改属性的那个元素添加过渡即可</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/527949b6999546e090d2211736485ffd" alt="1654660945666"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>江<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>哥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>带<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>你<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>狂<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>虐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>H<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡案例-手风琴效果"><a href="#过渡案例-手风琴效果" class="headerlink" title="过渡案例_手风琴效果"></a>过渡案例_手风琴效果</h3><p><img src="https://s1.vika.cn/space/2023/02/26/80eeb4d633924ddb8e2b759cdfafd33a" alt="1654660858458"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: width <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 固定图片大小 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">460px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 鼠标移入 ul 时, li 的 width 设置为 100px */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 鼠标移入 li 时, li 的 width 设置为 460px */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">460px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/002.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/003.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/004.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/005.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/006.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2D-转换"><a href="#2D-转换" class="headerlink" title="2D 转换"></a>2D 转换</h2><ul>
<li><p>转换（transform）是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果</p>
</li>
<li><p>转换（transform）可以简单理解为变形移动：translate</p>
</li>
<li><p>旋转：rotate</p>
</li>
<li><p>缩放：scale</p>
</li>
<li><p>2D 转换是改变标签在二维平面上的位置和形状的一种技术，先来学习二维坐标系</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/2fb3a322b9c04f96ac9c0fb1d53e4710" alt="image-20220126222143582"></p>
<h3 id="2D-转换之移动"><a href="#2D-转换之移动" class="headerlink" title="2D 转换之移动"></a>2D 转换之移动</h3><ul>
<li><p>2D 移动是 2D 转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p>
</li>
<li><p>01 语法:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x, y);</span><br><span class="line"><span class="comment">/*或者分开写*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(n);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(n);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* x 就是 x 轴上移动位置 , y 就是 y 轴上移动位置 , 中间用逗号分隔 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>02 重点:</p>
<ul>
<li><strong>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</strong></li>
<li>translate 最大的优点：<strong>保留原来的占位,不会影响到其他元素的位置</strong></li>
<li><strong>translate 中的百分比单位是相对于自身元素的宽高 translate:(50%,50%);</strong></li>
<li>对行内标签没有效果</li>
</ul>
</li>
<li><p>03 让盒子实现水平和垂直居中</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2D-转换之旋转"><a href="#2D-转换之旋转" class="headerlink" title="2D 转换之旋转"></a>2D 转换之旋转</h3><ul>
<li>2D 旋转指的是让元素在 2 维平面内顺时针旋转或者逆时针旋转。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c4834dd8f2ba4e93b321a212ff45b776" alt="image-20220126222519050"></p>
<ul>
<li>01 语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>02 重点:<ul>
<li>rotate 里面跟度数，单位是 deg 比如 rotate(45deg)</li>
</ul>
</li>
<li>角度为正时，顺时针，负时，为逆时针<ul>
<li>默认旋转的中心点是元素的中心点</li>
</ul>
</li>
<li>03 旋转轴向:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid blue;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*默认绕Z轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transform: rotate(45deg); */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕X轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transform: rotateX(45deg); */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕Y轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transform: rotateY(45deg); */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕Z轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2D-转换案例"><a href="#2D-转换案例" class="headerlink" title="2D 转换案例"></a>2D 转换案例</h3><p><img src="https://s1.vika.cn/space/2023/02/26/ed23ede3b11b400bb335787cb68aabc1" alt="image-20220126222951405"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 旋转箭头 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2D-转换中心点"><a href="#2D-转换中心点" class="headerlink" title="2D 转换中心点"></a>2D 转换中心点</h3><ul>
<li>我们可以设置元素转换的中心点</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: x y; <span class="comment">/* 设置旋转中心点*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意后面的参数 x 和 y 用空格隔开</p>
</li>
<li><p><strong>x y 默认转换的中心点是元素的中心点(50% 50%)</strong></p>
</li>
<li><p>还可以给 x y 设置像素或者方位名词（top bottom left right center）</p>
</li>
</ul>
<h3 id="2D-转换案例-1"><a href="#2D-转换案例-1" class="headerlink" title="2D 转换案例"></a>2D 转换案例</h3><p><img src="https://s1.vika.cn/space/2023/02/26/4570ffd3218940e1821b603caa477bf1"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置旋转中心点*/</span></span><br><span class="line"><span class="attribute">transform-origin</span>: x y;</span><br></pre></td></tr></table></figure>

<h3 id="2D-转换之缩放-scale"><a href="#2D-转换之缩放-scale" class="headerlink" title="2D 转换之缩放 scale"></a>2D 转换之缩放 scale</h3><ul>
<li>缩放，顾名思义，可以<strong>放大和缩小</strong>。只要给元素添加上了这个属性就能控制它放大还是缩小。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意其中的 x 和 y 用逗号分隔</p>
</li>
<li><p><strong>transform:scale(1,1);</strong> ：宽和高都放大一倍，相当于没有放大</p>
</li>
<li><p><strong>transform:scale(2,2);</strong> ：宽和高都放大了 2 倍</p>
</li>
<li><p><strong>transform:scale(2);</strong> ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</p>
</li>
<li><p><strong>transform:scale(0.5,0.5);</strong> ：宽高都缩小 0.5 倍</p>
</li>
<li><p>sacle 缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</p>
</li>
</ul>
<h3 id="2D-缩放案例"><a href="#2D-缩放案例" class="headerlink" title="2D 缩放案例"></a>2D 缩放案例</h3><ul>
<li>分页按钮:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0f58046fdd6143bba90681724333c966"></p>
<h3 id="2D-转换综合写法"><a href="#2D-转换综合写法" class="headerlink" title="2D 转换综合写法"></a>2D 转换综合写法</h3><ul>
<li><strong>01 同时使用多个转换，其格式为：transform: translate() rotate() scale() …等，</strong></li>
<li><strong>02 区分先后循序, 其顺序会影转换的效果。（先旋转会改变坐标轴方向）</strong></li>
<li><strong>03 当我们同时有位移和其他属性的时候，记得要将位移放到最前</strong></li>
</ul>
<h3 id="2D-转换总结"><a href="#2D-转换总结" class="headerlink" title="2D 转换总结"></a>2D 转换总结</h3><ul>
<li><p>转换 transform 我们简单理解就是变形有 2D 和 3D 之分</p>
</li>
<li><p>我们暂且学了三个分别是 位移 旋转 和 缩放</p>
</li>
<li><p>2D 移动 translate(x, y) 最大的优势是不影响其他盒子，<strong>里面参数用百分比%，是相对于自身宽度和高度来计算的</strong></p>
</li>
<li><p>可以分开写比如 translateX(x) 和 translateY(y)</p>
</li>
<li><p>2D 旋转 rotate(度数) 可以实现旋转元素度数的单位是 deg</p>
</li>
<li><p>2D 缩放 sacle(x,y) 里面参数是数字不跟单位, 可以是小数, 最大的优势不影响其他盒子</p>
</li>
<li><p>设置转换中心点 transform-origin : x y; 参数可以百分比、像素 或者是 方位名词</p>
</li>
<li><p>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</p>
</li>
</ul>
<h3 id="2D-透视属性"><a href="#2D-透视属性" class="headerlink" title="2D 透视属性"></a>2D 透视属性</h3><ul>
<li><p>在 2D 平面产生近大远小视觉立体，但是只是效果二维的</p>
<ul>
<li><p>如果想要在网页产生 3D 效果需要透视（理解成 3D 物体投影在 2D 平面内）。</p>
</li>
<li><p>模拟人类的视觉位置，可认为安排一只眼睛去看</p>
</li>
<li><p><strong>透视我们也称为视距</strong>：视距就是人的眼睛到屏幕的距离</p>
</li>
<li><p>距离视觉点越近的在电脑平面成像越大，越远成像越小</p>
</li>
<li><p><strong>透视的单位是像素</strong></p>
</li>
</ul>
</li>
<li><p><strong>透视写在被观察元素的父盒子上面的</strong></p>
</li>
<li><p>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。</p>
<ul>
<li>z：就是 z 轴，物体距离屏幕的距离，z 轴越大（正值）我们看到的物体就越大。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/28c98bc084fc44c2a8a30e913e40297a"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*透视 近大远小 值越小,看到的越大 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*透视属性必须添加到需要呈现近大远小效果的元素的父元素上面*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">perspective</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid blue;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕X轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2D-透视案例-照片后倒"><a href="#2D-透视案例-照片后倒" class="headerlink" title="2D 透视案例_照片后倒"></a>2D 透视案例_照片后倒</h3><p><img src="https://s1.vika.cn/space/2023/02/26/f7ef1a2ac2e54e16a8ff252fdaab4256" alt="1659518845563"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">perspective</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform-origin</span>: center bottom; <span class="comment">/* 设置旋转的中心线为 x 轴 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: transform <span class="number">1s</span>; <span class="comment">/* 过渡 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>); <span class="comment">/* 绕 x 轴旋转 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2D-转换案例-照片墙"><a href="#2D-转换案例-照片墙" class="headerlink" title="2D 转换案例_照片墙"></a>2D 转换案例_照片墙</h3><p><img src="https://s1.vika.cn/space/2023/02/26/9e506d1ec9cc4665b90d62bc857102dc" alt="1654690831171"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">84px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">0.4s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">20deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">25deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">84px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/002.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/003.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/004.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h2><ul>
<li><p>动画（animation）是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p>
</li>
<li><p>相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f2d713fcbbf5451e9c9bd5355108bbb9"></p>
<h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3><ul>
<li>用 keyframes 定义动画（类似定义类选择器）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义动画 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动画序列:</p>
<ul>
<li><p>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</p>
</li>
<li><p>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</p>
</li>
<li><p><strong>动画是使元素从一种样式逐渐变化为另一种样式的效果。</strong>您可以改变任意多的样式任意多的次数。</p>
</li>
<li><p>请用百分比来规定变化发生的时间，或用关键词 <code>from</code> 和 <code>to</code>，等同于 0% 和 100% 。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/35645b2c1bbf40a4a324bf59f799586c"></p>
<h3 id="使用动画"><a href="#使用动画" class="headerlink" title="使用动画"></a>使用动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="comment">/* 调用动画*/</span></span><br><span class="line">  <span class="attribute">animation-name</span>: move;</span><br><span class="line">  <span class="comment">/* 动画持续时间*/</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动画常用属性"><a href="#动画常用属性" class="headerlink" title="动画常用属性"></a>动画常用属性</h3><p><img src="https://s1.vika.cn/space/2023/02/26/058ba0c8c76d43cd930c342a9321b20d" alt="image-20220126224512656"></p>
<h3 id="动画简写属性"><a href="#动画简写属性" class="headerlink" title="动画简写属性"></a>动画简写属性</h3><ul>
<li>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 			动画名称  持续时间  匀速  延迟时间  无限播放  反向*/</span></span><br><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>简写属性里面不包含 animation-play-state</p>
</li>
<li><p><strong>暂停动画：animation-play-state: puased;</strong> 经常和鼠标经过等其他配合使用</p>
</li>
<li><p>想要动画走回来，而不是直接跳回来：animation-direction ：alternate</p>
</li>
<li><p>盒子动画结束后，停在结束位置：animation-fill-mode ：forwards</p>
</li>
</ul>
<h3 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h3><ul>
<li>animation-timing-function：规定动画的速度曲线，默认是“ease”</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/fd409ba7c8ce4175bdc4bedf22d32c88" alt="image-20220126224843627"></p>
<h3 id="动画案例-奔跑的熊大"><a href="#动画案例-奔跑的熊大" class="headerlink" title="动画案例-奔跑的熊大"></a>动画案例-奔跑的熊大</h3><p><img src="https://s1.vika.cn/space/2023/02/26/7de348ce252e4a45b662e99529e53b32"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="动画案例-无缝滚动轮播图"><a href="#动画案例-无缝滚动轮播图" class="headerlink" title="动画案例_无缝滚动轮播图"></a>动画案例_无缝滚动轮播图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="3D-转换"><a href="#3D-转换" class="headerlink" title="3D 转换"></a>3D 转换</h2><ul>
<li><p>3D 转换特点:</p>
<ul>
<li>近大远小。</li>
<li>物体后面遮挡不可见</li>
</ul>
</li>
<li><p>当我们在网页上构建 3D 效果的时候参考这些特点就能产出 3D 效果。</p>
</li>
</ul>
<h3 id="三维坐标系"><a href="#三维坐标系" class="headerlink" title="三维坐标系"></a>三维坐标系</h3><ul>
<li><p>三维坐标系其实就是指立体空间，立体空间是由 3 个轴共同组成的。</p>
<ul>
<li><p>x 轴：水平向右, 注意：x 右边是正值，左边是负值</p>
</li>
<li><p>y 轴：垂直向下, 注意：y 下面是正值，上面是负值</p>
</li>
<li><p>z 轴：垂直屏幕, 注意：往外面是正值，往里面是负值</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a869d506bfb74984b62f7f7a567edd17"></p>
<ul>
<li><p>3D 转换我们主要学习工作中最常用的 3D 位移和 3D 旋转.</p>
</li>
<li><p>3D 位移: translate3d(x,y,z)</p>
</li>
<li><p>3D 旋转: rotate3d(x,y,z)</p>
</li>
<li><p>透视: perspective</p>
</li>
<li><p>3D 呈现 transfrom-style</p>
</li>
</ul>
<h3 id="3D-移动-translate3d"><a href="#3D-移动-translate3d" class="headerlink" title="3D 移动 translate3d"></a>3D 移动 translate3d</h3><ul>
<li>3D 移动在 2D 移动的基础上多加了一个可以移动的方向，就是 z 轴方向。</li>
<li>**translform:translateX(100px)**：仅仅是在 x 轴上移动<ul>
<li>**translform:translateY(100px)**：仅仅是在 Y 轴上移动</li>
<li>**translform:translateZ(100px)**：仅仅是在 Z 轴上移动（注意：translateZ 一般用 px 单位）</li>
<li>**transform:translate3d(x,y,z)**：其中 x、y、z 分别指要移动的轴的方向的距离</li>
</ul>
</li>
<li>因为 z 轴是垂直屏幕，由里指向外面，所以默认是看不到元素在 z 轴的方向上移动</li>
</ul>
<h3 id="translateZ"><a href="#translateZ" class="headerlink" title="translateZ"></a>translateZ</h3><ul>
<li><p>**translform:translateZ(100px)**：仅仅是在 Z 轴上移动。</p>
</li>
<li><p>有了透视，就能看到 translateZ 引起的变化了</p>
<ul>
<li><strong>translateZ</strong>：近大远小</li>
<li>**translateZ(10px)**：往外是正值</li>
<li>**translateZ(-10px)**：往里是负值</li>
</ul>
</li>
</ul>
<h3 id="3D-旋转-rotate3d"><a href="#3D-旋转-rotate3d" class="headerlink" title="3D 旋转 rotate3d"></a>3D 旋转 rotate3d</h3><ul>
<li><p>3D 旋转指可以让元素在三维平面内沿着 x 轴，y 轴，z 轴或者自定义轴进行旋转。</p>
</li>
<li><p>语法:</p>
<ul>
<li>**transform:rotateX(45deg)**：沿着 x 轴正方向旋转 45 度</li>
<li><strong>transform:rotateY(45deg)</strong> ：沿着 y 轴正方向旋转 45deg</li>
<li><strong>transform:rotateZ(45deg)</strong> ：沿着 Z 轴正方向旋转 45deg</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5865b8c370de492fb678a62272b70aec" alt="image-20220126233403938"></p>
<ul>
<li><p>对于元素旋转的方向的判断我们需要先学习一个左手准则。</p>
</li>
<li><p>左手准则:</p>
<ul>
<li>左手的手拇指指向 x 轴的正方向</li>
<li>其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向</li>
</ul>
</li>
<li><p>左手准则:</p>
<ul>
<li>左手的手拇指指向 y 轴的正方向</li>
<li>其余手指的弯曲方向就是该元素沿着 y 轴旋转的方向（正值）</li>
</ul>
</li>
<li><p>**transform:rotate3d(x,y,z,deg)**：沿着自定义轴旋转 deg 为角度（了解即可）</p>
<ul>
<li>xyz 是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度。</li>
</ul>
</li>
<li><p><strong>transform:rotate3d(1,0,0,45deg)</strong> 就是沿着 x 轴旋转 45deg</p>
</li>
<li><p><strong>transform:rotate3d(1,1,0,45deg)</strong> 就是沿着对角线( x 轴与 y 轴形成的矢量)旋转 45deg</p>
</li>
</ul>
<h3 id="3D-呈现-transfrom-style"><a href="#3D-呈现-transfrom-style" class="headerlink" title="3D 呈现 transfrom-style"></a>3D 呈现 transfrom-style</h3><ul>
<li><p>控制子元素是否开启三维立体环境。</p>
</li>
<li><p>transform-style: flat; 子元素不开启 3d 立体空间, 默认的</p>
</li>
<li><p><strong>transform-style: preserve-3d; 子元素开启立体空间</strong></p>
</li>
<li><p><strong>代码写给父级，但是影响的是子盒子</strong></p>
</li>
<li><p>这个属性很重要，后面必用</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/39803e48292c466a981b690c7ca632c8" alt="image-20220126234140466"></p>
<h3 id="案例：两面翻转的盒子"><a href="#案例：两面翻转的盒子" class="headerlink" title="案例：两面翻转的盒子"></a>案例：两面翻转的盒子</h3><p><img src="https://s1.vika.cn/space/2023/02/26/178d99aadbaa45f092d642813f5a7df8"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>pink老师等你<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>box 父盒子里面包含前后两个子盒子</p>
</li>
<li><p>box 是翻转的盒子 front 是前面盒子 back 是后面盒子</p>
<ul>
<li>box 指定大小，切记要添加 3d 呈现</li>
<li>back 盒子要沿着 Y 轴翻转 180 度</li>
<li>最后鼠标经过 box 沿着 Y 旋转 180deg</li>
</ul>
</li>
</ul>
<h3 id="案例-3D-导航栏"><a href="#案例-3D-导航栏" class="headerlink" title="案例:3D 导航栏"></a>案例:3D 导航栏</h3><p><img src="https://s1.vika.cn/space/2023/02/26/31caffe178da4c92821839c9fe9182b8"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="案例-旋转木马"><a href="#案例-旋转木马" class="headerlink" title="案例:旋转木马"></a>案例:旋转木马</h3><p><img src="https://s1.vika.cn/space/2023/02/26/cf5e8dfe59634bd29f7d009a38123df1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="案例-3D-旋转音乐播放器"><a href="#案例-3D-旋转音乐播放器" class="headerlink" title="案例_3D 旋转音乐播放器"></a>案例_3D 旋转音乐播放器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="浏览器私有前缀"><a href="#浏览器私有前缀" class="headerlink" title="浏览器私有前缀"></a>浏览器私有前缀</h2><ul>
<li><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加。后期会用 webpack 处理的.</p>
</li>
<li><p>私有前缀:</p>
<ul>
<li><p>-moz-：代表 firefox 浏览器私有属性</p>
</li>
<li><p>-ms-：代表 ie 浏览器私有属性</p>
</li>
<li><p>-webkit-：代表 safari、chrome 私有属性</p>
</li>
<li><p>-o-：代表 Opera 私有属性</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*提倡的写法*/</span></span><br><span class="line">-moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">-webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">-o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
</search>
