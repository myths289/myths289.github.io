<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>软件测试</title>
    <url>/2024/01/10/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95test/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2024/01/03/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/101_HTML_CSS/10103_CSS/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><h3 id="CSS的起源"><a href="#CSS的起源" class="headerlink" title="CSS的起源"></a>CSS的起源</h3><ul>
<li>在 web 早期（1990-1993）, html 是一个很局限的语言。几乎完全由用于描述段落，超链接，列表和标题的结构化元素组成。</li>
<li>随着万维网的出现（用户交互体验的加强），对 html 的要求越来越大，人们迫切需要 html 增加新的元素，去完成一个特定的功能</li>
<li>迫于压力，html 开始出现<code>b u i s</code>等标签。但是 html 是一种描述结构的语言，也开始描述外在表现了。几年之后这种随便的做法暴露出严重的问题：<ul>
<li>由于 html 既写结构又写样式，导致页面缺乏结构性，降低了网页的可访问性。</li>
<li>页面维护越来越困难</li>
</ul>
</li>
<li>1994年，哈肯·维姆·莱和伯特·波斯合作设计CSS，在1996年的时候发布了CSS1；<ul>
<li>直到1997年初，W3C组织才专门成立了CSS的工作组，1998年5月发布了CSS2；</li>
<li>在2006~2009非常流行 “DIV+CSS”布局的方式来替代所有的html标签；</li>
<li>从CSS3开始，所有的CSS分成了不同的模块（modules），每一个“modules”都有于CSS2中额外增加的功能，以及向后兼容。</li>
<li>直到2011年6月7日，CSS 3 Color Module终于发布为W3C Recommendation。</li>
</ul>
</li>
<li>与 html 相比，<ul>
<li><strong>CSS 支持更丰富的文档外观，CSS 可以为任何元素的文本和背景设置颜色；</strong></li>
<li><strong>允许在任何元素外围设置边框；允许改变文本的大小，装饰（如下划线），间隔，甚至可以确定是否显示文本。</strong> </li>
<li>对HTML进行布局，按照某种结构显示（CSS进行布局 – 浮动、flex、grid）；</li>
</ul>
</li>
</ul>
<h3 id="HTML的局限性"><a href="#HTML的局限性" class="headerlink" title="HTML的局限性"></a>HTML的局限性</h3><ul>
<li>说起 HTML，这其实是个非常单纯的家伙，他只关注内容的语义。</li>
<li>比如 h1 表明这是一个大标题，p 表明这是一个段落，img 表明这儿有一个图片，a 表示此处有链接。</li>
<li>很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点：丑。</li>
<li>虽然 HTML 可以做简单的样式，但是带来的是无尽的臃肿和繁琐…</li>
</ul>
<h3 id="CSS-官方文档"><a href="#CSS-官方文档" class="headerlink" title="CSS 官方文档"></a>CSS 官方文档</h3><ul>
<li>CSS官方文档地址 : <a href="https://www.w3.org/TR/?tag=css">https://www.w3.org/TR/?tag=css</a></li>
<li>CSS推荐文档地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E5%85%B3%E9%94%AE%E5%AD%97%E7%B4%A2%E5%BC%95">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E5%85%B3%E9%94%AE%E5%AD%97%E7%B4%A2%E5%BC%95</a></li>
<li>由于浏览器版本、CSS版本等问题，查询某些CSS是否可用：<ul>
<li>可以到 <a href="https://caniuse.com/">https://caniuse.com/</a> 查询 CSS 属性的可用性；</li>
<li>这个网站在后续的 browserlist 工具中我们再详细说明；</li>
</ul>
</li>
</ul>
<h3 id="认识-CSS"><a href="#认识-CSS" class="headerlink" title="认识 CSS"></a>认识 CSS</h3><ul>
<li><strong>CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.</strong><ul>
<li>有时我们也会称之为 <strong>CSS 样式表</strong> 或 <strong>级联样式表</strong>。</li>
</ul>
</li>
<li><strong>CSS 也是一种语言吗</strong><ul>
<li>MDN解释：CSS 也不是真正的编程语言，甚至不是标记语言。它是一门样式表语言；</li>
<li>维基百科解释：是一种计算机语言，但是不算是一种编程语言；</li>
</ul>
</li>
<li><strong>CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。</strong></li>
<li>CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：<strong>CSS 可以美化 HTML , 让 HTML 更漂亮，让页面布局更简单</strong>。</li>
<li><strong>CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离。</strong></li>
</ul>
<h3 id="CSS语法规范"><a href="#CSS语法规范" class="headerlink" title="CSS语法规范"></a>CSS语法规范</h3><ul>
<li><p>使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则。</p>
</li>
<li><p>CSS 规则由两个主要的部分构成：<strong>选择器以及一条或多条声明</strong>。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/6883619fb908415e87d13dfc319b2c0e" alt="image-20220125202012284"></p>
<ul>
<li><p>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式</p>
</li>
<li><p><strong>属性和属性值以 “键值对” 的形式出现</strong></p>
</li>
<li><p><strong>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</strong></p>
</li>
<li><p>属性和属性值之间用英文<code>:</code>分开</p>
</li>
<li><p>多个 “键值对” 之间用英文<code>;</code>进行区分</p>
</li>
<li><p>所有的样式，都包含在 style 标签内，表示是样式表。style 一般写到 head 结束标签的上方。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&gt;</span><br><span class="line">        <span class="selector-tag">h4</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p>注意点:</p>
<ul>
<li>style 标签必须写在 head 标签的开始标签和结束标签之间(也就是必须和 title 标签是兄弟关系)</li>
<li>style 标签中的 type 属性其实可以不用写, 默认就是 <code>type=&quot;text/css&quot;</code></li>
<li>设置样式时必须按照固定的格式来设置. <code>key: value;</code>其中<code>:</code>不能省略, 分号大多数情况下也不能省略(当有多个属性时, 最后一个可以省略)</li>
</ul>
<h3 id="CSS的注释"><a href="#CSS的注释" class="headerlink" title="CSS的注释"></a>CSS的注释</h3><ul>
<li>CSS 代码也可以添加注释来方便阅读：<ul>
<li>CSS 的注释和HTML的注释是不一样的；</li>
<li><code>/* 我是被注释的内容 */</code></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;<span class="comment">/*字体颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h3><h4 id="样式书写风格"><a href="#样式书写风格" class="headerlink" title="样式书写风格"></a>样式书写风格</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125; <span class="comment">/*不推荐*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="样式大小写"><a href="#样式大小写" class="headerlink" title="样式大小写"></a>样式大小写</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐  强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。 */</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">H3</span> &#123;</span><br><span class="line">	<span class="attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	属性值前面，冒号后面，保留一个空格</span></span><br><span class="line"><span class="comment">	选择器（标签）和大括号中间保留一个空格  */</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h2><ul>
<li><p>按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类：</p>
<ul>
<li><p><strong>1) 行内样式表（行内式）</strong></p>
</li>
<li><p><strong>2) 内部样式表（嵌入式）</strong></p>
</li>
<li><p><strong>3) 外部样式表（链接式）</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><ul>
<li><strong>内部样式表（内嵌样式表）是写到 html 页面内部,是将所有的 CSS 代码抽取出来，单独放到一个 style 标签中。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>style 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的 head 标签中</p>
</li>
<li><p>通过此种方式，可以方便控制当前整个页面中的元素样式设置</p>
</li>
<li><p>代码结构清晰，但是并没有实现结构与样式完全分离</p>
</li>
<li><p>使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式</p>
</li>
</ul>
<h3 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h3><ul>
<li><strong>行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。</strong>适合于修改简单样式.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span>青春不常在，抓紧谈恋爱<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>style 其实就是标签的属性</p>
</li>
<li><p>在双引号中间，写法要符合 CSS 规范</p>
</li>
<li><p>可以控制当前的标签设置样式</p>
</li>
<li><p>由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用</p>
</li>
<li><p>使用行内样式表设定 CSS，通常也被称为行内式引入</p>
</li>
</ul>
<h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><ul>
<li><p>实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:<strong>样式单独写到 CSS 文件中，之后把 CSS 文件引入到 HTML 页面中使用.</strong></p>
</li>
<li><p>引入外部样式表分为两步：</p>
<ul>
<li><ol>
<li>新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。</li>
</ol>
</li>
<li><ol start="2">
<li>在 HTML 页面的 head 标签中，使用 link  标签引入这个文件。</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/9764c74d24b5480e89c84c179b41b522" alt="image-20220125210838193"></p>
<ul>
<li>使用外部样式表设定 CSS，通常也被称为外链式或链接式引入，这种方式是开发中常用的方式</li>
</ul>
<h3 id="import方法导入"><a href="#import方法导入" class="headerlink" title="@import方法导入"></a>@import方法导入</h3><ul>
<li>可以在style元素或者CSS文件中使用@import导入其他的CSS文件</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(./other.css)</span><br><span class="line">.red&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS引入方式总结"><a href="#CSS引入方式总结" class="headerlink" title="CSS引入方式总结"></a>CSS引入方式总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/75e6b871af964fefa298919918be9c37" alt="image-20220125210933047"></p>
<h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><h3 id="选择器的作用"><a href="#选择器的作用" class="headerlink" title="选择器的作用"></a>选择器的作用</h3><ul>
<li><strong>选择器(选择符)就是根据不同需求把不同的标签选出来,这就是选择器的作用。</strong> 简单来说，就是<strong>选择标签用的</strong>。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4273760a2a564e8a9db9e3bce3a0d76e" alt="image-20220125202658584"></p>
<ul>
<li><p>以上 CSS 做了两件事：</p>
<ul>
<li><ol>
<li>找到所有的 h1 标签。 选择器（选对人）。</li>
</ol>
</li>
<li><ol start="2">
<li>设置这些标签的样式，比如颜色为红色（做对事）。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h3><ul>
<li><p>选择器分为 <strong>基础选择器 和 复合选择器</strong> 两个大类，我们这里先讲解一下基础选择器。</p>
</li>
<li><p>基础选择器是由单个选择器组成的</p>
</li>
<li><p>基础选择器又包括：<strong>标签选择器、类选择器、id 选择器 和 通配符选择器</strong></p>
</li>
</ul>
<h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><ul>
<li><strong>标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     <span class="selector-tag">div</span>&#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">background-color</span>: red;</span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>作用:</p>
<p>  ​    标签选择器可以<strong>把某一类标签全部选择出来</strong>，比如所有的 div 标签和所有的 span 标签。</p>
</li>
<li><p>优点:</p>
<p>  ​    <strong>能快速为页面中同类型的标签统一设置样式。</strong></p>
</li>
<li><p>缺点:</p>
<p>  ​    <strong>不能设计差异化样式，只能选择全部的当前标签。</strong></p>
</li>
</ul>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul>
<li><p>如果想要<strong>差异化选择不同的标签</strong>，单独选一个或者某几个标签，可以使用类选择器.</p>
</li>
<li><p>例如，将所有拥有 red 类的 HTML 元素均为红色:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.red</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>结构需要用 class 属性来调用, class : 类的意思:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">‘red’</span>&gt;</span> 变红色 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点<code>.</code>显示。</p>
</li>
<li><p>类选择器使用<code>.</code>（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。</p>
</li>
<li><p>可以理解为给这个标签起了一个名字，来表示。</p>
</li>
<li><p>长名称或词组可以使用中横线来为选择器命名。</p>
</li>
<li><p><strong>不要使用纯数字、中文等命名，尽量使用英文字母来表示。</strong></p>
</li>
<li><p><strong>命名要有意义，尽量使别人一眼就知道这个类名的目的。</strong></p>
</li>
<li><p>命名规范：见附件（ Web 前端开发规范手册.doc）</p>
</li>
<li><p>记忆口诀：样式点定义，结构类调用。一个或多个，开发最常用。</p>
</li>
</ul>
<h3 id="类选择器案例"><a href="#类选择器案例" class="headerlink" title="类选择器案例"></a>类选择器案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/6585a07439054265bb043bca4722afd0" alt="image-20220125203907045"></p>
<ul>
<li><p>通过这个案例练习两个地方:</p>
<ul>
<li>类选择器的使用</li>
<li>div 就是一个盒子,用来装网页内容的.</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="类选择器-多类名"><a href="#类选择器-多类名" class="headerlink" title="类选择器-多类名"></a>类选择器-多类名</h3><ul>
<li><p>我们<strong>可以给一个标签指定多个类名，从而达到更多的选择目的</strong>。 这些类名都可以选出这个标签.</p>
</li>
<li><p>简单理解就是一个标签有多个名字.</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/af2c2e1a432f4a0bae19df7614ec5643" alt="image-20220125204109291"></p>
<ul>
<li>01 多类名使用方式<ul>
<li>在标签 class 属性中写 多个类名</li>
<li>多个类名中间必须用空格分开</li>
<li>这个标签就可以分别具有这些类名的样式</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>02 多类名开发中使用场景</p>
<ul>
<li><ol>
<li>可以把一些标签元素相同的样式(共同的部分)放到一个类里面.</li>
</ol>
</li>
<li><ol start="2">
<li>这些标签都可以调用这个公共的类,然后再调用自己独有的类.</li>
</ol>
</li>
<li><ol start="3">
<li>从而节省 CSS 代码,统一修改也非常方便.</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pink fontWeight font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20&quot;</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 pink&quot;</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14&quot;</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>各个类名中间用空格隔开</p>
</li>
<li><p>简单理解：<strong>就是给某个标签添加了多个类</strong>，或者这个标签有多个名字</p>
</li>
<li><p>这个标签就可以分别具有这些类名的样式</p>
</li>
<li><p>从而节省 CSS 代码,统一修改也非常方便.</p>
</li>
<li><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的</p>
</li>
</ul>
<h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul>
<li><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p>
</li>
<li><p>HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以 <code>#</code> 来定义。</p>
</li>
<li><p>注意：同一个 id 名在每个 HTML 文档中只能出现一次。口诀: 样式 <code># </code>定义,结构 id 调用</p>
<ul>
<li>不要用标签名作为 id 值</li>
</ul>
</li>
<li><p>例如，将 id 为 nav 元素中的内容设置为红色。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="id-和-类选择器的区别"><a href="#id-和-类选择器的区别" class="headerlink" title="id 和 类选择器的区别"></a>id 和 类选择器的区别</h3><ul>
<li>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。</li>
<li>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。</li>
<li>id 选择器和类选择器最大的不同在于使用次数上。</li>
<li>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，<strong>id 选择器经常和 JavaScript 搭配使用</strong>。</li>
<li>在企业开发中到底用 id 选择器还是用 class 选择器?<ul>
<li>id 一般情况下是给 js 使用的, 所以除非特殊情况, 否则不要使用 id 去设置样式</li>
<li>在企业开发中一个开发人员对类的使用可以看出这个开发人员的技术水平</li>
<li>一般情况下在企业开发中要注重冗余代码的抽取, 可以将一些公共的代码抽取到一个类选择器中, 然后让标签和这个类选择器绑定即可</li>
</ul>
</li>
</ul>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul>
<li>在 CSS 中，通配符选择器使用 <code>* </code>定义，它<strong>表示选取页面中所有元素（标签）</strong>。</li>
<li>通配符选择器自动给所有的元素使用样式</li>
<li>特殊情况才使用，一般用来给所有元素作一些通用性的设置<ul>
<li> 比如内边距、外边距;</li>
<li> 比如重置一些内容;</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效率比较低，尽量不要使用;</li>
</ul>
<h3 id="基础选择器总结"><a href="#基础选择器总结" class="headerlink" title="基础选择器总结"></a>基础选择器总结</h3><ul>
<li><p>每个基础选择器都有使用场景，都需要掌握 </p>
</li>
<li><p>如果是修改样式， 类选择器是使用最多的</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/d262684a5f20492dbfee0d213311f623" alt="image-20220125205031588"></p>
<h2 id="CSS-复合选择器"><a href="#CSS-复合选择器" class="headerlink" title="CSS 复合选择器"></a>CSS 复合选择器</h2><h3 id="什么是复合选择器"><a href="#什么是复合选择器" class="headerlink" title="什么是复合选择器"></a>什么是复合选择器</h3><ul>
<li><p>在 CSS 中，可以根据选择器的类型把选择器分为 基础选择器 和 复合选择器，复合选择器 是建立在 基础选择器 之上，对基本选择器进行组合形成的。</p>
</li>
<li><p>复合选择器可以更准确、更高效的选择目标元素（标签）</p>
</li>
<li><p><strong>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</strong></p>
</li>
<li><p>常用的复合选择器包括：<strong>后代选择器、子选择器、并集选择器、伪类选择器等等</strong></p>
</li>
</ul>
<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><ul>
<li>后代选择器又称为包含选择器，<strong>可以选择父元素里面的后代元素</strong>。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123; <span class="attribute">color</span>:red &#125; <span class="comment">/* 选择 ul 里面所有的 li标签元素 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>元素1 和 元素2 中间用空格隔开</p>
</li>
<li><p>元素1 是父级，元素2 是子级，最终选择的是元素2</p>
</li>
<li><p>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</p>
</li>
<li><p>元素1 和 元素2 可以是任意基础选择器</p>
</li>
</ul>
<h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><ul>
<li>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。简单理解就是选亲儿子元素.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>:red &#125; <span class="comment">/* 表示选择div元素里面的所有直接后代(子元素) p元素。 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>元素1 和 元素2 中间用 大于号 隔开</li>
<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>
<li>元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</li>
<li>注意点:<ul>
<li>子元素选择器只会查找儿子, 不会查找其他被嵌套的标签</li>
<li>子元素选择器之间需要用<code>&gt;</code>符号连接, 并且不能有空格</li>
<li>子元素选择器不仅仅可以使用标签名称, 还可以使用其它选择器</li>
<li>子元素选择器可以通过<code>&gt;</code>符号一直延续下去</li>
</ul>
</li>
</ul>
<h3 id="后代和子元素选择器区别"><a href="#后代和子元素选择器区别" class="headerlink" title="后代和子元素选择器区别"></a>后代和子元素选择器区别</h3><ul>
<li><ol>
<li>后代选择器和子元素选择器之间的区别:</li>
</ol>
<ul>
<li>后代选择器使用<strong>空格</strong>作为连接符号</li>
<li>子元素选择器使用<code>&gt;</code>作为连接符号</li>
<li>后代选择器会选中指定标签中, 所有的特定后代标签, 也就是会选中儿子&#x2F;孙子…, 只要是被放到指定标签中的特定标签都会被选中</li>
<li>子元素选择器只会选中指定标签中, 所有的特定的直接标签, 也就是只会选中特定的儿子标签</li>
</ul>
</li>
<li><ol start="2">
<li>后代选择器和子元素选择器之间的共同点:</li>
</ol>
<ul>
<li>后代选择器和子元素选择器都可以使用 <strong>标签名称 &#x2F; id 名称 &#x2F; class 名称</strong> 来作为选择器</li>
<li>后代选择器和子元素选择器都可以通过各自的连接符号一直延续下去</li>
<li>选择器1&gt;选择器2&gt;选择器3&gt;选择器4{ }</li>
</ul>
</li>
<li><ol start="3">
<li>在企业开发中如何选择:</li>
</ol>
<ul>
<li>如果想选中指定标签中的所有特定的标签, 那么就使用后代选择器</li>
<li>如果只想选中指定标签中的所有特定儿子标签, 那么就使用子元素选择器</li>
</ul>
</li>
</ul>
<h3 id="选择器案例"><a href="#选择器案例" class="headerlink" title="选择器案例"></a>选择器案例</h3><ul>
<li><ol>
<li>请将下面的链接文字修改为红色。</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>请将下面的大肘子文字修改为红色。</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>大肘子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>猪头<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>猪尾巴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hot</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><ul>
<li>什么是交集选择器?</li>
<li>作用: <strong>给所有选择器选中的标签中, 相交的那部分标签设置属性</strong><ul>
<li>在开发中通常为了精准的选择某一个元素;</li>
</ul>
</li>
<li>格式:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择器1选择器2&#123;</span></span><br><span class="line"><span class="comment">    属性: 值;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>选择器和选择器之间没有任何的连接符号</li>
<li>选择器可以使用 <strong>标签名称 &#x2F; id名称 &#x2F; class名称</strong></li>
<li>交集选择器仅仅作为了解, 企业开发中用的并不多</li>
</ul>
</li>
</ul>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><ul>
<li>并集选择器可以选择多组标签, 同时为他们定义相同的样式。</li>
<li>在开发中通常为了给多个元素设置相同的样式;</li>
<li>并集选择器是各选择器通过英文逗号<code>,</code>连接而成，任何形式的选择器都可以作为并集选择器的一部分。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">div</span> &#123; <span class="attribute">color</span>: red; &#125; <span class="comment">/* 选择 ul 和 div标签元素 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>元素1 和 元素2 中间用逗号隔开</p>
</li>
<li><p>逗号可以理解为和的意思</p>
</li>
<li><p><strong>并集选择器通常用于集体声明</strong></p>
</li>
</ul>
<h3 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h3><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><ul>
<li>什么是相邻兄弟选择器 CSS2</li>
<li><strong>作用: 给指定标签后面紧跟的那个标签设置属性</strong></li>
<li>格式:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择器1+选择器2&#123;</span></span><br><span class="line"><span class="comment">    属性:值;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="selector-tag">h1</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>相邻兄弟选择器必须通过<code>+</code>连接</li>
<li><strong>相邻兄弟选择器只能选中紧跟其后的那个标签, 不能选中被隔开的标签</strong></li>
</ul>
</li>
</ul>
<h4 id="通用兄弟-CSS3"><a href="#通用兄弟-CSS3" class="headerlink" title="通用兄弟(CSS3)"></a>通用兄弟(CSS3)</h4><ul>
<li>什么是通用兄弟选择器 </li>
<li><strong>作用: 给指定选择器后面的所有选择器选中的所有标签设置属性</strong> , 前面的不会选中</li>
<li>格式:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择器1~选择器2&#123;</span></span><br><span class="line"><span class="comment">    属性:值;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="selector-tag">h1</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>通用兄弟选择器必须用<code>~</code>连接</li>
<li><strong>通用兄弟选择器选中的是指定选择器后面某个选择器选中的所有标签, 无论有没有被隔开都可以选中</strong></li>
</ul>
</li>
</ul>
<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><h4 id="伪类选择器的作用"><a href="#伪类选择器的作用" class="headerlink" title="伪类选择器的作用"></a>伪类选择器的作用</h4><ul>
<li><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>
</li>
<li><p>伪类选择器书写最大的特点是用冒号<code>:</code>表示，比如 <code>:hover</code> 、 <code>:first-child</code> 。</p>
</li>
<li><p>因为伪类选择器很多，比如有链接伪类、结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。</p>
</li>
</ul>
<h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 未访问过的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 已经访问过的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标经过的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 点击未松开时的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>链接伪类选择器注意事项:</p>
<ul>
<li>为了确保生效，请按照 LVHA 的循顺序声明 <strong>:link－:visited－:hover－:active</strong>。</li>
</ul>
</li>
<li><p>记忆法：love hate 或者 lv 包包 hao 。</p>
<ul>
<li><strong>因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</strong></li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><ol>
<li>a 标签的伪类选择器可以单独出现也可以一起出现</li>
</ol>
</li>
<li><ol start="2">
<li>a 标签的伪类选择器如果一起出现，那么有严格的顺序要求, 编写的顺序必须要遵守爱恨原则 love hate</li>
</ol>
</li>
<li><ol start="3">
<li>如果默认状态的样式和被访问过状态的样式一样，那么可以缩写</li>
</ol>
</li>
<li><ol start="4">
<li>在企业开发中编写 a 标签的伪类选择器最好写在标签选择器的后面</li>
</ol>
</li>
<li><ol start="5">
<li>在企业开发中和 a 标签盒子相关的属性都写在标签选择器中(显示模式&#x2F;宽度&#x2F;高度&#x2F;padding&#x2F;margin)</li>
</ol>
</li>
<li><ol start="6">
<li>在企业开发中和 a 标签文字&#x2F;背景相关的都写在伪类选择器中</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* a 是标签选择器 所有的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red; <span class="comment">/* 鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>除了a元素，:hover、:active也能用在其他元素上</li>
<li>直接给a元素设置样式，相当于给a元素的所有动态伪类都设置了同一个样式<ul>
<li>相当于a:link、a:visited、a:hover、a:active、a:focus 的 color 都是 gray</li>
</ul>
</li>
</ul>
<h4 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title=":focus伪类选择器"></a>:focus伪类选择器</h4><ul>
<li><p><strong>:focus 伪类选择器用于选取获得焦点的表单元素。</strong></p>
</li>
<li><p>焦点就是光标，一般情况 input 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>因为链接a元素可以被键盘的Tab键选中聚焦，所以:focus也适用于a元素</li>
</ul>
<h4 id="其他伪类选择器"><a href="#其他伪类选择器" class="headerlink" title="其他伪类选择器"></a>其他伪类选择器</h4><ul>
<li><p>目标伪类</p>
<ul>
<li><code>:target</code></li>
</ul>
</li>
<li><p>语言伪类</p>
<ul>
<li><code>:lang( )</code></li>
</ul>
</li>
<li><p>元素状态伪类</p>
<ul>
<li><code>:enabled、:disabled、:checked</code></li>
</ul>
</li>
<li><p>结构伪类</p>
<ul>
<li><code>:nth-child( )、:nth-last-child( )、:nth-of-type( )、:nth-last-of-type( )</code></li>
<li><code>:first-child、:last-child、:first-of-type、:last-of-type</code></li>
<li><code>:root、:only-child、:only-of-type、:empty</code></li>
</ul>
</li>
<li><p>否定伪类</p>
<ul>
<li><code>:not()</code></li>
</ul>
</li>
</ul>
<h3 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/8cf650672ab24fdd9cd4b157c165f71d" alt="image-20220125221910599"></p>
<h3 id="序选择器-CSS3"><a href="#序选择器-CSS3" class="headerlink" title="序选择器(CSS3)"></a>序选择器(CSS3)</h3><ul>
<li><p>序选择器是 CSS3 中新增的选择器最具代表性的就是序选择器</p>
</li>
<li><p>什么是序选择器?</p>
<ul>
<li><strong>作用: 选中指定的任意标签然后设置属性</strong></li>
</ul>
</li>
<li><p>格式:</p>
<ul>
<li><ol>
<li>同级别的第几个</li>
</ol>
<ul>
<li><strong>:first-child</strong> 选中同级别中的第一个标签</li>
<li><strong>:last-child</strong> 选中同级别中的最后一个标签</li>
<li><strong>:nth-child(n)</strong> 选中同级别中的第 n 个标签</li>
<li><strong>:nth-last-child(n)</strong> 选中同级别中的倒数第n个标签</li>
<li><strong>:only-child</strong> 选中父元素中唯一的标签</li>
<li>注意点: 不区分类型</li>
</ul>
</li>
<li><ol start="2">
<li>同级别同类型的第几个</li>
</ol>
<ul>
<li><strong>:first-of-type</strong> 选中同级别中同类型的第一个标签</li>
<li><strong>:last-of-type</strong>  选中同级别中同类型的最后一个标签</li>
<li><strong>:nth-of-type(n)</strong> 选中同级别中同类型的第 n 个标签</li>
<li><strong>:nth-last-of-type(n)</strong>  选中同级别中同类型的倒数第 n 个标签</li>
<li><strong>:only-of-type</strong> 选中父元素中唯一类型的某个标签</li>
</ul>
</li>
<li><ol start="3">
<li>其它用法</li>
</ol>
<ul>
<li><strong>:nth-child(odd)</strong> 选中同级别中的所有奇数</li>
<li><strong>:nth-child(even)</strong> 选中同级别中的所有偶数</li>
<li><strong>:nth-child(xn+y)</strong><ul>
<li>x 和 y 是用户自定义的, 而 <strong>n 是一个计数器, 从 0 开始递增</strong></li>
</ul>
</li>
<li><strong>:nth-of-type(odd)</strong> 选中同级别中同类型的所有奇数</li>
<li><strong>:nth-of-type(even)</strong> 选中同级别中同类型的所有偶数</li>
<li><strong>:nth-of-type(xn+y)</strong><ul>
<li>x 和 y 是用户自定义的, 而 n 是一个计数器, 从 0 开始递增</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="CSS字体样式"><a href="#CSS字体样式" class="headerlink" title="CSS字体样式"></a>CSS字体样式</h2><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><h4 id="字体的使用"><a href="#字体的使用" class="headerlink" title="字体的使用"></a>字体的使用</h4><ul>
<li><p>CSS Fonts (字体)属性<strong>用于定义字体系列、大小、粗细、和文字样式（如斜体）</strong>。</p>
</li>
<li><p>CSS <strong>使用 font-family 属性定义文本的字体系列</strong>。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">font-family</span>: Arial,<span class="string">&quot;Microsoft Yahei&quot;</span>, <span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>各种字体之间必须使用英文状态下的逗号隔开</li>
<li>一般情况下,如果<strong>有空格隔开的多个单词组成的字体,需要加引号.</strong></li>
<li><strong>尽量使用系统默认自带的字体</strong>，保证在任何用户的浏览器中都能正确显示,如果设置的字体不存在, 那么系统会使用默认的字体来显示</li>
<li>最常见的几个字体：<code>body &#123;font-family: &#39;Microsoft YaHei&#39;,tahoma,arial,&#39;Hiragino Sans GB&#39;; &#125;</code><ul>
<li>会先使用第一种字体,没有就往后继续使用,依次下去,最后还没有,就使用电脑默认字体</li>
</ul>
</li>
<li>默认一般使用<strong>宋体</strong></li>
<li>如果想给中文和英文分别单独设置字体, 怎么办?<ul>
<li>但凡是中文字体, 里面都包含了英文</li>
<li>但凡是英文字体, 里面都没有包含中文</li>
<li>也就是说中文字体可以处理英文, 而英文字体不能处理中文</li>
<li>注意点: 如果想给界面中的英文单独设置字体, 那么英文的字体必须写在中文的前面</li>
</ul>
</li>
</ul>
<h4 id="字体原理"><a href="#字体原理" class="headerlink" title="字体原理"></a>字体原理</h4><ul>
<li>首先, 我们需要通过一些渠道获取到希望使用的字体(不是开发来做的事情):<ul>
<li>对于某些收费的字体, 我们需要获取到对应的授权;</li>
<li>对于某些公司定制的字体, 需要设计人员来设计;</li>
<li>对于某些免费的字体, 我们需要获取到对应的字体文件;</li>
</ul>
</li>
<li>其次, 在我们的CSS代码当中使用该字体(重要):<ul>
<li>具体的过程看后面的操作流程;</li>
</ul>
</li>
<li>最后, 在部署静态资源时, 将HTML&#x2F;CSS&#x2F;JavaScript&#x2F;Font一起部署在静态服务器中;</li>
<li>用户的角度:<ul>
<li>浏览器一个网页时, 因为代码中有引入字体文件, 字体文件会被一起下载下来;</li>
<li>浏览器会根据使用的字体在下载的字体文件中查找、解析、使用对应的字体；</li>
<li>在浏览器中使用对应的字体显示内容；</li>
</ul>
</li>
</ul>
<h4 id="自定义字体的使用"><a href="#自定义字体的使用" class="headerlink" title="自定义字体的使用"></a>自定义字体的使用</h4><ul>
<li>使用过程如下：<ul>
<li>1.将字体放到对应的目录中</li>
<li>2.通过@font-face来引入字体, 并且设置格式</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span> : <span class="string">&quot;fontName&quot;</span>;</span><br><span class="line">	<span class="attribute">src</span> : <span class="built_in">url</span>(<span class="string">./font/font.ttf</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>:<span class="string">&quot;fontName&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字体的兼容性"><a href="#字体的兼容性" class="headerlink" title="字体的兼容性"></a>字体的兼容性</h4><ul>
<li><p>我们刚才使用的字体文件是 .ttf, 它是TrueType字体.</p>
<ul>
<li>在开发中某些浏览器可能不支持该字体, 所以为了浏览器的兼容性问题, 我们需要有对应其他格式的字体;</li>
</ul>
</li>
<li><p>TrueType字体：拓展名是 .ttf</p>
<ul>
<li>OpenType&#x2F;TrueType字体：拓展名是 .ttf、.otf，建立在TrueType字体之上</li>
<li>Embedded OpenType字体：拓展名是 .eot， OpenType字体的压缩版</li>
<li>SVG字体：拓展名是 .svg、 .svgz</li>
<li>WOFF表示Web Open Font Format web开放字体：拓展名是 .woff，建立在TrueType字体之上</li>
</ul>
</li>
<li><p>这里我们提供一个网站来生产对应的字体文件:</p>
<ul>
<li><a href="https://font.qqe2.com/#">https://font.qqe2.com/#</a> 暂时可用</li>
</ul>
</li>
<li><p>可以如下格式编写:</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/1533317f2bde4c219aacdaa74016c4e6"></p>
<ul>
<li>src 用于指定字体资源</li>
<li>url 指定资源的路径</li>
<li>format 用于帮助浏览器快速识别字体的格式;</li>
</ul>
<h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><ul>
<li><strong>CSS 使用 font-size 属性定义字体大小</strong>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>px（像素）大小是我们网页的最常用的单位<ul>
<li>也可以使用em单位(不推荐)：1em代表100%，2em代表200%，0.5em代表50%</li>
<li>也可以使用百分比 : 基于父元素的font-size计算，比如50%表示等于父元素font-size的一半</li>
</ul>
</li>
<li><strong>谷歌浏览器默认的文字大小为16px</strong></li>
<li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小</li>
<li>可以给 body 指定整个页面文字的大小</li>
</ul>
<h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><ul>
<li><strong>CSS 使用 font-weight 属性设置文本字体的粗细。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/ea4814fd72db4a82bd94dd73798e4689" alt="image-20220125205429621"></p>
<ul>
<li>学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗</li>
<li>实际开发时，我们更喜欢用数字表示粗细</li>
<li>strong、b、h1~h6 等标签的 font-weight 默认就是 bold</li>
</ul>
<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><ul>
<li><strong>CSS 使用 font-style 属性设置文本的风格。</strong></li>
<li>font-style用于设置文字的常规、斜体显示<ul>
<li><strong>normal</strong>：常规显示</li>
<li><strong>italic</strong>(斜体)：用字体的斜体显示(通常会有专门的字体)</li>
<li><strong>oblique</strong>(倾斜)：文本倾斜显示(仅仅是让文字倾斜)</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">font-style</span>: oblique;<span class="comment">/* 文本倾斜显示(仅仅是让文字倾斜) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意： <strong>平时我们很少给文字加斜体，反而要给斜体标签（em，i）改为不倾斜字体。</strong></li>
<li>em、i、cite、address、var、dfn 等元素的 font-style 默认就是 italic</li>
</ul>
<h3 id="字体复合样式"><a href="#字体复合样式" class="headerlink" title="字体复合样式"></a>字体复合样式</h3><ul>
<li>字体属性可以把以上文字样式综合来写, 这样可以更节约代码:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">font</span>: font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</p>
</li>
<li><p><strong>不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</strong></p>
</li>
</ul>
<h3 id="字体属性总结"><a href="#字体属性总结" class="headerlink" title="字体属性总结"></a>字体属性总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/9bc21cf0804c4b9d99d1f05cbb75c907" alt="image-20220125205741387"></p>
<h2 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h2><ul>
<li>CSS Text（文本）属性可定义文本的外观，比如<strong>文本的颜色、对齐文本、装饰文本、文本缩进、行间距等</strong>。</li>
</ul>
<h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><ul>
<li>color 属性用来设置文本内容的前景色,包括文字、装饰线、边框、外轮廓等的颜色</li>
<li>开发中最常用的是十六进制.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/7ac8fa75039e417090c4e747f7518e90" alt="image-20220125205909394"></p>
<ul>
<li>颜色关键字（color keywords）：<ul>
<li>是不区分大小写的标识符，它表示一个具体的颜色；</li>
<li>可以表示哪些颜色呢？</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/color_value#%E8%AF%AD%E6%B3%95">https://developer.mozilla.org/zh-CN/docs/Web/CSS/color_value#%E8%AF%AD%E6%B3%95</a></li>
</ul>
</li>
<li>RGB颜色：<ul>
<li>RGB是一种色彩空间，通过R（red，红色）、G（green，绿色）、B（blue，蓝色）三原色来组成了不同的颜色；<ul>
<li>也就是通过调整这三个颜色不同的比例，可以组合成其他的颜色；</li>
</ul>
</li>
<li>RGB 各个原色的取值范围是 0~255；</li>
</ul>
</li>
<li>RGB颜色可以通过以#为前缀的十六进制字符和函数（rgb()、rgba()）标记表示。</li>
<li>方式一：十六进制符号：#RRGGBB[AA]<ul>
<li>R（红）、G（绿）、B （蓝）和A （alpha）是十六进制字符（0–9、A–F）；A是可选的。</li>
<li>比如，#ff0000等价于#ff0000ff；</li>
</ul>
</li>
<li>方式二：十六进制符号：#RGB[A]<ul>
<li>R（红）、G（绿）、B （蓝）和A （alpha）是十六进制字符（0–9、A–F）；</li>
<li>三位数符号（#RGB）是六位数形式（#RRGGBB）的减缩版。<ul>
<li>比如，#f09和#ff0099表示同一颜色。</li>
</ul>
</li>
<li>四位数符号（#RGBA）是八位数形式（#RRGGBBAA）的减缩版。<ul>
<li>比如，#0f38和#00ff3388表示相同颜色。</li>
</ul>
</li>
</ul>
</li>
<li>方式三：函数符： <code>rgb[a](R, G, B[, A])</code><ul>
<li>R（红）、G（绿）、B （蓝）可以是<code>&lt;number&gt;</code>（数字），或者<code>&lt;percentage&gt;</code>（百分比），255相当于100%。</li>
<li>A（alpha）可以是0到1之间的数字，或者百分比，数字1相当于100%（完全不透明）。</li>
</ul>
</li>
</ul>
<h3 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h3><ul>
<li><strong>text-align 属性用于设置元素内文本内容的水平对齐方式。</strong><ul>
<li>MDN: 定义行内内容（例如文字）如何相对它的块父元素对齐;</li>
</ul>
</li>
<li>格式: <code>text-align: center;</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: justify;<span class="comment">/* 两端对齐 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/b1e2def77c0743d6b38e9eafc7e5aad9" alt="image-20220125205958447"></p>
<h3 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h3><ul>
<li><strong>text-decoration 属性规定添加到文本的修饰。</strong>可以<strong>给文本添加下划线、删除线、上划线</strong>等。</li>
<li>格式: <code>text-decoration: underline;</code></li>
<li>a 元素有下划线的本质是默认被添加了 text-decoration 属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>：underline；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/3042013e2d794df9a43be9435614a4bf" alt="image-20220125210057599"></p>
<ul>
<li>pink 老师总结: 重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.</li>
</ul>
<h3 id="文字大小写转换"><a href="#文字大小写转换" class="headerlink" title="文字大小写转换"></a>文字大小写转换</h3><ul>
<li>text-transform用于设置文字的大小写转换<ul>
<li>Transform单词是使变形&#x2F;变换(形变);</li>
</ul>
</li>
<li>text-transform有几个常见的值:<ul>
<li><strong>capitalize</strong>：(使…首字母大写, 资本化的意思)将每个单词的首字符变为大写</li>
<li><strong>uppercase</strong>：(大写字母)将每个单词的所有字符变为大写</li>
<li><strong>lowercase</strong>：(小写字母)将每个单词的所有字符变为小写</li>
<li><strong>none</strong>：没有任何影响</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: capitalize;<span class="comment">/*将每个单词的首字符变为大写*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实际开发中用JavaScript代码转化的更多</li>
</ul>
<h3 id="字间距-词间距"><a href="#字间距-词间距" class="headerlink" title="字间距&#x2F;词间距"></a>字间距&#x2F;词间距</h3><ul>
<li>letter-spacing、word-spacing 分别用于设置字母、单词之间的间距<ul>
<li>默认是0，可以设置为负数</li>
</ul>
</li>
</ul>
<h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><ul>
<li><strong>text-indent 属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">text-indent</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">text-indent</span>: <span class="number">2em</span>;<span class="comment">/* 缩进2个文字 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。</strong></li>
</ul>
<h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><ul>
<li><strong>line-height 属性用于设置行间的距离（行高）</strong>。可以<strong>控制文字行与行之间的距离</strong>.</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/70d8de93651c4cdab8b1198f84437b69" alt="image-20220125210328680"></p>
<ul>
<li>行高的严格定义是：<strong>两行文字基线（baseline）之间的间距</strong></li>
<li>基线（baseline）：<strong>与小写字母x最底部对齐的线</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/13e5b1819c0146f28765bbd7a6c3badd" alt="1670214806164"></p>
<ul>
<li><p>小技巧:单行文字垂直居中</p>
<ul>
<li><p>CSS 没有给我们提供文字垂直居中的代码. 这里我们可以使用一个小技巧来实现.</p>
<ul>
<li>解决方案: <strong>让文字的行高等于盒子的高度 就可以让文字在当前盒子内垂直居中</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>单行文字垂直居中的原理:</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/b5450b07f0904098bb143ca99e0a5f70" alt="image-20220125223145108"></p>
<ul>
<li>简单理解: <strong>行高的上空隙和下空隙把文字挤到中间了</strong>. 是如果行高小于盒子高度,文字会偏上,如果行高大于盒子高度,则文字偏下</li>
</ul>
<h3 id="文本属性总结"><a href="#文本属性总结" class="headerlink" title="文本属性总结"></a>文本属性总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/ceb5806584534a9786a2cfb930a67a13" alt="image-20220125210407938"></p>
<h2 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h2><h3 id="什么是元素显示模式"><a href="#什么是元素显示模式" class="headerlink" title="什么是元素显示模式"></a>什么是元素显示模式</h3><ul>
<li><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p>
</li>
<li><p>元素显示模式就是元素（标签）以什么方式进行显示，比如 div 自己占一行，比如一行可以放多个 span。</p>
</li>
<li><p>HTML 元素一般分为<strong>块元素和行内元素</strong>两种类型。</p>
</li>
</ul>
<h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul>
<li><p>常见的块元素有<code>h1~h6、p、div、ul、ol、li</code>等，其中 div 标签是最典型的块元素。</p>
</li>
<li><p>块级元素的特点：</p>
<ul>
<li><p><strong>1) 比较霸道，自己独占一行。</strong></p>
</li>
<li><p><strong>2) 高度，宽度、外边距以及内边距都可以控制。</strong></p>
</li>
<li><p><strong>3) 宽度默认是容器（父级宽度）的100%。</strong></p>
</li>
<li><p><strong>4) 是一个容器及盒子，里面可以放行内或者块级元素。</strong></p>
</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li><strong>文字类的元素内部不能使用块级元素</strong></li>
<li><strong>p 标签主要用于存放文字，因此 p 里面不能放块级元素，特别是不能放 div 标签,否则浏览器会解析出错</strong></li>
<li><strong>同理， h1~h6 等都是文字类块级标签，里面也不能放其他块级元素</strong></li>
</ul>
</li>
</ul>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul>
<li><p>常见的行内元素有 <code>a、strong、b、em、i、del、s、ins、u、span</code>等，其中 span 标签是最典型的行内元素。</p>
</li>
<li><p>有的地方也将行内元素称为内联元素。</p>
</li>
<li><p>行内元素的特点：</p>
<ul>
<li><strong>01 相邻行内元素在一行上显示，一行可以显示多个。</strong></li>
<li><strong>02 高、宽直接设置是无效的。</strong></li>
<li><strong>03 默认宽度就是它本身内容的宽度。</strong></li>
<li><strong>04 行内元素只能容纳文本或其他行内元素。</strong></li>
<li><strong>05 行内元素设置宽高样式不生效</strong></li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li><p><strong>链接里面不能再放链接</strong></p>
</li>
<li><p><strong>特殊情况链接 a 里面可以放块级元素，但是给 a 转换一下块级模式最安全</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul>
<li>在行内元素中有几个特殊的标签 —— <code>img 、input 、td</code>，它们同时具有块元素和行内元素的特点。也称它们为行内块元素。</li>
<li>行内块元素的特点：<ul>
<li><strong>01 和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。</strong></li>
<li><strong>02  默认宽度就是它本身内容的宽度（行内元素特点）。</strong></li>
<li><strong>03 高度，行高、外边距以及内边距都可以控制（块级元素特点）。</strong></li>
</ul>
</li>
</ul>
<h3 id="元素显示模式总结"><a href="#元素显示模式总结" class="headerlink" title="元素显示模式总结"></a>元素显示模式总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/e7060f332ad846c7a29e875bce32c6ce" alt="image-20220125222358332"></p>
<ul>
<li><strong>学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。</strong></li>
</ul>
<h3 id="元素显示模式的转换"><a href="#元素显示模式的转换" class="headerlink" title="元素显示模式的转换"></a>元素显示模式的转换</h3><ul>
<li>特殊情况下，我们需要元素模式的转换，简单理解: 一个模式的元素需要另外一种模式的特性</li>
<li>比如想要增加链接 a 的触发范围。</li>
<li>转换为块元素：<strong>display:block;</strong><ul>
<li>独占父元素的一行</li>
<li>可以随意设置宽高</li>
<li>高度默认由内容决定</li>
</ul>
</li>
<li>转换为行内元素：<strong>display:inline;</strong><ul>
<li>跟其他行内级元素在同一行显示;</li>
<li>不可以随意设置宽高;</li>
<li>宽高都由内容决定;</li>
</ul>
</li>
<li>转换为行内块：<strong>display: inline-block;</strong><ul>
<li>跟其他行内级元素在同一行显示</li>
<li>可以随意设置宽高</li>
<li>可以这样理解<ul>
<li>对外来说，它是一个行内级元素</li>
<li>对内来说，它是一个块级元素</li>
</ul>
</li>
</ul>
</li>
<li>隐藏元素 : <strong>display:none;</strong></li>
</ul>
<h3 id="元素显示模式案例"><a href="#元素显示模式案例" class="headerlink" title="元素显示模式案例"></a>元素显示模式案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/e5bece087cc6466dad3d9c1630235ce1"></p>
<ul>
<li><p>案例的核心思路分为两步:</p>
<ul>
<li><ol>
<li>把链接 a 转换为 行块级元素, 这样链接就可以设置宽度和高度,并在同一行显示</li>
</ol>
</li>
<li><ol start="2">
<li>鼠标经过a 给 链接设置背景颜色</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>体育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>汽车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>好用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><ul>
<li><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p>
</li>
<li><p>本质：让一个元素在页面中隐藏或者显示出来。</p>
</li>
</ul>
<h3 id="display-显示隐藏"><a href="#display-显示隐藏" class="headerlink" title="display 显示隐藏"></a>display 显示隐藏</h3><ul>
<li><p><strong>display 属性用于设置一个元素应如何显示。</strong></p>
<ul>
<li><strong>display: none ；</strong>隐藏对象, 元素不显示出来, 并且也不占据位置, 不占据任何空间(和不存在一样);</li>
<li><strong>display：block ；</strong>除了转换为块级元素之外，同时还有显示元素的意思</li>
</ul>
</li>
<li><p><strong>display 隐藏元素后，不再占有原来的位置。</strong></p>
</li>
<li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。</p>
</li>
</ul>
<h3 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h3><ul>
<li><p>visibility 属性用于指定一个元素应可见还是隐藏。</p>
<ul>
<li><strong>visibility：visible ;</strong> 默认为 visible, 元素是可见的;</li>
<li><strong>visibility：hidden;</strong> 元素隐藏,虽然元素不可见, 但是会占据元素应该占据的空间;</li>
</ul>
</li>
<li><p><strong>visibility 隐藏元素后，继续占有原来的位置。</strong></p>
</li>
<li><p>如果隐藏元素想要原来位置， 就用 visibility：hidden</p>
</li>
<li><p>如果隐藏元素不想要原来位置， 就用 display：none (用处更多 重点）</p>
</li>
</ul>
<h3 id="overflow-溢出显示隐藏"><a href="#overflow-溢出显示隐藏" class="headerlink" title="overflow 溢出显示隐藏"></a>overflow 溢出显示隐藏</h3><ul>
<li><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p>
<ul>
<li><strong>visible</strong>：溢出的内容照样可见</li>
<li><strong>hidden</strong>：溢出的内容直接裁剪</li>
<li><strong>scroll</strong>：溢出的内容被裁剪，但可以通过滚动机制查看<ul>
<li>会一直显示滚动条区域，滚动条区域占用的空间属于 width、height</li>
</ul>
</li>
<li><strong>auto</strong>：自动根据内容是否溢出来决定是否提供滚动机制</li>
</ul>
</li>
<li><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</p>
</li>
<li><p>但是如果有定位的盒子， 请慎用 overflow:hidden; 因为它会隐藏多余的部分。</p>
</li>
</ul>
<h3 id="设置透明度"><a href="#设置透明度" class="headerlink" title="设置透明度"></a>设置透明度</h3><ul>
<li>rgba设置颜色, 将a的值设置为 0<ul>
<li>rgba的a设置的是alpha值, 可以设置透明度, 不影响子元素;</li>
</ul>
</li>
<li>opacity设置透明度, 设置为 0<ul>
<li>设置整个元素的透明度, 会影响所有的子元素;</li>
</ul>
</li>
</ul>
<h3 id="显示与隐藏总结"><a href="#显示与隐藏总结" class="headerlink" title="显示与隐藏总结"></a>显示与隐藏总结</h3><ul>
<li><ol>
<li>display 显示隐藏元素 但是不保留位置</li>
</ol>
</li>
<li><ol start="2">
<li>visibility 显示隐藏元素 但是保留原来的位置</li>
</ol>
</li>
<li><ol start="3">
<li>overflow 溢出显示隐藏 但是只是对于溢出的部分处理</li>
</ol>
</li>
</ul>
<h3 id="显示与隐藏案例"><a href="#显示与隐藏案例" class="headerlink" title="显示与隐藏案例"></a>显示与隐藏案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/58b6b0a76a0043b599919e8abbde7791" alt="image-20220126195011220"></p>
<ul>
<li>练习元素的显示与隐藏</li>
<li>练习元素的定位</li>
<li>核心原理： 原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。</li>
<li>遮罩的盒子不占有位置， 就需要用绝对定位 和 display 配合使用。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">123</span>, <span class="number">124</span>, <span class="number">214</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS背景样式"><a href="#CSS背景样式" class="headerlink" title="CSS背景样式"></a>CSS背景样式</h2><ul>
<li><p>通过 CSS 背景属性，可以给页面元素添加背景样式。</p>
</li>
<li><p>背景属性可以设置<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</strong>等。</p>
</li>
</ul>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><ul>
<li><p><strong>background-color 属性定义了元素的背景颜色。</strong></p>
</li>
<li><p><strong>一般情况下元素背景颜色默认值是 transparent（透明）</strong>，我们也可以手动指定背景颜色为透明色。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:transparent; <span class="comment">/*指定背景颜色为透明色*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:red; <span class="comment">/*指定背景颜色为红色*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><ul>
<li><strong>background-image 属性描述了元素的背景图像。</strong>实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片</li>
<li>优点是非常便于控制位置. (精灵图也是一种运用场景)</li>
<li>如果设置了多张图片<ul>
<li>设置的第一张图片将显示在最上面，其他图片按顺序层叠在下面</li>
<li>如果设置了背景图片后，元素没有具体的宽高，背景图片是不会显示出来的</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">././images/24.jpg</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/534670977adf43e59c5417bf715839f0" alt="image-20220125223535480"></p>
<ul>
<li>注意：背景图片后面记得加 url ， 同时里面的路径不要加引号。</li>
</ul>
<h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><ul>
<li>如果需要在 HTML 页面上<strong>对背景图像进行平铺，可以使用 background-repeat 属性。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/*背景不平铺*/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/5ac4ac722cc341a797312c317d3c02ed" alt="image-20220125223635207"></p>
<h3 id="背景定位"><a href="#背景定位" class="headerlink" title="背景定位"></a>背景定位</h3><ul>
<li><strong>利用 background-position 属性可以改变图片在背景中的位置。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: x y;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/8666973bb3de4142852e10b7b7c333e1" alt="image-20220125224011071"></p>
<ul>
<li><p>01 参数是方位名词</p>
<ul>
<li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left top 和 top left 效果一致</li>
<li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li>
</ul>
</li>
<li><p>02 参数是精确单位</p>
<ul>
<li>如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</li>
<li>如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</li>
</ul>
</li>
<li><p>03 参数是混合单位</p>
<ul>
<li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</li>
</ul>
</li>
</ul>
<h3 id="背景固定"><a href="#背景固定" class="headerlink" title="背景固定"></a>背景固定</h3><ul>
<li><p><strong>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</strong></p>
</li>
<li><p>background-attachment 后期可以制作视差滚动的效果。</p>
</li>
<li><p>可以设置以下 3 个值:</p>
<ul>
<li><strong>scroll</strong>：此关键属性值表示背景相对于元素本身固定， 而不是随着它的内容滚动</li>
<li><strong>local</strong>：此关键属性值表示背景相对于元素的内容固定。如果一个元素拥有滚动机制，背景将会随着元素的内容滚动.</li>
<li><strong>fixed</strong>：此关键属性值表示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : scroll; <span class="comment">/*背景和内容一起滚动*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : fixed; <span class="comment">/*背景固定位置不动,不会随着内容而动*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景复合写法"><a href="#背景复合写法" class="headerlink" title="背景复合写法"></a>背景复合写法</h3><ul>
<li><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性 background 中。从而节约代码量.这是实际开发中，我们更提倡的写法。</p>
</li>
<li><p>当使用简写属性时，没有特定的书写顺序,一般习惯约定顺序为：</p>
<ul>
<li><strong>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y fixed top ;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 背景颜色 图片 平铺 是否滚动 图片位置 */</span></span><br><span class="line"><span class="attribute">background</span>:<span class="number">#ccc</span> <span class="built_in">url</span>(<span class="string">./images/24.jpg</span>) no-repeat fixed center top;</span><br></pre></td></tr></table></figure>

<h3 id="背景颜色透明-CSS3"><a href="#背景颜色透明-CSS3" class="headerlink" title="背景颜色透明(CSS3)"></a>背景颜色透明(CSS3)</h3><ul>
<li>CSS3 为我们提供了背景颜色半透明的效果</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>最后一个参数是 alpha 透明度，取值范围在 0~1之间</p>
</li>
<li><p>我们习惯把 0.3 的 0 省略掉，写为 <code>background: rgba(0, 0, 0, .3);</code></p>
</li>
<li><p>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</p>
</li>
<li><p>CSS3 新增属性，是 IE9+ 版本浏览器才支持的</p>
</li>
<li><p>但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</p>
</li>
</ul>
<h3 id="背景样式总结"><a href="#背景样式总结" class="headerlink" title="背景样式总结"></a>背景样式总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/30154c75b34f4630beac57830686fc40" alt="image-20220125225147543"></p>
<ul>
<li><strong>背景图片:实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</strong></li>
</ul>
<h3 id="背景样式综合案例"><a href="#背景样式综合案例" class="headerlink" title="背景样式综合案例"></a>背景样式综合案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/49c547a81bf044d7a0d272d2c7e8cc51" alt="image-20220125225248774"></p>
<ul>
<li><p>练习价值:</p>
<ol>
<li><p>链接属于行内元素, 但是此时需要宽度高度,因此需要模式转换.</p>
</li>
<li><p>里面文字需要水平居中和垂直居中. 因此需要单行文字垂直居中的代码.</p>
</li>
<li><p>链接里面需要设置背景图片.因此需要用到背景的相关属性设置.</p>
</li>
<li><p>鼠标经过变化背景图片,因此需要用到伪类选择器.</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">./images/bg.png</span>) no-repeat left top;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/bgc.png</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="背景尺寸大小"><a href="#背景尺寸大小" class="headerlink" title="背景尺寸大小"></a>背景尺寸大小</h3><ul>
<li>background-size 属性指定背景图片大小。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: length|percentage|cover|contain;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>length</th>
<th>设置背景图片高度和宽度。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为 <strong>auto</strong>(自动)</th>
</tr>
</thead>
<tbody><tr>
<td>percentage</td>
<td>将计算相对于背景定位区域的百分比。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为”auto(自动)”</td>
</tr>
<tr>
<td>cover</td>
<td>此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。</td>
</tr>
<tr>
<td>contain</td>
<td>此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: <span class="number">600px</span> <span class="number">400px</span>; <span class="comment">/* 像素值设置背景图片高度和宽度。只给出一个值，第二个是设置为 auto (自动) */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span>  <span class="number">90%</span>; <span class="comment">/* 百分比  只给出一个值，第二个是设置为 auto (自动) */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: cover; <span class="comment">/* cover 拉伸图片到能覆盖整个容器的最小大小*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: contain; <span class="comment">/* contain 拉伸图片到达容器边缘就停止拉伸*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景图片定位区域-CSS3"><a href="#背景图片定位区域-CSS3" class="headerlink" title="背景图片定位区域(CSS3)"></a>背景图片定位区域(CSS3)</h3><ul>
<li><strong>background-origin 属性规定 background-position 属性相对于什么位置来定位</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: padding-box|border-box|content-box;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">padding-box</td>
<td align="left">背景图像填充框的相对位置</td>
</tr>
<tr>
<td align="left">border-box</td>
<td align="left">背景图像边界框的相对位置</td>
</tr>
<tr>
<td align="left">content-box</td>
<td align="left">背景图像的相对位置的内容框</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: padding-box; <span class="comment">/*背景图片从padding开始,背景图片会填充padding的区域 默认值*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-origin</span>: border-box; <span class="comment">/*背景图片从边框开始,会填充border区域,但是border依旧处于最上层显示*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-origin</span>: content-box; <span class="comment">/*背景图片从内容区域开始,填充内容区域*/</span></span><br></pre></td></tr></table></figure>

<h3 id="背景绘制区域-CSS3"><a href="#背景绘制区域-CSS3" class="headerlink" title="背景绘制区域(CSS3)"></a>背景绘制区域(CSS3)</h3><ul>
<li><strong>background-clip 属性规定背景的绘制区域。</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-box</td>
<td align="left">背景被裁剪到边框盒。</td>
</tr>
<tr>
<td align="left">padding-box</td>
<td align="left">背景被裁剪到内边距框。</td>
</tr>
<tr>
<td align="left">content-box</td>
<td align="left">背景被裁剪到内容框。</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-clip</span>: border-box;  <span class="comment">/* 背景被裁剪到边框盒。 从边框开始填充,填充到边框的下方 (测试时能填充右边框和下角边框的底层,但无法填充到左边框和上边框的底层)*/</span></span><br><span class="line">      </span><br><span class="line"><span class="attribute">background-clip</span>: padding-box;  <span class="comment">/* 背景被裁剪到内边距框。从 padding 区域开始填充满整个 padding 区域,不会填充到边框区域 */</span></span><br><span class="line">      </span><br><span class="line"><span class="attribute">background-clip</span>: content-box;  <span class="comment">/* 背景被裁剪到内容框。从 content 内容区域开始填充满整个 content 内容区域,不会填充到 padding 区域*/</span></span><br></pre></td></tr></table></figure>

<h3 id="多重背景图片"><a href="#多重背景图片" class="headerlink" title="多重背景图片"></a>多重背景图片</h3><h4 id="多重背景图片-1"><a href="#多重背景图片-1" class="headerlink" title="多重背景图片"></a>多重背景图片</h4><ul>
<li><strong>CSS 允许您通过 background-image 属性为一个元素添加多幅背景图像。</strong> </li>
<li>不同的背景图像的各个属性之间用逗号隔开，并且图像会彼此堆叠，其中的第一幅图像最靠近观看者。</li>
<li>下面的例子有两幅背景图像，第一幅图像是花朵（与底部和右侧对齐），第二幅图像是纸张背景（与左上角对齐）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">flower.gif</span>), <span class="built_in">url</span>(<span class="string">paper.gif</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: right bottom, left top;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat, repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多重背景的简写"><a href="#多重背景的简写" class="headerlink" title="多重背景的简写"></a>多重背景的简写</h4><ul>
<li><p>多重背景图像可以使用单独的背景属性（如上所述）或 <code>background</code> 简写属性来指定。</p>
</li>
<li><p>下面的例子使用 <code>background</code> 简写属性（结果与上例相同）：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">flower.gif</span>) right bottom no-repeat, <span class="built_in">url</span>(<span class="string">paper.gif</span>) left top repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多重背景的尺寸"><a href="#多重背景的尺寸" class="headerlink" title="多重背景的尺寸"></a>多重背景的尺寸</h4><ul>
<li>在处理多重背景时，<code>background-size</code> 属性还可以接受多个设置背景尺寸的值（使用逗号分隔的列表）。</li>
<li>下面的例子指定了三幅背景图像，每幅图像有不同的 background-size 值：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">tree.png</span>) left top no-repeat, <span class="built_in">url</span>(<span class="string">flower.gif</span>) right bottom no-repeat, </span><br><span class="line">  	<span class="built_in">url</span>(<span class="string">paper.gif</span>) left top repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50px</span>, <span class="number">130px</span>, auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图片和背景图片的区别"><a href="#图片和背景图片的区别" class="headerlink" title="图片和背景图片的区别"></a>图片和背景图片的区别</h3><ul>
<li><ol>
<li>背景图片仅仅是一个装饰, 不会占用位置,,插入图片会占用位置</li>
</ol>
</li>
<li><ol start="2">
<li>背景图片有定位属性, 所以可以很方便的控制图片的位置, 插入图片没有定位属性, 所有控制图片的位置不太方便</li>
</ol>
</li>
<li><ol start="3">
<li>插入图片的语义比背景图片的语义要强, 所以<strong>在企业开发中如果你的图片想被搜索引擎收录, 那么推荐使用插入图片</strong></li>
</ol>
<ul>
<li>img，作为网页内容的重要组成部分，比如广告图片、LOGO图片、文章配图、产品图片</li>
<li>background-image，可有可无。有，能让网页更加美观。无，也不影响用户获取完整的网页内容信息</li>
</ul>
</li>
</ul>
<h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><h4 id="为什么需要精灵图"><a href="#为什么需要精灵图" class="headerlink" title="为什么需要精灵图"></a>为什么需要精灵图</h4><p><img src="https://s1.vika.cn/space/2023/02/19/0c150f9c0e364233ae1ae98344af3c97" alt="image-20220126195415766"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/7680543262b647f89c07729d31168f78" alt="image-20220126195457475"></p>
<ul>
<li><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>
</li>
<li><p>因此，<strong>精灵图的目的: 就是为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度</strong>，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。</p>
</li>
<li><p>核心原理：<strong>将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</strong></p>
</li>
</ul>
<h4 id="精灵图的使用"><a href="#精灵图的使用" class="headerlink" title="精灵图的使用"></a>精灵图的使用</h4><ul>
<li><p>使用精灵图核心：</p>
<ul>
<li>01 精灵技术主要针对于背景图片使用。<strong>就是把多个小背景图片整合到一张大图片中。</strong></li>
<li>02 这个大图片也称为 sprites <strong>精灵图</strong> 或者 <strong>雪碧图</strong></li>
<li>03 移动背景图片位置， 此时可以使用 background-position 。</li>
<li>04 移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>
<li>05 因为一般情况下都是往上 &#x2F; 往左移动，所以数值是负值。</li>
<li>06 使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>
</ul>
</li>
<li><p>使用精灵图核心总结：</p>
<ul>
<li>精灵图主要针对于小的背景图片使用。</li>
<li>主要借助于背景位置来实现 : background-position 。</li>
<li>一般情况下精灵图都是负值。（千万注意网页中的坐标： x 轴右边走是正值，左边走是负值， y 轴同理。）</li>
</ul>
</li>
</ul>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul>
<li>页面布局要学习三大核心, 盒子模型, 浮动 和 定位. 学习好盒子模型能非常好的帮助我们布局页面.</li>
</ul>
<h3 id="网页布局的本质"><a href="#网页布局的本质" class="headerlink" title="网页布局的本质"></a>网页布局的本质</h3><ul>
<li><p>网页布局过程：</p>
<p> 01 先准备好相关的网页元素，网页元素基本都是盒子 Box 。</p>
<p> 02 利用 CSS 设置好盒子样式，然后摆放到相应位置。</p>
<p> 03 往盒子里面装内容.</p>
</li>
<li><p><strong>网页布局的核心本质： 就是利用 CSS 摆盒子。</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e7d977c733ed4381ae545258e29b18bb" alt="image-20220126130551732"></p>
<h3 id="盒子模型-1"><a href="#盒子模型-1" class="headerlink" title="盒子模型"></a>盒子模型</h3><ul>
<li><ol>
<li>所谓 盒子模型：就是把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li>
</ol>
</li>
<li><ol start="2">
<li>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，<strong>它包括：边框、外边距、内边距、和 实际内容</strong></li>
</ol>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e213ff2993c14095a965a1bbaa33534f" alt="image-20220126130720500"></p>
<ul>
<li><ol start="3">
<li>盒模型宽度和高度</li>
</ol>
<ul>
<li>内容的宽度和高度<ul>
<li>就是通过 width &#x2F; height 属性设置的宽度和高度, 对于行内级元素来说, 设置宽高是无效的!</li>
<li>另外我们还可以设置如下属性:<ul>
<li>min-width：最小宽度，无论内容多少，宽度都大于或等于min-width</li>
<li>max-width：最大宽度，无论内容多少，宽度都小于或等于max-width</li>
<li>移动端适配时, 可以设置最大宽度和最小宽度;</li>
</ul>
</li>
<li>下面两个属性不常用:<ul>
<li>min-height：最小高度，无论内容多少，高度都大于或等于min-height</li>
<li>max-height：最大高度，无论内容多少，高度都小于或等于max-height</li>
</ul>
</li>
</ul>
</li>
<li>元素的宽度和高度<ul>
<li>宽度 &#x3D; 左边框 + 左内边距 + width + 右内边距 + 右边框</li>
<li>高度 同理可证</li>
</ul>
</li>
<li>规律<ul>
<li>增加了 padding &#x2F; border 之后元素的宽高也会发生变化</li>
<li>如果增加了 padding &#x2F; border 之后还想保持元素的宽高, 那么就必须减去内容的宽高</li>
</ul>
</li>
<li>元素空间的宽度和高度<ul>
<li>宽度 &#x3D; 左外边距 + 左边框 + 左内边距 + width + 右内边距 + 右边框 + 右外边距</li>
<li>高度 同理可证</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><h4 id="什么是边框"><a href="#什么是边框" class="headerlink" title="什么是边框"></a>什么是边框</h4><ul>
<li><p>边框就是环绕在标签宽度和高度周围的线条</p>
</li>
<li><p><strong>border 可以设置元素的边框。</strong>边框有三部分组成: <strong>边框宽度(粗细) 边框样式 边框颜色</strong></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width border-style border-color;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/b3a090bdd62e407c9eec4eacb05c8166" alt="image-20220126130818759"></p>
<ul>
<li><p>边框样式 border-style 可以设置如下值：</p>
<ul>
<li>none：没有边框,即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线</li>
<li>dotted：边框为点线</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*边框简写 没有顺序*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 只设定上边框， 其余三边的边框同理 */</span></span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red; </span><br></pre></td></tr></table></figure>

<ul>
<li><p>边框会影响盒子实际大小:</p>
</li>
<li><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决:</p>
<ul>
<li>01 测量盒子大小的时候,不量边框.</li>
<li>02 如果测量的时候包含了边框,则需要 width &#x2F; height 减去边框宽度</li>
</ul>
</li>
<li><p>案例:请给一个 200 * 200 的盒子，设置上边框为红色，其余边框为蓝色（提示：一定注意边框的层叠性）</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   <span class="selector-tag">div</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">border</span>:<span class="number">2px</span> solid blue; <span class="comment">/* 所有边框设置为 blue */</span></span><br><span class="line">       <span class="attribute">border-top</span>: <span class="number">2px</span> solid red; <span class="comment">/* 上边框设置为 red  层叠性*/</span></span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="同时设置四条边"><a href="#同时设置四条边" class="headerlink" title="同时设置四条边"></a>同时设置四条边</h4><ul>
<li><p><strong>border</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p>注意点:</p>
<ul>
<li>连写格式中颜色属性可以省略, 省略之后默认就是黑色</li>
<li>连写格式中样式不能省略, 省略之后就看不到边框了</li>
<li>连写格式中大小可以省略, 省略之后还是可以看到边框,不写边框大小,谷歌浏览器默认为 3px</li>
</ul>
</li>
<li><p>示例代码:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: red;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">5px</span> solid blue;</span><br><span class="line">       <span class="comment">/*border: 5px solid;*/</span></span><br><span class="line">       <span class="comment">/*border: 5px blue;*/</span></span><br><span class="line">       <span class="comment">/*border: solid blue;*/</span></span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="分别设置四条边"><a href="#分别设置四条边" class="headerlink" title="分别设置四条边"></a>分别设置四条边</h4><ul>
<li><p><strong>border-top</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p><strong>border-right</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p><strong>border-bottom</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p><strong>border-left</strong>: 边框的宽度 边框的样式 边框的颜色;</p>
</li>
<li><p>示例代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top</span>:<span class="number">5px</span> solid blue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right</span>:<span class="number">10px</span> dashed green;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>:<span class="number">15px</span> dotted purple;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left</span>:<span class="number">20px</span> double pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="按要素连写"><a href="#按要素连写" class="headerlink" title="按要素连写"></a>按要素连写</h4><ul>
<li><p><strong>border-width</strong>: 上 右 下 左;</p>
</li>
<li><p><strong>border-style</strong>: 上 右 下 左;</p>
</li>
<li><p><strong>border-color</strong>: 上 右 下 左;</p>
</li>
<li><p>注意点:</p>
<ul>
<li><p>这三个属性的取值是按照顺时针来赋值, 也就是按照 上右下左 来赋值, 而不是按照日常生活中的 上下左右</p>
</li>
<li><p>这三个属性的取值省略时的规律</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 下 &gt; 左边的取值和右边的一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 &gt; 左边的取值和右边的一样 下边的取值和上边一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 &gt; 右下左边取值和上边一样</p>
</li>
</ul>
</li>
<li><p>示例代码:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border-width</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border-style</span>: solid dashed dotted double;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border-color</span>: blue green purple pink;</span></span><br><span class="line"><span class="language-css">       <span class="comment">/*border-color: blue green purple;*/</span> <span class="comment">/* 上 左右 下*/</span></span></span><br><span class="line"><span class="language-css">       <span class="comment">/*border-color: blue green;*/</span> <span class="comment">/* 上下 左右 */</span></span></span><br><span class="line"><span class="language-css">       <span class="comment">/*border-color: blue;*/</span> <span class="comment">/* 四边颜色相同 */</span></span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="按方向和要素连写"><a href="#按方向和要素连写" class="headerlink" title="按方向和要素连写"></a>按方向和要素连写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 上边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top-style</span>: solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top-color</span>: blue;</span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 右边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right-style</span>: dashed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-right-color</span>: green;</span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 下边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-width</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-style</span>: dotted;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-color</span>: purple;</span></span><br><span class="line"><span class="language-css">		 <span class="comment">/* 左边框样式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-style</span>: double;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-color</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>同一个选择器中如果设置了多个边框属性, 后面的会覆盖前面的(层叠性)</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">5px</span> solid red;</span><br><span class="line">   <span class="attribute">border-right</span>:<span class="number">5px</span> dashed red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="外轮廓"><a href="#外轮廓" class="headerlink" title="外轮廓"></a>外轮廓</h3><ul>
<li>outline表示元素的外轮廓<ul>
<li>不占用空间</li>
<li>默认显示在border的外面</li>
</ul>
</li>
<li>outline相关属性有<ul>
<li>outline-width: 外轮廓的宽度</li>
<li>outline-style：取值跟border的样式一样，比如solid、dotted等</li>
<li>outline-color: 外轮廓的颜色</li>
<li>outline：outline-width、outline-style、outline-color的简写属性，跟border用法类似</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><ul>
<li><strong>padding 属性用于设置内边距，即边框与内容之间的距离。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4266238d1a774ca6b5d429bc65b6c7af" alt="image-20220126131952807"></p>
<ul>
<li>padding 属性（简写属性）可以有一到四个值。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/59aaaf9f315045589638d36f7bd85c85" alt="image-20220126132022561"></p>
<ul>
<li><p>以上 4 种情况，我们实际开发都会遇到。</p>
</li>
<li><p>当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>
<ul>
<li><strong>01 内容和边框有了距离，添加了内边距。</strong></li>
<li><strong>02 padding 影响了盒子实际大小。</strong></li>
</ul>
</li>
<li><p>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</p>
</li>
<li><p><strong>×××</strong> 如果盒子本身没有指定 width &#x2F; height 属性, 则此时 padding 不会撑开盒子大小.( <strong>×××</strong>, 测试时即使不给盒子宽高,只设置 padding 也会撑大盒子)</p>
</li>
<li><p>解决方案: 如果要保证盒子跟效果图大小保持一致，则让 width &#x2F; height 减去多出来的内边距大小即可。</p>
</li>
<li><p>内边距案例：新浪导航案例 padding 影响盒子好处,<strong>用左右内边距撑开盒子,以加大盒子之间的水平间距</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ef13a7d4f7fc4342b0dd1dbe3d0c9f01"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">480px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">5px</span> solid orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>设为首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机新浪网<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>移动客户端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>关注我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><ul>
<li><ol>
<li><strong>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</strong></li>
</ol>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ed6ef042e9c54a5bbdfb573c240e029f" alt="image-20220126133404521"></p>
<ul>
<li>margin 简写方式代表的意义跟 padding 完全一致。</li>
<li><strong>margin: 0 auto;</strong> 可以让块级元素水平居中</li>
<li><ol start="2">
<li>单独设置四条边,<strong>可选值: 百分比 | 像素值 | auto</strong></li>
</ol>
<ul>
<li>示例代码:</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-left</span>:<span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>同时设置四条边</li>
</ol>
<ul>
<li><p><strong>margin: 上 右 下 左;</strong></p>
</li>
<li><p>注意点:</p>
<ul>
<li><p>这三个属性的取值省略时的规律</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 下 &gt; 左边的取值和右边的一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 右 &gt; 左边的取值和右边的一样 下边的取值和上边一样</p>
</li>
<li><p>上 右 下 左 &gt; 上 &gt; 右下左边取值和上边一样</p>
</li>
<li><p>外边距的那一部分是没有背景颜色的</p>
</li>
</ul>
</li>
<li><p>示例代码:</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">40px</span> <span class="number">80px</span> <span class="number">160px</span>; <span class="comment">/* 上 右 下 左 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*margin:20px 40px 80px;*/</span> <span class="comment">/* 上 左右 下*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*margin:20px 40px;*/</span> <span class="comment">/* 上下 左右*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*margin:20px;*/</span> <span class="comment">/* 四边 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="两个居中属性的区别"><a href="#两个居中属性的区别" class="headerlink" title="两个居中属性的区别"></a>两个居中属性的区别</h3><ul>
<li><code>text-align:center;</code>和<code>margin:0 auto;</code>区别<ul>
<li><strong>text-align: center;</strong> 是设置盒子中存储的文字 &#x2F; 图片水平居中</li>
<li><strong>margin:0 auto;</strong> 是让盒子自己水平居中</li>
</ul>
</li>
<li>示例代码:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>53-盒子居中和内容居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*文字图片会居中*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*text-align: center;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*盒子自身会居中*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    我是文字<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/girl.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外边距典型应用"><a href="#外边距典型应用" class="headerlink" title="外边距典型应用"></a>外边距典型应用</h3><ul>
<li><p>外边距可以让块级盒子水平居中，但是必须满足两个条件：</p>
<ul>
<li><p>盒子必须指定了宽度（width）。</p>
</li>
<li><p>盒子左右的外边距都设置为 auto 。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>常见的写法，以下三种都可以：</p>
<ul>
<li><p><strong>margin-left: auto; margin-right: auto;</strong></p>
</li>
<li><p><strong>margin: auto;</strong></p>
</li>
<li><p><strong>margin: 0 auto;</strong></p>
</li>
</ul>
</li>
<li><p>注意：<strong>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</strong></p>
</li>
</ul>
<h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><ul>
<li><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
</li>
<li><p>主要有两种情况:</p>
<ul>
<li><strong>01 相邻块元素垂直外边距的合并</strong><ul>
<li>margin-top传递</li>
<li>如果块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</li>
<li>margin-bottom传递<ul>
<li>如果块级元素的底部线和父元素的底部线重写，并且父元素的高度是auto，那么这个块级元素的margin-bottom值会传递给父元素</li>
</ul>
</li>
</ul>
</li>
<li><strong>02 嵌套块元素垂直外边距的塌陷</strong></li>
</ul>
</li>
<li><p>01 相邻块元素垂直外边距的合并</p>
<ul>
<li>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。而是取两个值中的较大者,这种现象被称为相邻块元素垂直外边距的合并。也可以叫做上下外边距折叠,水平外边距不会折叠</li>
<li>解决方案：尽量只给一个盒子添加 margin 值。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/14eacbd8ffff4bf281b44f605d795355" alt="image-20220126134101197"></p>
<ul>
<li><p>02 嵌套块元素垂直外边距的塌陷</p>
<p>-<br>  对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e678717d3cdf487ba9d1ac1f1a4b2b75" alt="image-20220126134320927"></p>
<ul>
<li>解决方案：<ul>
<li>01 可以为父元素定义上边框。</li>
<li>02 可以为父元素定义上内边距。</li>
<li>03 <strong>可以为父元素添加 overflow:hidden</strong>。</li>
</ul>
</li>
<li>还有其他方法，比如浮动、固定，绝对定位的盒子不会有塌陷问题，后面咱们再总结。</li>
<li>建议<ul>
<li>margin一般是用来设置兄弟元素之间的间距</li>
<li>padding一般是用来设置父子元素之间的间距</li>
</ul>
</li>
</ul>
<h3 id="清除默认内外边距"><a href="#清除默认内外边距" class="headerlink" title="清除默认内外边距"></a>清除默认内外边距</h3><ul>
<li>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>; <span class="comment">/* 清除内边距 */</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>; <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</li>
</ul>
<h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/831a7a6beec2467298e30f2f761fc2fd" alt="image-20220126134833459"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">30px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">63</span>, <span class="number">62</span>, <span class="number">62</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.appraise</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.info</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/26.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>快递牛,整体不错蓝牙可以说秒连,红米给力<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;appraise&quot;</span>&gt;</span>来自于 117384232 的评价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>Redmi AirDots真无线蓝... | <span class="tag">&lt;<span class="name">span</span>&gt;</span>99.9元<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>案例总结:</p>
<ul>
<li><p>01 布局为啥用不同盒子,我只想用 div ？</p>
<ul>
<li>标签都是有语义的, 合理的地方用合理的标签。比如产品标题 就用 h , 大量文字段落就用 p</li>
</ul>
</li>
<li><p>02 为啥用辣么多类名？</p>
<ul>
<li>类名就是给每个盒子起了一个名字,可以更好的找到这个盒子, 选取盒子更容易,后期维护也方便。</li>
</ul>
</li>
<li><p>03 到底用 margin 还是 padding？</p>
<ul>
<li>大部分情况两个可以混用，两者各有优缺点，但是根据实际情况，总是有更简单的方法实现。</li>
</ul>
</li>
</ul>
</li>
<li><p>案例2:快报模块</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e056f2cc58a74d9396b26778793ce72a" alt="image-20220126140430358"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">275px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">170px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">49</span>, <span class="number">49</span>, <span class="number">49</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>品优购快报<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】爆款耳机5折秒!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】母亲节,健康好礼低至5折!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】爆款耳机5折秒!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】9.9元洗100张照片!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>【特惠】长虹智能空调立省1000<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h2><h3 id="传统网页布局的三种方式"><a href="#传统网页布局的三种方式" class="headerlink" title="传统网页布局的三种方式"></a>传统网页布局的三种方式</h3><ul>
<li><p>网页布局的本质——用 CSS 来摆放盒子。 把盒子摆放到相应位置.</p>
</li>
<li><p>CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>
<ul>
<li><strong>普通流（标准流）</strong></li>
<li><strong>浮动</strong></li>
<li><strong>定位</strong></li>
</ul>
</li>
<li><p>什么是网页的布局方式?</p>
<ul>
<li><strong>网页的布局方式其实就是指浏览器是如何对网页中的元素进行排版的</strong></li>
</ul>
</li>
<li><p>标准流(文档流&#x2F;普通流)排版方式</p>
<ul>
<li>其实浏览器默认的排版方式就是标准流的排版方式</li>
<li>在 CSS 中将元素分为三类, 分别是块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素</li>
<li>在标准流中有两种排版方式, 一种是垂直排版, 一种是水平排版 <ul>
<li>垂直排版, 如果元素是块级元素, 那么就会垂直排版</li>
<li>水平排版, 如果元素是行内元素 &#x2F; 行内块级元素, 那么就会水平排版</li>
</ul>
</li>
</ul>
</li>
<li><p>浮动流排版方式</p>
<ul>
<li>浮动流是一种 “半脱离标准流” 的排版方式</li>
<li>浮动流只有一种排版方式, 就是水平排版. 它只能设置某个元素左对齐或者右对齐</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li>浮动流中没有居中对齐, 也就是没有 center 这个取值</li>
<li>在浮动流中是<strong>不可以使用 margin: 0 auto;</strong></li>
</ul>
</li>
<li><p>特点:</p>
<ul>
<li>在浮动流中是不区分块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素的</li>
<li>无论是块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素都可以水平排版</li>
<li>在浮动流中无论是块级元素 &#x2F; 行内元素 &#x2F; 行内块级元素都可以设置宽高</li>
<li>综上所述, 浮动流中的元素和标准流中的行内块级元素很像</li>
</ul>
</li>
</ul>
<h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><ul>
<li><p>所谓的标准流: 就是标签按照规定好默认方式排列.</p>
<ul>
<li><strong>块级元素会独占一行，从上向下顺序排列。</strong></li>
</ul>
</li>
<li><p>常用元素：<strong>div、hr、p、h1~h6、ul、ol、dl、form、table</strong></p>
</li>
<li><p><strong>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</strong></p>
<ul>
<li>常用元素：<strong>span、a、i、em</strong> 等</li>
</ul>
</li>
<li><p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>
</li>
<li><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>
</li>
<li><p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>
</li>
</ul>
<h3 id="为什么需要浮动"><a href="#为什么需要浮动" class="headerlink" title="为什么需要浮动"></a>为什么需要浮动</h3><ul>
<li>01 如何让多个块级盒子( div )水平排列成一行？<ul>
<li>比较难，虽然转换为行内块元素可以实现一行显示，但是他们之间会有大的空白缝隙，很难控制。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/d54b0347a9d843bcadcc870a9c9e418a" alt="image-20220126145914499"></p>
<ul>
<li>02  如何实现两个盒子的左右对齐？</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/43b568280aae4ff8a955eb2f62f95875" alt="image-20220126150037468"></p>
<ul>
<li><p>总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>
</li>
<li><p>浮动最典型的应用：<strong>可以让多个块级元素一行内排列显示</strong>。</p>
</li>
<li><p>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</strong></p>
</li>
</ul>
<h3 id="什么是浮动"><a href="#什么是浮动" class="headerlink" title="什么是浮动"></a>什么是浮动</h3><ul>
<li><strong>float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</strong><ul>
<li>定位元素会层叠在浮动元素上面</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/9e83137d235845a8ab56ccf08664f880" alt="image-20220126150224595"></p>
<h3 id="浮动的特性"><a href="#浮动的特性" class="headerlink" title="浮动的特性"></a>浮动的特性</h3><ul>
<li><p>01 加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>
<ul>
<li>01 <strong>浮动元素会脱离标准流(脱标)</strong></li>
<li>02 浮动的元素会一行内显示并且元素顶部对齐</li>
<li>03 浮动的元素会具有行内块元素的特性.</li>
<li>04 脱离标准普通流的控制（浮） 移动到指定位置（动）, （俗称脱标）</li>
<li>05 浮动的盒子不再保留原先的位置</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/131f70f0a0c04a24ad3f6c1dbc967f63" alt="image-20220126150522641"></p>
<ul>
<li>02 <strong>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。</strong><ul>
<li>注意： 浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/659ac15cba78499b9164440defc22339" alt="image-20220126150621896"></p>
<ul>
<li><p>03 浮动元素会具有行内块元素特性</p>
<ul>
<li><p>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。</p>
</li>
<li><p>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</p>
</li>
<li><p>浮动的盒子中间是没有缝隙的，是紧挨着一起的</p>
</li>
<li><p>行内元素同理</p>
</li>
</ul>
</li>
</ul>
<h3 id="浮动元素的使用"><a href="#浮动元素的使用" class="headerlink" title="浮动元素的使用"></a>浮动元素的使用</h3><ul>
<li><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>
<ul>
<li><strong>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置. 符合网页布局第一准侧.</strong></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/02d87d0801144dbf98656d01fd24a720" alt="image-20220126150935210"></p>
<h3 id="浮动案例-小米布局案例"><a href="#浮动案例-小米布局案例" class="headerlink" title="浮动案例:小米布局案例"></a>浮动案例:小米布局案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/488a247427fc4f9faf1aef82c95e155d" alt="image-20220126151038377"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="浮动案例-小米布局案例-1"><a href="#浮动案例-小米布局案例-1" class="headerlink" title="浮动案例:小米布局案例"></a>浮动案例:小米布局案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/e74d66e5e6e44841959a28f8ea1dbbd6" alt="image-20220126151151248"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="浮动案例-小米布局案例-2"><a href="#浮动案例-小米布局案例-2" class="headerlink" title="浮动案例:小米布局案例"></a>浮动案例:小米布局案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/ea5cffafc4af4a80bc7db267277b6de6" alt="image-20220126151321935"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="浮动元素字围现象"><a href="#浮动元素字围现象" class="headerlink" title="浮动元素字围现象"></a>浮动元素字围现象</h3><ul>
<li>什么是浮动元素字围现象?<ul>
<li>浮动元素不会挡住没有浮动元素中的文字, 没有浮动的文字会自动给浮动的元素让位置,这个就是浮动元素字围现象</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/*background-color: red;*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p><img src="/images/clearfix.png"></p>
<h3 id="为什么需要清除浮动"><a href="#为什么需要清除浮动" class="headerlink" title="为什么需要清除浮动"></a>为什么需要清除浮动</h3><ul>
<li><strong>父级元素高度坍塌: 由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/2e93c6f03ec341bc89467dff18ebedbc" alt="image-20220126152009774"></p>
<ul>
<li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li>
</ul>
<h3 id="清除浮动的本质"><a href="#清除浮动的本质" class="headerlink" title="清除浮动的本质"></a>清除浮动的本质</h3><ul>
<li><p><strong>清除浮动的本质是清除浮动元素造成的影响</strong></p>
</li>
<li><p>如果父盒子本身有高度，则不需要清除浮动</p>
</li>
<li><p><strong>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></p>
</li>
</ul>
<h3 id="清除浮动-1"><a href="#清除浮动-1" class="headerlink" title="清除浮动"></a>清除浮动</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/8fd7c535e3d64a0da468ce7ff66d3672" alt="image-20220126152402006"></p>
<ul>
<li><p>我们实际工作中， 几乎只用 <strong>clear: both;</strong></p>
</li>
<li><p>清除浮动的策略是: 闭合浮动.</p>
</li>
</ul>
<h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><h4 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h4><ul>
<li><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>
</li>
<li><p><strong>额外标签法会在浮动元素末尾添加一个空的标签。</strong>例如<code> &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签（如 br 等）。</p>
</li>
<li><p>优点： 通俗易懂，书写方便</p>
<ul>
<li>缺点： 添加许多无意义的标签，结构化较差</li>
</ul>
</li>
<li><p>注意： <strong>要求这个新的空标签必须是块级元素。</strong></p>
</li>
<li><p>额外标签法总结:</p>
<ul>
<li><p>01 清除浮动本质是?</p>
<ul>
<li><strong>清除浮动的本质是清除浮动元素脱离标准流造成的影响</strong></li>
</ul>
</li>
<li><p>02 清除浮动策略是?</p>
<ul>
<li><strong>闭合浮动. 只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</strong></li>
</ul>
</li>
<li><p>03 额外标签法?</p>
<ul>
<li><strong>隔墙法, 就是在最后一个浮动的子元素后面添加一个额外标签, 添加 清除浮动样式.</strong></li>
<li>实际工作可能会遇到,但是不常用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="父级添加-overflow-属性"><a href="#父级添加-overflow-属性" class="headerlink" title="父级添加 overflow 属性"></a>父级添加 overflow 属性</h4><ul>
<li><p><strong>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</strong></p>
</li>
<li><p>注意是给父元素添加代码</p>
<ul>
<li>优点：代码简洁</li>
<li>缺点：无法显示溢出的部分</li>
</ul>
</li>
</ul>
<h4 id="父级添加-after-伪元素"><a href="#父级添加-after-伪元素" class="headerlink" title="父级添加 after 伪元素"></a>父级添加 after 伪元素</h4><ul>
<li><p><strong>:after 方式是额外标签法的升级版。也是给父元素添加</strong></p>
</li>
<li><p>优点：没有增加标签，结构更简单</p>
<ul>
<li><p>缺点：照顾低版本浏览器</p>
</li>
<li><p>代表网站： 百度、淘宝网、网易等</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; <span class="comment">/* IE6、7 专有 */</span></span><br><span class="line">	*zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="父级添加双伪元素"><a href="#父级添加双伪元素" class="headerlink" title="父级添加双伪元素"></a>父级添加双伪元素</h4><ul>
<li><p>优点：代码更简洁</p>
</li>
<li><p>缺点：照顾低版本浏览器</p>
</li>
<li><p>代表网站：小米、腾讯等</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="清除浮动总结"><a href="#清除浮动总结" class="headerlink" title="清除浮动总结"></a>清除浮动总结</h3><ul>
<li>父级没高度。子盒子浮动了。影响下面布局了，我们就应该清除浮动了。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/8365a098f412495bbfc7d8551e8ac8c0" alt="image-20220126153501334"></p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="为什么需要浮动-1"><a href="#为什么需要浮动-1" class="headerlink" title="为什么需要浮动"></a>为什么需要浮动</h3><ul>
<li><p>01 浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。</p>
</li>
<li><p>02 定位则是可以让盒子自由的在某个盒子内移动位置或者固定在屏幕中某个位置，并且可以压住其他盒子。</p>
</li>
</ul>
<h3 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h3><ul>
<li><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p>
</li>
<li><p>定位 &#x3D; 定位模式 + 边偏移 。</p>
</li>
<li><p><strong>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</strong></p>
</li>
<li><ol>
<li>定位模式:</li>
</ol>
<ul>
<li>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/548c0e98a20d4657bbeeaa08ff5596c3" alt="image-20220126163755591"></p>
<ul>
<li><ol start="2">
<li>边偏移:</li>
</ol>
<ul>
<li>边偏移就是定位的盒子移动到最终位置。有 top、bottom、left 和 right 4 个属性。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ff12fb1434494dee9cc24b75e4005887" alt="image-20220126163836275"></p>
<h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><ul>
<li>静态定位是元素的默认定位方式，无定位的意思。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">position</span>:static;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>静态定位按照标准流特性摆放位置，它没有边偏移</p>
</li>
<li><p>静态定位在布局时很少用到</p>
</li>
</ul>
<h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><ul>
<li>相对定位是元素在移动位置的时候，是相对于它原来的位置来说的（自恋型）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: relative; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>相对定位的特点：（务必记住）</p>
<ul>
<li>01 它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</li>
<li>02 原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。</li>
</ul>
</li>
<li><p>因此，<strong>相对定位并没有脱标。</strong></p>
</li>
</ul>
<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><ul>
<li>绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的（拼爹型）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: absolute; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>绝对定位的特点：（务必记住）</p>
<ul>
<li>01 如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document 文档）。</li>
<li>02 如果祖先元素有定位（相对、绝对、固定定位），则以最近一级有定位的祖先元素为参考点移动位置。</li>
<li>03 绝对定位不再占有原先的位置。（脱标）</li>
</ul>
</li>
<li><p>所以<strong>绝对定位是脱离标准流的。</strong></p>
</li>
</ul>
<h3 id="子绝父相的由来"><a href="#子绝父相的由来" class="headerlink" title="子绝父相的由来"></a>子绝父相的由来</h3><ul>
<li><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>
</li>
<li><p>这个“子绝父相”太重要了，是我们学习定位的口诀，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>
<ul>
<li><p>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>
</li>
<li><p>父盒子需要加定位限制子盒子在父盒子内显示。</p>
</li>
<li><p>父盒子布局时，需要占有位置，因此父盒子只能是相对定位。</p>
</li>
</ul>
</li>
<li><p>这就是子绝父相的由来，所以相对定位经常用来作为绝对定位的父级。</p>
</li>
<li><p>总结： 因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</p>
</li>
<li><p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，子绝父绝也会遇到。</p>
</li>
</ul>
<h3 id="定位案例"><a href="#定位案例" class="headerlink" title="定位案例"></a>定位案例</h3><p><img src="https://s1.vika.cn/space/2023/02/19/1c185dd6c53c414097770c880700d5a1" alt="image-20220126170905241"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 fixed"></a>固定定位 fixed</h3><ul>
<li><strong>固定定位是元素固定于浏览器可视区的位置。</strong>主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: fixed; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>固定定位的特点：（务必记住）</p>
</li>
<li><p>01 以浏览器的可视窗口为参照点移动元素。</p>
<ul>
<li><strong>跟父元素没有任何关系</strong></li>
<li><strong>不随滚动条滚动。</strong></li>
</ul>
</li>
<li><p>02 固定定位不在占有原先的位置。</p>
<ul>
<li><strong>固定定位也是脱标的</strong>，其实固定定位也可以看做是一种特殊的绝对定位。</li>
</ul>
</li>
</ul>
<h3 id="定位案例-1"><a href="#定位案例-1" class="headerlink" title="定位案例"></a>定位案例</h3><ul>
<li>两侧固定广告:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4856172cbbe443b983157318221646bc" alt="image-20220126171053091"></p>
<ul>
<li><p>小算法：</p>
<ul>
<li>01 让固定定位的盒子 left: 50%. 走到浏览器可视区（也可以看做版心） 的一半位置。</li>
<li>02 让固定定位的盒子 margin-left: 版心宽度的一半距离。 多走 版心宽度的一半位置</li>
</ul>
</li>
<li><p>就可以让固定定位的盒子贴着版心右侧对齐了。</p>
</li>
</ul>
<h3 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h3><ul>
<li><strong>粘性定位可以被认为是相对定位和固定定位的混合。</strong> Sticky 粘性的</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">position</span>: sticky; <span class="attribute">top</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>粘性定位的特点：</p>
<ul>
<li>01 以浏览器的可视窗口为参照点移动元素（固定定位特点）</li>
<li>02 粘性定位占有原先的位置（相对定位特点）</li>
<li>03 必须添加 top 、left、right、bottom 其中一个才有效</li>
</ul>
</li>
<li><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>
</li>
</ul>
<h3 id="定位总结"><a href="#定位总结" class="headerlink" title="定位总结"></a>定位总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/6c1a6ed83dde48709f55e3880405480a" alt="image-20220126172831497"></p>
<ul>
<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点：01 是否占有位置（脱标否） 02 以谁为基准点移动位置。</p>
</li>
<li><p>学习定位重点学会子绝父相。</p>
</li>
</ul>
<h3 id="定位扩展"><a href="#定位扩展" class="headerlink" title="定位扩展"></a>定位扩展</h3><ul>
<li><p>01 绝对定位的盒子居中</p>
<ul>
<li>加了绝对定位的盒子不能通过 margin:0 auto 水平居中，但是可以通过以下计算方法实现水平和垂直居中。<ul>
<li>01 left: 50%; 让盒子的左侧移动到父级元素的水平中心位置。</li>
<li>02 margin-left: -100px; 让盒子向左移动自身宽度的一半。</li>
</ul>
</li>
</ul>
</li>
<li><p>02 定位特殊特性</p>
<ul>
<li>绝对定位和固定定位也和浮动类似。<ul>
<li>01 行内元素添加绝对或者固定定位，可以直接设置高度和宽度。添加相对定位,设置高度和宽度无效</li>
<li>02 块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</li>
</ul>
</li>
</ul>
</li>
<li><p>03 脱标的盒子不会触发外边距塌陷</p>
<ul>
<li>浮动元素、绝对定位(固定定位）元素的都不会触发外边距合并的问题。</li>
</ul>
</li>
<li><p>04 绝对定位（固定定位）会完全压住盒子</p>
<ul>
<li>浮动元素只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</li>
<li>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</li>
<li>浮动之所以不会压住文字，因为<strong>浮动产生的目的最初是为了做文字环绕效果的。</strong> 文字会围绕浮动元素</li>
</ul>
</li>
</ul>
<h3 id="定位案例-2"><a href="#定位案例-2" class="headerlink" title="定位案例"></a>定位案例</h3><ul>
<li>淘宝焦点图布局</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/91842588664346bd89efdb23710ee538"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h3><ul>
<li>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序 (z轴)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">z-index</span>: <span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>数值可以是正整数、负整数或 0, 默认是 auto，数值越大，盒子越靠上</p>
</li>
<li><p>如果属性值相同，则按照书写顺序，后来居上</p>
</li>
<li><p>数字后面不能加单位</p>
</li>
<li><p><strong>只有定位的盒子才有 z-index 属性</strong></p>
</li>
</ul>
<h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul>
<li>什么是继承性?<ul>
<li><strong>作用: 给父元素设置一些属性, 子元素也可以使用, 这个我们就称之为继承性</strong></li>
</ul>
</li>
<li>CSS的某些属性具有继承性(Inherited):<ul>
<li>如果一个属性具备继承性, 那么在该元素上设置后, 它的后代元素都可以继承这个属性;</li>
<li>当然, 如果后代元素自己有设置该属性, 那么优先使用后代元素自己的属性(不管继承过来的属性权重多高);</li>
</ul>
</li>
<li>如何知道一个属性是否具有继承性呢?<ul>
<li>常见的font-size&#x2F;font-family&#x2F;font-weight&#x2F;line-height&#x2F;color&#x2F;text-align都具有继承性;</li>
</ul>
</li>
<li>示例代码:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--p会变成红色--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意点:</p>
<ul>
<li>并不是所有的属性都可以继承, 只有以 color &#x2F; font- &#x2F; text- &#x2F; line- 开头的属性才可以继承</li>
<li>在 CSS 的继承中不仅仅是儿子可以继承, 只要是后代都可以继承</li>
</ul>
</li>
<li><p>继承性中的特殊性</p>
<ul>
<li>a 标签的文字颜色和下划线是不能继承的</li>
<li>h 标签的文字大小是不能继承的, h 标签的字号大小默认相对于父元素的字体大小, em 为单位,各级标题大小不同</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--a 的颜色和下划线不继承, H 的字体大小不继承  --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景:<ul>
<li>一般用于统一设置网页上的一些共性信息, 例如网页的文字颜色, 字体,文字大小等内容</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ul>
<li>CSS 全称 Cascading StyleSheet (层叠式样式表), 其中的层叠就是指层叠性</li>
<li>什么是层叠性?<ul>
<li><strong>作用: 层叠性就是CSS处理冲突的一种能力</strong></li>
<li>对于一个元素来说, 相同一个属性我们可以通过不同的选择器给它进行多次设置;</li>
<li>那么属性会被一层层覆盖上去;</li>
<li>但是最终只有一个会生效;</li>
</ul>
</li>
<li>那么多个样式属性覆盖上去, 哪一个会生效呢?<ul>
<li>判断一: 选择器的权重, 权重大的生效, 根据权重可以判断出优先级;</li>
<li>判断二: 先后顺序, 权重相同时, 后面设置的生效;</li>
</ul>
</li>
<li>示例代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  	<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">  	    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  	&#125;</span></span><br><span class="line"><span class="language-css">  	<span class="selector-class">.para</span>&#123;</span></span><br><span class="line"><span class="language-css">  	    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最终显示蓝色, 因为红色被覆盖掉了 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>层叠性只有在多个选择器选中”同一个标签”, 然后又设置了”相同的属性”, 才会发生层叠性</li>
</ul>
</li>
</ul>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul>
<li>什么是优先级?<ul>
<li><strong>作用:当多个选择器选中同一个标签, 并且给同一个标签设置相同的属性时, 如何层叠就由优先级来确定</strong></li>
</ul>
</li>
<li>优先级判断的三种方式:</li>
<li><ol>
<li>间接选中就是指继承</li>
</ol>
<ul>
<li>如果是间接选中, 那么就是谁离目标标签比较近就听谁的</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> 	<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示蓝色 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>相同选择器(直接选中)</li>
</ol>
<ul>
<li>如果都是直接选中, 并且都是同类型的选择器, 那么就是谁写在后面就听谁的</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示红色 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>不同选择器(直接选中)</li>
</ol>
<ul>
<li>如果都是直接选中, 并且不是相同类型的选择器, 那么就会按照选择器的优先级来层叠</li>
<li>id &gt; 类 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认</li>
<li>注意点:<ul>
<li>通配符选择器也是直接选中</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-id">#identity</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.para</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   *&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示紫色 id 选择器的优先级较高--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="优先级权重"><a href="#优先级权重" class="headerlink" title="优先级权重"></a>优先级权重</h3><ul>
<li>什么是优先级的权重?<ul>
<li><strong>作用: 当多个选择器混合在一起使用时, 我们可以通过计算权重来判断谁的优先级最高</strong></li>
</ul>
</li>
<li>权重的计算规则<ul>
<li>首先先计算选择器中有多少个 id , id 多的选择器优先级最高</li>
<li>如果 id 的个数一样, 那么再看类名的个数, 类名个数多的优先级最高</li>
<li>如果类名的个数一样, 那么再看标签名称的个数, 标签名称个数多的优先级最高</li>
<li>如果 id 个数一样, 类名个数也一样, 标签名称个数也一样, 那么就不会继续往下计算了, 那么此时谁写在后面听谁的</li>
</ul>
</li>
<li>注意点:<ul>
<li><strong>只有选择器是直接选中标签的才需要计算权重, 否则一定会听直接选中的选择器的</strong></li>
</ul>
</li>
<li>示例代码:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-id">#identity1</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.box1</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id多最终显示红色 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id一样, 比类多, 最终显示蓝色 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#identity1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#identity1</span> <span class="selector-tag">ul</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id一样, 类一样, 比标签多最终显示红色 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> <span class="selector-tag">li</span> <span class="selector-id">#identity2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css">   <span class="selector-id">#identity1</span> <span class="selector-tag">ul</span> <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;identity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id一样, 类一样, 标签一样, 最终显示红色 谁写在后面听谁的--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h3><ul>
<li>什么是!important</li>
<li><strong>作用: 用于提升某个直接选中标签的选择器中的某个属性的优先级的, 可以将被指定的属性的优先级提升为最高</strong></li>
<li>示例代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#identity</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.para</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: pink ;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;identity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终显示绿色 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>!important 只能用于直接选中, 不能用于间接选中</li>
<li>通配符选择器选中的标签也是直接选中的</li>
<li>!important 只能提升被指定的属性的优先级, 其它的属性的优先级不会被提升</li>
<li>!important 必须写在属性值得分号前面</li>
<li>!important 前面的感叹号不能省略</li>
</ul>
</li>
</ul>
<h2 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h2><h3 id="常见布局-1"><a href="#常见布局-1" class="headerlink" title="常见布局"></a>常见布局</h3><p><img src="https://s1.vika.cn/space/2023/02/19/05e10192ccee43e596022ac6cd601763" alt="image-20220126151437660"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/ad017362b26c4546bdacbe9b8f8f4783" alt="image-20220126151549463"></p>
<h3 id="布局注意点"><a href="#布局注意点" class="headerlink" title="布局注意点"></a>布局注意点</h3><ul>
<li><p>01 浮动和标准流的父盒子搭配。</p>
<ul>
<li>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</li>
</ul>
</li>
<li><p>02 一个元素浮动了，理论上其余的兄弟元素也要浮动。</p>
<ul>
<li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。</li>
<li>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</li>
</ul>
</li>
</ul>
<h3 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h3><ul>
<li>建议遵循以下顺序：<ul>
<li>01 布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li>02 自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li>
<li>03 文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li>
<li>04 其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background:linear-gradient …</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="网页布局总结"><a href="#网页布局总结" class="headerlink" title="网页布局总结"></a>网页布局总结</h3><ul>
<li><p>通过盒子模型，清楚知道大部分 html 标签是一个盒子。</p>
</li>
<li><p>01 标准流</p>
<ul>
<li>可以让盒子上下排列或者左右排列，垂直的块级盒子显示就用标准流布局。</li>
</ul>
</li>
<li><p>02 浮动</p>
<ul>
<li>可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局。</li>
</ul>
</li>
<li><p>03 定位</p>
<ul>
<li><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局。</p>
</li>
<li><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p>
</li>
<li><p>通过 CSS 浮动、定位 可以让每个盒子排列成为网页。</p>
</li>
</ul>
</li>
</ul>
<h2 id="学成在线案例"><a href="#学成在线案例" class="headerlink" title="学成在线案例"></a>学成在线案例</h2><h3 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h3><ul>
<li><p>我们本次采取结构与样式相分离思想：</p>
<ul>
<li>01 创建 study 目录文件夹 (用于存放我们这个页面的相关内容)。</li>
<li>02 study 目录内新建 images 文件夹，用于保存图片。</li>
<li>03 新建首页文件 index.html（以后我们的网站首页统一规定为 index.html )。</li>
<li>04 新建 style.css 样式文件。我们本次采用外链样式表。</li>
<li>05 将样式引入到我们的 HTML 页面文件中。</li>
<li>06 样式表写入清除内外边距的样式，来检测样式表是否引入成功。</li>
</ul>
</li>
</ul>
<h3 id="页面布局分析"><a href="#页面布局分析" class="headerlink" title="页面布局分析"></a>页面布局分析</h3><ul>
<li>为了提高网页制作的效率，布局时通常有以下的布局流程：<ul>
<li>01 必须确定页面的版心（可视区），我们测量可得知。</li>
<li>02 分析页面中的行模块，以及每个行模块中的列模块。其实页面布局，就是一行行罗列而成的。</li>
<li>03 制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要。</li>
<li>04 开始运用盒子模型的原理，通过 DIV+CSS 布局来控制网页的各个模块。</li>
</ul>
</li>
</ul>
<h3 id="确定版心"><a href="#确定版心" class="headerlink" title="确定版心"></a>确定版心</h3><ul>
<li>这个页面的版心是 1200 像素，每个版心都要水平居中对齐，可以定义版心为公共类：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="头部制作"><a href="#头部制作" class="headerlink" title="头部制作"></a>头部制作</h3><p><img src="https://s1.vika.cn/space/2023/02/19/d1e8f66496c341f0889bd86197fa23ac" alt="image-20220126154654411"></p>
<ul>
<li><p>1 号是版心盒子 header 1200 * 42 的盒子水平居中对齐，上下给一个 margin 值就可以</p>
</li>
<li><p>版心盒子里面包含 2 号盒子 logo</p>
</li>
<li><p>版心盒子里面包含 3 号盒子 nav 导航栏</p>
</li>
<li><p>版心盒子里面包含 4 号盒子 search 搜索框</p>
</li>
<li><p>版心盒子里面包含 5 号盒子 user 个人信息</p>
</li>
<li><p>注意：要求里面的 4 个盒子必须都是浮动</p>
</li>
</ul>
<h3 id="banner制作"><a href="#banner制作" class="headerlink" title="banner制作"></a>banner制作</h3><p><img src="https://s1.vika.cn/space/2023/02/19/316e04ced27443189f83dfd38a799023" alt="image-20220126154802525"></p>
<ul>
<li><p>1 号盒子是通栏的大盒子 banner，不给宽度，给高度，给一个蓝色背景</p>
</li>
<li><p>2 号盒子是版心，要水平居中对齐</p>
</li>
<li><p>3 号盒子版心内，左对齐 subnav 侧导航栏</p>
</li>
<li><p>4 号盒子版心内，右对齐 course 课程</p>
</li>
</ul>
<h3 id="精品推荐模块"><a href="#精品推荐模块" class="headerlink" title="精品推荐模块"></a>精品推荐模块</h3><p><img src="https://s1.vika.cn/space/2023/02/19/9b51f7953b5b45a09d1776c2ed0bf5e0" alt="image-20220126154856440"></p>
<ul>
<li><p>大盒子水平居中 goods 精品，注意此处有个盒子阴影</p>
</li>
<li><p>1 号盒子是标题 H3 左侧浮动</p>
</li>
<li><p>2 号盒子里面放链接左侧浮动， goods-item 距离可以控制链接的左右外边距（注意行内元素只给左右内外边距）</p>
</li>
<li><p>3 号盒子右浮动 mod 修改</p>
</li>
</ul>
<h3 id="精品推荐大模块"><a href="#精品推荐大模块" class="headerlink" title="精品推荐大模块"></a>精品推荐大模块</h3><p><img src="https://s1.vika.cn/space/2023/02/19/5ef6bce1cf6145fbab6ced8bf1f6640b" alt="image-20220126155005493"></p>
<ul>
<li><p>1 号盒子为最大的盒子， box 版心水平居中对齐</p>
</li>
<li><p>2 号盒子为上面部分，box-hd 里面左侧标题 H3 左浮动，右侧链接 a 右浮动</p>
</li>
<li><p>3 号盒子为底下部分，box-bd 里面是无序列表，有 10 个小 li 组成</p>
</li>
<li><p>小 li 外边距的问题，这里有个小技巧：给 box-hd 宽度为 1215 就可以一行装开 5 个 li</p>
</li>
<li><p>复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。</p>
</li>
</ul>
<h3 id="底部模块"><a href="#底部模块" class="headerlink" title="底部模块"></a>底部模块</h3><p><img src="https://s1.vika.cn/space/2023/02/19/bc709adeb5e64274a138f0cab495c120" alt="image-20220126155140849"></p>
<ul>
<li><p>1 号盒子是通栏大盒子，底部 footer 给高度，底色是白色</p>
</li>
<li><p>2 号盒子版心水平居中</p>
</li>
<li><p>3 号盒子版权 copyright 左对齐</p>
</li>
<li><p>4 号盒子链接组 links 右对齐</p>
</li>
</ul>
<h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h3 id="favicon图标的制作"><a href="#favicon图标的制作" class="headerlink" title="favicon图标的制作"></a>favicon图标的制作</h3><ul>
<li><p>01 把图标切成 .png 图片。</p>
</li>
<li><p>02 把 png 图片转换为 ico 图标，这需要借助于第三方转换网站，例如比特虫: <a href="http://www.bitbug.net/">http://www.bitbug.net/</a></p>
</li>
<li><p>03 在 head 标签中通过 link 标签引入即可</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><h4 id="字体图标使用场景"><a href="#字体图标使用场景" class="headerlink" title="字体图标使用场景"></a>字体图标使用场景</h4><ul>
<li><p>字体图标使用场景： 主要用于显示网页中通用、常用的一些小图标。</p>
</li>
<li><p>精灵图是有诸多优点的，但是缺点很明显。</p>
<ul>
<li><p>01 图片文件还是比较大的。</p>
</li>
<li><p>02 图片本身放大和缩小会失真。</p>
</li>
<li><p>03 一旦图片制作完毕想要更换非常复杂。</p>
</li>
</ul>
</li>
<li><p>此时，有一种技术的出现很好的解决了以上问题，就是字体图标 iconfont。</p>
</li>
<li><p><strong>字体图标可以为前端工程师提供一种方便高效的图标使用方式，展示的是图标，本质属于字体。</strong></p>
</li>
</ul>
<h4 id="字体图标的优点"><a href="#字体图标的优点" class="headerlink" title="字体图标的优点"></a>字体图标的优点</h4><ul>
<li><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。<strong>一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</strong></p>
</li>
<li><p><strong>灵活性</strong>：<strong>本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</strong></p>
</li>
<li><p><strong>兼容性</strong>：几乎支持所有的浏览器，请放心使用</p>
</li>
<li><p>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</p>
</li>
<li><p>总结：</p>
<ul>
<li>01 如果遇到一些结构和样式比较简单的小图标，就用字体图标。</li>
<li>02 如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</li>
</ul>
</li>
</ul>
<h4 id="字体图标的下载"><a href="#字体图标的下载" class="headerlink" title="字体图标的下载"></a>字体图标的下载</h4><ul>
<li><p>icomoon 字库: <code> http://icomoon.io</code>  推荐指数 ★★★★★</p>
<ul>
<li>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</li>
</ul>
</li>
<li><p>阿里 iconfont 字库:<code>http://www.iconfont.cn/</code>推荐指数 ★★★★★</p>
<ul>
<li>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI 制作图标上传生成。 重点是，免费！</li>
</ul>
</li>
</ul>
<h4 id="icomoon-字体图标引入"><a href="#icomoon-字体图标引入" class="headerlink" title="icomoon 字体图标引入"></a>icomoon 字体图标引入</h4><ul>
<li>01 把下载包里面的 fonts 文件夹放入页面根目录下</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/035b9f2fb6ff4e998f213fcd1a9fa4ad" alt="image-20220126200551822"></p>
<ul>
<li>02 在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过 css 引入到我们页面中。<ul>
<li>一定注意字体文件路径的问题。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>03 html 标签内添加小图标。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/854e160f7510419faed8add41ca77f07" alt="image-20220126200812402"></p>
<ul>
<li>给标签定义字体</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;icomoon&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>务必保证 这个字体和上面 @font-face 里面的字体保持一致</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e2c3f1ec0b5845bab2c766e47d9a0280" alt="image-20220126200928363"></p>
<h4 id="iconmoon-图标的追加"><a href="#iconmoon-图标的追加" class="headerlink" title="iconmoon 图标的追加"></a>iconmoon 图标的追加</h4><ul>
<li><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>
</li>
<li><p>把压缩包里面的 selection.json 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a985b24c9dca49ea8511ba16b2340c35" alt="image-20220126201113870"></p>
<h3 id="阿里矢量图标的使用"><a href="#阿里矢量图标的使用" class="headerlink" title="阿里矢量图标的使用"></a>阿里矢量图标的使用</h3><h4 id="不同类型图标优缺点"><a href="#不同类型图标优缺点" class="headerlink" title="不同类型图标优缺点"></a>不同类型图标优缺点</h4><ul>
<li><p>unicode是字体在网页端最原始的应用方式，特点是：</p>
<ul>
<li><p>兼容性最好，支持ie6+，及所有现代浏览器。</p>
</li>
<li><p>支持按字体的方式去动态调整图标大小，颜色等等。</p>
</li>
<li><p>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</p>
</li>
</ul>
</li>
<li><p>font-class 是 unicode 使用方式的一种变种，主要是解决unicode书写不直观，语意不明确的问题。</p>
<ul>
<li>与unicode使用方式相比，具有如下特点：<ul>
<li>兼容性良好，支持ie8+，及所有现代浏览器。</li>
<li>相比于unicode语意明确，书写更直观。可以很容易分辨这个icon是什么。</li>
<li>因为使用class来定义图标，所以当要替换图标时，只需要修改class里面的unicode引用。</li>
<li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li>
</ul>
</li>
</ul>
</li>
<li><p>symbol 引用 :</p>
<ul>
<li>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code">文章</a> 这种用法其实是做了一个svg的集合，与上面两种相比具有如下特点：<ul>
<li>支持多色图标了，不再受单色限制。</li>
<li>通过一些技巧，支持像字体那样，通过<code>font-size</code>,<code>color</code>来调整样式。</li>
<li>兼容性较差，支持 ie9+,及现代浏览器。</li>
<li>浏览器渲染 svg 的性能一般，还不如png。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="不同类型图标的使用"><a href="#不同类型图标的使用" class="headerlink" title="不同类型图标的使用"></a>不同类型图标的使用</h4><ul>
<li><ol start="0">
<li>地址: 阿里 iconfont 字库:<code>http://www.iconfont.cn/</code></li>
</ol>
</li>
<li><ol>
<li>找到需要的图标,添加到购物车,加入项目中</li>
</ol>
</li>
<li><ol start="2">
<li>在我的项目中找到需要的图标</li>
</ol>
<ul>
<li><ol>
<li>unicode 引用:</li>
</ol>
<ul>
<li><ol>
<li>生产在线链接,拷贝项目生成的 font-face 样式添加到 style 样式中</li>
</ol>
</li>
<li><ol start="2">
<li>挑选相应图标并获取字体编码，应用于页面,如:<code>&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe600;&lt;/i&gt;</code></li>
</ol>
</li>
<li><ol start="3">
<li>修改字体图标的样式,通过 <code>.iconfont</code>类名修改,并添加 <code>font-family:&quot;iconfont&quot; !important;</code> 样式,字体图标才能生效,其他样式可自行添加</li>
</ol>
</li>
</ul>
</li>
<li><ol start="2">
<li>Font class 形式 :</li>
</ol>
<ul>
<li><ol>
<li>生成在线链接, 在 head 标签中 通过 link 标签 引入即可</li>
</ol>
</li>
<li><ol start="2">
<li>使用图标时,复制图标代码到标签的 class 属性中:例如:<code>&lt;i class=&quot;iconfont icon-gouwuchekong&quot;&gt;&lt;/i&gt;</code></li>
</ol>
</li>
<li><ol start="3">
<li>修改字符图标样式,通过 <code>.iconfont</code> 类名修改</li>
</ol>
</li>
</ul>
</li>
<li><ol start="3">
<li>symbol 类型的图标使用:</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 01 拷贝项目下面生成的 symbol 代码到 head 中,通过 script 标签引入在线链接 */</span></span><br><span class="line"><span class="comment">/* 02 加入通用的 CSS 代码到 style 中,其他自定义样式,也可以通过 .icon 类名添加 */</span></span><br><span class="line">    <span class="selector-class">.icon</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">       <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">       fill: currentColor;</span><br><span class="line">       <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 03 挑选相应图标并获取类名，应用于页面即可：*/</span></span><br><span class="line">    &lt;svg class=&quot;<span class="attribute">icon</span>&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=<span class="string">&quot;#icon-xxx&quot;</span>&gt;&lt;/use&gt;</span><br><span class="line">    &lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字体文件格式"><a href="#字体文件格式" class="headerlink" title="字体文件格式"></a>字体文件格式</h3><ul>
<li><p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>
</li>
<li><p>01 TureType(.ttf) 格式 .ttf 字体是 Windows 和 Mac 的最常见的字体，支持这种字体的浏览器有 IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>
</li>
<li><p>02 Web Open Font Format(.woff) 格式 woff 字体，支持这种字体的浏览器有 IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>
</li>
<li><p>03 Embedded Open Type(.eot)格 式 .eot 字体是IE专用字体，支持这种字体的浏览器有 IE4+；</p>
</li>
<li><p>04 SVG(.svg) 格式 .svg 字体是基于 SVG 字体渲染的一种格式，支持这种字体的浏览器有 Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>
</li>
</ul>
<h3 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h3><h4 id="CSS-三角"><a href="#CSS-三角" class="headerlink" title="CSS 三角"></a>CSS 三角</h4><ul>
<li><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p>
</li>
<li><p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p>
<ul>
<li>容器的宽高设置为 0 , 边框设置为很大,再依次修改四边边框的颜色即可实现</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/7f240e45d7b5417eb662415f9f6699e5" alt="1659498410531"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">100px</span> solid red;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CSS三角强化"><a href="#CSS三角强化" class="headerlink" title="CSS三角强化"></a>CSS三角强化</h4><p><img src="https://s1.vika.cn/space/2023/02/19/5826ae1c15704cc08e4bf34c2e54c632"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">	<span class="attribute">border-style</span>: solid;</span><br><span class="line">	<span class="attribute">border-width</span>: <span class="number">22px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><ul>
<li><p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>
</li>
<li><p>更改用户的鼠标样式</p>
</li>
<li><p>表单轮廓</p>
</li>
<li><p>防止表单域拖拽</p>
</li>
</ul>
<h4 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h4><ul>
<li>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123; <span class="attribute">cursor</span>: pointer; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/16428150a1804fef8170362ed19c9410" alt="image-20220126201907067"></p>
<h4 id="轮廓线"><a href="#轮廓线" class="headerlink" title="轮廓线"></a>轮廓线</h4><ul>
<li>给表单添加 outline: 0; 或者 outline: none; 样式之后，就可以去掉输入框默认的蓝色边框。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;<span class="attribute">outline</span>: none; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a>防止拖拽文本域</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123; <span class="attribute">resize</span>: none;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vertical-align-属性应用"><a href="#vertical-align-属性应用" class="headerlink" title="vertical-align 属性应用"></a>vertical-align 属性应用</h3><ul>
<li><p>CSS 的 vertical-align 属性使用场景： <strong>经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</strong></p>
</li>
<li><p>官方解释： <strong>用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效。</strong></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/493e7c6d5ea04a59922d839d6e4a48b3" alt="image-20220126202228825"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/24abadf385794d5a98059a2982179f5b" alt="image-20220126202320778"></p>
<h4 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h4><ul>
<li>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/205a4dbfc0614738a903066e4f5e2f62" alt="image-20220126202450615"></p>
<ul>
<li>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle 就可以让文字和图片垂直居中对齐了。</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="解决图片底部的默认空白"><a href="#解决图片底部的默认空白" class="headerlink" title="解决图片底部的默认空白"></a>解决图片底部的默认空白</h4><ul>
<li><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>
</li>
<li><p>主要解决方法有两种：</p>
<ul>
<li><strong>01 给图片添加 vertical-align:middle | top| bottom 等。 （提倡使用的）</strong></li>
<li><strong>02 把图片转换为块级元素 display: block;</strong></li>
</ul>
</li>
</ul>
<h3 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h3><h4 id="单行文本溢出显示"><a href="#单行文本溢出显示" class="headerlink" title="单行文本溢出显示"></a>单行文本溢出显示</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="comment">/*（ 默认 normal 自动换行） */</span></span><br><span class="line">  <span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多行文本溢出显示"><a href="#多行文本溢出显示" class="headerlink" title="多行文本溢出显示"></a>多行文本溢出显示</h4><ul>
<li>多行文本溢出显示省略号，有较大兼容性问题， 适合于 webKit 浏览器或移动端（移动端大部分是 webkit 内核）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="comment">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  <span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</li>
</ul>
<h3 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h3><h4 id="margin负值运用"><a href="#margin负值运用" class="headerlink" title="margin负值运用"></a>margin负值运用</h4><p><img src="https://s1.vika.cn/space/2023/02/19/4b01727973054f87a72769e737ba7f69"></p>
<ul>
<li><p>01 让每个盒子 margin 往左侧移动 -1px 正好压住相邻盒子边框</p>
</li>
<li><p>02 鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加 z-index ）</p>
</li>
</ul>
<h4 id="文字围绕浮动元素"><a href="#文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h4><p><img src="https://s1.vika.cn/space/2023/02/19/553f84c37d6a4ee1afcc270ac0712e39"></p>
<h4 id="行内块巧妙运用"><a href="#行内块巧妙运用" class="headerlink" title="行内块巧妙运用"></a>行内块巧妙运用</h4><p><img src="https://s1.vika.cn/space/2023/02/19/7f4b150f25fc42a3a4dc1cc52fd4742a"></p>
<ul>
<li>页码在页面中间显示:<ul>
<li>01 把这些链接盒子转换为行内块， 之后给父级指定 text-align:center;</li>
<li>02 利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li>
</ul>
</li>
</ul>
<h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><ul>
<li><ol>
<li>方法一: 要使用 CSS 重置，请在您的网页中包含以下源文件：</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span> = <span class="string">&quot;text/css&quot;</span> <span class="attr">href</span> = <span class="string">&quot;http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css&quot;</span> &gt;</span>   </span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>方法二: 直接在 css 文件中添加以下 <strong>reset.css</strong> 的样式:</li>
</ol>
<ul>
<li>(尽量减少使用通配符选择器,因为通配符选择器会遍历页面中所有标签,性能低)</li>
</ul>
</li>
<li><ol start="3">
<li>方法三:也可以直接安装 reset.css 依赖包:</li>
</ol>
<ul>
<li>安装依赖:<strong>npm install @mudas&#x2F;reset.css -S</strong></li>
<li>导入依赖:<strong>import “@mudas&#x2F;reset.css”;</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* reset.css */</span></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, pre,</span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">caption</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">abbr</span>, acronym &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-variant</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: text-top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: text-bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, select &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: inherit;</span><br><span class="line">  <span class="attribute">font-size</span>: inherit;</span><br><span class="line">  <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">  *<span class="attribute">font-size</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">legend</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS样式规则顺序"><a href="#CSS样式规则顺序" class="headerlink" title="CSS样式规则顺序"></a>CSS样式规则顺序</h2><img src="https://s1.vika.cn/space/2023/02/19/af638bfe26c04a2e987fe1011bad1399" style="zoom:150%;" />









































]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2024/01/02/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/101_HTML_CSS/10102_HTML/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="前言-基础班学习路线"><a href="#前言-基础班学习路线" class="headerlink" title="前言-基础班学习路线"></a>前言-基础班学习路线</h2><h3 id="基础班目标"><a href="#基础班目标" class="headerlink" title="基础班目标"></a>基础班目标</h3><ul>
<li><p>目标：基础班主要学习 PC 端网站布局。</p>
</li>
<li><p>最终网站：品优购静态网站。</p>
</li>
<li><p>目的： 精通网页布局，也是我们前端人员的必备技能。为后面学习 JavaScript 打下坚实基础。</p>
</li>
</ul>
<h3 id="基础班学习路线"><a href="#基础班学习路线" class="headerlink" title="基础班学习路线"></a>基础班学习路线</h3><p><img src="https://s1.vika.cn/space/2023/02/19/7a091ab6f0704b0584482681745e15fd" alt="image-20220125131616374"></p>
<h2 id="Web-标准与-W3C"><a href="#Web-标准与-W3C" class="headerlink" title="Web 标准与 W3C"></a>Web 标准与 W3C</h2><h3 id="为什么需要-Web-标准"><a href="#为什么需要-Web-标准" class="headerlink" title="为什么需要 Web 标准"></a>为什么需要 Web 标准</h3><ul>
<li><p><strong>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</strong></p>
</li>
<li><p>因为浏览器不同，如果不遵循 Web 标准,浏览器显示页面或者排版就有差异。</p>
</li>
<li><p>遵循 Web 标准除了<strong>可以让不同的开发人员写出的页面更标准、更统一</strong>外，还有以下优点：</p>
<ul>
<li><strong>1) 让 Web 的发展前景更广阔。</strong></li>
<li><strong>2) 内容能被更广泛的设备访问。</strong></li>
<li><strong>3) 更容易被搜寻引擎搜索。</strong></li>
<li><strong>4) 降低网站流量费用。</strong></li>
<li><strong>5) 使网站更易于维护。</strong></li>
<li><strong>6) 提高页面浏览速度。</strong></li>
</ul>
</li>
</ul>
<h3 id="Web-标准的构成"><a href="#Web-标准的构成" class="headerlink" title="Web 标准的构成"></a>Web 标准的构成</h3><ul>
<li><p>主要包括<strong>结构（Structure） 、表现（Presentation）和行为（Behavior）</strong>三个方面。</p>
</li>
<li><p>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。</p>
</li>
<li><p>简单理解： <code>结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中。</code></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/9ea413b92a7c4c5fa648890d39f920e7" alt="image-20220125133257922"></p>
<h3 id="W3C-简介"><a href="#W3C-简介" class="headerlink" title="W3C 简介"></a>W3C 简介</h3><ul>
<li>W3C 是英文 <code>World Wide Web Consortium </code>的缩写， 翻译过来就是 W3C 理事会或万维网联盟, <strong>W3C 是全球互联网最具权威的技术标准化组织</strong>.</li>
<li>W3C 于 1994 年 10 月在麻省理工学院计算机科学实验室成立。创建者是万维网的发明者 Tim Berners-Lee</li>
<li>W3C 负责 web 方面标准的制定，像 HTML、XHTML、CSS、XML 的标准就是由 W3C 来定制的。</li>
</ul>
<h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><h3 id="HTML-简介-1"><a href="#HTML-简介-1" class="headerlink" title="HTML 简介"></a>HTML 简介</h3><ul>
<li>HTML 指的是<strong>超文本标记语言</strong> (Hyper Text Markup Language) ，它<strong>是用来描述网页的一种语言</strong>。</li>
<li>HTML <strong>不是一种编程语言，而是一种标记语言</strong> (markup language)。</li>
<li>标记语言是一套标记标签 (markup tag)<ul>
<li>由无数个标记（标签、tag)组成；</li>
<li>是对某些内容进行特殊的标记，以供其他解释器识别处理；</li>
<li>比如使用<code>&lt;h2&gt;&lt;/h2&gt;</code>标记的文本会被识别为“标题”进行加粗、文字放大显示；</li>
<li>由标签和内容组成的称为元素（element）</li>
</ul>
</li>
<li>所谓超文本，有 2 层含义：<ul>
<li>表示不仅仅可以插入普通的文本（Text），还可以插入图片、音频、视频等内容；</li>
<li>还可以表示超链接（HyperLink），从一个网页跳转到另一个网页；与世界各地主机的文件连接（超级链接文本 ）。</li>
</ul>
</li>
</ul>
<h3 id="HTML-语法规范"><a href="#HTML-语法规范" class="headerlink" title="HTML 语法规范"></a>HTML 语法规范</h3><ul>
<li><ol>
<li>HTML 标签是由尖括号包围的关键词。</li>
</ol>
</li>
<li><ol start="2">
<li>HTML 标签通常是成对出现的，例如 <code>&lt;html&gt;</code> 和 <code>&lt;/html&gt; </code>，我们称为双标签。标签对中的第一个标签是开始标签，第二个标签是结束标签。</li>
</ol>
</li>
<li><ol start="3">
<li>有些特殊的标签必须是单个标签（极少情况），例如单标签: <code>&lt;br /&gt;</code></li>
</ol>
</li>
<li><ol start="4">
<li>标签的作用: <strong>是用来告诉浏览器, 给指定的内容添加语义的</strong></li>
</ol>
</li>
</ul>
<h3 id="网页基本机构"><a href="#网页基本机构" class="headerlink" title="网页基本机构"></a>网页基本机构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文档类型声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义当前文档显示的语言--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字符集:规定 HTML 文档应该使用哪种字符编码。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文档类型声明"><a href="#文档类型声明" class="headerlink" title="文档类型声明"></a>文档类型声明</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档类型声明--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>由于 HTML 有很多个版本的规范, 每个版本的规范之间又有一定的差异. 所以为了让浏览器能够正确的 编译&#x2F;解析&#x2F;渲染 我们的网页, 我们需要在 HTML 文件的第一行<strong>告诉浏览器, 我们当前这个网页是用哪一个版本的 HTML 规范来编写的,让浏览器用 HTML5 的标准去解析识别内容；</strong>浏览器只要知道了我们是用哪一个版本的规范来编写之后, 它就能够正确的 编译&#x2F;解析&#x2F;渲染我们的网页</p>
</li>
<li><p>不是一个 HTML 标签，它就是 文档类型声明</p>
</li>
<li><p>必须放在 HTML 文档的最前面，不能省略，省略了会出现兼容性问题；</p>
</li>
<li><p>HTML 的 DTD 文档声明和 XHTML 的 DTD 文档声明有何区别?</p>
</li>
<li><p><strong>XHTML 本身规定比如标签必须小写、必须严格闭合、必须使用引号引起属性等等</strong>, 而 HTML 会更加松散,没有这么严格</p>
</li>
<li><p>HTML 4.01 中的严格模式 :</p>
</li>
<li><p>Strict 表示<code>严格的</code>, 这种模式里面的要求更为严格.这种严格主要体现在有一些标签不能使用</p>
</li>
<li><p>例如 font 标签 &#x2F; u 标签等</p>
<ul>
<li>font 标签可以修改一个文本的字号、颜色、字体,但这和 HTML 的本质有冲突,因为 HTML 只能负责语义,不能负责样式,而 font 标签是用于修改样式的,所以在 Strict 中是不能使用 font 标签</li>
<li>u 标签可以给一个文本添加 下划线,但这和 HTML 的本质有冲突,因为 HTML 只能负责语义,不能负责样式,而 u 标签添加的下划线是样式.所以在 Strict 中是不能使用 u 标签</li>
</ul>
</li>
</ul>
<h3 id="lang-语言种类"><a href="#lang-语言种类" class="headerlink" title="lang 语言种类"></a>lang 语言种类</h3><ul>
<li><p>W3C 标准建议为 html 元素增加一个 lang 属性 ：</p>
<ul>
<li><strong>lang&#x3D;“en” 表示这个 HTML 文档的语言是英文；</strong></li>
<li><strong>lang&#x3D;“zh-CN” 表示这个 HTML 文档的语言是中文；</strong></li>
</ul>
</li>
<li><p>作用 ：</p>
<ul>
<li><strong>用来定义当前文档显示的语言。</strong></li>
<li>帮助语音合成工具确定要使用的发音;</li>
<li>帮助翻译工具确定要使用的翻译规则;</li>
</ul>
</li>
<li><p>简单来说,定义为 en 就是英文网页, 定义为 zh-CN 就是中文网页</p>
</li>
<li><p>其实对于文档显示来说，<code>定义成 en 的文档也可以显示中文，定义成 zh-CN 的文档也可以显示英文</code></p>
<ul>
<li><code>这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的</code></li>
</ul>
</li>
</ul>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul>
<li><ol>
<li><strong>字符集 (Character set) 就是字符的集合</strong>。以便计算机能够识别和存储各种文字。</li>
</ol>
<ul>
<li>在 HTML 文件中指定的字符集必须和保存这个文件的字符集一致, 否则还是会出现乱码</li>
<li>所以仅仅指定字符集不一定能解决乱码问题, 还需要保存文件的时候, 文件的保存格式必须和指定的字符集一致才能保证没有乱码问题</li>
</ul>
</li>
<li><ol start="2">
<li>在 head 标签内，可以通过 meta 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot; UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>charset 常用的值有：<strong>GB2312 、BIG5 、GBK 和 UTF-8</strong>，其中 <strong>UTF-8 也被称为万国码</strong>，<code>基本包含了全世界所有国家需要用到的字符</code>.</li>
</ol>
</li>
<li><ol start="4">
<li>注意：上面语法是必须要写的代码，否则可能引起乱码的情况。</li>
</ol>
<ul>
<li>一般情况下，尽量统一写成标准的 **”UTF-8”**，不要写成 “utf8” 或 “UTF8”。</li>
</ul>
</li>
<li><ol start="5">
<li>GBK(GB2312) 和 UTF-8 区别:</li>
</ol>
<ul>
<li>GBK(GB2312) 里面存储的字符比较少, 仅仅存储了汉字和一些常用外文<ul>
<li>体积比较小</li>
</ul>
</li>
<li>UTF-8 里面存储的世界上所有的文字<ul>
<li>体积比较大</li>
</ul>
</li>
</ul>
</li>
<li><ol start="6">
<li>那么在企业开发中我们应该使用 GBK(GB2312) 还是 UTF-8 呢?</li>
</ol>
<ul>
<li>如果你的网站仅仅包含中文, 那么推荐使用 GB2312, 因为它的体积更小, 访问速度更快</li>
<li>如果你的网站除了中文以外, 还包含了一些其它国家的语言 , 那么推荐使用 UTF-8</li>
<li>懒人推荐: <strong>不管三七二十一, 一律写 UTF-8 即可</strong></li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>以上三个代码 vscode 自动生成,基本不需要我们重写.</li>
<li><code>&lt;!DOCTYPE html&gt;</code> 文档类型声明,告诉浏览器这个页面采取 html5 版本来显示页面.</li>
<li><code>&lt;html lang=&quot;en&quot;&gt;</code> 告诉浏览器或者搜索引擎这是一个英文网站. 本页面采取英文来显示.</li>
<li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 必须写. 采取 UTF-8 来保存文字. 如果不写就会乱码.具体原理后面分析.</li>
</ul>
<p>keywords 关键字</p>
<ul>
<li>作用: <strong>告诉搜索引擎当前网页的关键词, 在 SEO 中非常重要, 能够提高搜索命中率</strong>, 让别人更容易找到你</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IT前言技术、iOS技术、HTML5技术、Android技术&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Description-描述"><a href="#Description-描述" class="headerlink" title="Description 描述"></a>Description 描述</h3><ul>
<li>作用: <strong>告诉搜索引擎当前网页的主要内容, 在 SEO 中非常重要, 当别人在搜索引擎中搜索到你的网站时,会自动将你网站的描述信息展示给用户, 能够提高搜索命中率,</strong> 让别人更容易找到你</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;江哥热爱于IT技术、iOS技术、HTML5技术、Android技术研究&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>Refresh</p>
<ul>
<li>作用: <strong>告诉浏览器多久自动刷新一次页面并指向新页面</strong>, 常用于新老域名交替时, 访问老域名自动跳转到新域名, 或用于一些需要定时刷新的聊天室等.</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2；URL=http://www.baidu.com/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML-标签结构"><a href="#HTML-标签结构" class="headerlink" title="HTML 标签结构"></a>HTML 标签结构</h2><h3 id="单-双标签元素"><a href="#单-双标签元素" class="headerlink" title="单&#x2F;双标签元素"></a>单&#x2F;双标签元素</h3><ul>
<li>双标签元素：我们会发现前面大部分看到的元素都是双标签的；<ul>
<li>html、body、head、h2、p、a 元素；</li>
</ul>
</li>
<li>单标签元素：也有一些元素是只有一个标签；<ul>
<li>br、img、hr、meta、input；</li>
</ul>
</li>
<li>HTML 元素不区分大小写，但是推荐使用小写</li>
</ul>
<h3 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h3><ul>
<li>双标签关系可以分为两类：<strong>包含关系和并列关系</strong>。</li>
<li>包含关系:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>并列关系:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-基本结构"><a href="#HTML-基本结构" class="headerlink" title="HTML 基本结构"></a>HTML 基本结构</h3><ul>
<li><p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。</p>
</li>
<li><p>HTML 页面也称为 HTML 文档.</p>
</li>
<li><p>HTML 文档的的后缀名必须是 <code>.html</code> 或 <code>.htm </code>，<strong>浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们</strong>。</p>
</li>
<li><p>此时，用浏览器打开这个网页，我们就可以预览我们写的第一个 HTML 文件了。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文档类型声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义当前文档显示的语言--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字符集:规定 HTML 文档应该使用哪种字符编码。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/220138555bb5497ea6744ae5e7e4b62b"></p>
<h3 id="常用的结构标签"><a href="#常用的结构标签" class="headerlink" title="常用的结构标签"></a>常用的结构标签</h3><h4 id="html-标签"><a href="#html-标签" class="headerlink" title="html 标签"></a>html 标签</h4><ul>
<li>作用:<ul>
<li>表示一个 HTML 文档的根（顶级元素），所以它也被称为<strong>根元素</strong>。</li>
<li><strong>用于告诉浏览器这是一个网页</strong>, 也就是说告诉浏览器我是一个 HTML 文档</li>
</ul>
</li>
<li>注意点:<ul>
<li><strong>其它所有的标签都必须写在 html 标签里面</strong>, 所有其他元素必须是此元素的后代 ，也就是写在 html 开始标签和结束标签中间 (文档类型声明除外)</li>
</ul>
</li>
</ul>
<h4 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h4><p>作用:</p>
<ul>
<li>规定文档相关的配置信息（也称之为元数据），包括文档的标题，引用的文档样式和脚本等。<ul>
<li>什么是元数据（meta data），是描述数据的数据；</li>
<li>这里我们可以理解成对整个页面的配置：</li>
<li>一般会至少包含如下 2 个设置。<ul>
<li>网页的标题：title 元素</li>
<li>网页的编码：meta 元素<ul>
<li>可以用于设置网页的字符编码，让浏览器更精准地显示每一个文字，不设置或者设置错误会导致乱码；</li>
<li>一般都使用 <code>utf-8</code> 编码，涵盖了世界上几乎所有的文字；</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如:</p>
<ul>
<li>指定网站的标题 &#x2F; 指定网站的小图片 ( 比如指定网站的 favicon 图标 )</li>
<li>添加网站的 SEO 相关的信息 (添加网站的 <strong>关键字 和 描述信息</strong>)</li>
<li>外挂一些外部的 css&#x2F;js 文件</li>
<li>添加一些浏览器适配相关的内容</li>
</ul>
<p>注意点:</p>
<ul>
<li>一般情况下, 写在 head 标签内部的内容都不会显示给用户查看, 也就是说一般情况下写在 head 标签内部的内容,大部分我们都看不到</li>
</ul>
<h4 id="link-标签"><a href="#link-标签" class="headerlink" title="link 标签"></a>link 标签</h4><ul>
<li>link 元素是外部资源链接元素，规范了文档与外部资源的关系<ul>
<li>link 元素通常是在 head 元素中</li>
</ul>
</li>
<li>最常用的链接是样式表（CSS）；<ul>
<li>此外也可以被用来创建站点图标（比如 “favicon” 图标）；</li>
</ul>
</li>
<li>link 元素常见的属性：<ul>
<li>href：此属性指定被链接资源的 URL。 URL 可以是绝对的，也可以是相对的。</li>
<li>rel：指定链接类型，常见的链接类型：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types</a><ul>
<li>icon：站点图标；</li>
<li>stylesheet：CSS 样式；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入 icon 图标--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入外部样式表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="title-标签"><a href="#title-标签" class="headerlink" title="title 标签"></a>title 标签</h4><ul>
<li>作用:<ul>
<li><strong>用于指定网站的标题</strong>, 并且这个标题, 会作为用户保存网站的默认标题</li>
</ul>
</li>
<li>注意点:<ul>
<li>title 标签必须写在 head 标签里面</li>
</ul>
</li>
</ul>
<h4 id="body-标签"><a href="#body-标签" class="headerlink" title="body 标签"></a>body 标签</h4><p>作用:</p>
<ul>
<li><strong>用于定义 HTML 文档中需要显示给用户查看的内容(文字&#x2F;图片&#x2F;音频&#x2F;视频)</strong><ul>
<li>body 元素里面的内容将是你在浏览器窗口中看到的东西，也就是网页的具体内容和结构。</li>
<li>之后学习的大部分 HTML 元素都是在 body 中编写呈现的；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点:</p>
<ul>
<li>虽然说有时候你可能将内容写到了别的地方,在网页中也能看到, 但是千万不要这么干, 一定要将需要显示的内容写在 body 中</li>
<li>一对 html 标签中(一个 html 开始标签和一个 html 结束标签) 只能有一对 body 标签</li>
</ul>
<h3 id="基本结构标签总结"><a href="#基本结构标签总结" class="headerlink" title="基本结构标签总结"></a>基本结构标签总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/d025422e893a4f51852313cb0892ae91" alt="image-20220125133942216"></p>
<h2 id="认识-HTML-元素"><a href="#认识-HTML-元素" class="headerlink" title="认识 HTML 元素"></a>认识 HTML 元素</h2><h3 id="认识元素"><a href="#认识元素" class="headerlink" title="认识元素"></a>认识元素</h3><ul>
<li>我们会发现<strong>HTML 本质上是由一系列的元素（Element）构成的</strong>；</li>
<li>什么是元素（Element）呢？<ul>
<li>元素是网页的一部分；</li>
<li>一个元素可以<strong>包含一个数据项，或是一块文本，或是一张照片，亦或是什么也不包含</strong>；</li>
</ul>
</li>
<li>那么 HTML 有哪些元素呢？<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></li>
</ul>
</li>
</ul>
<h3 id="元素的组成"><a href="#元素的组成" class="headerlink" title="元素的组成"></a>元素的组成</h3><p><img src="https://s1.vika.cn/space/2023/02/19/391015635e4a47f8a687c75b7fb2d8fa" alt="1670147270058"></p>
<ul>
<li><p>这个元素的主要部分有：</p>
<ul>
<li><p><strong>开始标签</strong>（Opening tag）：包含元素的名称（本例为 p），被左、右尖括号所包围。表示元素从这里开始或者开始起作用 ——在本例中即段落由此开始。</p>
</li>
<li><p><strong>结束标签</strong>（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾 —— 在本例中即段落在此结束。初学者常常会犯忘记包含结束标签的错误，这可能会产生一些奇怪的结果。</p>
</li>
<li><p><strong>内容</strong>（Content）：元素的内容，本例中就是所输入的文本本身。</p>
</li>
<li><p><strong>元素</strong>（Element）：开始标签、结束标签与内容相结合，便是一个完整的元素。</p>
</li>
</ul>
</li>
</ul>
<h3 id="元素的属性"><a href="#元素的属性" class="headerlink" title="元素的属性"></a>元素的属性</h3><p><img src="https://s1.vika.cn/space/2023/02/19/50d86667f7874e64a4d6754a720d15e3" alt="1670147351861"></p>
<ul>
<li>属性包含元素的额外信息，这些信息不会出现在实际的内容中。</li>
<li>一个属性必须包含如下内容：<ul>
<li>一个空格，在属性和元素名称之间。(如果已经有一个或多个属性，就与前一个属性之间有一个空格。)</li>
<li>属性名称，后面跟着一个等于号。</li>
<li>一个属性值，由一对引号“ ”引起来。</li>
</ul>
</li>
</ul>
<h3 id="属性的分类"><a href="#属性的分类" class="headerlink" title="属性的分类"></a>属性的分类</h3><ul>
<li>有些属性是公共的，所有 HTML 都可以设置和拥有 , 称之为 <strong>全局属性</strong><ul>
<li><strong>id</strong>：定义唯一标识符（ID），该标识符在整个文档中必须是唯一的。其目的是在链接（使用片段标识符），脚本或样式（使用 CSS）时标识元素。</li>
<li><strong>class</strong>：一个以空格分隔的元素的类名（classes ）列表，它允许 CSS 和 Javascript 通过类选择器或者 DOM 方法来选择和访问特定的元素；</li>
<li><strong>style</strong>：给元素添加内联样式；</li>
<li><strong>title</strong>：包含表示与其所属元素相关信息的文本。 这些信息通常可以作为提示呈现给用户，但不是必须的。</li>
</ul>
</li>
<li>有些属性是元素特有的，不是每一个元素都可以设置<ul>
<li>比如 meta 元素的 charset 属性、img 元素的 alt 属性等</li>
</ul>
</li>
</ul>
<h2 id="常用-HTML-标签"><a href="#常用-HTML-标签" class="headerlink" title="常用 HTML 标签"></a>常用 HTML 标签</h2><h3 id="常用的-HTML-标签"><a href="#常用的-HTML-标签" class="headerlink" title="常用的 HTML 标签"></a>常用的 HTML 标签</h3><ul>
<li>常用的元素（暂时掌握下面几个就够了，90%时间都在写这几个）：<ul>
<li>p 元素、h 元素；</li>
<li>img 元素、a 元素、iframe 元素；</li>
<li>div 元素、span 元素；</li>
</ul>
</li>
<li>下阶段学习的元素：<ul>
<li>ul、ol、li 元素；</li>
<li>button 元素、input 元素；</li>
<li>table、thead、tbody、thead、th、tr、td；</li>
</ul>
</li>
<li>HTML5 新增元素（后续学习）</li>
</ul>
<h3 id="标签语义"><a href="#标签语义" class="headerlink" title="标签语义"></a>标签语义</h3><ul>
<li>学习标签是有技巧的，重点是记住每个<strong>标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。</strong></li>
<li><strong>根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</strong></li>
<li><strong>用正确的元素做正确的事情。</strong></li>
<li>标签语义化的好处 :<ul>
<li>方便代码维护；</li>
<li>减少让开发者之间的沟通成本；</li>
<li>能让语音合成工具正确识别网页元素的用途，以便作出正确的反应；</li>
<li>有利于 SEO；</li>
<li>……</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/8de0b9929e11485f89dc5f4ec2f22ea1" alt="image-20220125135848686"></p>
<h3 id="h-标题标签"><a href="#h-标题标签" class="headerlink" title="h 标题标签"></a>h 标题标签</h3><ul>
<li><p>为了使网页更具有语义化，我们经常会在页面将一些比较重要的文字作为<strong>标题</strong>，这个时候我们可以使用 <strong>h 元素</strong>。HTML 提供了 6 个等级的网页标题，即 <strong>h1 - h6</strong> 。</p>
</li>
<li><p>单词 head 的缩写，意为<strong>头部、标题</strong>。</p>
</li>
<li><p>标签语义：作为标题使用，用于给文本添加标题语义,并且依据<strong>重要性递减</strong>。<code>&lt;h1&gt;</code> 级别最高，而<code>&lt;h6&gt;</code>级别最低。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一共六级选,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文字加粗一行显。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>由大到小依次减，<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>从重到轻随之变。<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>语法规范书写后，<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>具体效果刷新见。<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>特点：</p>
<ul>
<li><strong>加了标题的文字会变的加粗，字号也会变大</strong>。</li>
<li>一个标题独占一行。</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li>H 标签是用来给文本添加标题语义的, 而不是用来修改文本的样式的</li>
<li><strong>H 标签一共有 6 个, 从 H1~H6, 最多就只能到 6, 超过 6 则无效</strong></li>
<li>被 H 系列标签包裹的内容会独占一行</li>
<li>在 H 系列的标签中, H1 最大, H6 最小</li>
<li>在企业开发中, 一定要慎用 H 系列的标签, 特别是 H1 标签. <strong>在企业开发中一般情况下,一个界面中只能出现一个 H1 标签(和 SEO 有关)</strong></li>
</ul>
</li>
</ul>
<h3 id="p-段落标签"><a href="#p-段落标签" class="headerlink" title="p 段落标签"></a>p 段落标签</h3><ul>
<li><p>在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，<strong>p 标签用于定义段落，它可以将整个网页分为若干个段落。</strong></p>
</li>
<li><p>单词 paragraph [ˈpærəgræf] 的缩写，意为<strong>段落</strong>。</p>
</li>
<li><p><strong>标签语义：可以把 HTML 文档分割为若干段落。</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li><p>文本在一个段落中会根据浏览器窗口的大小自动换行。</p>
</li>
<li><p>在浏览器中会单独占一行</p>
</li>
<li><p>段落和段落之间会有空隙。</p>
</li>
</ul>
<p>注意点:</p>
<ul>
<li><code>p 标签中不要嵌套 块级标签 ,否则页面布局可能会出现错乱</code></li>
<li><code>特别是 p 标签中不能嵌套 div 标签</code></li>
</ul>
<h3 id="br-换行标签"><a href="#br-换行标签" class="headerlink" title="br 换行标签"></a>br 换行标签</h3><ul>
<li><p>在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 br</p>
</li>
<li><p>单词 break 的缩写，意为打断、<strong>换行</strong>。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    特点：</span></span><br><span class="line"><span class="comment">      1.&lt;br /&gt; 是个单标签。</span></span><br><span class="line"><span class="comment">      2.&lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>标签语义：强制换行</strong>。开发中已经不再使用</li>
<li>注意点:<ul>
<li>br 的意思是不另起一个段落进行强制换行, 而网页中 99.99% 需要换行时都是因为另起了一个段落, 所以应该用 p 来做</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a2f62cdd791d4c568a8c480574d9ad57" alt="image-20220125140816205"></p>
<h3 id="hr-标签"><a href="#hr-标签" class="headerlink" title="hr 标签"></a>hr 标签</h3><ul>
<li><p><strong>标签语义:在浏览器上显示一条分割线</strong></p>
</li>
<li><p>格式:</p>
<ul>
<li><code>&lt;hr/&gt;</code></li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li><strong>在浏览器中会单独占一行</strong></li>
<li>通过我的观察发现, HR 标签可以写<code>/</code>,也可以不写<code>/</code>, 如果不写<code>/</code>那么就是按照 HTML 的规范来编写, 如果写上<code>/</code>那么就是按照 XHTML 的规范来编写.</li>
<li>但是在 HTML5 中, 由于 HTML5 兼容 HTML 和 XHTML ,所以写不写都可以. 那么以后我们在做前端开发时, 要将标签闭合</li>
<li>由于 hr 标签是用来修改样式的, 所以不推荐使用. 今后开发中添加水平线一般都使用 CSS 盒子来做</li>
</ul>
</li>
</ul>
<h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><ul>
<li><p>在网页中，有时需要为文字设置<strong>粗体、斜体 或下划线</strong>等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。</p>
</li>
<li><p><strong>标签语义: 突出重要性, 比普通文字更重要.</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/046eb2cc58bd48da858179fb5b3b855d" alt="image-20220125140910359"></p>
<h3 id="div-和-span-标签"><a href="#div-和-span-标签" class="headerlink" title="div 和 span 标签"></a>div 和 span 标签</h3><h4 id="div-和-span-的历史"><a href="#div-和-span-的历史" class="headerlink" title="div 和 span 的历史"></a>div 和 span 的历史</h4><ul>
<li>在 HTML 中有两个特殊的元素 div 元素、span 元素：<ul>
<li>div 元素：division，分开、分配的意思；</li>
<li>span 元素：跨域、涵盖的意思；</li>
</ul>
</li>
<li>这两个元素有什么作用呢？无所用、无所不用。</li>
<li>产生的历史：<ul>
<li>网页的发展早期是没有 css，这个时候我们必须通过语义化元素来告知浏览器一段文字如何显示；</li>
<li>后来出现了 css，结构和样式需要分离，这个时候 html 只需要负责结构即可；</li>
<li>比如 h1 元素可以是一段普通的文本+CSS 修饰样式；</li>
<li>这个时候就出现了 div、span 来编写 HTML 结构所有的结构，样式都交给 css 来处理；</li>
</ul>
</li>
<li>所以，理论上来说：<ul>
<li>我们的页面可以没有 div、span；</li>
<li>我们的页面也可以全部都是 div、span；</li>
</ul>
</li>
</ul>
<h4 id="div-和-span-的区别"><a href="#div-和-span-的区别" class="headerlink" title="div 和 span 的区别"></a>div 和 span 的区别</h4><ul>
<li><strong>div 和 span 是没有语义的，它们就是一个盒子，用来装内容的。</strong><ul>
<li>div 标签用来布局，但是现在一行只能放一个 div。 大盒子<ul>
<li>一般作为其他元素的父容器，把其他元素包住，代表一个整体</li>
<li>用于把网页分割为多个独立的部分</li>
</ul>
</li>
<li>span 标签用来布局，一行上可以放多个 span。小盒子<ul>
<li>默认情况下，跟普通文本几乎没差别</li>
<li>用于区分特殊文本和普通文本，比如用来显示一些关键字</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 今日价格 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="img-图像标签"><a href="#img-图像标签" class="headerlink" title="img 图像标签"></a>img 图像标签</h3><ul>
<li><p>在 HTML 标签中，img 标签用于定义 HTML 页面中的图像。img 元素可以将一份图像嵌入 HTML 文档</p>
</li>
<li><p>单词 image 的缩写，意为图像。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/24.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;占位字符串&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示字符串&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/26.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;占位字符串&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示字符串&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/fc75ea5032784f22bfa53fcfa22fc992" alt="image-20220125142015659"></p>
<ul>
<li><strong>src 是 img 标签的必须属性,用于指定图像文件的路径和文件名</strong></li>
<li><strong>所谓属性：简单理解就是属于这个图像标签的特性。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/866ac3519abc4343bc7b18a8faccd6d2" alt="image-20220125142322960"></p>
<ul>
<li><p>标签的属性</p>
<ul>
<li>写在标签中 key&#x3D;”value” 这种格式的文本我们称之为标签属性</li>
<li><strong>src</strong>: src 是英文 source 的缩写, <strong>是 img 标签的必须属性</strong> , <strong>告诉浏览器需要插入的图片路径,</strong> 以便于浏览器到该路径下找到需要插入的图片<ul>
<li>网络图片：一个在线 URL 地址；<ul>
<li>网络图片的设置非常简单，给一个地址即可；</li>
</ul>
</li>
<li>本地图片：本地电脑上的图片，后续会和 html 一起部署到服务；</li>
</ul>
</li>
<li><strong>alt</strong>: <strong>规定图像的替代文本</strong><ul>
<li>alt 属性不是强制性的，有两个作用<ul>
<li>作用一：只有在 src 指定的路径下加载不到图片（错误的地址或者图片资源不存在），那么会显示 alt 指定的文本；</li>
<li>作用二：屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义；</li>
</ul>
</li>
</ul>
</li>
<li><strong>title</strong>: <strong>悬停文本</strong> (介绍这张图片, 只有在鼠标移动到图片上时才会显示)</li>
<li><strong>width</strong>: 设置图片显示的宽度,<strong>高度和宽度只设置一个,图片就能等比例拉伸</strong> , 不再使用,而是通过后面的 CSS 控制</li>
<li><strong>height</strong>: 设置图片显示的高度 , 不再使用,而是通过后面的 CSS 控制</li>
</ul>
</li>
<li><p>图像标签属性注意点：</p>
<ul>
<li>图像标签可以拥有多个属性，必须写在标签名的后面。</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均<strong>以 空格 分开</strong>。</li>
<li>属性采取键值对的格式，即 <strong>key&#x3D;”value”</strong> 的格式，属性 &#x3D;“属性值”。</li>
<li>img 标签添加的图片默认不是占一整行空间</li>
<li>如果想让图片等比拉伸, 只写高度或者宽度其中一个属性即可</li>
</ul>
</li>
</ul>
<h3 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h3><ul>
<li>在 HTML 标签中，a 标签用于定义<strong>超链接</strong>，<strong>作用是从一个页面链接到另一个页面</strong>。</li>
</ul>
<h4 id="超链接语法格式"><a href="#超链接语法格式" class="headerlink" title="超链接语法格式"></a>超链接语法格式</h4><ul>
<li>单词 anchor [ˈæŋkə(r)] 的缩写，意为：<strong>锚</strong>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部链接  外部链接要写 http:// --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内部链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 空链接,不跳转页面,会跳回到网页顶部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 空链接,不跳转页面,不会跳回到网页顶部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- img链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.taobao.com&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./taobao.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;淘宝&quot;</span> <span class="attr">title</span>=<span class="string">&quot;淘宝&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>a 标签的属性:</p>
<ul>
<li><strong>href</strong> (hypertext reference): <strong>指定跳转的目标地址</strong> , 也可以是一个本地地址</li>
<li><strong>target</strong> : 告诉浏览器是否保留原始界面,<ul>
<li><code>_blank</code>保留原页面,在新页面打开</li>
<li><code> _self</code>不保留原页面,在当前页面打开(默认)</li>
<li><code>_top</code> : 不保留原页面,在当前页面打开</li>
</ul>
</li>
<li><strong>title</strong> : <strong>悬停文本</strong>(介绍这个链接, 只有在鼠标移动到超链接上时才会显示)</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a9a635fcdaf44f91a38da5ae275a0126" alt="image-20220125143031583"></p>
<h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><ul>
<li>例如<code> &lt;a href=&quot;http://www.baidu.com&quot;&gt; 百度&lt;/a &gt;</code>。跳转到外部链接</li>
<li>例如 <code>&lt;a href=&quot;mailto:12345@qq.com&quot;&gt;发邮件到12345邮箱&lt;/a&gt;</code> . 给指定邮箱发邮件</li>
</ul>
<h4 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h4><ul>
<li>网站内部页面之间的相互链接. 直接在 href 属性中写内部页面的路径即可，例如 <code>&lt;a href=&quot;./index.html&quot;&gt;首页&lt;/a&gt;</code>。</li>
</ul>
<h4 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h4><ul>
<li>在很多网站我们会发现图片也是可以点击进行跳转的<ul>
<li>img 元素跟 a 元素一起使用，可以实现图片链接；</li>
</ul>
</li>
<li>实现思路：<ul>
<li>a 元素中不存放文字，而是存放一个 img 元素；</li>
<li>也就是 img 元素是 a 元素的内容；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xiaomi.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./xiaomi14.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;444&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="空链接"><a href="#空链接" class="headerlink" title="空链接"></a>空链接</h4><ul>
<li><p>本质是跳转到当前页面)</p>
</li>
<li><p>存在的意义: 在企业开发前期,其它界面都没有写出来，那么我们就不知道应该跳转到什么地方，所以就只能使用假链接来代替.当项目后期其它界面都已经完成时再将假链接替换为真链接</p>
</li>
<li><p>格式<code>&lt;a href=&quot;#&quot;&gt;江哥博客&lt;/a&gt; </code></p>
</li>
<li><p>格式<code>&lt;a href=&quot;javascript:;&quot;&gt;江哥博客&lt;/a&gt;</code></p>
</li>
<li><p>两者的区别:</p>
<ul>
<li><code>#</code> 会回到网页的顶部</li>
<li><code>javascript:;</code> 不会回到网页的顶部</li>
</ul>
</li>
</ul>
<h4 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h4><ul>
<li><p>用于跳转到当前页面的指定位置**(锚链接)**</p>
<ul>
<li>格式 <code>&lt;a href=&quot;#location&quot;&gt;跳转到指定位置&lt;/a&gt;  </code></li>
</ul>
</li>
<li><p>在页面的指定位置给任意标签添加一个 id 属性</p>
<ul>
<li>例如 <code>&lt;p id=&quot;location&quot;&gt;这个是目标&lt;/p&gt;  </code></li>
</ul>
</li>
<li><p>没有过渡动画</p>
</li>
<li><p>跳转到指定页面的指定位置**(锚链接)**</p>
</li>
<li><p>格式: <code>&lt;a href=&quot;01-锚点链接.html#location&quot;&gt;跳转到指定位置&lt;/a&gt;  </code></p>
</li>
<li><p>只需要在<code>01-锚点链接.html</code>页面添加一个 id 位置即可: <code>&lt;p id=&quot;location&quot;&gt;这个是目标&lt;/p&gt;  </code></p>
</li>
<li><p>下载(极力不推荐使用)</p>
</li>
<li><p>例如 <code>&lt;a href=&quot;girl.zip&quot;&gt;下载福利资源&lt;a/&gt;  </code></p>
</li>
</ul>
<h4 id="base-标签的使用"><a href="#base-标签的使用" class="headerlink" title="base 标签的使用"></a>base 标签的使用</h4><ul>
<li><p>base 标签和 a 标签结合使用</p>
<ul>
<li>如果每个 a 标签都想在新页面中打开,那么逐个设置 a 标签的 target 属性比较麻烦, 这时我们可以使用 base 和 a 标签结合的方式,一次性设置所有 a 标签都在新页面中打开</li>
<li>格式: <code>&lt;base target=&quot;_blank&quot; /&gt;</code></li>
</ul>
</li>
<li><p>注意事项:</p>
<ul>
<li><strong>base 必须嵌套在 head 标签里面</strong></li>
<li>如果标签上指定了 target , base 中也指定了 target ,那么会按照标签上指定的来执行</li>
</ul>
</li>
</ul>
<h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><h4 id="什么需要注释"><a href="#什么需要注释" class="headerlink" title="什么需要注释"></a>什么需要注释</h4><ul>
<li>程序员才懂的冷笑话:<ul>
<li>在我写这段代码的时候, 只有我和上帝知道这段代码是什么意思.</li>
<li>一段时间之后, 只有上帝知道是什么意思了.</li>
</ul>
</li>
<li>为什么会出现这样的情况呢?<ul>
<li>随着学习的深入, 你的一个程序不再是几行代码就可以搞定的了.</li>
<li>可能我们需要写出有上千行, 甚至上万行的程序.</li>
<li>某些代码完成某个功能后, 你写的时候思路很清晰, 但是过段时间会出现忘记为什么这样写的情况, 这很正常.</li>
</ul>
</li>
<li>和同时协同开发<ul>
<li>在实际工作中, 一个项目通常是多人协作完成的. 可能是几个或者十几个等等.</li>
<li>这个时候, 你可能需要使用别人写出的代码功能, 别人也可能使用你的代码功能.</li>
<li>p 如果你的代码自己都看不懂了, 更何况你的同事呢?</li>
</ul>
</li>
</ul>
<h4 id="什么是注释"><a href="#什么是注释" class="headerlink" title="什么是注释"></a>什么是注释</h4><ul>
<li><p>简单来说，注释就是一段代码说明</p>
</li>
<li><p><code>&lt;!-- 注释内容 --&gt;</code></p>
</li>
<li><p>注释是只给开发者看的，浏览器并不会把注释显示给用户看</p>
</li>
<li><p>如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p>
</li>
<li><p>HTML 中的注释以<code>&lt;!--</code>开头，以 <code>--&gt;</code>结束。</p>
</li>
<li><p>一句话: 注释标签里面的内容是给程序猿看的, 这个代码是不执行,不显示到页面中的.</p>
</li>
</ul>
<h4 id="注释的意义"><a href="#注释的意义" class="headerlink" title="注释的意义:"></a>注释的意义:</h4><ul>
<li><strong>添加注释是为了更好地解释代码的功能，便于相关开发人员理解和阅读代码，程序是不会执行注释内容的。</strong></li>
<li>帮助我们自己理清代码的思路, 方便以后进行查阅.</li>
<li>与别人合作开发时, 添加注释, 可以减少沟通成本.(同事之间分模块开发)</li>
<li>开发自己的框架时, 加入适当的注释, 方便别人使用和学习.(开源精神)</li>
<li>可以临时注释掉一段代码, 方便调试.</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/f7d00ca2c69c48ef9095b75c7fdb8d3e" alt="image-20220125143927369"></p>
<h3 id="HTML-实体标签"><a href="#HTML-实体标签" class="headerlink" title="HTML 实体标签"></a>HTML 实体标签</h3><ul>
<li><p>我们想在页面上输出<code>&lt;h1&gt;</code>这些字符，但是 HTML 认为这是一个标签, 所以如果需要输出一些特殊的字符需要通过字符实体来实现</p>
</li>
<li><p>HTML 实体是一段以连字号（<code>&amp;</code>）开头、以分号（<code>;</code>）结尾的文本（字符串）：</p>
</li>
<li><p>实体常常用于显示保留字符（这些字符会被解析为 HTML 代码）和不可见的字符（如“不换行空格”）；</p>
</li>
<li><p>你也可以用实体来代替其他难以用标准键盘键入的字符；</p>
<ul>
<li><code>&amp;lt;</code>是英语 less than 小于的意思, 可以在页面上输出一个小于符号<code>&quot;&lt;&quot;</code></li>
<li><code>&amp;gt;</code>是英语 greater than 大于的意思, 可以在页面上输出一个大于符号<code>&quot;&gt;&quot;</code></li>
<li>html 中对空格，缩进，换行不敏感，如果同时出现多个空格缩进或者执行，页面只会把它们当作一个空格来解析。<ul>
<li>所以想要在 html 中输出空格必须使用<code>&amp;nbsp;</code>来实现, 一个<code>&amp;nbsp;</code>就代表一个空格</li>
<li>html 对中文空格敏感, 也就是说可以显示中文空格, 但是不推荐这样使用</li>
<li><code>&amp;nbsp;</code>是英语 non-breaking spacing, 翻译为 不打断 &#x2F; 空格 的意思</li>
</ul>
</li>
<li>在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</li>
<li>常见的字符实体 :</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/ecc185c5ab1c4ba381445989a5ce53ee" alt="1670210216510"></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>1 <span class="symbol">&amp;lt;</span> 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  1 &lt; 2  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="其他不常用标签"><a href="#其他不常用标签" class="headerlink" title="其他不常用标签"></a>其他不常用标签</h3><ul>
<li><p>由于 HTML 现在只负责语义而不负责样式.但是 HTML 一开始有一部分标签连样式也包揽了, 所以这部分标签都被废弃了</p>
</li>
<li><p><strong>b、u、i、s</strong></p>
</li>
<li><p>以上标签自己带有样式, 有浓厚的样式作用, 今后一般都只作为 CSS 钩子使用</p>
</li>
<li><p>原则: 不到万不得已,切记不要使用如上标签. 大家可以到 BAT 的网站查看源代码, 几乎看不到以上标签</p>
<ul>
<li>b(Bold)作用: <strong>将文本字体加粗</strong><ul>
<li>格式:<code>&lt;b&gt;将文本字体加粗&lt;/b&gt;</code></li>
</ul>
</li>
<li>u(Underlined)作用: <strong>为文本添加下划线</strong><ul>
<li>格式:<code>&lt;u&gt;为文本添加下划线&lt;/u&gt;</code></li>
</ul>
</li>
<li>i(Italic)作用: <strong>显示斜体文本效果,多用于字体图标</strong><ul>
<li>格式:<code>&lt;i&gt;显示斜体文本效果&lt;/i&gt;</code></li>
</ul>
</li>
<li>s(Strikethrough)作用: <strong>为文本添加删除线</strong><ul>
<li>格式:<code>&lt;s&gt;为文本添加删除线&lt;/s&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>为了弥补 b、u、i、s 标签的不足, W3C 又推出了一组新的标签, 这些标签在显示上看似和 b u i s 标签没什么区别, <strong>但是在语义上却有重大区别</strong></p>
<ul>
<li>strong 作用: <strong>着重内容</strong><ul>
<li>格式:<code>&lt;strong&gt;着重内容&lt;/strong&gt;</code></li>
</ul>
</li>
<li>ins(Inserted)作用: <strong>新插入的文本</strong><ul>
<li>格式:<code>&lt;ins&gt;新插入的文本&lt;ins&gt;</code></li>
</ul>
</li>
<li>em(Emphasized)作用:<strong>强调内容</strong><ul>
<li>格式:<code>&lt;em&gt;强调内容&lt;em&gt;</code></li>
</ul>
</li>
<li>del(Deleted)作用: <strong>已删除的文本</strong><ul>
<li>格式:<code>&lt;del&gt;已删除的文本&lt;/del&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="路径-1"><a href="#路径-1" class="headerlink" title="路径"></a>路径</h3><ul>
<li><p>页面中的图片会非常多， 通常我们会新建一个文件夹来存放这些图像文件（images），这时再查找图像，就需要采用“路径”的方式来指定图像文件的位置。</p>
</li>
<li><p>路径可以分为：</p>
<ul>
<li><strong>相对路径</strong></li>
<li><strong>绝对路径</strong></li>
</ul>
</li>
</ul>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><ul>
<li>相对路径：<strong>以引用文件所在位置为参考基础，而建立出的目录路径</strong>。</li>
<li>这里简单来说，图片相对于 HTML 页面的位置</li>
<li>相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。<ul>
<li>对于网页来说，不管什么操作系统（Windows、Mac、Linux），路径分隔符都是 <code>/</code>，而不是<code> \</code></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/3fb30386c0a5430499ce9262afd22e32" alt="image-20220125142827136"></p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><ul>
<li><p>绝对路径：<strong>是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径</strong>。</p>
</li>
<li><p>例如，<code>D:\web\img\logo.gif</code> 或 完整的网络地址 <code>http://www.itcast.cn/./images/logo.gif</code>。</p>
</li>
</ul>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><h3 id="表格的主要作用"><a href="#表格的主要作用" class="headerlink" title="表格的主要作用"></a>表格的主要作用</h3><ul>
<li><p><strong>表格主要用于显示、展示数据</strong>，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。</p>
</li>
<li><p>一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p>
</li>
<li><p>Pink 老师总结: <strong>表格不是用来布局页面的,而是用来展示数据的.</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/7ceb91198406493086cbc8d630781052" alt="image-20220125144508564"></p>
<h3 id="table-表格的基本语法"><a href="#table-表格的基本语法" class="headerlink" title="table 表格的基本语法"></a>table 表格的基本语法</h3><ul>
<li><p>table 是用于定义表格的标签。</p>
</li>
<li><p>tr 标签用于定义表格中的行，必须嵌套在 table 标签中。</p>
</li>
<li><p>td 用于定义表格中的单元格，必须嵌套在 tr 标签中。</p>
<ul>
<li>td 指表格数据（table data），即数据单元格的内容。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>苏摹<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>白璎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/19/c36269e8e97c4fd6985e79ecdcfc6e43" alt="image-20220125145322577"></p>
<h3 id="表格的属性"><a href="#表格的属性" class="headerlink" title="表格的属性"></a>表格的属性</h3><p><img src="https://s1.vika.cn/space/2023/02/19/55584cda94db49f08620bcb55ea0dce1" alt="image-20220125145601613"></p>
<ul>
<li><p><strong>border</strong>: 默认情况下表格的边框宽度为 0 看不到, 通过 border 属性给表格指定边框宽度</p>
</li>
<li><p><strong>width</strong>: 默认情况下表格的宽度是由内容自动计算出来的, 可以通过 width 属性指定表格的宽度,可以给 table 标签和 td 标签使用</p>
</li>
<li><p><strong>height</strong>: 默认情况下表格的高度是由内容自动计算出来的, 可以通过 height 属性指定表格的高度,可以给 table 标签和 td 标签使用</p>
<ul>
<li>如果给 td 标签设置 widht&#x2F;height 属性，会修改当前单元格的宽度和高度，不会影响整个表格的宽度和高度</li>
</ul>
</li>
<li><p><strong>cellspacing</strong>: 外边距. 默认情况下单元格之间有 2 个像素的间隙, 可以通过 cellpadding 指定表格之间的间隙,只能给 table 标签使用</p>
</li>
<li><p><strong>cellpadding</strong>: 内边距. 默认情况下单元格边缘距离内容有 1 个像素的内边距, 可以通过 cellpadding 属性指定单元格边缘和内容之间的内边距,只能给 table 标签使用</p>
</li>
<li><p><strong>align</strong>: 规定表格相对周围元素的水平对齐方式, 它的取值有<code>center、left、right</code>, 水平对齐可以给 table 标签和 tr 标签和 td 标签使用</p>
<ul>
<li>给 table 设置 align 属性, 是让表格在<code>浏览器</code>中 居左&#x2F;居右&#x2F;居中</li>
<li>给 tr 设置 align 属性, 是让当前行中<code>所有内容</code>居左&#x2F;居右&#x2F;居中</li>
<li>给 td 设置 align 属性,是让当前单元格中<code>所有内容</code>居左&#x2F;居右&#x2F;居中</li>
<li>该属性仅仅作为了解, 企业开发中用 css 代替, 因为 HTML 仅仅用于说明语义</li>
<li>如果 td 中设置了 align 属性, tr 中也设置了 align 属性, 那么单元格中的内容会按照 td 中设置的来对齐</li>
</ul>
</li>
<li><p><strong>valign</strong>: 规定表格相对周围元素的垂直对齐方式, 它的取值有 <code>top/middle/bottom</code> , 垂直对齐只能给 tr 标签和 td 标签使用</p>
<ul>
<li>给 table 设置 valign 属性, 无效</li>
<li>给 tr 设置 valign 属性, 是让当前行中<code>所有内容</code>居上&#x2F;居中&#x2F;居下</li>
<li>给 td 设置 valign 属性,是让当前单元格中<code>所有内容</code>居上&#x2F;居中&#x2F;居下</li>
<li>如果 td 中设置了 valign 属性, tr 中也设置了 valign 属性, 那么单元格中的内容会按照 td 中设置的来对齐</li>
</ul>
</li>
<li><p><strong>bgcolor</strong>:规定表格的背景颜色</p>
<ul>
<li>给 table 设置 bgcolor 属性, 是给整个表格设置背景颜色</li>
<li>给 tr 设置 bgcolor 属性, 是给当前行设置背景颜色</li>
<li>给 td 设置 bgcolor 属性, 是给当前单元格设置背景颜色</li>
<li>该属性仅仅作为了解, 企业开发中用 css 代替, 因为 HTML 仅仅用于说明语义</li>
</ul>
</li>
</ul>
<h3 id="th-表头单元格"><a href="#th-表头单元格" class="headerlink" title="th 表头单元格"></a>th 表头单元格</h3><ul>
<li><p>一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.</p>
</li>
<li><p>th 标签<strong>表示 HTML 表格的表头部分</strong>(table head 的缩写)</p>
</li>
</ul>
<h3 id="小说排行榜案例"><a href="#小说排行榜案例" class="headerlink" title="小说排行榜案例"></a>小说排行榜案例</h3><ul>
<li><p>案例分析:</p>
<ul>
<li><p>01 先制作表格的结构.</p>
<ul>
<li><p>1 第一行里面是 th 表头单元格</p>
</li>
<li><p>2 第二行开始里面是 td 普通单元格</p>
</li>
<li><p>3 单元格里面可以放任何元素,文字,链接,图片等都可以</p>
</li>
</ul>
</li>
<li><p>02 书写表格属性.</p>
<ul>
<li><p>1 用到宽度高度边框 cellpadding 和 cellspacing</p>
</li>
<li><p>2 表格浏览器中对齐 align</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4f3b0bb75f8e476faa233d9f3dba0744" alt="image-20220125145909556"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--...--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h3><ul>
<li>使用场景:因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 <strong>表格头部和表格主体两大部分.</strong></li>
<li>在表格标签中，分别用：<strong>thead 标签表示表格的头部区域、tbody 标签表示表格的主体区域.</strong> 这样可以更好的分清表格结构。<ul>
<li>01 <strong>thead 用于定义表格的头部</strong>。thead 内部必须拥有 tr 标签。 一般是位于第一行。</li>
<li>02 <strong>tbody 用于定义表格的主体，主要用于放数据本体 。</strong></li>
<li>03 <strong>tfoot 用于定义表格的底部</strong></li>
<li>04 以上标签都是放在 table 标签中。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>苏摹<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>白璎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>电视剧:镜双城<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p><img src="https://s1.vika.cn/space/2023/02/19/9a973f4864064b6e895eb07304da3056" alt="image-20220125150348729"></p>
<ul>
<li><p>特殊情况下,可以把多个单元格合并为一个单元格, 这里同学们会最简单的合并单元格即可.</p>
</li>
<li><p>01 合并单元格方式</p>
<ul>
<li>跨行合并：<strong>rowspan&#x3D;”合并单元格的个数”</strong></li>
<li>跨列合并：<strong>colspan&#x3D;”合并单元格的个数”</strong></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/3f847bb322614a0e815c872a59295a60" alt="image-20220125150450192"></p>
<ul>
<li><p>02 目标单元格</p>
<ul>
<li>跨行：最上侧单元格为目标单元格, 写合并代码</li>
<li>跨列：最左侧单元格为目标单元格, 写合并代码</li>
</ul>
</li>
<li><p>03 合并单元格的步骤</p>
<ul>
<li>01 先确定是跨行还是跨列合并。</li>
<li>02 找到目标单元格. 写上合并方式 &#x3D; 合并的单元格数量。比如：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>。</li>
<li>03 删除多余的单元格。</li>
</ul>
</li>
</ul>
<h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><ul>
<li>border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>collapse 单词是合并的意思</p>
</li>
<li><p><strong>border-collapse: collapse; 表示相邻边框合并在一起</strong></p>
</li>
</ul>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul>
<li><p>表格是用来显示数据的，那么<strong>列表就是给一堆数据添加列表语义，也就是告诉搜索引擎,告诉浏览器这一堆数据是一个整体,也可以用来布局。</strong></p>
</li>
<li><p>列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。</p>
</li>
<li><p>根据使用情景不同，列表可以分为三大类：<strong>无序列表、有序列表和自定义列表。</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/94ea74683d314442bdd3f43695aba643" alt="image-20220125150739397"></p>
<h3 id="ul-无序列表"><a href="#ul-无序列表" class="headerlink" title="ul 无序列表"></a>ul 无序列表</h3><ul>
<li>ul 标签表示 HTML 页面中项目的<strong>无序列表</strong>，一般会以项目符号呈现列表项，而列表项使用 li 标签定义。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e772a029d5c44212ac3e8a88d2e4a87f" alt="image-20220125151040931"></p>
<ul>
<li><strong>无序列表的各个列表项之间没有顺序级别之分，是并列的。</strong></li>
<li><strong>ul 标签中只能嵌套 li 标签</strong>，直接在 ul 标签中输入其他标签或者文字的做法是不被允许的。</li>
<li>li 标签相当于一个容器，可以容纳所有任意元素。</li>
<li>无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。</li>
<li>注意点:<ul>
<li><strong>浏览器会给无需列表自动添加先导符号, 一定要记住 ul 标签是用来给一堆数据添加列表语义的,而不是用来给他们添加小圆点的</strong></li>
<li>ul 标签和 li 标签是一个整体，是一个组合.所以一般情况下 ul 标签和 li 标签都是一起出现，都是结合在一起使用, 不会单个出现.也就是说不会单独使用一个 ul 标签或者单独使用一个 li 标签，</li>
<li>由于 ul 和 li 是一个整体, 所以 <strong>ul 里面不推荐包裹其它标签</strong>, 永远记住 ul 里面最好只写 li 标签</li>
<li>虽然 ul 中推荐只能写 li 标签, 但是 li 标签是一个容器标签, li 标签中可以添加任意标签, 甚至可以添加 ul 标签</li>
<li>其实 ul 还有一个 type 属性, 可以修改<code>先导符号</code>的样式, 取值有<code>disc、square、circle</code>几种**(不推荐使用)**</li>
</ul>
</li>
<li>ul 应用场景:<ul>
<li>导航条</li>
<li>商品列表等</li>
<li>新闻列表</li>
</ul>
</li>
</ul>
<h3 id="ol-有序列表"><a href="#ol-有序列表" class="headerlink" title="ol 有序列表"></a>ol 有序列表</h3><ul>
<li><p><strong>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。</strong></p>
</li>
<li><p>在 HTML 标签中，ol 标签用于定义<strong>有序列表</strong>，列表排序以数字来显示，并且使用 li 标签来定义列表项。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/69bfcb8dca9444d0ae6a18d091d5a996" alt="image-20220125151153327"></p>
<ul>
<li>ol 中只能嵌套 li，直接在 ol 标签中输入其他标签或者文字的做法是不被允许的。</li>
<li>li 标签相当于一个容器，可以容纳所有元素。</li>
<li>有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。</li>
<li>ol 应用场景:<ul>
<li>xxx 排行榜</li>
<li>其实 ol 应用场景并不多, 因为能用 ol 做的, 用 ul 都能做</li>
</ul>
</li>
</ul>
<h3 id="dl-定义列表"><a href="#dl-定义列表" class="headerlink" title="dl 定义列表"></a>dl 定义列表</h3><ul>
<li><strong>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/81e7c5ca48e6459187c4309021df4a3d" alt="image-20220125151233337"></p>
<ul>
<li><p>在 HTML 标签中，dl 标签用于定义<strong>描述列表（或定义列表）</strong>，该标签会与 dt（定义项目&#x2F;名字）和 dd（描述每一个项目&#x2F;名字）一起使用。</p>
</li>
<li><p>dl 里面只能包含 dt 和 dd。</p>
</li>
<li><p>dt 和 dd 个数没有限制，经常是一个 dt 对应多个 dd。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/168a6466ffe54484a5dd7fd191b50130" alt="image-20220125151402895"></p>
<ul>
<li><p>dl 应用场景:</p>
<ul>
<li>网站底部相关信息</li>
<li>但凡看到一堆内容都是用于描述某一个内容的时候就要想到 dl</li>
</ul>
</li>
<li><p>注意事项:</p>
<ul>
<li>dl 是一个<code>组标签</code>, 一定是一坨一坨的出现, 也就是说 dt 和 dd 标签不能单独存在, 必须包裹在 dl 里面</li>
<li>由于 dl 和 dt、dd 是一个整体, 所以 dl 里面不推荐包裹其它标签,<strong>推荐一个 dt 对应多个 dd,其他标签嵌套在 dd 中</strong></li>
<li>dd 和 dt 和 li 标签一样是容器标签, 里面可以添加任意标签</li>
<li>定义列表非常灵活, 可以给一个 dt 配置多个 dd, 但是最好不要出现多个 dt 对应一个 dd, dd 的语义是描述离它最近的一个 dt, 所以其它 dt 相当于没有描述, 而定义列表存在的意义就是既可以列出每一个条目又可以对每一个条目进行描述</li>
<li>定义列表非常灵活, 可以将多个 dt+dd 组合拆分为多个 dl</li>
</ul>
</li>
</ul>
<h3 id="列表总结"><a href="#列表总结" class="headerlink" title="列表总结"></a>列表总结</h3><p><img src="https://s1.vika.cn/space/2023/02/19/ac262e54eea949f5ba7f86d3e86121e9" alt="image-20220125151445426"></p>
<ul>
<li><p>学会什么时候用无序列表， 什么时候用自定义列表。</p>
</li>
<li><p>无序列表和自定义列表代码怎么写？</p>
</li>
<li><p>列表布局在学习完 CSS 后再来完成。</p>
</li>
</ul>
<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="表单标签的作用"><a href="#表单标签的作用" class="headerlink" title="表单标签的作用"></a>表单标签的作用</h3><ul>
<li><p>使用<strong>表单目的是为了收集用户信息</strong>。</p>
</li>
<li><p>在我们网页中，我们也需要跟用户进行交互，收集用户资料，此时就需要表单。</p>
</li>
</ul>
<h3 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h3><ul>
<li>在 HTML 中，<code>一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息 3 个部分构成</code>。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/78410ec2e2154804b3b02443adcc9657" alt="image-20220125151628382"></p>
<h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h3><ul>
<li><p><strong>表单域是一个包含表单元素的区域。</strong></p>
</li>
<li><p>在 HTML 标签中， <strong>form 标签用于定义表单域,用以实现用户信息的收集和传递</strong>。</p>
</li>
<li><p>form 会把它范围内的表单元素信息提交给服务器.</p>
</li>
<li><p>基础班来说,我们暂时不用表单域提交数据,只需要写上 form 标签即可. 就业班等学习服务器编程阶段会重新讲解.</p>
</li>
<li><p>这里只需要记住两点:</p>
<ul>
<li>在我们写表单元素之前,应该有个表单域把他们进行包含.</li>
<li>表单域是 form 标签.</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/95ce2cbaf96a44b5aeef77d09e15acdc" alt="image-20220125151733433"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/03d27b99f130411db2d285937371edfb" alt="image-20220125152240262"></p>
<ul>
<li>请求方式的对比 :</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/a3c8fe64a09e4c7eb70b80d7cd5a0fbd" alt="1670252590678"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/048b3e4118b944cbadb0a3e294c382b3" alt="1670252606919"></p>
<h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><ul>
<li>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。</li>
</ul>
<h4 id="input-表单元素"><a href="#input-表单元素" class="headerlink" title="input 表单元素"></a>input 表单元素</h4><ul>
<li><p>在英文单词中，input 是输入的意思，而在表单元素中, <strong>input 标签用于收集用户信息</strong>。</p>
</li>
<li><p>在 input 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>input 标签为单标签</li>
</ul>
<h4 id="input-的-type-属性"><a href="#input-的-type-属性" class="headerlink" title="input 的 type 属性"></a>input 的 type 属性</h4><ul>
<li>通过 type 属性设置不同的属性值用来指定不同的控件类型 :</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/e87a3fbb9ddd4bc98779d44d861791ef"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 文本框 type=&quot;text&quot; --&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 密码框 type=&quot;password&quot; --&gt;</span></span><br><span class="line">  密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单选框 type=&quot;radio&quot; name值相同单选框互斥 label包裹则文字与表单控件关联(写法一) checked=&quot;checked&quot;默认选中--&gt;</span></span><br><span class="line">  姓名:</span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 复选框 type=&quot;checkbox&quot; 虽原本已经互斥,但也要有相同name值 label包裹则文字与表单控件关联(写法二) checked=&quot;checked&quot;默认选中--&gt;</span></span><br><span class="line">  爱好:</span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;happy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;eat&quot;</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;happy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;eat&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;run&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;happy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 按钮 type=&quot;button|submit|reset&quot; 普通按钮|提交按钮|重置按钮 提交和重置要放在form中功能才生效--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 图片提交按钮 type=&quot;image&quot; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/24.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 文件域 type=&quot;file&quot; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="input-的其他属性"><a href="#input-的其他属性" class="headerlink" title="input 的其他属性"></a>input 的其他属性</h4><ul>
<li>除 type 属性外，input 标签还有其他很多属性，其常用属性如下：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/fc818f46fe034f56bece834c8a51e5ae" alt="image-20220125154606654"></p>
<ul>
<li><p>name 和 value 是每个表单元素都有的属性值,主要给后台人员使用.</p>
</li>
<li><p>name 表单元素的名字, 要求 <strong>单选按钮和复选框要有相同的 name 值.</strong></p>
</li>
<li><p>checked 属性主要针对于单选按钮和复选框, 主要作用一打开页面,就要可以<strong>默认选中</strong>某个表单元素.</p>
</li>
<li><p>maxlength 是用户可以在表单元素输入的<strong>最大字符数</strong>, 一般较少使用.</p>
</li>
</ul>
<h4 id="常用的几个功能"><a href="#常用的几个功能" class="headerlink" title="常用的几个功能"></a>常用的几个功能</h4><ul>
<li><ol>
<li>有些表单元素想刚打开页面就默认显示几个文字怎么做?</li>
</ol>
<ul>
<li>答: 可以给这些表单元素设置 value 属性&#x3D;“值”</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>页面中的表单元素很多，如何区别不同的表单元素?</li>
</ol>
<ul>
<li>答: name 属性：当前 input 表单的名字，后台可以通过这个 name 属性找到这个表单。页面中的表单很多，name 的主要作用就是用于区别不同的表单。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>如果页面一打开就让某个单选按钮或者复选框是选中状态?</li>
</ol>
<ul>
<li>答: checked 属性：表示默认选中状态。用于单选按钮和复选按钮。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性 别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>如何让 input 表单元素展示不同的形态? 比如单选按钮或者文本框</li>
</ol>
<ul>
<li>答: type 属性：type 属性可以让 input 表单元素设置不同的形态</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;“请输入用户名”&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h4><ul>
<li><p>label 标签为 input 元素<strong>定义标注（标签）</strong>。</p>
</li>
<li><p>label 标签用于绑定一个表单元素, 当点击 label 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>核心： <strong>label 标签的 for 属性值要与相关元素的 id 属性值相同。</strong></p>
</li>
<li><p>该功能的另一种写法:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单选框 type=&quot;radio&quot; name值相同单选框互斥 文字与表单控件关联 checked=&quot;checked&quot;默认选中--&gt;</span></span><br><span class="line">姓名:</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--给多选框添加绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;basketball&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;basketball&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="select-下拉框"><a href="#select-下拉框" class="headerlink" title="select 下拉框"></a>select 下拉框</h4><ul>
<li>使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用 select 标签控件定义<strong>下拉列表</strong>。</li>
<li><strong>select 中至少包含一对 option</strong> 。</li>
<li><strong>在 option 中定义 selected &#x3D;“ selected “ 时，当前项即为默认选中项。</strong></li>
<li>◼ select 常用属性<ul>
<li> <strong>multiple</strong>：可以多选</li>
<li> <strong>size</strong>：显示多少项</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- selet下拉框 selected=&quot;selected&quot;默认选中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;桂林&quot;</span>&gt;</span>桂林<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;柳州&quot;</span>&gt;</span>柳州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北海&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>北海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;贺州&quot;</span>&gt;</span>贺州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;梧州&quot;</span>&gt;</span>梧州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对下拉列表进行分组</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;北京&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>通州区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;广州&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>天河区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>越秀区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>黄浦区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="textarea-文本域"><a href="#textarea-文本域" class="headerlink" title="textarea 文本域"></a>textarea 文本域</h4><ul>
<li><p>使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 textarea 标签。</p>
</li>
<li><p>在表单元素中，textarea 标签是用于<strong>定义多行文本输入</strong>的控件。</p>
</li>
<li><p>使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。</p>
<ul>
<li><p>通过 textarea 标签可以轻松地创建多行文本输入框。</p>
</li>
<li><p>cols&#x3D;“每行中的字符数” ，rows&#x3D;“显示的行数”，我们在实际开发中不会使用，都是用 CSS 来改变大小。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">	文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>◼ 缩放的 CSS 设置</p>
<ul>
<li> 禁止缩放：resize: none;</li>
<li> 水平缩放：resize: horizontal;</li>
<li> 垂直缩放：resize: vertical;</li>
<li> 水平垂直缩放：resize: both;</li>
</ul>
</li>
<li><p>禁止文本域拖拽大小</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><ul>
<li>作用: 定义可点击按钮（多数情况下，用于通过配合 JavaScript 启动脚本）</li>
<li><code>&lt;input type=&quot;button&quot; value=&quot;我是按钮&quot;/&gt;</code></li>
</ul>
<h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><ul>
<li><p>作用:定义图像形式的提交按钮</p>
</li>
<li><p><code>&lt;input type=&quot;image&quot; src=&quot;./1.jpg&quot;/&gt;</code></p>
</li>
</ul>
<h4 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h4><ul>
<li><p>作用: 定义重置按钮。<strong>重置按钮会清除表单中的所有数据</strong></p>
</li>
<li><p><code>&lt;input type=&quot;reset&quot;/&gt;</code></p>
<p>注意事项:</p>
<ul>
<li>这个按钮不需要写 value 自动就有 “重置” 文字</li>
<li>reset 只对 form 表单中表单项有效果</li>
</ul>
</li>
</ul>
<h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><ul>
<li><p>作用:定义提交按钮。提交按钮会把表单数据发送到 <strong>action 属性指定的地址</strong></p>
</li>
<li><p><code>&lt;input type=&quot;submit&quot;/&gt;</code></p>
</li>
<li><p>注意事项:</p>
<ul>
<li>这个按钮不需要写 value 自动就有 “提交” 文字</li>
<li>要想通过 submit 提交数据到服务器, <strong>被提交的表单项都必须设置 name 属性</strong></li>
<li>默认明文传输 (GET) 不安全, 可以将 method 属性设置为 POST 改为非明文传输(学到 Ajax 再理解)</li>
</ul>
</li>
</ul>
<h4 id="datalist-列表标签"><a href="#datalist-列表标签" class="headerlink" title="datalist 列表标签"></a>datalist 列表标签</h4><ul>
<li>作用: 给输入框绑定待选项</li>
<li>格式:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">datalist</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>待选项内容<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如何给输入框绑定待选列表<ul>
<li>搞一个输入框</li>
<li>搞一个 datalist 列表</li>
<li>给 datalist 列表标签添加一个 id</li>
<li>给输入框添加一个 list 属性,将 datalist 的 id 对应的值赋值给 list 属性即可</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">请输入你的车型: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;cars&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>奔驰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>奥迪<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>路虎<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>宾利<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="表单控件总结"><a href="#表单控件总结" class="headerlink" title="表单控件总结"></a>表单控件总结</h4><ul>
<li><p>01 表单元素我们学习了三大组: <strong>input 输入表单元素 select 下拉表单元素 textarea 文本域表单元素</strong>.</p>
</li>
<li><p>02 这三组表单元素都应该包含在 form 表单域里面,并且有 name 属性.</p>
</li>
<li><p>03 有三个名字非常相似的标签:</p>
<ul>
<li><ol>
<li>表单域 form 使用场景: 提交区域内表单元素给后台服务器</li>
</ol>
</li>
<li><ol start="2">
<li>文件域 file 是 input type 属性值, 使用场景: 上传文件</li>
</ol>
</li>
<li><ol start="3">
<li>文本域 textarea 使用场景: 可以输入多行文字, 比如 留言板 网站介绍等…</li>
</ol>
</li>
</ul>
</li>
<li><p>04 我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/2024/01/04/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/102_HTML5_CSS3/10201_HTML5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 新特性"></a>HTML5 新特性</h2><ul>
<li><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。</p>
</li>
<li><p>这些新特性都有兼容性问题，基本是 IE9+ 以上版本的浏览器才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p>
</li>
<li><p>声明：</p>
<ul>
<li>新特性增加了很多，但是我们专注于开发常用的新特性。</li>
<li>基础班我们讲解部分新特性，到了就业班还会继续讲解其他新特性。</li>
</ul>
</li>
</ul>
<h2 id="H5-新增语义化标签"><a href="#H5-新增语义化标签" class="headerlink" title="H5 新增语义化标签"></a>H5 新增语义化标签</h2><ul>
<li>以前布局，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“header”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“nav”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“content”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;“footer”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>header：头部标签</li>
<li>nav：导航标签</li>
<li>article：内容标签</li>
<li>section：定义文档某个区域</li>
<li>aside：侧边栏标签</li>
<li>footer：尾部标签</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/39f15c8edad84403a317f53dd6eeac5d"></p>
<ul>
<li>注意：<ul>
<li><p>这种语义化标准主要是针对搜索引擎的</p>
</li>
<li><p>这些新标签,在页面中可以使用多次</p>
</li>
<li><p>在 IE9 中，需要把这些元素转换为块级元素</p>
</li>
<li><p>其实，我们移动端更喜欢使用这些标签</p>
</li>
<li><p>HTML5 还增加了很多其他标签，我们后面再慢慢学</p>
</li>
</ul>
</li>
</ul>
<h2 id="H5-新增多媒体标签"><a href="#H5-新增多媒体标签" class="headerlink" title="H5 新增多媒体标签"></a>H5 新增多媒体标签</h2><p><img src="https://s1.vika.cn/space/2023/02/26/0644c80c07bc458faad057d3281fd733"></p>
<h3 id="视频标签-video"><a href="#视频标签-video" class="headerlink" title="视频标签 video"></a>视频标签 video</h3><h4 id="支持的视频格式"><a href="#支持的视频格式" class="headerlink" title="支持的视频格式"></a>支持的视频格式</h4><ul>
<li>当前 video 元素支持三种视频格式： 尽量使用 .mp4 格式</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/bb8eea8de5f14790a1d3de0185f2894c" alt="image-20220126211655457"></p>
<h4 id="video标签的写法"><a href="#video标签的写法" class="headerlink" title="video标签的写法"></a>video标签的写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件地址&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">  您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span>标签播放视频<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>第二种格式存在的意义</p>
<ul>
<li>由于视频数据非常非常的重要, 所以五大浏览器厂商都不愿意支持别人的视频格式, 所以导致了没有一种视频格式是所有浏览器都支持的, 这个时候 W3C 为了解决这个问题, 所以推出了第二个 video 标签的格式</li>
<li>video 标签的第二种格式存在的意义就是为了解决浏览器适配问题. video 元素支持三种视频格式, 我们可以把这三种格式都通过 source 标签指定给 video 标签, 那么以后当浏览器播放视频时它就会从这三种中选择一种自己支持的格式来播放</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li>当前通过 video 标签的第二种格式虽然能够指定所有浏览器都支持的视频格式, 但是想让所有浏览器都通过 video 标签播放视频还有一个前提条件, 就是浏览器必须支持 HTML5标签, 否则同样无法播放</li>
<li>在过去的一些浏览器是不支持 HTML5 标签的, 所以为了让过去的一些浏览器也能够通过 video 标签来播放视频, 那么我们以后可以通过一个 JS 的框架叫做 <strong>html5media</strong> 来实现</li>
</ul>
</li>
</ul>
<h4 id="video标签的属性"><a href="#video标签的属性" class="headerlink" title="video标签的属性"></a>video标签的属性</h4><ul>
<li><strong>src</strong>: 告诉 video 标签需要播放的视频地址 <code>src=&quot;./1.mp4&quot;</code></li>
<li><strong>autoplay</strong>: 告诉 video 标签是否需要自动播放视频,默认不自动播放  <code>autoplay=&quot;autoplay&quot;</code></li>
<li><strong>controls</strong>: 告诉 video 标签是否需要显示控制条 <code>controls=&quot;controls&quot;</code></li>
<li><strong>poster</strong>: 告诉 video 标签视频没有播放之前显示的占位图片 <code>poster=&quot;./1.jpg&quot;</code></li>
<li><strong>loop</strong>: 告诉 video 标签循环播放视频. 一般用于做广告视频 <code>loop=&quot;loop&quot;</code></li>
<li><strong>preload</strong>: 告诉 video 标签预加载视频, 但是如果设置了 autoplay 属性, 那么 preload 属性就会失效</li>
<li><strong>muted</strong>:告诉 video 标签视频静音 <code>muted=&quot;muted&quot;</code></li>
<li><strong>width&#x2F;height</strong>: 和 img 标签中的一模一样</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/cdbf4c3a5eef48daa1a2c1d777d2fce0"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">poster</span>=<span class="string">&quot;./img/002.jpg&quot;</span> <span class="attr">loop</span> <span class="attr">muted</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/001.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签 audio"></a>音频标签 audio</h3><h4 id="支持的音频格式"><a href="#支持的音频格式" class="headerlink" title="支持的音频格式"></a>支持的音频格式</h4><ul>
<li>当前 audio 元素支持三种音频格式：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b6eef4860d5a4e848c0155bcff34ee80" alt="image-20220126212438882"></p>
<h4 id="audio标签的写法"><a href="#audio标签的写法" class="headerlink" title="audio标签的写法"></a>audio标签的写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件地址&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; audio controls=&quot;controls&quot; &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span> /&gt;</span></span><br><span class="line">  您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span>标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="audio标签常见属性"><a href="#audio标签常见属性" class="headerlink" title="audio标签常见属性"></a>audio标签常见属性</h4><ul>
<li>audio 标签常见属性:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/2a6cfae9a1ad4a63a646213b029d5075" alt="image-20220126212557296"></p>
<ul>
<li><strong>谷歌浏览器把音频和视频自动播放禁止了</strong></li>
<li>注意点: <ul>
<li>audio 标签的使用和 video 标签的使用基本一样, video 中能够使用的属性在 audio 标签中大部分都能够使用, 并且功能都一样. </li>
<li>不过有3个属性不能用, height &#x2F; width &#x2F; poster</li>
</ul>
</li>
</ul>
<h3 id="多媒体标签总结"><a href="#多媒体标签总结" class="headerlink" title="多媒体标签总结"></a>多媒体标签总结</h3><ul>
<li><p>音频标签和视频标签使用方式基本一致</p>
</li>
<li><p>浏览器支持情况不同</p>
</li>
<li><p>谷歌浏览器把音频和视频自动播放禁止了</p>
</li>
<li><p>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过 JavaScript 解决）</p>
</li>
<li><p>视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</p>
</li>
</ul>
<h2 id="H5-新增的-input-类型"><a href="#H5-新增的-input-类型" class="headerlink" title="H5 新增的 input 类型"></a>H5 新增的 input 类型</h2><p><img src="https://s1.vika.cn/space/2023/02/26/c40ff3bfa1524d6e90b4353f95ddc9f0" alt="image-20220126212900102"></p>
<h3 id="邮箱验证"><a href="#邮箱验证" class="headerlink" title="邮箱验证"></a>邮箱验证</h3><ul>
<li>可以自动校验输入的内容是否符合邮箱的格式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="URL地址校验"><a href="#URL地址校验" class="headerlink" title="URL地址校验"></a>URL地址校验</h3><ul>
<li>可以自动校验输入的内容是否是 URL 地址</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">域名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="输入框中只能输入数字"><a href="#输入框中只能输入数字" class="headerlink" title="输入框中只能输入数字"></a>输入框中只能输入数字</h3><ul>
<li>限制输入框只能输入数字</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML5 中 input 类型增加了很多 type 类型, 例如 color、date 但是都不兼容, 后面讲到浏览器兼容时会重点讲解</li>
</ul>
<h3 id="取色器"><a href="#取色器" class="headerlink" title="取色器"></a>取色器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML5 中 inpu t类型增加了很多 type 类型, 例如 color、date 但是都不兼容, 后面讲到浏览器兼容时会重点讲解</li>
</ul>
<h2 id="H5-新增的表单属性"><a href="#H5-新增的表单属性" class="headerlink" title="H5 新增的表单属性"></a>H5 新增的表单属性</h2><p><img src="https://s1.vika.cn/space/2023/02/26/51bc77823640472295bbd1b38e81eeea" alt="image-20220126213015011"></p>
<ul>
<li>可以通过以下设置方式修改 placeholder 里面的字体颜色：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/2024/01/05/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/102_HTML5_CSS3/10202_CSS3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="CSS3-的现状"><a href="#CSS3-的现状" class="headerlink" title="CSS3 的现状"></a>CSS3 的现状</h2><ul>
<li><p>新增的 CSS3 特性有兼容性问题，ie9+ 才支持</p>
</li>
<li><p>移动端支持优于 PC 端</p>
</li>
<li><p>不断改进中</p>
</li>
<li><p>应用相对广泛</p>
</li>
<li><p>现阶段主要学习：新增选择器和盒子模型以及其他特性</p>
</li>
</ul>
<h3 id="CSS3-盒子模型"><a href="#CSS3-盒子模型" class="headerlink" title="CSS3 盒子模型"></a>CSS3 盒子模型</h3><ul>
<li><p><strong>CSS3 中可以通过 box-sizing 来指定盒模型，有 2 个值：即可指定为 content-box、border-box</strong>，这样我们计算盒子大小的方式就发生了改变。</p>
</li>
<li><p>可以分成两种情况：</p>
<ul>
<li>**box-sizing : content-box; ** : 盒子大小为 width &#x2F; height + padding + border （以前默认的）</li>
<li><strong>box-sizing : border-box;</strong> : 盒子大小为 width &#x2F; height</li>
</ul>
</li>
<li><p><strong>如果盒子模型我们改为了 box-sizing: border-box ， 那 padding 和 border 就不会撑大盒子了（前提 padding 和 border 不会超过 width 宽度）</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--增加padding / border 之后元素宽高会变大--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--增加padding/border之后元素宽不会变大--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS3-滤镜-filter"><a href="#CSS3-滤镜-filter" class="headerlink" title="CSS3 滤镜 filter"></a>CSS3 滤镜 filter</h3><ul>
<li>filter CSS 属性<strong>将模糊或颜色偏移等图形效果应用于元素。</strong></li>
<li>blur 函数: 模糊处理,数值越大越模糊</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/95ebd456162a45cbbff7d17a0d523b76" alt="image-20220126220324724"></p>
<h3 id="CSS3-calc-函数"><a href="#CSS3-calc-函数" class="headerlink" title="CSS3 calc 函数"></a>CSS3 calc 函数</h3><ul>
<li>calc() 此 CSS 函数让你在声明 CSS 属性值时执行一些计算。</li>
<li>括号里面可以使用<code>+ - \* /</code>来进行计算。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br></pre></td></tr></table></figure>

<h2 id="CSS-3-圆角边框与阴影"><a href="#CSS-3-圆角边框与阴影" class="headerlink" title="CSS 3 圆角边框与阴影"></a>CSS 3 圆角边框与阴影</h2><h3 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h3><ul>
<li>01 什么是边框圆角<ul>
<li>在 CSS3 中，新增了圆角边框样式，将直角的边框变为圆角的边框,这样我们的盒子就可以变圆角了。</li>
<li><strong>border-radius 属性用于设置元素的外边框圆角。</strong></li>
<li>参数值可以为 像素值 或 百分比 的形式</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: length;</span><br></pre></td></tr></table></figure>

<ul>
<li>02 边框的格式<ul>
<li>该属性是一个简写属性，可以跟四个值，分别代表<strong>左上角、右上角、右下角、左下角</strong></li>
<li>分开写：<strong>border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和 border-bottom-left-radius</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>; <span class="comment">/*左上 右上 右下 左下*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>; <span class="comment">/*左上 右上左下 右下*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">50px</span>; <span class="comment">/*左上右下 右上左下*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100px</span>; <span class="comment">/*左上 右下 右上 左下*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当边框圆角的值 &gt; 边框宽度的时候，外边框和内边框都会变成圆角</span></span><br><span class="line"><span class="comment">	 当边框圆角的值 &lt;= 外边宽度的时候，外边框是圆角，内边框是直角 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>03 将正方形变为圆形的技巧<ul>
<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>04 系统如何绘制圆角<ul>
<li>首先根据指定的值找到圆心</li>
<li>按照指定的值作为半径绘制圆弧</li>
</ul>
</li>
<li>05 绘制半圆</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="comment">/*绘制半圆*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>06 绘制椭圆</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="comment">/*绘制椭圆*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>07 兼容性 :<ul>
<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用.</li>
</ul>
</li>
</ul>
<p>圆角边框案例:</p>
<p><img src="https://s1.vika.cn/space/2023/02/26/dc75652423ca4bd79aa7324a711739ce"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">background</span>:red;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;新人福利&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul>
<li>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/808ede7781e84cc4b0dd82cf3cfcf2a7" alt="image-20220126142335889"></p>
<ul>
<li>注意:<ul>
<li>01 默认的是外阴影 ( outset ), 但是不可以写这个单词,否则造成阴影无效</li>
<li>02 盒子阴影不占用空间，不会影响其他盒子排列。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span> <span class="number">#ccc</span>;</span><br></pre></td></tr></table></figure>

<h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><ul>
<li><strong>text-shadow:水平偏移 垂直偏移 模糊度 阴影颜色</strong></li>
<li>不写文字阴影颜色,则颜色默认和文字颜色一样</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*水平偏移 垂直偏移 模糊度 阴影颜色*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image-source</span>: <span class="built_in">ur1</span>(<span class="string">&#x27;images/border.jpg&#x27;</span>); <span class="comment">/* 告诉浏览器让哪一张图片成为边框 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果只通过 source 指定了哪一张图片作为边框的图片，默认情况下会将图片放到边框的四个顶点</li>
<li>如果设置了边框图片，那么就不会显示边框颜色，边框图片的优先级高于边框颜色</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image-slice</span>: <span class="number">70</span> <span class="number">70</span> <span class="number">70</span> <span class="number">70</span>; <span class="comment">/* 告诉浏览器如何对指定的边框图片进行切割 */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image-width</span>: <span class="number">10px</span>; <span class="comment">/* 告诉浏览器边框图片显示的宽度，并不是指定边框的宽度 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:如果通过 border-image-width 指定了边框图片的宽度，那么默认的边框宽度就会失效</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 告诉浏览器除了边框图片四个角以外的图片如何填充，默认是拉伸 */</span></span><br><span class="line"><span class="attribute">border-image-repeat</span>: stretch; <span class="comment">/*默认*/</span></span><br><span class="line"><span class="attribute">border-image-repeat</span>: repeat;</span><br><span class="line"><span class="attribute">border-image-repeat</span>: round;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 告诉浏览器边框图片需要向外移动多少 */</span></span><br><span class="line"><span class="attribute">border-image-outset</span>: <span class="number">10px</span> <span class="number">30px</span> <span class="number">50px</span> <span class="number">70px</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 边框图片的连写 */</span></span><br><span class="line"><span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/border.jpg&#x27;</span>) <span class="number">70</span> fill repeat;</span><br></pre></td></tr></table></figure>

<h2 id="CSS-3-渐变"><a href="#CSS-3-渐变" class="headerlink" title="CSS 3 渐变"></a>CSS 3 渐变</h2><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*默认从上到下渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red,green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从下到上渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to top,red,green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从左到右渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,red,green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从右到左渐变*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to left, red, green);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指定度数渐变 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">70deg</span>, red, green);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>至少需要传递 2 个颜色,至多没有上限</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, green, yellow);</span><br></pre></td></tr></table></figure>

<ul>
<li>默认情况下会自动计算纯色和渐变色的范围，但是我们也可以手动指定</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red <span class="number">50px</span>, green);</span><br></pre></td></tr></table></figure>

<h3 id="镜像渐变"><a href="#镜像渐变" class="headerlink" title="镜像渐变"></a>镜像渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* 径向渐变:默认从中心点向四周扩散 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red, green);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 可以通过 at 关键字的方式修改开始渐变的位置  */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(at <span class="number">50px</span> <span class="number">50px</span>, red, green);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 径向渐变也可以指定扩散的范围 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">50px</span>, red, green);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果需要同时指定扩散的位置和扩散的范围，那么范围必须写到 at 前面 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">100px</span> at <span class="number">50px</span> <span class="number">50px</span>, red, green);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3 新增选择器"></a>CSS3 新增选择器</h2><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul>
<li><p>属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者 id 选择器。</p>
</li>
<li><p>格式:</p>
<ul>
<li><p><strong>[attribute]</strong></p>
</li>
<li><p>作用:<strong>根据指定的属性名称找到对应的标签, 然后设置属性</strong></p>
</li>
<li><p><strong>[attribute&#x3D;value]</strong></p>
</li>
<li><p>作用: 找到有指定属性, 并且属性的取值等于 value 的标签, 然后设置属性</p>
</li>
<li><p>最常见的应用场景, 就是用于区分 input 属性</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d96679165f2c4c4da90805f51c376a83" alt="image-20220126221554352"></p>
<ul>
<li>注意：类选择器、属性选择器、伪类选择器，权重为 10。</li>
<li>属性的取值是以什么开头的<ul>
<li><strong>[attribute|&#x3D;value]</strong> CSS2</li>
<li><strong>[attribute^&#x3D;value]</strong> CSS3</li>
<li>两者之间的区别:<ul>
<li>CSS2 中的只能找到 value 开头,并且 value 是被<code>-</code>和其它内容隔开的</li>
<li>CSS3 中的只要是以 value 开头的都可以找到, 无论有没有被<code>-</code>隔开</li>
</ul>
</li>
</ul>
</li>
<li>属性的取值是以什么结尾的<ul>
<li><strong>[attribute$&#x3D;value]</strong> CSS3</li>
<li>属性的取值是否包含某个特定的值得</li>
<li><strong>[attribute~&#x3D;value]</strong> CSS2</li>
<li><em><em>[attribute</em>&#x3D;value]</em>* CSS3</li>
<li>两者之间的区别:<ul>
<li>CSS2 中的只能找到独立的单词, 也就是包含 value ,并且 value 是被空格隔开的</li>
<li>CSS3 中的只要包含 value 就可以找到, 无论有没有被隔开</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><ul>
<li>结构伪类选择器主要根据文档结构来选择元素，常用于选择父级选择器里面的子元素</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e3b4f558f2be4e638b44e7cbe7a5da51" alt="image-20220126221624514"></p>
<ul>
<li><p>注意：类选择器、属性选择器、伪类选择器，权重为 10。</p>
</li>
<li><p>nth-child（n） 选择某个父元素的一个或多个特定的子元素（重点）</p>
<ul>
<li><p>n 可以是数字，关键字和公式</p>
<ul>
<li><p>n 如果是数字，就是选择第 n 个子元素， 数字从 1 开始…</p>
</li>
<li><p>n 可以是关键字：even 偶数，odd 奇数</p>
</li>
<li><p>n 可以是公式：常见的公式如下 ( 如果 n 是公式，则从 0 开始计算，但是第 0 个元素或者超出了元素的个数会被忽略 )</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/768c9629222847fb9aea52d9ef11fb14" alt="image-20220126221705022"></p>
<ul>
<li><p>nth-child 和 nth-of-type 的区别：</p>
<ul>
<li><p><strong>01 nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第 n 个孩子，然后看看是否和 E 匹配</strong></p>
</li>
<li><p><strong>02 nth-of-type 对父元素里面指定子元素进行排序选择。先去匹配 E ，然后再根据 E 找第 n 个孩子</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="结构伪类选择器总结"><a href="#结构伪类选择器总结" class="headerlink" title="结构伪类选择器总结"></a>结构伪类选择器总结</h3><ul>
<li><p>结构伪类选择器一般用于选择父级里面的第几个孩子</p>
</li>
<li><p>nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第 n 个孩子，然后看看是否和 E 匹配,匹配就会生效,不匹配就不会生效</p>
</li>
<li><p>nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配 E ，然后再根据 E 找第 n 个孩子</p>
</li>
<li><p>关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式</p>
</li>
<li><p>如果是无序列表，我们肯定用 nth-child 更多</p>
</li>
<li><p>类选择器、属性选择器、伪类选择器，权重为 10。</p>
</li>
</ul>
<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul>
<li>伪元素选择器可以帮助我们利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构。</li>
<li>◼ 常用的伪元素有<ul>
<li> :first-line、::first-line : 针对首行文本设置属性</li>
<li> :first-letter、::first-letter : 针对首字母设置属性</li>
<li> :before、**::before**</li>
<li> :after、**::after**</li>
</ul>
</li>
<li>为了区分伪元素和伪类，建议伪元素使用 2 个冒号，比如::first-line</li>
<li>::before 和::after 用来在一个元素的内容之前或之后插入其他内容（可以是文字、图片)<ul>
<li>常通过 content 属性来为一个元素添加修饰性的内容。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a154523d4e214231be1cdfba774bda44" alt="image-20220126221813980"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&#x27;hello ~~&#x27;</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&#x27; 该学习啦~~&#x27;</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>李银河<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>::before 和 ::after 创建一个元素，但是属于行内元素</p>
</li>
<li><p>新创建的这个元素在 DOM 树中是找不到的，所以我们称为伪元素</p>
</li>
<li><p>语法： <strong>element::before { }</strong></p>
</li>
<li><p><strong>before 和 after 必须有 content 属性</strong></p>
</li>
<li><p><strong>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素</strong></p>
</li>
<li><p>伪元素选择器和标签选择器一样，权重为 1</p>
</li>
</ul>
<h3 id="伪元素选择器案例"><a href="#伪元素选择器案例" class="headerlink" title="伪元素选择器案例"></a>伪元素选择器案例</h3><ul>
<li>伪元素选择器使用场景一：<ul>
<li>伪元素字体图标</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c5bf60a1712848d59f0ecd46446d552e"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>伪元素选择器使用场景二：<ul>
<li>仿土豆效果</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面before遮罩层显示出来 */</span></span><br><span class="line"><span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="comment">/* 显示元素 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>伪元素选择器使用场景三：<ul>
<li>伪元素清除浮动</li>
</ul>
</li>
<li>001 额外标签法也称为隔墙法，是 W3C 推荐的做法。<ul>
<li>注意： 要求这个新的空标签必须是块级元素。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/846a244b8df0480a88bc649f640e1066"></p>
<ul>
<li><p>002 伪元素选择器使用场景 3：伪元素清除浮动</p>
</li>
<li><p>后面两种伪元素清除浮动算是第一种额外标签法的一个升级和优化。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/423a41eb0a6f43f5b52f363052b93e73" alt="image-20220126215848472"></p>
<ul>
<li><p>003 伪元素选择器使用场景 3：伪元素清除浮动</p>
</li>
<li><p>后面两种伪元素清除浮动算是第一种额外标签法的一个升级和优化。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/891ebe968cd34d62b9d6844307e4035f" alt="image-20220126215824883"></p>
<h2 id="CSS-3-过渡模块"><a href="#CSS-3-过渡模块" class="headerlink" title="CSS 3 过渡模块"></a>CSS 3 过渡模块</h2><h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><ul>
<li><ol>
<li>过渡三要素</li>
</ol>
<ul>
<li><strong>1.1 必须要有属性发生变化</strong></li>
<li><strong>1.2 必须告诉系统哪个属性需要执行过渡效果</strong></li>
<li><strong>1.3 必须告诉系统过渡效果持续时长</strong></li>
</ul>
</li>
<li><ol start="2">
<li>注意点</li>
</ol>
<ul>
<li><strong>当多个属性需要同时执行过渡效果时用逗号隔开即可</strong></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.2 告诉系统哪个属性需要执行过渡效果*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-property</span>: width, background-color;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.3 告诉系统过渡效果持续的时长*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-duration</span>: <span class="number">3s</span>, <span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.1 变化的属性 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡效果的其他属性"><a href="#过渡效果的其他属性" class="headerlink" title="过渡效果的其他属性"></a>过渡效果的其他属性</h3><ul>
<li><p>告诉系统延迟多少秒之后才开始过渡动画</p>
<ul>
<li><code>transition-delay: 1s;</code></li>
</ul>
</li>
<li><p>告诉系统过渡效果的运动的速度</p>
<ul>
<li><strong>linear:匀速 ease:逐渐减速 ease-in:加速 ease-out:减速 ease-in-out:先加速后减速</strong></li>
<li><code>transition-timing-function: ease-in-out;</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.2 告诉系统哪个属性需要执行过渡效果*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-property</span>: width;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.3 告诉系统过渡效果持续的时长*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-duration</span>: <span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.4 告诉系统延迟多少秒之后才开始过渡动画*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.5 告诉系统过渡动画的运动的速度*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.5 linear:匀速  ease:逐渐减速 ease-in:加速 ease-out:减速 ease-in-out:先加速后减速*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition-timing-function</span>: ease-in-out;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.1 变化的属性*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡效果的简写"><a href="#过渡效果的简写" class="headerlink" title="过渡效果的简写"></a>过渡效果的简写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.2 格式: 过渡属性 过渡时长 运动速度 延迟时间 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.3 和分开写一样，如果想给多个属性添加过渡效果也是用逗号隔开即可*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.4 连写时可以省略后面的两个参数，因为只要编写了前面的两个参数就已经满足了过渡的三要素*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transition: width 2s linear 0.5s,background-color 2s linear 0.5s; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.5 如果多个属性运动的速度/延迟的时间/持续时间都一样,那么可以简写为:*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1.1 变化的属性*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡案例-弹性效果"><a href="#过渡案例-弹性效果" class="headerlink" title="过渡案例_弹性效果"></a>过渡案例_弹性效果</h3><ul>
<li><ol>
<li>编写过渡套路</li>
</ol>
<ul>
<li>1.1 不要管过渡，先编写基本界面</li>
<li>1.2 修改我们认为需要修改的属性</li>
<li>1.3 再回过头去给被修改属性的那个元素添加过渡即可</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/527949b6999546e090d2211736485ffd" alt="1654660945666"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>江<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>哥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>带<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>你<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>狂<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>虐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>H<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过渡案例-手风琴效果"><a href="#过渡案例-手风琴效果" class="headerlink" title="过渡案例_手风琴效果"></a>过渡案例_手风琴效果</h3><p><img src="https://s1.vika.cn/space/2023/02/26/80eeb4d633924ddb8e2b759cdfafd33a" alt="1654660858458"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: width <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 固定图片大小 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">460px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 鼠标移入 ul 时, li 的 width 设置为 100px */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 鼠标移入 li 时, li 的 width 设置为 460px */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">460px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/002.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/003.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/004.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/005.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/006.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2D-转换"><a href="#2D-转换" class="headerlink" title="2D 转换"></a>2D 转换</h2><ul>
<li><p>转换（transform）是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果</p>
</li>
<li><p>转换（transform）可以简单理解为变形移动：translate</p>
</li>
<li><p>旋转：rotate</p>
</li>
<li><p>缩放：scale</p>
</li>
<li><p>2D 转换是改变标签在二维平面上的位置和形状的一种技术，先来学习二维坐标系</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/2fb3a322b9c04f96ac9c0fb1d53e4710" alt="image-20220126222143582"></p>
<h3 id="2D-转换之移动"><a href="#2D-转换之移动" class="headerlink" title="2D 转换之移动"></a>2D 转换之移动</h3><ul>
<li><p>2D 移动是 2D 转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p>
</li>
<li><p>01 语法:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x, y);</span><br><span class="line"><span class="comment">/*或者分开写*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(n);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(n);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* x 就是 x 轴上移动位置 , y 就是 y 轴上移动位置 , 中间用逗号分隔 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>02 重点:</p>
<ul>
<li><strong>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</strong></li>
<li>translate 最大的优点：<strong>保留原来的占位,不会影响到其他元素的位置</strong></li>
<li><strong>translate 中的百分比单位是相对于自身元素的宽高 translate:(50%,50%);</strong></li>
<li>对行内标签没有效果</li>
</ul>
</li>
<li><p>03 让盒子实现水平和垂直居中</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2D-转换之旋转"><a href="#2D-转换之旋转" class="headerlink" title="2D 转换之旋转"></a>2D 转换之旋转</h3><ul>
<li>2D 旋转指的是让元素在 2 维平面内顺时针旋转或者逆时针旋转。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c4834dd8f2ba4e93b321a212ff45b776" alt="image-20220126222519050"></p>
<ul>
<li>01 语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>02 重点:<ul>
<li>rotate 里面跟度数，单位是 deg 比如 rotate(45deg)</li>
</ul>
</li>
<li>角度为正时，顺时针，负时，为逆时针<ul>
<li>默认旋转的中心点是元素的中心点</li>
</ul>
</li>
<li>03 旋转轴向:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid blue;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*默认绕Z轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transform: rotate(45deg); */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕X轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transform: rotateX(45deg); */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕Y轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* transform: rotateY(45deg); */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕Z轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2D-转换案例"><a href="#2D-转换案例" class="headerlink" title="2D 转换案例"></a>2D 转换案例</h3><p><img src="https://s1.vika.cn/space/2023/02/26/ed23ede3b11b400bb335787cb68aabc1" alt="image-20220126222951405"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 旋转箭头 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2D-转换中心点"><a href="#2D-转换中心点" class="headerlink" title="2D 转换中心点"></a>2D 转换中心点</h3><ul>
<li>我们可以设置元素转换的中心点</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: x y; <span class="comment">/* 设置旋转中心点*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意后面的参数 x 和 y 用空格隔开</p>
</li>
<li><p><strong>x y 默认转换的中心点是元素的中心点(50% 50%)</strong></p>
</li>
<li><p>还可以给 x y 设置像素或者方位名词（top bottom left right center）</p>
</li>
</ul>
<h3 id="2D-转换案例-1"><a href="#2D-转换案例-1" class="headerlink" title="2D 转换案例"></a>2D 转换案例</h3><p><img src="https://s1.vika.cn/space/2023/02/26/4570ffd3218940e1821b603caa477bf1"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置旋转中心点*/</span></span><br><span class="line"><span class="attribute">transform-origin</span>: x y;</span><br></pre></td></tr></table></figure>

<h3 id="2D-转换之缩放-scale"><a href="#2D-转换之缩放-scale" class="headerlink" title="2D 转换之缩放 scale"></a>2D 转换之缩放 scale</h3><ul>
<li>缩放，顾名思义，可以<strong>放大和缩小</strong>。只要给元素添加上了这个属性就能控制它放大还是缩小。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意其中的 x 和 y 用逗号分隔</p>
</li>
<li><p><strong>transform:scale(1,1);</strong> ：宽和高都放大一倍，相当于没有放大</p>
</li>
<li><p><strong>transform:scale(2,2);</strong> ：宽和高都放大了 2 倍</p>
</li>
<li><p><strong>transform:scale(2);</strong> ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</p>
</li>
<li><p><strong>transform:scale(0.5,0.5);</strong> ：宽高都缩小 0.5 倍</p>
</li>
<li><p>sacle 缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</p>
</li>
</ul>
<h3 id="2D-缩放案例"><a href="#2D-缩放案例" class="headerlink" title="2D 缩放案例"></a>2D 缩放案例</h3><ul>
<li>分页按钮:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0f58046fdd6143bba90681724333c966"></p>
<h3 id="2D-转换综合写法"><a href="#2D-转换综合写法" class="headerlink" title="2D 转换综合写法"></a>2D 转换综合写法</h3><ul>
<li><strong>01 同时使用多个转换，其格式为：transform: translate() rotate() scale() …等，</strong></li>
<li><strong>02 区分先后循序, 其顺序会影转换的效果。（先旋转会改变坐标轴方向）</strong></li>
<li><strong>03 当我们同时有位移和其他属性的时候，记得要将位移放到最前</strong></li>
</ul>
<h3 id="2D-转换总结"><a href="#2D-转换总结" class="headerlink" title="2D 转换总结"></a>2D 转换总结</h3><ul>
<li><p>转换 transform 我们简单理解就是变形有 2D 和 3D 之分</p>
</li>
<li><p>我们暂且学了三个分别是 位移 旋转 和 缩放</p>
</li>
<li><p>2D 移动 translate(x, y) 最大的优势是不影响其他盒子，<strong>里面参数用百分比%，是相对于自身宽度和高度来计算的</strong></p>
</li>
<li><p>可以分开写比如 translateX(x) 和 translateY(y)</p>
</li>
<li><p>2D 旋转 rotate(度数) 可以实现旋转元素度数的单位是 deg</p>
</li>
<li><p>2D 缩放 sacle(x,y) 里面参数是数字不跟单位, 可以是小数, 最大的优势不影响其他盒子</p>
</li>
<li><p>设置转换中心点 transform-origin : x y; 参数可以百分比、像素 或者是 方位名词</p>
</li>
<li><p>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</p>
</li>
</ul>
<h3 id="2D-透视属性"><a href="#2D-透视属性" class="headerlink" title="2D 透视属性"></a>2D 透视属性</h3><ul>
<li><p>在 2D 平面产生近大远小视觉立体，但是只是效果二维的</p>
<ul>
<li><p>如果想要在网页产生 3D 效果需要透视（理解成 3D 物体投影在 2D 平面内）。</p>
</li>
<li><p>模拟人类的视觉位置，可认为安排一只眼睛去看</p>
</li>
<li><p><strong>透视我们也称为视距</strong>：视距就是人的眼睛到屏幕的距离</p>
</li>
<li><p>距离视觉点越近的在电脑平面成像越大，越远成像越小</p>
</li>
<li><p><strong>透视的单位是像素</strong></p>
</li>
</ul>
</li>
<li><p><strong>透视写在被观察元素的父盒子上面的</strong></p>
</li>
<li><p>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。</p>
<ul>
<li>z：就是 z 轴，物体距离屏幕的距离，z 轴越大（正值）我们看到的物体就越大。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/28c98bc084fc44c2a8a30e913e40297a"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*透视 近大远小 值越小,看到的越大 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*透视属性必须添加到需要呈现近大远小效果的元素的父元素上面*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">perspective</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid blue;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*绕X轴旋转*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2D-透视案例-照片后倒"><a href="#2D-透视案例-照片后倒" class="headerlink" title="2D 透视案例_照片后倒"></a>2D 透视案例_照片后倒</h3><p><img src="https://s1.vika.cn/space/2023/02/26/f7ef1a2ac2e54e16a8ff252fdaab4256" alt="1659518845563"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">perspective</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform-origin</span>: center bottom; <span class="comment">/* 设置旋转的中心线为 x 轴 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: transform <span class="number">1s</span>; <span class="comment">/* 过渡 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>); <span class="comment">/* 绕 x 轴旋转 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2D-转换案例-照片墙"><a href="#2D-转换案例-照片墙" class="headerlink" title="2D 转换案例_照片墙"></a>2D 转换案例_照片墙</h3><p><img src="https://s1.vika.cn/space/2023/02/26/9e506d1ec9cc4665b90d62bc857102dc" alt="1654690831171"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">84px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">0.4s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">20deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">25deg</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">84px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/002.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/003.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/004.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h2><ul>
<li><p>动画（animation）是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p>
</li>
<li><p>相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f2d713fcbbf5451e9c9bd5355108bbb9"></p>
<h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3><ul>
<li>用 keyframes 定义动画（类似定义类选择器）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义动画 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动画序列:</p>
<ul>
<li><p>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</p>
</li>
<li><p>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</p>
</li>
<li><p><strong>动画是使元素从一种样式逐渐变化为另一种样式的效果。</strong>您可以改变任意多的样式任意多的次数。</p>
</li>
<li><p>请用百分比来规定变化发生的时间，或用关键词 <code>from</code> 和 <code>to</code>，等同于 0% 和 100% 。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/35645b2c1bbf40a4a324bf59f799586c"></p>
<h3 id="使用动画"><a href="#使用动画" class="headerlink" title="使用动画"></a>使用动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="comment">/* 调用动画*/</span></span><br><span class="line">  <span class="attribute">animation-name</span>: move;</span><br><span class="line">  <span class="comment">/* 动画持续时间*/</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动画常用属性"><a href="#动画常用属性" class="headerlink" title="动画常用属性"></a>动画常用属性</h3><p><img src="https://s1.vika.cn/space/2023/02/26/058ba0c8c76d43cd930c342a9321b20d" alt="image-20220126224512656"></p>
<h3 id="动画简写属性"><a href="#动画简写属性" class="headerlink" title="动画简写属性"></a>动画简写属性</h3><ul>
<li>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 			动画名称  持续时间  匀速  延迟时间  无限播放  反向*/</span></span><br><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>简写属性里面不包含 animation-play-state</p>
</li>
<li><p><strong>暂停动画：animation-play-state: puased;</strong> 经常和鼠标经过等其他配合使用</p>
</li>
<li><p>想要动画走回来，而不是直接跳回来：animation-direction ：alternate</p>
</li>
<li><p>盒子动画结束后，停在结束位置：animation-fill-mode ：forwards</p>
</li>
</ul>
<h3 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h3><ul>
<li>animation-timing-function：规定动画的速度曲线，默认是“ease”</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/fd409ba7c8ce4175bdc4bedf22d32c88" alt="image-20220126224843627"></p>
<h3 id="动画案例-奔跑的熊大"><a href="#动画案例-奔跑的熊大" class="headerlink" title="动画案例-奔跑的熊大"></a>动画案例-奔跑的熊大</h3><p><img src="https://s1.vika.cn/space/2023/02/26/7de348ce252e4a45b662e99529e53b32"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="动画案例-无缝滚动轮播图"><a href="#动画案例-无缝滚动轮播图" class="headerlink" title="动画案例_无缝滚动轮播图"></a>动画案例_无缝滚动轮播图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="3D-转换"><a href="#3D-转换" class="headerlink" title="3D 转换"></a>3D 转换</h2><ul>
<li><p>3D 转换特点:</p>
<ul>
<li>近大远小。</li>
<li>物体后面遮挡不可见</li>
</ul>
</li>
<li><p>当我们在网页上构建 3D 效果的时候参考这些特点就能产出 3D 效果。</p>
</li>
</ul>
<h3 id="三维坐标系"><a href="#三维坐标系" class="headerlink" title="三维坐标系"></a>三维坐标系</h3><ul>
<li><p>三维坐标系其实就是指立体空间，立体空间是由 3 个轴共同组成的。</p>
<ul>
<li><p>x 轴：水平向右, 注意：x 右边是正值，左边是负值</p>
</li>
<li><p>y 轴：垂直向下, 注意：y 下面是正值，上面是负值</p>
</li>
<li><p>z 轴：垂直屏幕, 注意：往外面是正值，往里面是负值</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a869d506bfb74984b62f7f7a567edd17"></p>
<ul>
<li><p>3D 转换我们主要学习工作中最常用的 3D 位移和 3D 旋转.</p>
</li>
<li><p>3D 位移: translate3d(x,y,z)</p>
</li>
<li><p>3D 旋转: rotate3d(x,y,z)</p>
</li>
<li><p>透视: perspective</p>
</li>
<li><p>3D 呈现 transfrom-style</p>
</li>
</ul>
<h3 id="3D-移动-translate3d"><a href="#3D-移动-translate3d" class="headerlink" title="3D 移动 translate3d"></a>3D 移动 translate3d</h3><ul>
<li>3D 移动在 2D 移动的基础上多加了一个可以移动的方向，就是 z 轴方向。</li>
<li>**translform:translateX(100px)**：仅仅是在 x 轴上移动<ul>
<li>**translform:translateY(100px)**：仅仅是在 Y 轴上移动</li>
<li>**translform:translateZ(100px)**：仅仅是在 Z 轴上移动（注意：translateZ 一般用 px 单位）</li>
<li>**transform:translate3d(x,y,z)**：其中 x、y、z 分别指要移动的轴的方向的距离</li>
</ul>
</li>
<li>因为 z 轴是垂直屏幕，由里指向外面，所以默认是看不到元素在 z 轴的方向上移动</li>
</ul>
<h3 id="translateZ"><a href="#translateZ" class="headerlink" title="translateZ"></a>translateZ</h3><ul>
<li><p>**translform:translateZ(100px)**：仅仅是在 Z 轴上移动。</p>
</li>
<li><p>有了透视，就能看到 translateZ 引起的变化了</p>
<ul>
<li><strong>translateZ</strong>：近大远小</li>
<li>**translateZ(10px)**：往外是正值</li>
<li>**translateZ(-10px)**：往里是负值</li>
</ul>
</li>
</ul>
<h3 id="3D-旋转-rotate3d"><a href="#3D-旋转-rotate3d" class="headerlink" title="3D 旋转 rotate3d"></a>3D 旋转 rotate3d</h3><ul>
<li><p>3D 旋转指可以让元素在三维平面内沿着 x 轴，y 轴，z 轴或者自定义轴进行旋转。</p>
</li>
<li><p>语法:</p>
<ul>
<li>**transform:rotateX(45deg)**：沿着 x 轴正方向旋转 45 度</li>
<li><strong>transform:rotateY(45deg)</strong> ：沿着 y 轴正方向旋转 45deg</li>
<li><strong>transform:rotateZ(45deg)</strong> ：沿着 Z 轴正方向旋转 45deg</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5865b8c370de492fb678a62272b70aec" alt="image-20220126233403938"></p>
<ul>
<li><p>对于元素旋转的方向的判断我们需要先学习一个左手准则。</p>
</li>
<li><p>左手准则:</p>
<ul>
<li>左手的手拇指指向 x 轴的正方向</li>
<li>其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向</li>
</ul>
</li>
<li><p>左手准则:</p>
<ul>
<li>左手的手拇指指向 y 轴的正方向</li>
<li>其余手指的弯曲方向就是该元素沿着 y 轴旋转的方向（正值）</li>
</ul>
</li>
<li><p>**transform:rotate3d(x,y,z,deg)**：沿着自定义轴旋转 deg 为角度（了解即可）</p>
<ul>
<li>xyz 是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度。</li>
</ul>
</li>
<li><p><strong>transform:rotate3d(1,0,0,45deg)</strong> 就是沿着 x 轴旋转 45deg</p>
</li>
<li><p><strong>transform:rotate3d(1,1,0,45deg)</strong> 就是沿着对角线( x 轴与 y 轴形成的矢量)旋转 45deg</p>
</li>
</ul>
<h3 id="3D-呈现-transfrom-style"><a href="#3D-呈现-transfrom-style" class="headerlink" title="3D 呈现 transfrom-style"></a>3D 呈现 transfrom-style</h3><ul>
<li><p>控制子元素是否开启三维立体环境。</p>
</li>
<li><p>transform-style: flat; 子元素不开启 3d 立体空间, 默认的</p>
</li>
<li><p><strong>transform-style: preserve-3d; 子元素开启立体空间</strong></p>
</li>
<li><p><strong>代码写给父级，但是影响的是子盒子</strong></p>
</li>
<li><p>这个属性很重要，后面必用</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/39803e48292c466a981b690c7ca632c8" alt="image-20220126234140466"></p>
<h3 id="案例：两面翻转的盒子"><a href="#案例：两面翻转的盒子" class="headerlink" title="案例：两面翻转的盒子"></a>案例：两面翻转的盒子</h3><p><img src="https://s1.vika.cn/space/2023/02/26/178d99aadbaa45f092d642813f5a7df8"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>pink老师等你<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>box 父盒子里面包含前后两个子盒子</p>
</li>
<li><p>box 是翻转的盒子 front 是前面盒子 back 是后面盒子</p>
<ul>
<li>box 指定大小，切记要添加 3d 呈现</li>
<li>back 盒子要沿着 Y 轴翻转 180 度</li>
<li>最后鼠标经过 box 沿着 Y 旋转 180deg</li>
</ul>
</li>
</ul>
<h3 id="案例-3D-导航栏"><a href="#案例-3D-导航栏" class="headerlink" title="案例:3D 导航栏"></a>案例:3D 导航栏</h3><p><img src="https://s1.vika.cn/space/2023/02/26/31caffe178da4c92821839c9fe9182b8"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="案例-旋转木马"><a href="#案例-旋转木马" class="headerlink" title="案例:旋转木马"></a>案例:旋转木马</h3><p><img src="https://s1.vika.cn/space/2023/02/26/cf5e8dfe59634bd29f7d009a38123df1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="案例-3D-旋转音乐播放器"><a href="#案例-3D-旋转音乐播放器" class="headerlink" title="案例_3D 旋转音乐播放器"></a>案例_3D 旋转音乐播放器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="浏览器私有前缀"><a href="#浏览器私有前缀" class="headerlink" title="浏览器私有前缀"></a>浏览器私有前缀</h2><ul>
<li><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加。后期会用 webpack 处理的.</p>
</li>
<li><p>私有前缀:</p>
<ul>
<li><p>-moz-：代表 firefox 浏览器私有属性</p>
</li>
<li><p>-ms-：代表 ie 浏览器私有属性</p>
</li>
<li><p>-webkit-：代表 safari、chrome 私有属性</p>
</li>
<li><p>-o-：代表 Opera 私有属性</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*提倡的写法*/</span></span><br><span class="line">-moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">-webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">-o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>邂逅前端开发</title>
    <url>/2024/01/01/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/101_HTML_CSS/10101_WebBase/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="邂逅前端开发"><a href="#邂逅前端开发" class="headerlink" title="邂逅前端开发"></a>邂逅前端开发</h1><h2 id="软件的认识"><a href="#软件的认识" class="headerlink" title="软件的认识"></a>软件的认识</h2><h3 id="常见的软件"><a href="#常见的软件" class="headerlink" title="常见的软件"></a>常见的软件</h3><p><img src="https://s1.vika.cn/space/2023/02/19/2b3b01b1f6d94e81bef0ff657434b1a6"></p>
<h3 id="软件的定义"><a href="#软件的定义" class="headerlink" title="软件的定义"></a>软件的定义</h3><ul>
<li>专业的软件定义：<strong>一系列按照特定顺序组织的计算机数据和指令，是电脑的非有型部分</strong>。</li>
<li>软件开发是什么呢？<strong>就是告诉计算机一系列的指令，这些指令也称之为程序</strong>。</li>
<li>开发软件的这部分人就称之为 软件开发工程师，也称之为程序员。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/86a32bcb1e9c42cab0639a23445de936" alt="1670140185694"></p>
<h3 id="完善的软件系统"><a href="#完善的软件系统" class="headerlink" title="完善的软件系统"></a>完善的软件系统</h3><p><img src="https://s1.vika.cn/space/2023/02/19/d138e657367e4c36a8faab5cb4929db0" alt="1670140223633"></p>
<h2 id="前端开发工程师"><a href="#前端开发工程师" class="headerlink" title="前端开发工程师"></a>前端开发工程师</h2><h3 id="前端开发工程师-1"><a href="#前端开发工程师-1" class="headerlink" title="前端开发工程师"></a>前端开发工程师</h3><ul>
<li><p>开发系统中各个环节的不同部分都属于软件开发：</p>
<ul>
<li>这些开发者我们称之为<strong>软件开发工程师</strong>；</li>
<li>开发者、程序员、码农、IT 民工等等；</li>
</ul>
</li>
<li><p>按照职能的不同也可以划分两类：</p>
<ul>
<li>后端（Back-end）开发，称之为<strong>后端开发工程师</strong>；</li>
<li>前端（Front-end）开发，称之为<strong>前端开发工程师</strong>；</li>
</ul>
</li>
<li><p>前端开发工程师：</p>
<ul>
<li><strong>主要负责的：Web（网站、后台管理系统、手机 H5）、小程序端；</strong></li>
<li><strong>也可以做：移动端（Uniapp、React Native）、桌面端（Electron）、服务器开发（Node.js）；</strong></li>
</ul>
</li>
</ul>
<h3 id="前端行业发展"><a href="#前端行业发展" class="headerlink" title="前端行业发展"></a>前端行业发展</h3><ul>
<li><p>为什么要聊这个话题呢？</p>
<ul>
<li>时代的一粒灰，落在个人头上，就是一座山；</li>
<li>如何行业已经停滞，甚至是倒退，没有需求，那么你如何努力也改变不了现状；</li>
</ul>
</li>
<li><p>技术角度：</p>
<ul>
<li>新框架（Ember.js、Preact.js）、框架更新迭代（vue3、react18）、新工具（Vite）、新模式（工程化、低代码、微前端） 层出不穷；</li>
</ul>
</li>
<li><p>市场需求：</p>
<ul>
<li><strong>人才需求大、薪资高；</strong></li>
</ul>
</li>
</ul>
<h3 id="前端技术发展线路"><a href="#前端技术发展线路" class="headerlink" title="前端技术发展线路"></a>前端技术发展线路</h3><ul>
<li><p><strong>初级程序员</strong>（薪资 6k-10k，1~2 年）</p>
<ul>
<li>写一些简单的业务，负责项目某些模块的开发、维护；</li>
<li>遇到很多问题不知道如何处理，需要查询资料或者交流后可以解决；</li>
<li>代码通常写的杂乱无章，能用就行！</li>
</ul>
</li>
<li><p><strong>中级程序员</strong>（薪资 10k-20k，2~4 年）</p>
<ul>
<li>可以独立负责中小型项目，负责公司项目核心业务的开发、维护；</li>
<li>遇到大多数问题可以自行查到解决方案，有一定的自学能力，通过官网文档可以自学；</li>
<li>代码质量较高，遵守代码规范，并且会对组内其他人的代码有要求；</li>
</ul>
</li>
<li><p><strong>高级程序员</strong>（薪资 20k-50k，4~6 年）</p>
<ul>
<li>独立负责中大型项目，可以为公司项目搭建架构，创建内部的脚手架，公司内部的 UI 框架；</li>
<li>可以读懂框架源码，并且从一些开源框架中借鉴优秀的设计、架构、思想；</li>
<li>公司的核心员工，具备可替代性，成为公司技术不可或缺的一部分；</li>
</ul>
</li>
<li><p><strong>系统架构师</strong>（50k~）</p>
<ul>
<li>可以对大型项目进行系统架构，不再局限于某个领域（前端、后端?）或者某项技术（JavaScript、Java、 C++?）；</li>
<li>对技术领域 现有技术方案进行评估，对不同的场景给出对应的解决方案；</li>
<li>确定项目最终方案，并且对整个项目进行“核心架构”（包括完成 核心架构 实现的能力）；</li>
<li>保证项目的各个环节有序进行，包括项目的高性能、高可用、可扩展能力；</li>
</ul>
</li>
<li><p><strong>资深技术专家</strong>（50k~）</p>
<ul>
<li>专注于某一个特定领域<ul>
<li>比如前端包括不限于对框架源码、node、js 引擎进行定制化需求、优化；</li>
<li>比如后端包括不仅限于 JVM、线程池、SQL 调试、优化；</li>
<li>比如可以主导公司项目某些特定领域技术的落地，类似流媒体、即时通信技术等；</li>
</ul>
</li>
<li>某些人在行业内有一定的影响力，是某一块技术领域的 Top 人物；</li>
</ul>
</li>
</ul>
<h2 id="认识网页和网站"><a href="#认识网页和网站" class="headerlink" title="认识网页和网站"></a>认识网页和网站</h2><h3 id="什么是网页"><a href="#什么是网页" class="headerlink" title="什么是网页"></a>什么是网页</h3><ul>
<li>网页的专业术语叫做 Web Page；</li>
<li>打开浏览器查看到的页面，是网络中的一“页”, 通常是 HTML 格式的文件，它要通过浏览器来阅读；</li>
<li>网页的内容可以非常丰富：<strong>包括文字、链接、图片、音乐、视频等等</strong></li>
<li>网页是构成网站的基本元素，<strong>网页通常由图片、链接、文字、声音、视频等元素组成</strong>。</li>
<li>通常我们看到的网页，常见以<code>.htm</code>或<code>.html</code>后缀结尾的文件，因此将其<strong>俗称为 HTML 文件</strong>。</li>
<li><code>.htm</code> 和 <code>.html</code> 扩展名区别 :<ul>
<li>因历史遗留问题，<code>Win95\Win98</code> 系统的文件拓展名不能超过 3 字符，所以使用<code> .htm</code></li>
<li>但在 windows 后缀长度可以大于 3 位，所以 windows 下无所谓<code>.htm</code>与 <code>.html</code>，<code>.html </code>是为长文件的格式命名的</li>
<li>所以 <code>.htm</code> 是为了兼容过去的 DOS 命名格式存在的</li>
<li>现在统一使用 .html</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/9f223c2252f743779a1e982af15f964b" alt="1670143805729"></p>
<h3 id="什么是网站"><a href="#什么是网站" class="headerlink" title="什么是网站"></a>什么是网站</h3><ul>
<li>网站是什么呢？<ul>
<li><strong>网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。网站是由多个网页组成的</strong>；</li>
<li>通常一个网站由 N 个网页组成（- &gt;&#x3D; 1）；</li>
</ul>
</li>
</ul>
<h3 id="网页的显示过程"><a href="#网页的显示过程" class="headerlink" title="网页的显示过程"></a>网页的显示过程</h3><h4 id="用户角度"><a href="#用户角度" class="headerlink" title="用户角度"></a>用户角度</h4><ul>
<li>用户在浏览器输入一个网站；</li>
<li>浏览器会找到对应的服务器地址，请求静态资源（可以存放在世界上任何一个地方）；</li>
<li>服务器返回静态资源给浏览器；</li>
<li>浏览器对静态资源进行解析和展示；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/1f4622e44a8b47819db4901c1de4a2cd" alt="1670143919724"></p>
<h4 id="前端工程师角度"><a href="#前端工程师角度" class="headerlink" title="前端工程师角度"></a>前端工程师角度</h4><ul>
<li><strong>网页是由网页元素组成的，这些元素是利用 html 标签描述出来，然后通过浏览器解析来显示给用户的。</strong><ul>
<li>开发项目（HTML&#x2F;CSS&#x2F;JavaScript&#x2F;Vue&#x2F;React）</li>
<li>打包、部署项目到服务器里面</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/cd7c18af95a943dfb81895c614419569" alt="1670143954317"></p>
<p><img src="https://s1.vika.cn/space/2023/02/19/2282527d93a14267987fb826c1ac7ffe" alt="image-20220125132408920"></p>
<h3 id="HTML-XHTML-H5-区别"><a href="#HTML-XHTML-H5-区别" class="headerlink" title="HTML&#x2F;XHTML&#x2F;H5 区别"></a>HTML&#x2F;XHTML&#x2F;H5 区别</h3><ul>
<li><p>HTML 语法非常宽松, 容错性强;</p>
</li>
<li><p>XHTML 更为严格,它要求标签必须小写、标签必须严格闭合、标签中的属性必须使用引号引起等等;</p>
</li>
<li><p>HTML5 是 HTML 的下一个版本, 所以除了非常宽松,容错性强以外,还增加许多新的特性</p>
</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="什么是服务器"><a href="#什么是服务器" class="headerlink" title="什么是服务器"></a>什么是服务器</h3><ul>
<li>我们日常生活接触到的基本都属于客户端、前端的内容：<ul>
<li>比如浏览器、微信、QQ、小程序；</li>
</ul>
</li>
<li>我们知道自己的手机并不可能存放哪些多的数据和资源：<ul>
<li>比如你用《网易云听音乐》，音乐数据大部分都是存在“服务器”中的；</li>
</ul>
</li>
<li>那么服务到底是什么呢？<ul>
<li>服务器本质上也是一台类似于你电脑一样的主机；</li>
<li>但是这个主机有几个特点：<ul>
<li>二十四小时不关机的（稳定运行）；</li>
<li>没有显示器的；</li>
<li>一般装的是 Linux 操作系统（比如 centos）；</li>
</ul>
</li>
<li>服务器是<code>专门用于存储数据</code>电脑， 访问者可以<code>访问服务器上存储的资源</code></li>
<li>服务器<code>一旦关机</code>，访问者就<code>无法访问</code></li>
</ul>
</li>
</ul>
<h3 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h3><ul>
<li>那么我以后到公司是不是就看得见服务器了呢？<ul>
<li>目前公司大部分用的是<strong>云服务器</strong>（比如阿里云、腾讯云、华为云）；</li>
</ul>
</li>
</ul>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="浏览器的作用"><a href="#浏览器的作用" class="headerlink" title="浏览器的作用"></a>浏览器的作用</h3><ul>
<li>我们已经明确知道了网页的组成部分：HTML + CSS + JavaScript。</li>
<li>那么这些看起来枯燥的代码，是如何被渲染成多彩的网页呢？<ul>
<li>我们知道是通过浏览器来完成；</li>
</ul>
</li>
</ul>
<h3 id="常用浏览器"><a href="#常用浏览器" class="headerlink" title="常用浏览器"></a>常用浏览器</h3><ul>
<li><strong>浏览器是网页显示、运行的平台</strong>。常用的浏览器有<strong>IE、火狐（Firefox）、谷歌（Chrome）、Safari 和 Opera</strong>等。平时称为五大浏览器。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/939d61cb0c1f4584abb8dde6ec953b28"></p>
<blockquote>
<p>查看浏览器市场份额：<a href="https://tongji.baidu.com/research/site?source=index">https://tongji.baidu.com/research/site?source=index</a></p>
</blockquote>
<ul>
<li>浏览器最核心的部分是<strong>渲染引擎（Rendering Engine），一般也称为“浏览器内核”</strong><ul>
<li><strong>负责解析网页语法，并渲染（显示）网页</strong></li>
</ul>
</li>
<li>常见的国内的浏览器也有很多：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/cc238bd5474c4201b1d518b9a6cc627d" alt="1670144167088"></p>
<ul>
<li>安装最多和使用最广泛的浏览器：Chrome 浏览器</li>
</ul>
<h3 id="常见的浏览器内核"><a href="#常见的浏览器内核" class="headerlink" title="常见的浏览器内核"></a>常见的浏览器内核</h3><ul>
<li><p><strong>浏览器最核心的部分其实是 “浏览器内核”；</strong></p>
</li>
<li><p>浏览器内核（渲染引擎）： <strong>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面</strong>。</p>
</li>
<li><p>目前国内一般浏览器都会采用 <strong>Webkit&#x2F;Blink 内核</strong>，如 360、UC、QQ、搜狗等。</p>
<ul>
<li><strong>Trident</strong> （ 三叉戟）：IE、360 安全浏览器、搜狗高速浏览器、百度浏览器、UC 浏览器；</li>
<li><strong>Gecko</strong>（ 壁虎） ：Mozilla Firefox；</li>
<li><strong>Presto</strong>（急板乐曲）-&gt; Blink （眨眼）：Opera</li>
<li><strong>Webkit</strong> ：Safari、360 极速浏览器、搜狗高速浏览器、移动端浏览器（Android、iOS）</li>
<li>Webkit -&gt; <strong>Blink</strong> ：Google Chrome</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/7559f6a0b6be43af8f6dc542cae3b102"></p>
<ul>
<li>不同的浏览器内核有不同的解析、渲染规则，所以同一网页在不同内核的浏览器中的渲染效果也可能不同。</li>
</ul>
<h3 id="浏览器的访问过程"><a href="#浏览器的访问过程" class="headerlink" title="浏览器的访问过程"></a>浏览器的访问过程</h3><ul>
<li>01 当我们利用浏览器访问网页时,其实是<strong>有真实的物理文件传输</strong>的.<ul>
<li><code>浏览会先将网页上的内容缓存到本地文件夹中,然后再渲染出来呈现给用户查看</code></li>
</ul>
</li>
<li>02 平时我们在上网时会感觉到第二次访问网页会比第一次访问网页要快,就是因为第一次访问时已经将这个网页上的信息缓存到了本地</li>
<li>03 通过观察我们还发现缓存文件夹中除了缓存图片以外还缓存了一些例如<code>.js .css .html</code>等文件<ul>
<li>一个网页不是一个文件,而是一堆文件.</li>
<li>网页越复杂,那么组成这个网页的文件就越多</li>
</ul>
</li>
</ul>
<h3 id="浏览器请求数据的过程"><a href="#浏览器请求数据的过程" class="headerlink" title="浏览器请求数据的过程"></a>浏览器请求数据的过程</h3><ul>
<li>01 在浏览器地址栏输入 URL 地址,按下回车后, 浏览器会根据输入的 URL 地址发送<code>请求报文</code></li>
<li>02 服务器接收到请求报文，会对<code>请求报文</code>进行处理</li>
<li>03 服务器将处理完的结果通过<code>响应报文</code>返回给浏览器</li>
<li>04 浏览器<code>解析服务器返回的结果</code>，将结果显示出来</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/4be1211af7ac4b84b3ff75571d562a42"></p>
<h3 id="统一资源定位符-URL"><a href="#统一资源定位符-URL" class="headerlink" title="统一资源定位符 URL"></a>统一资源定位符 URL</h3><h4 id="什么是-URL"><a href="#什么是-URL" class="headerlink" title="什么是 URL"></a>什么是 URL</h4><ul>
<li>我们在浏览器的地址栏中输入的地址其实就是 URL<ul>
<li>URL 全称 Uniform Resource Locator (<strong>统一资源定位符</strong>)</li>
<li>通俗点说：URL 无非就是一个给定的独特资源在 Web 上的地址。<ul>
<li>理论上说，每个有效的 URL 都指向一个唯一的资源；</li>
<li>这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/58eae9ffbb3f42dcae8cc7f75ec73a5b" alt="1670210394753"></p>
<h4 id="URL-的格式"><a href="#URL-的格式" class="headerlink" title="URL 的格式"></a>URL 的格式</h4><ul>
<li>URL 的标准格式如下：<ul>
<li><code>[协议类型]://[服务器地址]:[端口号]/[文件路径][文件名]?[查询]#[片段ID]</code></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/b9f901a6b5674a30bafeb079b1c138c4" alt="1670210482891"></p>
<ul>
<li>比如 :<ul>
<li><code>127.0.0.1/index.html </code>（浏览器会自动补全 <code>http:</code> 和：<code>80端口</code>,默认是 80 端口）</li>
<li><a href="https://link.jianshu.com/?t=http://127.0.0.1/index.html">http://127.0.0.1/index.html</a> （浏览器会自动补全：80）</li>
<li><a href="https://link.jianshu.com/?t=http://127.0.0.1:80/index.html">http://127.0.0.1:80/index.html</a> （完整格式）</li>
<li>协议类型:&#x2F;&#x2F;ip 地址:端口号&#x2F;资源路径&#x2F;资源名称</li>
</ul>
</li>
</ul>
<h4 id="URL-和-URI-的区别"><a href="#URL-和-URI-的区别" class="headerlink" title="URL 和 URI 的区别"></a>URL 和 URI 的区别</h4><ul>
<li>和 URI 的区别：<ul>
<li>URI &#x3D; Uniform Resource Identifier 统一资源标志符，用于标识 Web 技术使用的逻辑或物理资源。；</li>
<li>URL &#x3D; Uniform Resource Locator 统一资源定位符，俗称网络地址，相当于网络中的门牌号；</li>
</ul>
</li>
<li>URI 在某一个规则下能把一个资源独一无二的识别出来。<ul>
<li>URL 作为一个网络 Web 资源的地址，可以唯一将一个资源识别出来，所以 URL 是一个 URI；</li>
<li>所以 URL 是 URI 的一个子集；</li>
<li>但是 URI 并不一定是 URL</li>
</ul>
</li>
</ul>
<h4 id="URL-拆分"><a href="#URL-拆分" class="headerlink" title="URL 拆分"></a>URL 拆分</h4><ul>
<li>网络协议类型 <code>http://</code></li>
<li>服务器 IP 地址 <code>127.0.0.1</code><ul>
<li>由于 IP 地址全都是数字， 没有任何的含义，比较难以记忆。 所以在访问网页时最常见的不是 IP 地址 而是“<strong>域名</strong>”（一串有含义的字符）</li>
<li>例如： <a href="https://link.jianshu.com/?t=http://www.baidu.com">http://www.baidu.com</a> 和 <a href="http://111.13.100.92/">http://111.13.100.92:80/</a></li>
</ul>
</li>
<li>服务器端口号 <code>:80</code></li>
<li>资源路径 : 网页在服务器上的路径<ul>
<li>资源名称 <code>index.html</code></li>
</ul>
</li>
</ul>
<h4 id="URL-各部分的作用"><a href="#URL-各部分的作用" class="headerlink" title="URL 各部分的作用"></a>URL 各部分的作用</h4><ul>
<li><p>服务器 <strong>IP 地址</strong> 和 <strong>服务器端口号</strong> 它们两的作用：</p>
<ul>
<li><p>告诉浏览器要去什么地方才能找到对应的服务器， 也就是告诉浏览器服务器的详细地址</p>
</li>
<li><p>服务器 IP 地址相当于现实生活中的地址； 例如：广州市天河区棠安苑</p>
</li>
<li><p>服务器端口号相当于现实生活中的门牌号码； 例如： 9 栋 909 室</p>
</li>
<li><p>那么如果将地址和门牌号码结合在一起， 就是我的详细地址</p>
</li>
</ul>
</li>
<li><p>资源名称的作用：</p>
<ul>
<li>告诉服务器我需要获取哪一个文件</li>
</ul>
</li>
<li><p>资源名称</p>
<ul>
<li>需要访问的文件名称</li>
</ul>
</li>
</ul>
<h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><h4 id="什么是-HTTP-协议"><a href="#什么是-HTTP-协议" class="headerlink" title="什么是 HTTP 协议"></a>什么是 HTTP 协议</h4><ul>
<li>HTTP 是 Hypertext Transfer Protocol 的缩写, <strong>超文本传输协议</strong></li>
<li>什么是协议<ul>
<li>在现实生活中有很多的协议, 例如 租房协议&#x2F;买卖协议&#x2F;离婚协议</li>
<li>无论是什么协议他们都是一个共同点, 就是<strong>用来规范&#x2F;约束某一类事物</strong></li>
</ul>
</li>
<li>沟通问题<ul>
<li>沟通最常见的问题就是语言不通, 例如中国人和美国人沟通, 一个人说中文, 一个人说英文, 如果两个人都不懂中文或者英文, 那么就会出现沟通问题</li>
<li>如果要想解决沟通问题, 需要先拟定规定, 两个人都说中文, 或者两个人都说英文, 或者请一个既懂中文又懂英文的翻译</li>
</ul>
</li>
</ul>
<h4 id="HTTP-协议的作用"><a href="#HTTP-协议的作用" class="headerlink" title="HTTP 协议的作用"></a>HTTP 协议的作用</h4><ul>
<li><strong>HTTP 协议是用来规范&#x2F;约束哪一类事物</strong><ul>
<li><strong>浏览器访问网页其实就是去服务器请求数据</strong>, 所以浏览器需要和服务器沟通, 所以也会存在沟通问题</li>
<li>HTTP 协议就相当于我们让两个人都说中文或者都说英文一样, 就是提前规范两个人之间如何沟通, <strong>HTTP 协议也就是规范&#x2F;约束浏览器和服务器之间如何沟通</strong></li>
</ul>
</li>
</ul>
<h3 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h3><ul>
<li>搜索引擎优化（英语：search engine optimization，缩写为 SEO）是通过了解搜索引擎的运作规则来调整网站，以及提高网站在有关搜索引擎内排名的方式。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/9fe2a3e7c69e43fb8ebc84aa4578ced4" alt="1670210899189"></p>
<ul>
<li>后续还会讲解 SPA 以及 SSR 相关的概念 , 它们也有 SEO、首屏渲染速度有关；</li>
</ul>
<h2 id="计算机中的进制"><a href="#计算机中的进制" class="headerlink" title="计算机中的进制"></a>计算机中的进制</h2><h3 id="认识进制"><a href="#认识进制" class="headerlink" title="认识进制"></a>认识进制</h3><ul>
<li>进制的概念：<ul>
<li>维基百科：进位制是一种记数方式，亦称进位计数法或位值计数法。</li>
<li>通俗理解：当数字达到某个值时，进一位(比如从 1 位变成 2 位)。</li>
</ul>
</li>
<li>按照进制的概念，来理解一下十进制：<ul>
<li>当数字到 9 的时候，用一位已经表示不了了，那么就进一位变成 2 位</li>
</ul>
</li>
<li>按照上面的来理解，二进制、八进制、十六进制：<ul>
<li>二进制：当数字到 1 的时候，用一位已经表示不了了，那么就进一位。</li>
<li>八进制：当数字到 7 的时候，用一位已经表示不了了，那么就进一位。</li>
<li>十六进制：等等，用一位如何表示十六个数字呢？a(10)、b(11)、c(12) 、 d(13) 、 e(14) 、 f(15)</li>
</ul>
</li>
</ul>
<h3 id="计算机中的进制-1"><a href="#计算机中的进制-1" class="headerlink" title="计算机中的进制"></a>计算机中的进制</h3><ul>
<li>如何表示二进制、八进制、十六进制?<ul>
<li>二进制（0b 开头, binary）：其中的数字由 0、1 组成，可以回顾之前学习过的机器语言。</li>
<li>八进制（0o 开头, Octonary）：其中的数字由 0~7 组成。</li>
<li>十六进制（0x 开头, hexadecimal）：其中的数字由 0~9 和字母 a-f 组成（大小写都可以）</li>
</ul>
</li>
<li>十进制 or 二进制:<ul>
<li>虽然计算机更喜欢二进制, 但是编程中我们还是以十进制为主.</li>
<li>因为高级编程语言的目的就是更加接近自然语言, 让我们人类更容易理解.</li>
</ul>
</li>
</ul>
<h3 id="进制之间的转换-补充"><a href="#进制之间的转换-补充" class="headerlink" title="进制之间的转换(补充)"></a>进制之间的转换(补充)</h3><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="开发必备软件"><a href="#开发必备软件" class="headerlink" title="开发必备软件"></a>开发必备软件</h3><ul>
<li>Chrome 浏览器：开发必备浏览器<ul>
<li><a href="https://www.google.cn/chrome/index.html">https://www.google.cn/chrome/index.html</a></li>
</ul>
</li>
<li>VSCode 编辑器：开发推荐编辑器（编写代码）<ul>
<li><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
</ul>
</li>
<li>Xmind Zen 思维导图：思维导图笔记<ul>
<li><a href="https://www.xmind.cn/">https://www.xmind.cn/</a></li>
</ul>
</li>
<li>Typora：markdown 笔记软件</li>
</ul>
<h3 id="VSCode-的安装"><a href="#VSCode-的安装" class="headerlink" title="VSCode 的安装"></a>VSCode 的安装</h3><ul>
<li>VSCode 编辑器下载-安装：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>安装插件（增加功能）：右侧图标最后一项，Extensions，查找需要的插件（联网）<ul>
<li>中文插件：Chinese</li>
<li>颜色主题：atom one dark</li>
<li>文件夹图标：VSCode Great Icons</li>
<li>在浏览器中打开网页：open in browser、Live Sever</li>
<li>自动重命名标签：auto rename tag</li>
</ul>
</li>
<li>VSCode 的配置：<ul>
<li>Auto Save 自动保存</li>
<li>Font Size 修改代码字体大小</li>
<li>Word Wrap 代码自动换行</li>
<li>Render Whitespace 空格的渲染方式(个人推荐)</li>
<li>Tab Size 代码缩进<ul>
<li>推荐 2 个空格（公司开发项目基本都是 2 个空格）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="常用-VScode-插件"><a href="#常用-VScode-插件" class="headerlink" title="常用 VScode 插件"></a>常用 VScode 插件</h3><ul>
<li><strong>Atom One Dark Theme</strong> : 编辑器的颜色主题</li>
<li><strong>Auto Rename Tag</strong> : 自动关闭标签，在修改开始标记后，将自动插入结束标记</li>
<li><strong>background-cover</strong> : 修改 VScode 背景</li>
<li><strong>Beautify css&#x2F;sass&#x2F;scss&#x2F;less</strong> : 美化 css&#x2F;sass&#x2F;scss&#x2F;less</li>
<li><strong>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</strong> : 编辑器语言设置为 简体中文</li>
<li><strong>Code Runner</strong> : 快速运行调试代码</li>
<li><strong>CSS Peek</strong> : 快速定位 CSS</li>
<li><strong>Easy LESS</strong> : 自动编译 Less 生成 CSS</li>
<li><strong>EditorConfig for VS Code</strong> : 自动格式化代码的插件</li>
<li><strong>Guides</strong> : 缩进参考线</li>
<li><strong>Live Server</strong> : 实时加载功能的小型服务器</li>
<li><strong>open in browser</strong> : 在浏览器打开</li>
<li><strong>Open In Default Browser</strong> : 在默认浏览器打开</li>
<li><strong>Polacode</strong> : 代码截图生成图片</li>
<li><strong>Prettier</strong> : 前端代码格式化</li>
<li><strong>px to rem &amp; rpx &amp; vw (cssrem)</strong> : px 单位转 rem</li>
<li><strong>Vetur</strong> : .vue 文件语法高亮</li>
<li><strong>VSCode Great Icons</strong> : VScode 目录图标</li>
<li><strong>Vue 3 Snippets</strong> : 快速生成 Vue3 代码片段</li>
<li><strong>Vue VSCode Snippets</strong> : 生成 Vue 基本模板</li>
<li><strong>ESlint</strong> : 代码检测工具</li>
<li><strong>Error Lens</strong> : 编码时提示错误信息</li>
</ul>
<h3 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h3><h4 id="生成代码片段站点"><a href="#生成代码片段站点" class="headerlink" title="生成代码片段站点"></a>生成代码片段站点</h4><ul>
<li>站点 : <a href="https://snippet-generator.app/">https://snippet-generator.app/</a><ul>
<li>用于生成 VScode 代码片段</li>
</ul>
</li>
</ul>
<h4 id="示例与解析"><a href="#示例与解析" class="headerlink" title="示例与解析"></a>示例与解析</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;TM_FILENAME_BASE&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>$0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          $1, <span class="comment">//光标出现的第一个位置</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意这里的<code>$1,$2……$0</code>，这是你代码快捷生成之后鼠标光标的所在位置，光标会首先定位在$1,按 Tab 键切换到$2 的位置，以此类推，光标最后会定位在$0 的位置。</li>
<li>还有其他语法，在这里一并讲解：</li>
<li><strong>占位符</strong>：<ul>
<li>占位符是带有值的制表符，如将插入并选择占位符文本，以便可以轻松更改。说白了占位符<code>$&#123;1:foo&#125;</code>就是在<code>$1</code>的基础上，光标跳到<code>$1</code>位置的同时会自动生成并选中 foo，同样按 Tab 键切换到<code>$2</code>的位置。占位符可以嵌套，如 。<code>$&#123;1:foo&#125;</code> <code>$&#123;1:another $&#123;2:placeholder&#125;&#125;</code></li>
</ul>
</li>
<li><strong>选择</strong><ul>
<li>占位符可以作为有选择的值。语法是以逗号分隔的值的枚举，用竖线字符括起来，例如 。插入代码段并选择占位符时，选项将提示用户选取其中一个值。<code>$&#123;1|one,two,three|&#125;</code></li>
</ul>
</li>
<li><strong>变量</strong><ul>
<li>插入变量的值。如果未设置变量，则插入其默认值或空字符串。当变量未知（即未定义其名称）时，将插入变量的名称并将其转换为占位符。<code>$name</code> <code>$&#123;name:default&#125;</code></li>
<li>可以使用以下变量：<ul>
<li><code>TM_SELECTED_TEXT</code>当前选定的文本或空字符串</li>
<li><code>TM_CURRENT_LINE</code>当前行的内容</li>
<li><code>TM_CURRENT_WORD</code>光标下单词的内容或空字符串</li>
<li><code>TM_LINE_INDEX</code>基于零索引的行号</li>
<li><code>TM_LINE_NUMBER</code>基于一个索引的行号</li>
<li><code>TM_FILENAME</code>当前文档的文件名</li>
<li><code>TM_FILENAME_BASE</code>不带扩展名的当前文档的文件名 （比如这里你在用户代码片段中写了${TM_FILENAME_BASE}，在自动生成的代码里就会在这个位置自动填充上你的文件的不含扩展名的文件名）</li>
<li><code>TM_DIRECTORY</code>当前文档的目录</li>
<li><code>TM_FILEPATH</code>当前文档的完整文件路径</li>
<li><code>RELATIVE_FILEPATH</code>当前文档的相对（相对于打开的工作空间或文件夹）文件路径</li>
<li><code>CLIPBOARD</code>剪贴板的内容</li>
<li><code>WORKSPACE_NAME</code>打开的工作区或文件夹的名称</li>
<li><code>WORKSPACE_FOLDER</code>打开的工作区或文件夹的路径</li>
</ul>
</li>
<li>要插入当前日期和时间：<ul>
<li><code>CURRENT_YEAR</code>本年度</li>
<li><code>CURRENT_YEAR_SHORT</code>本年度的最后两位数</li>
<li><code>CURRENT_MONTH</code>以两位数字表示的月份（例如”02”）</li>
<li><code>CURRENT_MONTH_NAME</code>月份的全名（例如”七月”）</li>
<li><code>CURRENT_MONTH_NAME_SHORT</code>月份的短名称（例如”Jul”）</li>
<li><code>CURRENT_DATE</code>以两位数字表示的月份中的某一天（例如”08”）</li>
<li><code>CURRENT_DAY_NAME</code>日期的名称（例如”星期一”）</li>
<li><code>CURRENT_DAY_NAME_SHORT</code>日期的短名称（例如”星期一”）</li>
<li><code>CURRENT_HOUR</code>24 小时制格式的当前小时</li>
<li><code>CURRENT_MINUTE</code>当前分钟为两位数</li>
<li><code>CURRENT_SECOND</code>当前第二位为两位数</li>
<li><code>CURRENT_SECONDS_UNIX</code>自 Unix 纪元以来的秒数</li>
</ul>
</li>
<li>对于插入随机值：<ul>
<li><code>RANDOM</code>6 个随机的 Base-10 数字</li>
<li><code>RANDOM_HEX</code>6 个随机的 16 位基本数字</li>
<li><code>UUID</code>A 版本 4 UUID</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Chrome-浏览器开发者工具"><a href="#Chrome-浏览器开发者工具" class="headerlink" title="Chrome 浏览器开发者工具"></a>Chrome 浏览器开发者工具</h3><ul>
<li>打开 Chrome 调试工具：<ul>
<li>方式一：右键 – 检查</li>
<li>方式二：快捷键 – F12</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/19/885bba22470b42eb94305d880b05ce1a"></p>
<ul>
<li>其他技巧：<ul>
<li>快捷键：ctrl++ 可以调整页面或者调试工具的字体大小；</li>
<li>可以通过删除某些元素来查看网页结构;</li>
<li>可以通过增删 css 来调试网页样式;</li>
</ul>
</li>
</ul>
<h2 id="prettier-插件常用配置规则"><a href="#prettier-插件常用配置规则" class="headerlink" title="prettier 插件常用配置规则"></a>prettier 插件常用配置规则</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 使能每一种语言默认格式化规则</span></span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[css]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[less]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  prettier的配置 */</span></span><br><span class="line">  <span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span> <span class="comment">// 超过最大值换行</span></span><br><span class="line">  <span class="attr">&quot;prettier.tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="comment">// 缩进字节数</span></span><br><span class="line">  <span class="attr">&quot;prettier.useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 缩进不使用tab，使用空格</span></span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 句尾添加分号</span></span><br><span class="line">  <span class="comment">// 使用单引号代替双引号,false 不替换</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[vue]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;octref.vetur&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span></span><br><span class="line">  <span class="attr">&quot;prettier.proseWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//  (x) =&gt; &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</span></span><br><span class="line">  <span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class="line">  <span class="attr">&quot;prettier.bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 不格式化vue文件，vue文件的格式化单独设置</span></span><br><span class="line">  <span class="attr">&quot;prettier.disableLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 结尾是 \n \r \n\r auto</span></span><br><span class="line">  <span class="attr">&quot;prettier.endOfLine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//不让prettier使用eslint的代码格式进行校验</span></span><br><span class="line">  <span class="attr">&quot;prettier.eslintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 不使用prettier格式化的文件填写在项目的.prettierignore文件中</span></span><br><span class="line">  <span class="attr">&quot;prettier.ignorePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.prettierignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在jsx中把&#x27;&gt;&#x27; 是否单独放一行</span></span><br><span class="line">  <span class="attr">&quot;prettier.jsxBracketSameLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在jsx中使用单引号代替双引号</span></span><br><span class="line">  <span class="attr">&quot;prettier.jsxSingleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 格式化的解析器，默认是babylon</span></span><br><span class="line">  <span class="attr">&quot;prettier.parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babylon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Require a &#x27;prettierconfig&#x27; to format prettier</span></span><br><span class="line">  <span class="attr">&quot;prettier.requireConfig&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//不让prettier使用stylelint的代码格式进行校验</span></span><br><span class="line">  <span class="attr">&quot;prettier.stylelintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）</span></span><br><span class="line">  <span class="attr">&quot;prettier.trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 不让prettier使用tslint的代码格式进行校验</span></span><br><span class="line">  <span class="attr">&quot;prettier.tslintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="ESlint-常用配置规则"><a href="#ESlint-常用配置规则" class="headerlink" title="ESlint 常用配置规则"></a>ESlint 常用配置规则</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">&quot;no-array-constructor&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">&quot;no-bitwise&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">&quot;no-catch-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">&quot;no-class-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">&quot;no-cond-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">&quot;no-console&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">&quot;no-const-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">&quot;no-constant-condition&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">&quot;no-continue&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">&quot;no-control-regex&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">&quot;no-debugger&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">&quot;no-delete-var&quot;</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">&quot;no-div-regex&quot;</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">&quot;no-dupe-args&quot;</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">&quot;no-duplicate-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">&quot;no-else-return&quot;</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-character-class&quot;</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-label&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">&quot;no-ex-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">&quot;no-extend-native&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">&quot;no-extra-bind&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">&quot;no-extra-boolean-cast&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">&quot;no-fallthrough&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">&quot;no-floating-decimal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">&quot;no-implicit-coercion&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">&quot;no-implied-eval&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">&quot;no-inner-declarations&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;functions&quot;</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">&quot;no-invalid-regexp&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">&quot;no-invalid-this&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">&quot;no-irregular-whitespace&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">&quot;no-iterator&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">&quot;no-labels&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">&quot;no-lone-blocks&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">&quot;no-lonely-if&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">&quot;no-loop-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">&quot;no-mixed-requires&quot;</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">&quot;no-multi-str&quot;</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">&quot;no-native-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">&quot;no-negated-in-lhs&quot;</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">&quot;no-nested-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">&quot;no-new&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">&quot;no-new-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">&quot;no-new-object&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">&quot;no-new-require&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">&quot;no-new-wrappers&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">&quot;no-obj-calls&quot;</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">&quot;no-octal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">&quot;no-octal-escape&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">&quot;no-param-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">&quot;no-path-concat&quot;</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">&quot;no-process-env&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">&quot;no-process-exit&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">&quot;no-proto&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">&quot;no-regex-spaces&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">&quot;no-restricted-modules&quot;</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">&quot;no-script-url&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">&quot;no-sequences&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">&quot;no-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">&quot;no-shadow-restricted-names&quot;</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">&quot;no-spaced-func&quot;</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">&quot;no-sync&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">&quot;no-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">&quot;no-throw-literal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line"><span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">&quot;no-undef-init&quot;</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">&quot;no-undefined&quot;</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">&quot;no-unexpected-multiline&quot;</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">&quot;no-unneeded-ternary&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">&quot;no-unreachable&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">&quot;no-unused-expressions&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">&quot;no-useless-call&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">&quot;no-void&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">&quot;no-warning-comments&quot;</span>: [<span class="number">1</span>, &#123; <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>], <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">&quot;no-with&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">&quot;brace-style&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;1tbs&quot;</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">&quot;callback-return&quot;</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">&quot;comma-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;complexity&quot;</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">&quot;dot-location&quot;</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;dot-notation&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">&quot;eol-last&quot;</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">&quot;generator-star-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">&quot;guard-for-in&quot;</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">&quot;handle-callback-err&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">&quot;id-length&quot;</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">&quot;init-declarations&quot;</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">&quot;key-spacing&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">&quot;lines-around-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">&quot;max-depth&quot;</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">&quot;max-len&quot;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">&quot;max-nested-callbacks&quot;</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">&quot;max-params&quot;</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">&quot;max-statements&quot;</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">&quot;new-cap&quot;</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">&quot;new-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">&quot;newline-after-var&quot;</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">&quot;object-curly-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">&quot;object-shorthand&quot;</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">&quot;one-var&quot;</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">&quot;operator-assignment&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">&quot;operator-linebreak&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;after&quot;</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">&quot;prefer-const&quot;</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">&quot;prefer-spread&quot;</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">&quot;prefer-reflect&quot;</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">&quot;quotes&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>],<span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;quote-props&quot;</span>:[<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">&quot;radix&quot;</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">&quot;id-match&quot;</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">&quot;require-yield&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">&quot;semi&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">&quot;semi-spacing&quot;</span>: [<span class="number">0</span>, &#123;<span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">&quot;sort-vars&quot;</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">&quot;space-after-keywords&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">&quot;space-before-blocks&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-before-function-paren&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-in-parens&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-return-throw-case&quot;</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">&quot;space-unary-ops&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">&quot;spaced-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">&quot;strict&quot;</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">&quot;use-isnan&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">&quot;valid-jsdoc&quot;</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">&quot;valid-typeof&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">&quot;vars-on-top&quot;</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">&quot;wrap-iife&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;inside&quot;</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">&quot;wrap-regex&quot;</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">&quot;yoda&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript对象</title>
    <url>/2024/01/13/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/105_JavaScript/10503_JS_Object/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# JavaScript对象

<h2 id="JavaScript普通对象"><a href="#JavaScript普通对象" class="headerlink" title="JavaScript普通对象"></a>JavaScript普通对象</h2><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><ul>
<li>现实生活中：万物皆对象，对象是一个具体的事物，看得见摸得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。</li>
</ul>
<p><img src="/./images/image-20220129143838233.png" alt="image-20220129143838233"></p>
<ul>
<li><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p>
</li>
<li><p>对象是由属性和方法组成的。</p>
<ul>
<li><p>属性：事物的特征，在对象中用属性来表示（常用名词）</p>
</li>
<li><p>方法：事物的行为，在对象中用方法来表示（常用动词）</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/2019e85d73ee4bfab5b912a045b02393" alt="image-20220129143914186"></p>
<h3 id="为什么需要对象"><a href="#为什么需要对象" class="headerlink" title="为什么需要对象"></a>为什么需要对象</h3><ul>
<li><p>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。如果要保存一个人的完整信息呢？</p>
</li>
<li><p>例如，将“张三疯”的个人的信息保存在数组中的方式为：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;张三疯&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">128</span>,<span class="number">154</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 中的对象表达结构更清晰，更强大。张三疯的个人信息在对象中的表达结构如下：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c3c06a99454c4f719619304d2b0b8f1f" alt="image-20220129144022986"></p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul>
<li>在 JavaScript 中，现阶段我们可以采用三种方式创建对象（object）：<ul>
<li><p><strong>利用字面量创建对象</strong></p>
</li>
<li><p><strong>利用 new Object 创建对象</strong></p>
</li>
<li><p><strong>利用构造函数创建对象</strong></p>
</li>
</ul>
</li>
</ul>
<h4 id="字面量创建对象"><a href="#字面量创建对象" class="headerlink" title="字面量创建对象"></a>字面量创建对象</h4><ul>
<li><p>对象字面量：就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法。</p>
</li>
<li><p>{ } 里面采取键值对的形式表示</p>
<ul>
<li>键：相当于属性名</li>
</ul>
</li>
<li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.利用对象字面量创建对象 &#123;&#125;</span></span><br><span class="line"><span class="comment">// var obj = &#123;&#125;;  // 创建了一个空的对象 </span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">uname</span>: <span class="string">&#x27;张三疯&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// (1) 里面的属性或者方法我们采取键值对的形式  键 属性名 ： 值  属性值 </span></span><br><span class="line"><span class="comment">// (2) 多个属性或者方法中间用逗号隔开的</span></span><br><span class="line"><span class="comment">// (3) 方法冒号后面跟的是一个匿名函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用对象</span></span><br><span class="line"><span class="comment">// (1). 调用对象的属性 我们采取 对象名.属性名 . 我们理解为 的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>); <span class="comment">// 张三疯</span></span><br><span class="line"><span class="comment">// (2). 调用属性还有一种方法 对象名[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;age&#x27;</span>]); <span class="comment">// 18</span></span><br><span class="line"><span class="comment">// (3) 调用对象的方法 sayHi   对象名.方法名() 千万别忘记添加小括号</span></span><br><span class="line">obj.<span class="title function_">sayHi</span>(); <span class="comment">// hi~</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象的调用:<ul>
<li><p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”</p>
</li>
<li><p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号，我们后面会用</p>
</li>
<li><p>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star.<span class="property">name</span>) <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star[<span class="string">&#x27;name&#x27;</span>]) <span class="comment">// 调用名字属性</span></span><br><span class="line">star.<span class="title function_">sayHi</span>(); <span class="comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br></pre></td></tr></table></figure>

<ul>
<li>案例:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/1dba624ece544321bde807ef718f1a45" alt="image-20220129144322042"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dogo = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;keke&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;阿拉斯加&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">color</span>:orange,</span><br><span class="line">    <span class="attr">bark</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;汪汪汪~~&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">showFilm</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;演电影&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="变量-属性-函数-方法"><a href="#变量-属性-函数-方法" class="headerlink" title="变量&#x2F;属性&#x2F;函数&#x2F;方法"></a>变量&#x2F;属性&#x2F;函数&#x2F;方法</h4><ul>
<li><strong>变量：单独声明赋值，单独存在</strong></li>
<li><strong>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</strong></li>
<li><strong>函数：单独存在的，通过“函数名()”的方式就可以调用</strong></li>
<li><strong>方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量、属性、函数、方法的区别</span></span><br><span class="line"><span class="comment">// 1.变量和属性的相同点 他们都是用来存储数据的 </span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 函数体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br><span class="line"><span class="comment">// console.log(age);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量 单独声明并赋值  使用的时候直接写变量名 单独存在</span></span><br><span class="line"><span class="comment">// 属性 在对象里面的不需要声明的 使用的时候必须是 对象.属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 函数和方法的相同点 都是实现某种功能  做某件事</span></span><br><span class="line"><span class="comment">// 函数是单独声明并且调用的, 函数名() , 单独存在的</span></span><br><span class="line"><span class="comment">// 方法在对象里面, 调用的时候: 对象.方法()</span></span><br></pre></td></tr></table></figure>

<h4 id="new-Object创建对象"><a href="#new-Object创建对象" class="headerlink" title="new Object创建对象"></a>new Object创建对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> <span class="title class_">Obect</span>(); <span class="comment">// 创建一个空对象</span></span><br><span class="line">andy.<span class="property">name</span> = <span class="string">&#x27;pink&#x27;</span>; <span class="comment">// 给空对象添加属性和方法</span></span><br><span class="line">andy.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">andy.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">andy.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Object() ：第一个字母大写</li>
<li>new Object() ：需要 new 关键字</li>
<li>使用的格式：对象.属性 &#x3D; 值;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用 new Object 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// 创建了一个空的对象</span></span><br><span class="line">obj.<span class="property">uname</span> = <span class="string">&#x27;张三疯&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1) 我们是利用 等号 = 赋值的方法 添加对象的属性和方法</span></span><br><span class="line"><span class="comment">// (2) 每个属性和方法之间用 分号结束</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">obj.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>案例:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a236f8fb994c450b97b1a680b5d51a94" alt="image-20220129144633107"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">man.<span class="property">name</span> = <span class="string">&quot;鸣人&quot;</span>;</span><br><span class="line">man.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">man.<span class="property">skill</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;skill&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h4><ul>
<li><p><strong>构造函数 ：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。</strong>我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
</li>
<li><p>在 js 中，使用构造函数要时要注意以下两点：</p>
<ul>
<li><p>构造函数用于创建某一类对象，其首字母要大写</p>
</li>
<li><p>构造函数要和 new 一起使用才有意义</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们为什么需要使用构造函数</span></span><br><span class="line"><span class="comment">// 就是因我们前面两种创建对象的方式一次只能创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> ldh = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;刘德华&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">55</span>,</span><br><span class="line">    <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">58</span>,</span><br><span class="line">    <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;李香兰&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为我们一次创建一个对象，里面很多的属性和方法是大量相同的 我们只能复制</span></span><br><span class="line"><span class="comment">// 因此我们可以利用函数的方法,重复这些相同的代码,我们就把这个函数称为构造函数</span></span><br><span class="line"><span class="comment">// 又因为这个函数不一样，里面封装的不是普通代码，而是对象</span></span><br><span class="line"><span class="comment">// 构造函数:就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 利用构造函数创建对象</span></span><br><span class="line">    <span class="comment">// 我们需要创建四大天王的对象  相同的属性： 名字 年龄 性别  相同的方法： 唱歌</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数的语法格式</span></span><br><span class="line">    <span class="comment">// function 构造函数名() &#123;</span></span><br><span class="line">    <span class="comment">//     this.属性 = 值;</span></span><br><span class="line">    <span class="comment">//     this.方法 = function() &#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// new 构造函数名();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 Star 构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age, sex</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = uname;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params">sang</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sang);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过构造函数创建实例对象</span></span><br><span class="line">    <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">// 调用函数返回的是一个对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> ldh); <span class="comment">// object</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">name</span>); <span class="comment">// 刘德华</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh[<span class="string">&#x27;sex&#x27;</span>]); <span class="comment">// 男</span></span><br><span class="line">    ldh.<span class="title function_">sing</span>(<span class="string">&#x27;冰雨&#x27;</span>); <span class="comment">// 冰雨</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数创建实例对象</span></span><br><span class="line">    <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zxy.<span class="property">name</span>); <span class="comment">// 张学友</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zxy.<span class="property">age</span>); <span class="comment">// 19</span></span><br><span class="line">    zxy.<span class="title function_">sing</span>(<span class="string">&#x27;李香兰&#x27;</span>); <span class="comment">// 李香兰</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 构造函数名字首字母要大写</span></span><br><span class="line">    <span class="comment">// 2. 我们构造函数不需要 return 就可以返回结果</span></span><br><span class="line">    <span class="comment">// 3. 我们调用构造函数,必须使用 new</span></span><br><span class="line">    <span class="comment">// 4. 我们只要 new Star() , 调用函数就创建一个对象 ldh  &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 5. 我们的属性和方法前面必须添加 this</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意<ul>
<li>构造函数约定首字母大写。</li>
<li>函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。</li>
<li>构造函数中不需要 return 返回结果。</li>
<li>当我们创建对象的时候，必须用 new 来调用构造函数。</li>
</ul>
</li>
<li>获取对象属性时,点和中括号方式的区别:<ul>
<li>01 点方法后面跟的必须是一个指定的属性名称，中括号里面可以是变量</li>
<li>02 中括号里面的属性可以是数字，点方法后面的属性名不能是数字</li>
<li>03 动态为对象添加属性时，只能用中括号</li>
</ul>
</li>
</ul>
<h4 id="案例-创建对象"><a href="#案例-创建对象" class="headerlink" title="案例_创建对象"></a>案例_创建对象</h4><p><img src="https://s1.vika.cn/space/2023/02/26/c20478e757584ce5ae23c0497136808d" alt="image-20220129145026104"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hero</span>(<span class="params">name, type, blood, attack</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = type;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">blood</span> = blood;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">attack</span> = attack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过构造函数创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> lianpo = <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;廉颇&quot;</span>, <span class="string">&quot;力量型&quot;</span>, <span class="number">500</span>, <span class="string">&quot;近战&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> houyi = <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;后羿&quot;</span>, <span class="string">&quot;射手型&quot;</span>, <span class="number">100</span>, <span class="string">&quot;远战&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lianpo);<span class="comment">// Hero &#123;name: &#x27;廉颇&#x27;, type: &#x27;力量型&#x27;, blood: 500, attack: &#x27;近战&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(houyi);<span class="comment">// Hero &#123;name: &#x27;后羿&#x27;, type: &#x27;射手型&#x27;, blood: 100, attack: &#x27;远战&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="构造函数和对象"><a href="#构造函数和对象" class="headerlink" title="构造函数和对象"></a>构造函数和对象</h4><ul>
<li>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）</li>
<li>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数和对象</span></span><br><span class="line"><span class="comment">// 1. 构造函数  明星 泛指的某一大类,它类似于类(class)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age, sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params">sang</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 对象 特指 是一个具体的事物 刘德华 ==  &#123;name: &quot;刘德华&quot;, age: 18, sex: &quot;男&quot;, sing: ƒ&#125;</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">// 调用函数返回的是一个对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line"><span class="comment">// 3. 我们利用构造函数创建对象的过程我们也称为对象的实例化</span></span><br></pre></td></tr></table></figure>

<h3 id="new-关键字"><a href="#new-关键字" class="headerlink" title="new 关键字"></a>new 关键字</h3><ul>
<li>new 在执行时会做四件事情：<ul>
<li><strong>在内存中创建一个新的空对象。</strong></li>
<li><strong>让 this 指向这个新的对象。</strong></li>
<li><strong>执行构造函数里面的代码，给这个新对象添加属性和方法。</strong></li>
<li><strong>返回这个新对象（所以构造函数里面不需要return）。</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new关键字执行过程</span></span><br><span class="line"><span class="comment">// 1. new 构造函数可以在内存中创建了一个空的对象 </span></span><br><span class="line"><span class="comment">// 2. this 就会指向刚才创建的空对象</span></span><br><span class="line"><span class="comment">// 3. 执行构造函数里面的代码 给这个空对象添加属性和方法</span></span><br><span class="line"><span class="comment">// 4. 返回这个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age, sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params">sang</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="遍历对象属性"><a href="#遍历对象属性" class="headerlink" title="遍历对象属性"></a>遍历对象属性</h3><ul>
<li>for…in 语句用于对数组或者对象的属性进行循环操作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">	<span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历对象 </span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k); <span class="comment">// k  输出得到的是 属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]); <span class="comment">// obj[k] 得到是 属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象小结"><a href="#对象小结" class="headerlink" title="对象小结"></a>对象小结</h3><ul>
<li>对象可以让代码结构更清晰</li>
<li>对象复杂数据类型 object。<ul>
<li>本质：对象就是一组无序的相关属性和方法的集合。</li>
</ul>
</li>
<li><strong>构造函数泛指某一大类</strong>，比如苹果，不管是红色苹果还是绿色苹果，都统称为苹果。</li>
<li><strong>对象实例特指一个事物</strong>，比如这个苹果、正在给你们讲课的pink老师等。</li>
<li>for…in 语句用于对对象的属性进行循环操作。</li>
</ul>
<h3 id="其他案例"><a href="#其他案例" class="headerlink" title="其他案例:"></a>其他案例:</h3><ul>
<li><p>创建一个电脑对象，该对象要有颜色、重量、品牌、型号，可以看电影、听音乐、打游戏和敲代码。</p>
</li>
<li><p>创建一个按钮对象，该对象中需要包含宽，高，背景颜色和点击行为。</p>
</li>
<li><p>创建一个车的对象，该对象要有重量、颜色、牌子，可以载人、拉货和耕田。</p>
</li>
<li><p>写一个函数，实现反转任意数组。</p>
</li>
<li><p>写一个函数，实现对数字数组的排序。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c4eb1b70071b4ca991f764080d7d70bd" alt="image-20220129145636798"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h2><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ul>
<li><p>JavaScript 中的对象分为 3 种：<strong>自定义对象 、内置对象、 浏览器对象</strong></p>
</li>
<li><p>前面两种对象是 JS 基础内容，属于 ECMAScript； 第三个浏览器对象,属于我们 JS 独有的，我们JS API 讲解</p>
</li>
<li><p>内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）</p>
</li>
<li><p>内置对象最大的优点就是帮助我们快速开发</p>
</li>
<li><p>JavaScript 提供了多个内置对象：Math、 Date 、Array、String 等</p>
</li>
</ul>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><h4 id="Math对象-1"><a href="#Math对象-1" class="headerlink" title="Math对象"></a>Math对象</h4><ul>
<li>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Math.PI  圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);<span class="comment">//3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.floor()  向下取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">2.13</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.ceil()  向上取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">2.13</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.round() 四舍五入 就近取整 注意 -3.5 结果是 -3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">2.13</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">2.53</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.abs()  绝对值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">5</span>)); <span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">5</span>)); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.max()  最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">12</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">32</span>, <span class="number">13</span>)); <span class="comment">// 53 ,若不写参数,返回的是 -Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.min()  最小值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">12</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">32</span>, <span class="number">13</span>)); <span class="comment">// 12 ,若不写参数,返回的是 Infinity</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：上面的方法必须带括号</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Math数学对象 不是一个构造函数 ，所以我们不需要new 来调用 而是直接使用里面的属性和方法即可</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>); <span class="comment">// 一个属性 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">99</span>, <span class="number">3</span>)); <span class="comment">// 99</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(-<span class="number">1</span>, -<span class="number">10</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">99</span>, <span class="string">&#x27;pink老师&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>()); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.绝对值方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27;-1&#x27;</span>)); <span class="comment">// 隐式转换 会把字符串型 -1 转换为数字型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27;pink&#x27;</span>)); <span class="comment">// NaN </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.三个取整方法</span></span><br><span class="line"><span class="comment">// (1) Math.floor()   地板 向下取整  往最小了取值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.9</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) Math.ceil()   ceil 天花板 向上取整  往最大了取值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) Math.round()   四舍五入  其他数字都是四舍五入，但是 .5 特殊 它往大了取  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.1</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.5</span>)); <span class="comment">// 这个结果是 -1</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-封装自定义数学对象"><a href="#案例-封装自定义数学对象" class="headerlink" title="案例-封装自定义数学对象"></a>案例-封装自定义数学对象</h4><ul>
<li>利用对象封装自己的数学对象 里面有 PI 最大值和最小值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用对象封装自己的数学对象  里面有 PI 最大值和最小值</span></span><br><span class="line"><span class="keyword">var</span> myMath = &#123;</span><br><span class="line">    <span class="attr">PI</span>: <span class="number">3.141592653</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">                max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">min</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> min = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &lt; min) &#123;</span><br><span class="line">                min = <span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="property">PI</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>));</span><br></pre></td></tr></table></figure>

<h4 id="随机数方法random"><a href="#随机数方法random" class="headerlink" title="随机数方法random()"></a>随机数方法random()</h4><ul>
<li>random() 方法可以随机返回一个小数，其取值范围是 [0，1)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到一个两数之间的随机整数，包括两个数在内</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRandom</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.Math对象随机数方法   random() 返回一个随机的小数  0 =&lt; x &lt; 1</span></span><br><span class="line"><span class="comment">// 2. 这个方法里面不跟参数</span></span><br><span class="line"><span class="comment">// 3. 代码验证 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 我们想要得到两个数之间的随机整数 并且 包含这2个整数</span></span><br><span class="line"><span class="comment">// Math.floor(Math.random() * (max - min + 1)) + min;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRandom</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 随机点名  </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;张三疯子&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;李思思&#x27;</span>, <span class="string">&#x27;pink老师&#x27;</span>];</span><br><span class="line"><span class="comment">// console.log(arr[0]);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="title function_">getRandom</span>(<span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure>

<h4 id="案例-猜数字游戏"><a href="#案例-猜数字游戏" class="headerlink" title="案例-猜数字游戏"></a>案例-猜数字游戏</h4><ul>
<li><p>程序随机生成一个 1~ 10 之间的数字，并让用户输入一个数字:</p>
<ul>
<li>如果大于该数字，就提示，数字大了，继续猜；</li>
<li>如果小于该数字，就提示数字小了，继续猜；</li>
<li>如果等于该数字，就提示猜对了， 结束程序。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 猜数字游戏</span></span><br><span class="line"><span class="comment">// 1.随机生成一个1~10 的整数  我们需要用到 Math.random() 方法。</span></span><br><span class="line"><span class="comment">// 2.需要一直猜到正确为止，所以需要一直循环。</span></span><br><span class="line"><span class="comment">// 3.while 循环更简单</span></span><br><span class="line"><span class="comment">// 4.核心算法：使用 if  else if 多分支语句来判断大于、小于、等于。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> random = <span class="title function_">getRandom</span>(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">// 产生一个随机数</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// 死循环</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;你来猜？ 输入1~10之间的一个数字&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (num &gt; random) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你猜大了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; random) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你猜小了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你好帅哦，猜对了&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 退出整个循环结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要求用户猜 1~50之间的一个数字 但是只有 10次猜的机会</span></span><br></pre></td></tr></table></figure>

<h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><h4 id="Date概述"><a href="#Date概述" class="headerlink" title="Date概述"></a>Date概述</h4><ul>
<li><p>Date 对象和 Math 对象不一样，他是一个构造函数，所以我们需要实例化后才能使用</p>
</li>
<li><p>Date 实例用来处理日期和时间</p>
</li>
</ul>
<h4 id="Date-方法的使用"><a href="#Date-方法的使用" class="headerlink" title="Date()方法的使用"></a>Date()方法的使用</h4><ul>
<li>获取当前时间必须实例化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Date() 日期对象  是一个构造函数 必须使用new 来调用创建我们的日期对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 创建一个数组对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// 创建了一个对象实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用 Date ,如果没有参数 返回当前系统的当前时间</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Date() 构造函数的参数</p>
<ul>
<li>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成 new Date(‘2019-5-1’)  或者 new Date(‘2019&#x2F;5&#x2F;1’)<ul>
<li>如果Date()不写参数，就返回当前时间</li>
<li>如果Date()里面写参数，就返回括号里面输入的时间</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 参数常用的写法  数字型  2019, 10, 01  或者是 字符串型 &#x27;2019-10-1 8:8:8&#x27;</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1); <span class="comment">// Fri Nov 01 2019 00:00:00 GMT+0800 (中国标准时间) 返回的是 11月 不是 10月 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-10-1 8:8:8&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date2); <span class="comment">// Tue Oct 01 2019 08:08:08 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><ul>
<li><p>我们想要 2019-8-8 8:8:8 格式的日期，要怎么办？</p>
</li>
<li><p>需要获取日期指定的部分，所以我们要手动的得到这种格式。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e381fa6e2a5847b0a2e9bb2cf838ddae" alt="image-20220129150815732"></p>
<h4 id="案例-输出当前日期"><a href="#案例-输出当前日期" class="headerlink" title="案例-输出当前日期"></a>案例-输出当前日期</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化日期 年月日 </span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 年  2019</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">// 月 返回的月份小1个月  记得月份+1 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>()); <span class="comment">// 星期  周一返回的是 1 周六返回的是 6 但是 周日返回的是 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们写一个 2019年 5月 1日 星期三</span></span><br><span class="line"><span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> day = date.<span class="title function_">getDay</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day]);</span><br></pre></td></tr></table></figure>

<h4 id="案例-输出当前时间"><a href="#案例-输出当前时间" class="headerlink" title="案例-输出当前时间"></a>案例-输出当前时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化日期 时分秒</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 时</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求封装一个函数返回当前的时分秒 格式 08:08:08</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> h = time.<span class="title function_">getHours</span>();</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = time.<span class="title function_">getMinutes</span>();</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = time.<span class="title function_">getSeconds</span>();</span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> h + <span class="string">&#x27;:&#x27;</span> + m + <span class="string">&#x27;:&#x27;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getTimer</span>());</span><br></pre></td></tr></table></figure>

<h4 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title="获取时间戳"></a>获取时间戳</h4><ul>
<li><p>Date 对象是基于1970年1月1日（世界标准时间）起的毫秒数</p>
</li>
<li><p>为什么计算机起始时间从1970年开始?</p>
</li>
<li><p>我们经常利用总的毫秒数来计算时间，因为它更精确</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得Date总的毫秒数(时间戳)  不是当前时间的毫秒数 而是距离1970年1月1号过了多少毫秒数</span></span><br><span class="line"><span class="comment">// 1. 通过 valueOf()  getTime()</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>()); <span class="comment">// 1659871815378 ,就是我们现在时间距离1970.1.1 总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>()); <span class="comment">// 1659871815378</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 简单的写法 (最常用的写法)</span></span><br><span class="line"><span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// +new Date()  返回的就是总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1); <span class="comment">// 1659871815378</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. H5 新增的 获得总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>()); <span class="comment">// 1659871815378</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-倒计时效果"><a href="#案例-倒计时效果" class="headerlink" title="案例-倒计时效果"></a>案例-倒计时效果</h4><p><img src="https://s1.vika.cn/space/2023/02/26/64ec03667ff140338c012e165ac17ad4" alt="1656652886020"></p>
<ul>
<li><p>案例分析:</p>
<ul>
<li>核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时 ，但是不能拿着时分秒相减，比如 05 分减去25分，结果会是负数的。</li>
<li>用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。</li>
<li>把剩余时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）</li>
</ul>
</li>
<li><p>转换公式如下：</p>
<ul>
<li><strong>d &#x3D; parseInt(总秒数&#x2F; 60&#x2F;60 &#x2F;24); &#x2F;&#x2F; 计算天数</strong></li>
<li><strong>h &#x3D; parseInt(总秒数&#x2F; 60&#x2F;60 %24) &#x2F;&#x2F; 计算小时</strong></li>
<li><strong>m &#x3D; parseInt(总秒数 &#x2F;60 %60 ); &#x2F;&#x2F; 计算分数</strong></li>
<li><strong>s &#x3D; parseInt(总秒数%60); &#x2F;&#x2F; 计算当前秒数</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 倒计时效果</span></span><br><span class="line"><span class="comment">// 1.核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时 ，但是不能拿着时分秒相减，比如 05 分减去25分，结果会是负数的。</span></span><br><span class="line"><span class="comment">// 2.用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。</span></span><br><span class="line"><span class="comment">// 3.把剩余时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）</span></span><br><span class="line"><span class="comment">// 转换公式如下： </span></span><br><span class="line"><span class="comment">//  d = parseInt(总秒数/ 60/60 /24);    //  计算天数</span></span><br><span class="line"><span class="comment">//  h = parseInt(总秒数/ 60/60 %24)   //   计算小时</span></span><br><span class="line"><span class="comment">//  m = parseInt(总秒数 /60 %60 );     //   计算分数</span></span><br><span class="line"><span class="comment">//  s = parseInt(总秒数%60);            //   计算当前秒数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(time); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天  </span></span><br><span class="line">    d = d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">// 时</span></span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countDown</span>(<span class="string">&#x27;2022-10-1 18:00:00&#x27;</span>)); <span class="comment">// 54天22时21分17秒</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Sun Aug 07 2022 19:38:42 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><ul>
<li><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number 和 Boolean。</p>
</li>
<li><p><strong>基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按道理基本数据类型是没有属性和方法的，对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</span></span><br><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><ul>
<li>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="comment">// 当重新给 str 赋值的时候，常量&#x27;abc&#x27;不会被修改，依然在内存中</span></span><br><span class="line">    <span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line">    <span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">      str += i;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间</span></span><br></pre></td></tr></table></figure>

<h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><ul>
<li>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b796ea74867c4bb5b9377f6b42278965" alt="image-20220129152704730"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串对象 ,根据字符返回位置  str.indexOf(&#x27;要查找的字符&#x27;, [起始的位置])</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;改革春风吹满地，春天来了&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;春&#x27;</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;春&#x27;</span>, <span class="number">3</span>)); <span class="comment">// 8 从索引号是 3 的位置开始往后查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;春&quot;</span>,<span class="number">7</span>)); <span class="comment">// 2 从索引号是7的位置开始往前面查找</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-返回指定字符的位置"><a href="#案例-返回指定字符的位置" class="headerlink" title="案例-返回指定字符的位置"></a>案例-返回指定字符的位置</h4><ul>
<li><p>查找字符串 “ abcoefoxyozzopp “ 中所有 o 出现的位置以及次数</p>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 核心算法：先查找第一个 o 出现的位置</li>
</ul>
</li>
<li><p>② 然后 只要 indexOf 返回的结果不是 -1 就继续往后查找</p>
<ul>
<li>③ 因为 indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加 1，从而继续查找</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找字符串&quot;abcoefoxyozzopp&quot;中所有o出现的位置以及次数</span></span><br><span class="line"><span class="comment">// 核心算法：先查找第一个o出现的位置</span></span><br><span class="line"><span class="comment">// 然后 只要indexOf 返回的结果不是 -1 就继续往后查找</span></span><br><span class="line"><span class="comment">// 因为indexOf 只能查找到第一个，所以后面的查找，一定是当前索引加1，从而继续查找</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;oabcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 0 4 7 10 13</span></span><br><span class="line">    num++;</span><br><span class="line">    index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o出现的次数是: &#x27;</span> + num); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 课后作业 [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;, &#x27;green&#x27;, &#x27;pink&#x27;,&#x27;red&#x27;], 求 red 出现的位置和次数</span></span><br></pre></td></tr></table></figure>

<h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p><img src="https://s1.vika.cn/space/2023/02/26/3d5916a05ead43a099cb836215cff29d" alt="image-20220129152829156"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据位置返回字符</span></span><br><span class="line"><span class="comment">// 1. charAt(index) 根据位置返回字符,索引从0开始</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">3</span>)); <span class="comment">// y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(i)); <span class="comment">// a n d y</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. charCodeAt(index)  返回相应索引号的字符ASCII值 目的：判断用户按下了那个键 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)); <span class="comment">// 97</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. str[index] H5 新增的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">0</span>]); <span class="comment">// a</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-返回字符位置"><a href="#案例-返回字符位置" class="headerlink" title="案例-返回字符位置"></a>案例-返回字符位置</h4><ul>
<li><p>判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数。</p>
</li>
<li><p>案例分析:</p>
</li>
<li><p>判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数。</p>
<ul>
<li>① 核心算法：利用 charAt(） 遍历这个字符串</li>
</ul>
</li>
<li><p>② 把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p>
<ul>
<li>③ 遍历对象，得到最大值和该字符对象 o { }</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有一个对象 来判断是否有该属性 对象[&#x27;属性名&#x27;]</span></span><br><span class="line">        <span class="keyword">var</span> o = &#123;</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o[<span class="string">&#x27;sex&#x27;</span>]) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;里面有该属性&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有该属性&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  判断一个字符串 &#x27;abcoefoxyozzopp&#x27; 中出现次数最多的字符，并统计其次数。</span></span><br><span class="line">        <span class="comment">// o.a = 1</span></span><br><span class="line">        <span class="comment">// o.b = 1</span></span><br><span class="line">        <span class="comment">// o.c = 1</span></span><br><span class="line">        <span class="comment">// o.o = 4</span></span><br><span class="line">        <span class="comment">// 核心算法：利用 charAt(） 遍历这个字符串</span></span><br><span class="line">        <span class="comment">// 把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span></span><br><span class="line">        <span class="comment">// 遍历对象，得到最大值和该字符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> chars = str.<span class="title function_">charAt</span>(i); <span class="comment">// chars 是字符串的每一个字符</span></span><br><span class="line">            <span class="keyword">if</span> (o[chars]) &#123; <span class="comment">// o[chars] 得到的是属性值</span></span><br><span class="line">                o[chars]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                o[chars] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(o);<span class="comment">// &#123;a:1,b:1,c:1,e:1,f:1,o:4,p:2,x:1,y:1,z:2&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 遍历对象</span></span><br><span class="line">        <span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> ch = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">            <span class="comment">// k 得到是 属性名</span></span><br><span class="line">            <span class="comment">// o[k] 得到的是属性值</span></span><br><span class="line">            <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">                max = o[k];</span><br><span class="line">                ch = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 4</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最多的字符是&#x27;</span> + ch); <span class="comment">// 最多的字符是 o</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p><img src="https://s1.vika.cn/space/2023/02/26/c5ae494e94254ad9ad6a4134af23543c" alt="image-20220129153039907"></p>
<ul>
<li><p>toUpperCase() &#x2F;&#x2F;转换大写</p>
</li>
<li><p>toLowerCase() &#x2F;&#x2F;转换小写</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. concat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;....)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&#x27;red&#x27;</span>)); <span class="comment">// andyred</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. substr(&#x27;截取的起始位置&#x27;, &#x27;截取几个字符&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 春风 ,第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</span></span><br></pre></td></tr></table></figure>


<h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><ul>
<li><p>replace() 方法用于在字符串中用一些字符替换另一些字符。</p>
</li>
<li><p>其使用格式如下：</p>
<ul>
<li>replace(被替换的字符串， 要替换为的字符串)；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andyandy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)); <span class="comment">// bndyandy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (str1.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    str1 = str1.<span class="title function_">replace</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1); <span class="comment">// abc*ef*xy*zz*pp</span></span><br></pre></td></tr></table></figure>

<h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><ul>
<li><p>split() 方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p>
</li>
<li><p>例如下面代码：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a,b,c,d&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)); <span class="comment">// 返回的是一个数组 [a, b, c, d]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    前面我们学过 join 把数组转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;red, pink, blue&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)); <span class="comment">// [&#x27;red&#x27;, &#x27; pink&#x27;, &#x27; blue&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;red&amp;pink&amp;blue&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)); <span class="comment">// [&#x27;red&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="其他案例-1"><a href="#其他案例-1" class="headerlink" title="其他案例"></a>其他案例</h4><ul>
<li><p>给定一个字符串，如：“abaasdffggghhjjkkgfddsssss3444343”，问题如下：</p>
<ul>
<li>1、 字符串的长度</li>
<li>2、 取出指定位置的字符，如：0,3,5,9等</li>
<li>3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等</li>
<li>4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法</li>
<li>5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串</li>
<li>6、 找出以上字符串中出现次数最多的字符和出现的次数</li>
<li>7、 遍历字符串，并将遍历出的字符两头添加符号“@”</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2024/01/11/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/105_JavaScript/10501_JavaScript_Base/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# JavaScript

<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><ul>
<li><p><strong>编程：就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</strong></p>
</li>
<li><p>计算机程序：就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。</p>
</li>
<li><p>从事编程的人员，就是程序员。 但是一般程序员都比较幽默，为了形容自己的辛苦工作，也成为“码农”，或者 “程序猿”&#x2F; “程序媛”</p>
</li>
<li><p>注意：上面所定义的计算机指的是任何能够执行代码的设备，可能是智能手机、ATM 机、黑莓 PI、服务器等等。</p>
</li>
</ul>
<h3 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h3><ul>
<li>计算机语言（computer language）<strong>指用于人与计算机之间通讯的语言，是人与计算机之间传递信息的介质</strong>。<ul>
<li>但是其概念比通用的编程语言要更广泛。</li>
<li>例如，HTML是标记语言，也是计算机语言，但并不是编程语言。</li>
</ul>
</li>
<li>计算机语言的种类非常的多，总的来说可以分成<strong>机器语言，汇编语言和高级语言</strong>三大类。</li>
<li>实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</li>
</ul>
<h3 id="编程语言-1"><a href="#编程语言-1" class="headerlink" title="编程语言"></a>编程语言</h3><h4 id="什么是编程语言"><a href="#什么是编程语言" class="headerlink" title="什么是编程语言"></a>什么是编程语言</h4><ul>
<li>编程语言（英语：programming language），是<strong>用来定义计算机程序的形式语言</strong>。</li>
<li>它是一种被标准化的交流技巧，用来向计算机发出指令，一种能够让程序员准确地定义计算机所需要使用数据的计算机语言，并精确地定义在不同情况下所应当采取的行动。</li>
<li>编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。</li>
<li>编程语言的特点：<ul>
<li><strong>数据和数据结构</strong></li>
<li><strong>指令及流程控制</strong></li>
<li><strong>引用机制和重用机制</strong></li>
<li><strong>设计哲学</strong></li>
</ul>
</li>
<li>如今通用的编程语言有两种形式：<strong>汇编语言和高级语言</strong>。</li>
<li>汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</li>
<li>高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">C语言：<span class="title function_">puts</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"><span class="variable constant_">PHP</span>：echo <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="title class_">Java</span>：<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"><span class="title class_">JavaScript</span>： <span class="title function_">alert</span>(<span class="string">&quot;你好&quot;</span>）;</span><br></pre></td></tr></table></figure>

<h4 id="编程语言的历史"><a href="#编程语言的历史" class="headerlink" title="编程语言的历史"></a>编程语言的历史</h4><ul>
<li><p>阶段一: 机器语言</p>
<ul>
<li>计算机的存储单元只有0和1两种状态，因此一串代码要让计算机“读懂”，这串代码只能由数字0和1组成。</li>
<li>像这种由数字0和1按照一定的规律组成的代码就叫机器码，也叫二进制编码。</li>
<li>一定长度的机器码组成了机器指令，用这些机器指令所编写的程序就称为机器语言。</li>
<li>优点:<ul>
<li>代码能被计算机直接识别，不需要经过编译解析；</li>
<li>直接对硬件产生作用，程序的执行效率非常高；</li>
</ul>
</li>
<li>缺点:<ul>
<li>程序全是些0和1的指令代码，可读性差，还容易出错；</li>
<li>不易编写(目前没有人这样开发)；</li>
</ul>
</li>
</ul>
</li>
<li><p>阶段二: 汇编语言</p>
<ul>
<li>为了解决机器语言的缺陷，人们发明了另外一种语言——汇编语言。</li>
<li>这种语言用符号来代替冗长的、难以记忆的0、1代码。(mov&#x2F;push指令，经过汇编器，汇编代码再进一步转成0101)</li>
<li>优点:<ul>
<li>像机器语言一样，可以直接访问、控制计算机的各种硬件设备；</li>
<li>占用内存少，执行速度快；</li>
</ul>
</li>
<li>缺点:<ul>
<li>第一，不同的机器有不同的汇编语言语法和编译器，代码缺乏可移植性<ul>
<li>也就是说，一个程序只能在一种机器上运行，换到其他机器上可能就不能运行；</li>
</ul>
</li>
<li>第二，符号非常多、难记<ul>
<li>即使是完成简单的功能也需要大量的汇编语言代码，很容易产生BUG，难于调试；</li>
</ul>
</li>
</ul>
</li>
<li>应用场景<ul>
<li>操作系统内核、驱动程序、单片机程序；</li>
</ul>
</li>
</ul>
</li>
<li><p>阶段三: 高级语言</p>
<ul>
<li>最好的编程语言应该是什么? 自然语言；</li>
<li>而高级语言, 就是接近自然语言, 更符合人类的思维方式</li>
<li>跟和人交流的方式很相似, 但是大多数编程语言都是国外发明的, 因为都是接近于英文的交流方式</li>
<li>优点:<ul>
<li>简单、易用、易于理解，语法和结构类似于普通英文；</li>
<li>远离对硬件的直接操作，使得一般人经过学习之后都可以编程，而不用熟悉硬件知识；</li>
<li>一个程序还可以在不同的机器上运行，具有可移植性；</li>
</ul>
</li>
<li>缺点:<ul>
<li>程序不能直接被计算机识别，需要经编译器翻译成二进制指令后，才能运行到计算机上；</li>
<li>种类繁多：JavaScript 、 C语言、C++、C#、Java、Objective-C 、Python等；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="翻译器"><a href="#翻译器" class="headerlink" title="翻译器"></a>翻译器</h3><ul>
<li>高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。</li>
<li>翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。 记住 1 和 0 。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/41197bc4cd47473790bae37959165661" alt="image-20220127182451106"></p>
<h3 id="编程语言和标记语言区别"><a href="#编程语言和标记语言区别" class="headerlink" title="编程语言和标记语言区别"></a>编程语言和标记语言区别</h3><ul>
<li><p>编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while 等具有逻辑性和行为能力的指令，这是主动的。</p>
</li>
<li><p>标记语言（ html ）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</p>
</li>
</ul>
<h3 id="编程语言总结"><a href="#编程语言总结" class="headerlink" title="编程语言总结"></a>编程语言总结</h3><ul>
<li>计算机可以帮助人类解决某些问题</li>
<li>程序员利用编程语言编写程序发出指令控制计算机来实现这些任务</li>
<li>编程语言有机器语言、汇编语言、高级语言</li>
<li>高级语言需要一个翻译器转换为计算机识别的机器语言</li>
<li>编程语言是主动的有很强的逻辑性</li>
</ul>
<h3 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h3><p><img src="https://s1.vika.cn/space/2023/02/26/662ee112e2ea4656a9b0cea67bf2c298"></p>
<h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><ul>
<li>计算机内部使用二进制 0 和 1 来表示数据。</li>
<li>所有数据，包括文件、图片等最终都是以二进制数据（ 0 和 1 ）的形式存放在硬盘中的。</li>
<li>所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</li>
<li>硬盘、内存都是保存的二进制数据。</li>
</ul>
<h3 id="数据的存储单位"><a href="#数据的存储单位" class="headerlink" title="数据的存储单位"></a>数据的存储单位</h3><ul>
<li>bit &lt; byte &lt; kb &lt; GB &lt; TB &lt;…..<ul>
<li><p>位(bit)： 1bit 可以保存一个 0 或者 1 （最小的存储单位）</p>
</li>
<li><p>字节(Byte)：1B &#x3D; 8b</p>
</li>
<li><p>千字节(KB)：1KB &#x3D; 1024B</p>
</li>
<li><p>兆字节(MB)：1MB &#x3D; 1024KB</p>
</li>
<li><p>吉字节(GB): 1GB &#x3D; 1024MB</p>
</li>
<li><p>太字节(TB): 1TB &#x3D; 1024GB</p>
</li>
<li><p>……</p>
</li>
</ul>
</li>
</ul>
<h3 id="程序的执行"><a href="#程序的执行" class="headerlink" title="程序的执行"></a>程序的执行</h3><p><img src="https://s1.vika.cn/space/2023/02/26/352ca9a48153461ebb9d2fe7bee16d84"></p>
<ul>
<li><p>打开某个程序时，先从硬盘中把程序的代码加载到内存中</p>
</li>
<li><p>CPU执行内存中的代码</p>
</li>
<li><p>注意：之所以要内存的一个重要原因，是因为 cpu 运行太快了，如果只从硬盘中读数据，会浪费 cpu 性能，所以才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</p>
</li>
</ul>
<h2 id="初识JavaScript"><a href="#初识JavaScript" class="headerlink" title="初识JavaScript"></a>初识JavaScript</h2><h3 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h3><ul>
<li><p>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</p>
</li>
<li><p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</p>
</li>
<li><p>现在也可以基于 Node.js 技术进行服务器端编程</p>
</li>
</ul>
<h3 id="JavaScript的起源"><a href="#JavaScript的起源" class="headerlink" title="JavaScript的起源"></a>JavaScript的起源</h3><ul>
<li><p>1994年，网景公司（Netscape）发布了Navigator浏览器0.9版。</p>
<ul>
<li>这是历史上第一个比较成熟的网络浏览器，轰动一时。</li>
<li>但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。</li>
<li>网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。</li>
</ul>
</li>
<li><p>网景公司当时想要选择一种语言来嵌入到浏览器中：</p>
<ul>
<li>采用现有的语言，比如Perl、Python、Tcl、Scheme等等, 允许它们直接嵌入网页;</li>
<li>1995年网景公司招募了程序员Brendan Eich，希望将Scheme语言作为网页脚本语言的可能性；</li>
</ul>
</li>
<li><p>就在这时，发生了另外一件大事：1995年Sun公司将Oak语言改名为Java，正式向市场推出；</p>
<ul>
<li>Java推出之后立马在市场上引起了轰动，Java当初有一个口号：“write once run anywhere”；</li>
<li>网景公司动了心，决定与Sun公司结成联盟，希望将Java嵌入到网页中来运行；</li>
<li>Brendan Eich本人非常热衷于Scheme，但是管理层那个时候有点倾向于Java，希望可以简化Java来适应网页脚本的需求；</li>
</ul>
</li>
<li><p>但是Brendan Eich对此并不感兴趣，他用10天时间设计出来了JavaScript；</p>
<ul>
<li>最初这门语言的名字是Mocha（摩卡）；</li>
<li>在Navigator2.0 beta版本更名为LiveScript；</li>
<li>在Navigator2.0 beta 3版本正式重命名为JavaScript，当时是为了给这门语言搭上Java这个热词；</li>
</ul>
</li>
<li><p>当然10天设计出来语言足够说明Brendan Eich是天才，但是这门语言当时更像是一个多种语言的大杂烩;</p>
<ul>
<li>借鉴C语言的基本语法；</li>
<li>借鉴Java语言的数据类型和内存管理；</li>
<li>借鉴Scheme语言，将函数提升到”第一等公民”（first class）的地位；</li>
<li>借鉴Self语言，使用基于原型（prototype）的继承机制。</li>
</ul>
</li>
<li><p>Brendan Eich曾经这样描述过JavaScript：</p>
<ul>
<li>与其说我爱Javascript，不如说我恨它，它是C语言和Self语言一夜情的产物；</li>
<li>十八世纪英国文学家约翰逊博士说得好：’它的优秀之处并非原创，它的原创之处并不优秀。’</li>
<li>（the part that is good is not original, and the part that is original is not good.）</li>
</ul>
</li>
<li><p>微软公司于1995年首次推出Internet Explorer，从而引发了与Netscape的浏览器大战。</p>
<ul>
<li>微软对Netscape Navigator解释器进行了逆向工程，创建了JScript，以与处于市场领导地位的网景产品同台竞争；</li>
<li>这个时候对于开发者来说是一场噩耗，因为需要针对不同的浏览器进行不同的适配；</li>
</ul>
</li>
<li><p>1996年11月，网景正式向ECMA（欧洲计算机制造商协会）提交语言标准。</p>
<ul>
<li>1997年6月，ECMA以JavaScript语言为基础制定了ECMAScript标准规范ECMA-262;</li>
<li>ECMA-262是一份标准，定义了ECMAScript;</li>
<li>JavaScript成为了ECMAScript最著名的实现之一;</li>
<li>除此之外，ActionScript和JScript也都是ECMAScript规范的实现语言；</li>
</ul>
</li>
<li><p>所以说，ECMAScript是一种规范，而JavaScript是这种规范的一种实现。</p>
</li>
</ul>
<h3 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h3><ul>
<li><p>表单动态校验（密码强度检测） （ JS 产生最初的目的 ）</p>
</li>
<li><p>网页特效</p>
</li>
<li><p>服务端开发( Node.js )</p>
</li>
<li><p>桌面程序( Electron )</p>
</li>
<li><p>App( Cordova )</p>
</li>
<li><p>控制硬件-物联网( Ruff )</p>
</li>
<li><p>游戏开发( cocos2d-js )</p>
</li>
</ul>
<h3 id="HTML-CSS-JS的关系"><a href="#HTML-CSS-JS的关系" class="headerlink" title="HTML&#x2F;CSS&#x2F;JS的关系"></a>HTML&#x2F;CSS&#x2F;JS的关系</h3><p><img src="https://s1.vika.cn/space/2023/02/26/4f356d1fff21442aa083b2c7c7cb05fd"></p>
<h3 id="浏览器执行JS"><a href="#浏览器执行JS" class="headerlink" title="浏览器执行JS"></a>浏览器执行JS</h3><ul>
<li><p>我们经常会说：不同的浏览器有不同的内核组成</p>
<ul>
<li>Gecko：早期被Netscape和Mozilla Firefox浏览器浏览器使用；</li>
<li>Trident：微软开发，被IE4~IE11浏览器使用，但是Edge浏览器已经转向Blink；</li>
<li>Webkit：苹果基于 KHTML 开发、开源的，用于Safari，Google Chrome之前也在使用；</li>
<li>Blink：是Webkit的一个分支，Google开发，目前应用于Google Chrome、Edge、Opera等；</li>
<li>等等…</li>
</ul>
</li>
<li><p>事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：</p>
<ul>
<li>排版引擎（layout engine），也称为浏览器引擎（browser engine）、页面渲染引擎（rendering engine）或样版引擎。</li>
</ul>
</li>
<li><p>那么，JavaScript代码由谁来执行呢？</p>
<ul>
<li>JavaScript引擎</li>
</ul>
</li>
<li><p>浏览器分成两部分：<strong>渲染引擎 和 JS 引擎</strong></p>
<ul>
<li><p>渲染引擎：用来解析 HTML 与 CSS ，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</p>
</li>
<li><p>JS 引擎：也称为 JS 解释器。 用来读取网页中的 JavaScript 代码，对其处理后运行，比如 chrome 浏览器的 V8</p>
</li>
</ul>
</li>
<li><p>浏览器本身并不会执行 JS 代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7b7fe6211476416d8d6e22ac704997f7"></p>
<h3 id="认识JavaScript引擎"><a href="#认识JavaScript引擎" class="headerlink" title="认识JavaScript引擎"></a>认识JavaScript引擎</h3><ul>
<li>为什么需要JavaScript引擎呢？<ul>
<li>我们前面说过，高级的编程语言都是需要转成最终的机器指令来执行的；</li>
<li>事实上我们编写的JavaScript无论你交给浏览器或者Node执行，最后都是需要被CPU执行的；</li>
<li>但是CPU只认识自己的指令集，实际上是机器语言，才能被CPU所执行；</li>
<li>所以我们需要JavaScript引擎帮助我们将JavaScript代码翻译成CPU指令来执行；</li>
</ul>
</li>
<li>比较常见的JavaScript引擎有哪些呢？<ul>
<li>SpiderMonkey：第一款JavaScript引擎，由Brendan Eich开发（也就是JavaScript作者）；</li>
<li>Chakra：微软开发，用于IT浏览器；</li>
<li>JavaScriptCore：WebKit中的JavaScript引擎，Apple公司开发；</li>
<li>V8：Google开发的强大JavaScript引擎，也帮助Chrome从众多浏览器中脱颖而出；</li>
<li>等等…</li>
</ul>
</li>
</ul>
<h3 id="内核和JS引擎的关系"><a href="#内核和JS引擎的关系" class="headerlink" title="内核和JS引擎的关系"></a>内核和JS引擎的关系</h3><ul>
<li>这里我们先以WebKit为例，WebKit事实上由两部分组成的：<ul>
<li>WebCore：负责HTML解析、布局、渲染等等相关的工作；</li>
<li>JavaScriptCore：解析、执行JavaScript代码；</li>
</ul>
</li>
<li>小程序中也是这样的划分：<ul>
<li>在小程序中编写的JavaScript代码就是被JSCore执行的；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/50a82131635045948fc5eafa946ca17e" alt="1670594512513"></p>
<h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><ul>
<li>ECMAScript是JavaScript的标准，描述了该语言的语法和基本对象。<ul>
<li>JavaScript是ECMAScript的语言层面的实现;</li>
<li>因为除了语言规范之外，JavaScript还需要对页面和浏览器进行各种操作;</li>
<li>除了基本实现之外，还包括DOM操作和BOM操作;</li>
</ul>
</li>
<li>目前我们会针对性的学习ECMAScript，也就是语言层面的内容，特别是ES5之前的语法。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e230f343f33d436cbb7ee670e297922b"></p>
<h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><ul>
<li>ECMAScript 是由 ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/1ad6d88e157f409d8605702627cea1bc"></p>
<ul>
<li>ECMAScript：ECMAScript 规定了 JS 的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套 JS 语法工业标准。</li>
</ul>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul>
<li><p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是 W3C 组织推荐的处理可扩展标记语言的标准编程接口。</p>
</li>
<li><p>通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p>
</li>
</ul>
<h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><ul>
<li><p>BOM (Browser Object Model，简称BOM) 是指<strong>浏览器对象模型</strong>，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结</p>
<p>构。通过 BOM 可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p>
</li>
</ul>
<h3 id="JavaScript应用"><a href="#JavaScript应用" class="headerlink" title="JavaScript应用"></a>JavaScript应用</h3><p><img src="https://s1.vika.cn/space/2023/02/26/d6b9e1faf7a44c089e7aa46a68042f34" alt="1670594696078"></p>
<h2 id="JavaScript初体验"><a href="#JavaScript初体验" class="headerlink" title="JavaScript初体验"></a>JavaScript初体验</h2><ul>
<li>JS 有 3 种书写位置，分别为<strong>行内、内嵌和外部。</strong></li>
</ul>
<h3 id="行内式JS"><a href="#行内式JS" class="headerlink" title="行内式JS"></a>行内式JS</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我试试&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World&#x27;)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以将单行或少量 JS 代码写在 HTML 标签的事件属性中（以 on 开头的属性），如：onclick</p>
</li>
<li><p>注意单双引号的使用：在 HTML 中我们推荐使用双引号, JS 中我们推荐使用单引号</p>
</li>
<li><p>可读性差， 在 html 中编写 JS 大量代码时，不方便阅读；</p>
</li>
<li><p>引号易错，引号多层嵌套匹配时，非常容易弄混；</p>
</li>
<li><p>特殊情况下使用</p>
</li>
</ul>
<h3 id="内嵌JS"><a href="#内嵌JS" class="headerlink" title="内嵌JS"></a>内嵌JS</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">alert</span>(<span class="string">&#x27;Hello World~!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以将多行 JS 代码写到 script 标签中</p>
</li>
<li><p>内嵌 JS 是学习时常用的方式</p>
</li>
</ul>
<h3 id="外部JS文件"><a href="#外部JS文件" class="headerlink" title="外部JS文件"></a>外部JS文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>利于 HTML 页面代码结构化，把大段 JS 代码独立到 HTML 页面之外，既美观，也方便文件级别的复用</p>
</li>
<li><p>引用外部 JS 文件的 script 标签的中间不可以写代码</p>
</li>
<li><p>适合于JS 代码量比较大的情况</p>
</li>
</ul>
<h3 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a>JavaScript注释</h3><ul>
<li><p>为了提高代码的可读性，JS 与 CSS 一样，也提供了注释功能。JS 中的注释主要有两种，分别是<strong>单行注释和多行注释</strong>。</p>
</li>
<li><p>单行注释与多行注释的注释方式如下：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释 快捷键:ctrl + /</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  多行注释  默认快捷键: shift + alt + a</span></span><br><span class="line"><span class="comment">  多行注释	vscode中修改多行注释的快捷键: ctrl + shift +/</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript输入输出语句"><a href="#JavaScript输入输出语句" class="headerlink" title="JavaScript输入输出语句"></a>JavaScript输入输出语句</h3><ul>
<li>为了方便信息的输入输出，JS 中提供了一些输入输出语句，其常用的语句如下：<ul>
<li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个具有输入框的网页弹出框</span></span><br><span class="line"><span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// alert 弹出警示框输出的展示给用户的</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;计算的结果是&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console 控制台输出给程序员测试用的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是程序员能看到的&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>文档注释 VSCode 中需要在单独的 JavaScript 文件中编写才有效）</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/15e437a61c4940c8b294e1941fd20ab7" alt="1670597388022"></p>
<h3 id="noscript-元素"><a href="#noscript-元素" class="headerlink" title="noscript 元素"></a>noscript 元素</h3><ul>
<li>如果运行的浏览器不支持JavaScript, 那么我们如何给用户更好的提示呢?<ul>
<li>针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案;</li>
<li>最终，<code>&lt;noscript&gt;</code> 元素出现，被用于给不支持 JavaScript 的浏览器提供替代内容;</li>
</ul>
</li>
<li>下面的情况下, 浏览器将显示包含在<code>&lt;noscript&gt;</code>中的内容:<ul>
<li>浏览器不支持脚本;</li>
<li>浏览器对脚本的支持被关闭。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a228c946713b4a1b952518fc3dec9fe5"></p>
<h3 id="JavaScript注意事项"><a href="#JavaScript注意事项" class="headerlink" title="JavaScript注意事项"></a>JavaScript注意事项</h3><ul>
<li>注意一: script元素不能写成单标签<ul>
<li>在外联式引用js文件时，script标签中不可以写JavaScript代码，并且script标签不能写成单标签；</li>
<li>即不能写成<code>&lt;script src=&quot;index.js&quot;/&gt;</code>；</li>
</ul>
</li>
<li>注意二: 省略type属性<ul>
<li>在以前的代码中，<code>&lt;script&gt;</code>标签中会使用 <code>type=“text/javascript”</code>；</li>
<li>现在可不写这个代码了，因为JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言；</li>
</ul>
</li>
<li>注意三: 加载顺序<ul>
<li>作为HTML文档内容的一部分，JavaScript默认遵循HTML文档的加载顺序，即自上而下的加载顺序；</li>
<li>推荐将JavaScript代码和编写位置放在body子元素的最后一行；</li>
</ul>
</li>
<li>注意四: JavaScript代码严格区分大小写<ul>
<li>HTML元素和CSS属性不区分大小写，但是在JavaScript中严格区分大小写；</li>
</ul>
</li>
</ul>
<h3 id="Chrome的调试工具"><a href="#Chrome的调试工具" class="headerlink" title="Chrome的调试工具"></a>Chrome的调试工具</h3><ul>
<li>在前面我们利用Chrome的调试工具来调试了HTML、CSS，它也可以帮助我们来调试JavaScript。</li>
<li>当我们在JavaScript中通过console函数显示一些内容时，也可以使用Chrome浏览器来查看：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c58536bda5aa4e0b9ba908d1d3fdc60d" alt="1670595637114"></p>
<ul>
<li>另外补充几点：<ul>
<li>1.如果在代码中出现了错误，那么可以在console中显示错误；</li>
<li>2.console中有个 &gt; 标志，它表示控制台的命令行<ul>
<li>在命令行中我们可以直接编写JavaScript代码，按下enter会执行代码；</li>
<li>如果希望编写多行代码，可以按下shift+enter来进行换行编写；</li>
</ul>
</li>
<li>3.在后续我们还会学习如何通过debug方式来调试、查看代码的执行流程；</li>
</ul>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><ul>
<li><p>白话：变量就是一个装东西的盒子。</p>
</li>
<li><p>通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。</p>
</li>
</ul>
<h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><ul>
<li>如果我们希望记录某一个之后会变量的数据，在JavaScript中我们可以定义一个 变量：<ul>
<li>一个变量，就是一个用于存放数值的容器；</li>
<li>这个数值可能是一个用于计算的数字，或者是一个句子中的字符串，或者其他任意的数据；</li>
<li>变量的独特之处在于它存放的数值是可以改变的；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/24ed77103f6f4d43842deb32203ccb5a"></p>
<ul>
<li>本质：<strong>变量是程序在内存中申请的一块用来存放数据的空间</strong>。</li>
<li>我们可以把变量想象成一个盒子，盒子里面装着我们的数据，我们需要给盒子进行一个特性的名称。<ul>
<li>例如，变量 message 可以被想象成一个标有 “message” 的盒子，盒子里面的值为 “Hello!”；</li>
<li>并且，这个盒子的值，我们想改变多少次，就可以改变多少次；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7667f5a60d9f4106bb6a546027052ce7" alt="1670597654684"></p>
<h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><ul>
<li><p>变量在使用时分为两步： </p>
<ul>
<li><p>01 声明变量 </p>
</li>
<li><p>02 赋值</p>
</li>
</ul>
</li>
</ul>
<h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">// 声明一个 名称为age 的变量</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>var 是一个 JS 关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</p>
</li>
<li><p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p>
</li>
</ul>
<h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">age = <span class="number">10</span>; <span class="comment">// 给 age 这个变量赋值为 10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&#x3D; 用来把右边的值赋给左边的变量空间中,此处的 “&#x3D;” 代表赋值的意思</li>
<li>变量值是程序员保存到变量空间里的值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1．声明了一个age的变量</span></span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2．赋值,把值存入这个变量中</span></span><br><span class="line">age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3．输出结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br></pre></td></tr></table></figure>

<h4 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h4><ul>
<li><strong>声明一个变量并赋值， 我们称之为变量的初始化</strong>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>; <span class="comment">// 声明变量同时赋值为 18  变量的初始化</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4．变量的初始化</span></span><br><span class="line"><span class="keyword">var</span> myname = <span class="string">&quot;pink老师&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname);</span><br></pre></td></tr></table></figure>

<h4 id="案例-变量的使用"><a href="#案例-变量的使用" class="headerlink" title="案例-变量的使用"></a>案例-变量的使用</h4><ul>
<li><p>有个叫卡卡西的人在旅店登记的时候前台让他填一张表，这张表里的内容要存到电脑上，表中的内容有：姓名、年龄、邮箱、家庭住址和工资，存储之后需要把这些信息显示出来，所显示的内容如下：</p>
<ul>
<li>我叫旗木卡卡西，我住在火影村，我今年30岁了，我的邮箱是 <a href="mailto:&#x6b;&#97;&#107;&#97;&#x78;&#x69;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#x74;&#x2e;&#99;&#110;">&#x6b;&#97;&#107;&#97;&#x78;&#x69;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#x74;&#x2e;&#99;&#110;</a>，我的工资2000.</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myname = <span class="string">&quot;旗木卡卡西&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> address = <span class="string">&quot;火影村&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> email = <span class="string">&quot;kakaxi@itcast.cn&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> gz = <span class="number">2000</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(address);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(email);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gz);</span><br></pre></td></tr></table></figure>

<h4 id="案例-变量的使用-1"><a href="#案例-变量的使用-1" class="headerlink" title="案例-变量的使用"></a>案例-变量的使用</h4><ul>
<li>01 弹出一个输入框，提示用户输入姓名。</li>
<li>02 弹出一个对话框，输出用户刚才输入的姓名。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1．用户输入姓名存储到一个 myname的变量里面</span></span><br><span class="line"><span class="keyword">var</span> myname = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的名字&#x27;</span>);</span><br><span class="line"><span class="comment">// 2．输出这个用户名</span></span><br><span class="line"><span class="title function_">alert</span>(myname);</span><br></pre></td></tr></table></figure>

<h4 id="变量的更新"><a href="#变量的更新" class="headerlink" title="变量的更新"></a>变量的更新</h4><ul>
<li><strong>一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">age = <span class="number">81</span>; <span class="comment">// 最后的结果就是 81, 因为 18 被覆盖掉了</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 1．更新变量</span></span><br><span class="line">  <span class="keyword">var</span> myname = <span class="string">&#x27;pink老师&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myname);<span class="comment">//pink老师</span></span><br><span class="line">myname =<span class="string">&quot;迪丽热巴&#x27;;</span></span><br><span class="line"><span class="string">  console.log(myname);//迪丽热巴</span></span><br></pre></td></tr></table></figure>

<h4 id="同时声明多个变量"><a href="#同时声明多个变量" class="headerlink" title="同时声明多个变量"></a>同时声明多个变量</h4><ul>
<li>同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>, name = <span class="string">&#x27;zs&#x27;</span>, sex = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//2．声明多个变量</span></span><br><span class="line"> <span class="comment">//var age = 18;</span></span><br><span class="line"> <span class="comment">//var address = &quot;火影村&quot;;</span></span><br><span class="line"> <span class="comment">//var gz = 2000;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连续声明多个变量</span></span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">18</span>, address = <span class="string">&quot;火影村&quot;</span>, gz = <span class="number">2000</span>;</span><br></pre></td></tr></table></figure>

<h4 id="声明变量的特殊情况"><a href="#声明变量的特殊情况" class="headerlink" title="声明变量的特殊情况"></a>声明变量的特殊情况</h4><p><img src="https://s1.vika.cn/space/2023/02/26/136730fdbde24d069d9ea76577ecde7b" alt="image-20220127205017391"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3．声明变重的特殊情况</span></span><br><span class="line"><span class="comment">// 3.1只声明不赋值结果是? 程序也不知道里面存的是啥所以结果是undefined 未定义的</span></span><br><span class="line"><span class="keyword">var</span> sex;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sex);<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 不声明不赋值直接使用某个变量会报错滴</span></span><br><span class="line"><span class="comment">// console.log(tel);//报错:tel is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.3不声明直接赋值使用会变为全局变量</span></span><br><span class="line">qq = <span class="number">110</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(qq); <span class="comment">// 110</span></span><br></pre></td></tr></table></figure>

<h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><ul>
<li><p>由字母( A-Za-z )、数字( 0-9 )、下划线( _ )、美元符号( $ )组成，如：usrAge, num01, _name</p>
</li>
<li><p>严格区分大小写。var app; 和 var App; 是两个变量</p>
</li>
<li><p>不能 以数字开头。 18age 是错误的</p>
</li>
<li><p>不能 是关键字、保留字。例如：var、for、while</p>
</li>
<li><p>变量名必须有意义。 MMD BBD nl → age</p>
</li>
<li><p>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。 myFirstName</p>
</li>
<li><p>推荐翻译网站： 有道 爱词霸</p>
</li>
</ul>
<h3 id="案例-交换两个变量的值"><a href="#案例-交换两个变量的值" class="headerlink" title="案例-交换两个变量的值"></a>案例-交换两个变量的值</h3><ul>
<li>要求：交换两个变量的值 ( 实现思路：使用一个 临时变量 用来做中间存储 )</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 是编程语言有很强的逻辑性在里面:实现这个要求的思路先怎么做后怎么做</span></span><br><span class="line"><span class="comment">// 1．我们需要一个临时变量帮我们</span></span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line"><span class="keyword">var</span> apple1 = <span class="string">&quot;青苹果&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apple2 = <span class="string">&#x27;红苹果&#x27;</span>;</span><br><span class="line"><span class="comment">// 2．把apple1 给我们的临时变量temp</span></span><br><span class="line">temp = apple1;</span><br><span class="line"><span class="comment">// 3．把apple2里面的苹果给apple1</span></span><br><span class="line">apple1 = apple2;</span><br><span class="line"><span class="comment">// 4．把临时变量里面的值给apple2</span></span><br><span class="line">apple2 = temp;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple2);</span><br></pre></td></tr></table></figure>

<h3 id="变量总结"><a href="#变量总结" class="headerlink" title="变量总结"></a>变量总结</h3><ul>
<li><p>为什么需要变量？	</p>
<ul>
<li>因为我们一些数据需要保存，所以需要变量</li>
</ul>
</li>
<li><p>变量是什么？</p>
<ul>
<li><strong>变量就是一个容器，用来存放数据的</strong>。方便我们以后使用里面的数据</li>
</ul>
</li>
<li><p>变量的本质是什么?</p>
<ul>
<li>变量是内存里的一块空间，用来存储数据。</li>
<li>声明变量本质是去内存申请空间。</li>
</ul>
</li>
<li><p>变量怎么使用的？</p>
<ul>
<li>我们使用变量的时候，一定要声明变量，然后赋值</li>
</ul>
</li>
<li><p>什么是变量的初始化？</p>
<ul>
<li><strong>声明变量的同时进行赋值,我们称之为变量的初始化</strong></li>
</ul>
</li>
<li><p>变量命名规范有哪些？</p>
<ul>
<li>变量名尽量要规范，见名知意——驼峰命名法</li>
</ul>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型简介"><a href="#数据类型简介" class="headerlink" title="数据类型简介"></a>数据类型简介</h3><h4 id="为什么需要数据类型"><a href="#为什么需要数据类型" class="headerlink" title="为什么需要数据类型"></a>为什么需要数据类型</h4><ul>
<li><p>在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。</p>
</li>
<li><p>简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。</p>
</li>
</ul>
<h4 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h4><ul>
<li>变量是用来存储值的所在处，它们有名字和数据类型。<strong>变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。</strong></li>
<li><strong>JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>; <span class="comment">// 这是一个数字型</span></span><br><span class="line"><span class="keyword">var</span> areYouOk = <span class="string">&#x27;是的&#x27;</span>; <span class="comment">// 这是一个字符串</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在代码运行时，变量的数据类型是由 JS 引擎 根据 &#x3D; 右边变量值的数据类型来判断的，运行完毕之后， 变量就确定了数据类型。</p>
</li>
<li><p>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>; <span class="comment">// x 为number类型</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill&quot;</span>; <span class="comment">// x 为string类型</span></span><br></pre></td></tr></table></figure>

<h4 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h4><ul>
<li>JS 把数据类型分为两类：<ul>
<li><p>简单数据类型 （<strong>Number,String,Boolean,Undefined,Null</strong>）</p>
</li>
<li><p>复杂数据类型 （object)</p>
</li>
</ul>
</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul>
<li>JavaScript 中的简单数据类型及其说明如下：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f326e28fbf5d455d8b045408b9eb22a9" alt="image-20220127210014388"></p>
<h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><h4 id="数值型-1"><a href="#数值型-1" class="headerlink" title="数值型"></a>数值型</h4><ul>
<li>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">21</span>; <span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Age</span> = <span class="number">21.3747</span>; <span class="comment">// 小数</span></span><br></pre></td></tr></table></figure>

<h4 id="数值型进制"><a href="#数值型进制" class="headerlink" title="数值型进制"></a>数值型进制</h4><ul>
<li>常见的进制有二进制、八进制、十进制、十六进制。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>; <span class="comment">// 对应十进制的7</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">019</span>; <span class="comment">// 对应十进制的19</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">08</span>; <span class="comment">// 对应十进制的8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0xA</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>现阶段我们只需要记住，在 JS 中八进制前面加 0，十六进制前面加 0x</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 八进制  0 ~ 7  我们程序里面数字前面加0 表示八进制</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">010</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 8  010  八进制 转换为 10进制 就是  8 </span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">012</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 十六进制  0 ~ 9  a ~ f    #ffffff  数字的前面加 0x 表示十六进制</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">0x9</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num3); <span class="comment">// 9</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="number">0xa</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num4); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h4 id="数值型范围"><a href="#数值型范围" class="headerlink" title="数值型范围"></a>数值型范围</h4><ul>
<li>JavaScript 中数值的最大和最小值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 数字型的最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="comment">// 4. 数字型的最小值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>); <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p>
</li>
<li><p>最小值：Number.MIN_VALUE，这个值为：5e-324</p>
</li>
</ul>
<h4 id="数值型的三个特殊值"><a href="#数值型的三个特殊值" class="headerlink" title="数值型的三个特殊值"></a>数值型的三个特殊值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5. 无穷大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>); <span class="comment">// Infinity 无穷大  </span></span><br><span class="line"><span class="comment">// 6. 无穷小</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>); <span class="comment">// -Infinity 无穷大</span></span><br><span class="line"><span class="comment">// 7. 非数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">100</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Infinity ，代表无穷大，大于任何数值</p>
</li>
<li><p>-Infinity ，代表无穷小，小于任何数值</p>
</li>
<li><p>NaN ，Not a number，代表一个非数值</p>
</li>
</ul>
<h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h4><ul>
<li>用来判断一个变量是否为( NaN )非数字的类型，返回 true 或者 false</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/fc02c5881e524b30b432276de218a300" alt="image-20220127210729579"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isNaN() 这个方法用来判断非数字   并且返回一个值 如果是数字返回的是 false 如果不是数字返回的是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">12</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;pink老师&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><h4 id="字符串型-1"><a href="#字符串型-1" class="headerlink" title="字符串型"></a>字符串型</h4><ul>
<li>字符串型可以是引号中的任意文本，其语法为 双引号 “ “ 和 单引号’ ‘</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&quot;我爱北京天安门~&quot;</span>; <span class="comment">// 使用双引号表示字符串</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">&#x27;我爱吃猪蹄~&#x27;</span>; <span class="comment">// 使用单引号表示字符串</span></span><br><span class="line"><span class="comment">// 常见错误</span></span><br><span class="line"><span class="keyword">var</span> strMsg3 = 我爱大肘子; <span class="comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></span><br></pre></td></tr></table></figure>

<ul>
<li>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;pink&#x27;   &#x27;pink老师&#x27;  &#x27;12&#x27;   &#x27;true&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;我是一个&quot;高富帅&quot;的程序员&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h4 id="字符串引号嵌套"><a href="#字符串引号嵌套" class="headerlink" title="字符串引号嵌套"></a>字符串引号嵌套</h4><ul>
<li>JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&#x27;我是&quot;高帅富&quot;程序猿&#x27;</span>; <span class="comment">// 可以用&#x27;&#x27;包含&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">&quot;我是&#x27;高帅富&#x27;程序猿&quot;</span>; <span class="comment">// 也可以用&quot;&quot; 包含&#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 常见错误</span></span><br><span class="line"><span class="keyword">var</span> badQuotes = <span class="string">&#x27;What on earth?&quot;; // 报错，不能 单双引号搭配</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串转义符"><a href="#字符串转义符" class="headerlink" title="字符串转义符"></a>字符串转义符</h4><ul>
<li><p>类似 HTML 里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p>
</li>
<li><p>转义符都是<code>\</code>开头的，常用的转义符及其说明如下：</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d39261b91e1c48589ebbb72f94669fc6" alt="image-20220127211404788"></p>
<h4 id="案例-弹出警示框"><a href="#案例-弹出警示框" class="headerlink" title="案例-弹出警示框"></a>案例-弹出警示框</h4><p><img src="https://s1.vika.cn/space/2023/02/26/a4c27a2944114b75abe1c7451379c43a" alt="image-20220127211444835"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;酷热难耐，火辣的太阳底下，我挺拔的身姿，成为了最为独特的风景。\n我审视四周，这里，是我的舞台，我就是天地间的王者。\n这一刻，我豪气冲天，终于大喊一声：&quot;收破烂啦～&quot;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><ul>
<li>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 检测获取字符串的长度 length </span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;my name is andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><ul>
<li><p>多个字符串之间可以使用<code>+</code>进行拼接，其拼接方式为 <code>字符串 + 任何类型 = 拼接之后的新字符串</code></p>
</li>
<li><p><strong>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</strong>, + 号总结口诀：数值相加 ，字符相连</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 字符串的拼接 +  只要有字符串和其他类型相拼接 最终的结果是字符串类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;沙漠&#x27;</span> + <span class="string">&#x27;骆驼&#x27;</span>); <span class="comment">// 沙漠骆驼</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">18</span>); <span class="comment">// &#x27;pink老师18&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink&#x27;</span> + <span class="literal">true</span>); <span class="comment">// pinktrue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12</span> + <span class="number">12</span>); <span class="comment">// 24</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span> + <span class="number">12</span>); <span class="comment">// &#x27;1212&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li>
<li>变量是不能添加引号的，因为加引号的变量会变成字符串</li>
<li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师age岁&#x27;</span>);</span><br><span class="line"><span class="comment">// 我们变量不要写到字符串里面，是通过和 字符串相连的方式实现的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + age + <span class="string">&#x27;岁&#x27;</span>);</span><br><span class="line"><span class="comment">// 变量和字符串相连的口诀：  引引加加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + age + <span class="string">&#x27;岁&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="案例-弹窗输入内容"><a href="#案例-弹窗输入内容" class="headerlink" title="案例-弹窗输入内容"></a>案例-弹窗输入内容</h4><ul>
<li>弹出一个输入框，需要用户输入年龄，之后弹出一个警示框显示“您今年 xx 岁啦”（xx 表示刚才输入的年龄）<ul>
<li>① 弹出一个输入框（prompt)，让用户输入年龄（用户输入）</li>
<li>② 把用户输入的值用变量保存起来,把刚才输入的年龄与所要输出的字符串拼接 （程序内部处理）</li>
<li>③ 使用 alert 语句弹出警示框（输出结果）</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/97a6d558f47d4e2598ff28f42f6d3aac" alt="image-20220127211920274"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹出一个输入框（prompt)，让用户输入年龄（用户输入）</span></span><br><span class="line"><span class="comment">// 把用户输入的值用变量保存起来,把刚才输入的年龄与所要输出的字符串拼接 （程序内部处理）</span></span><br><span class="line"><span class="comment">// 使用alert语句弹出警示框（输出结果）</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;您今年已经&#x27;</span> + age + <span class="string">&#x27;岁了&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(str);</span><br></pre></td></tr></table></figure>

<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><ul>
<li><p>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p>
</li>
<li><p>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">// flag 布尔型 </span></span><br><span class="line"><span class="keyword">var</span> flag1 = <span class="literal">false</span>; <span class="comment">// flag1 布尔型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag + <span class="number">1</span>); <span class="comment">// 2 true 参与加法运算当1来看</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag1 + <span class="number">1</span>); <span class="comment">// 1 false 参与加法运算当 0来看</span></span><br></pre></td></tr></table></figure>

<h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><ul>
<li>一个声明后没有被赋值的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果一个变量声明未赋值 就是 undefined 未定义数据类型</span></span><br><span class="line"><span class="keyword">var</span> str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> variable = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable + <span class="string">&#x27;pink&#x27;</span>); <span class="comment">// undefinedpink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable + <span class="number">1</span>); <span class="comment">// NaN  undefined 和数字相加 最后的结果是 NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + vari); <span class="comment">// 你好null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> + vari); <span class="comment">// 11  null会作为0进行相加操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + vari); <span class="comment">// 1 null会作为0进行相加操作</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// null 空值</span></span><br><span class="line"><span class="keyword">var</span> space = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(space + <span class="string">&#x27;pink&#x27;</span>); <span class="comment">// nullpink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(space + <span class="number">1</span>); <span class="comment">// 1  null会作为0进行相加操作</span></span><br></pre></td></tr></table></figure>

<h3 id="获取变量类型"><a href="#获取变量类型" class="headerlink" title="获取变量类型"></a>获取变量类型</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof()"></a>typeof()</h4><ul>
<li><strong>typeof 可用来获取检测变量的数据类型</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num) <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/b08ae391d97b42109356bbf7189758d1" alt="image-20220127212535592"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> flag); <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vari = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> vari); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// prompt 取过来的值是 字符型的</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ul>
<li>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。<ul>
<li>数字字面量：8, 9, 10</li>
<li>字符串字面量：’黑马程序员’, “大前端”</li>
<li>布尔字面量：true，false</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul>
<li><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另外一种数据类型。</p>
</li>
<li><p>我们通常会实现3种方式的转换：</p>
<ul>
<li><p><strong>转换为字符串类型</strong></p>
</li>
<li><p><strong>转换为数字型</strong></p>
</li>
<li><p><strong>转换为布尔型</strong></p>
</li>
</ul>
</li>
</ul>
<h4 id="转为字符串"><a href="#转为字符串" class="headerlink" title="转为字符串"></a>转为字符串</h4><p><img src="https://s1.vika.cn/space/2023/02/26/da8d1870f0244d1f9fd8287394a7c03d" alt="image-20220127212859337"></p>
<ul>
<li>toString() 和 String() 使用方式不一样。</li>
<li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 把数字型转换为字符串型 变量.toString()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = num.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">//10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">//string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 我们利用 String(变量)   </span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(num)); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 利用 + 拼接字符串的方法实现转换效果 隐式转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;&#x27;</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<h4 id="转换为数值型"><a href="#转换为数值型" class="headerlink" title="转换为数值型"></a>转换为数值型</h4><p><img src="https://s1.vika.cn/space/2023/02/26/53cbad6a0ba74211a718686a3c94840b" alt="image-20220127213027695"></p>
<ul>
<li>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</li>
<li>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class="line"><span class="comment">// 1. parseInt(变量)  可以把 字符型的转换为数字型 得到是整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(age));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3 取整数部分,直接舍弃小数部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.94&#x27;</span>)); <span class="comment">// 3 取整数部分,直接舍弃小数部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;120px&#x27;</span>)); <span class="comment">// 120 会去掉这个px单位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;rem120px&#x27;</span>)); <span class="comment">// NaN 不是数字开头的,结果就是NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. parseFloat(变量) 可以把 字符型的转换为数字型 得到是小数 浮点数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3.14</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;120px&#x27;</span>)); <span class="comment">// 120 会去掉这个px单位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;rem120px&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 利用 Number(变量) </span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str)); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(str)); <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;12&#x27;</span>)); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(<span class="string">&#x27;12&#x27;</span>)); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 利用了算数运算 -  *  /  隐式转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span> - <span class="number">0</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> - <span class="string">&#x27;120&#x27;</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> * <span class="number">1</span>); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-计算年龄"><a href="#案例-计算年龄" class="headerlink" title="案例-计算年龄"></a>案例-计算年龄</h4><ul>
<li>此案例要求在页面中弹出一个输入框，我们输入出生年份后， 能计算出我们的年龄。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/cd56ce4dd2d540b891f3e285871d7f4c"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹出一个输入框（prompt)，让用户输入出生年份 （用户输入）</span></span><br><span class="line"><span class="comment">// 把用户输入的值用变量保存起来，然后用今年的年份减去变量值，结果就是现在的年龄  （程序内部处理）</span></span><br><span class="line"><span class="comment">// 弹出警示框（alert) ， 把计算的结果输出 （输出结果）</span></span><br><span class="line"><span class="keyword">var</span> year = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入您的出生年份&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">2018</span> - year; <span class="comment">// year 取过来的是字符串型  但是这里用的减法 有隐式转换</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;您今年已经&#x27;</span> + age + <span class="string">&#x27;岁了&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="案例-简单加法器"><a href="#案例-简单加法器" class="headerlink" title="案例-简单加法器"></a>案例-简单加法器</h4><ul>
<li>计算两个数的值， 用户输入第一个值后，继续弹出第二个输入框并输入第二个值，最后通过弹出窗口显示出两次输入值相加的结果。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/335c3a1011014ba4a6d528a043267565"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先弹出第一个输入框，提示用户输入第一个值  保存起来</span></span><br><span class="line"><span class="comment">// 再弹出第二个框，提示用户输入第二个值  保存起来</span></span><br><span class="line"><span class="comment">// 把这两个值相加，并将结果赋给新的变量（注意数据类型转换）  </span></span><br><span class="line"><span class="comment">// 弹出警示框（alert) ， 把计算的结果输出 （输出结果）</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入第一个值：&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入第二个值：&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num1) + <span class="built_in">parseFloat</span>(num2);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;您的结果是:&#x27;</span> + result);</span><br></pre></td></tr></table></figure>

<h4 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h4><p><img src="https://s1.vika.cn/space/2023/02/26/68ec699672b541afb57760382d52f4bd" alt="image-20220127213509856"></p>
<ul>
<li><p><strong>代表空、否定的值会被转换为 false ，如 ‘ ‘、0、NaN、null、undefined</strong></p>
</li>
<li><p>其余值都会被转换为 true</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)); <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;123&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;你好吗&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;我很好&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript运算符"><a href="#JavaScript运算符" class="headerlink" title="JavaScript运算符"></a>JavaScript运算符</h2><ul>
<li><p>运算符（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p>
</li>
<li><p>JavaScript中常用的运算符有：</p>
<ul>
<li><p>算数运算符</p>
</li>
<li><p>递增和递减运算符</p>
</li>
<li><p>比较运算符</p>
</li>
<li><p>逻辑运算符</p>
</li>
<li><p>赋值运算符</p>
</li>
</ul>
</li>
</ul>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><h4 id="算术运算符概述"><a href="#算术运算符概述" class="headerlink" title="算术运算符概述"></a>算术运算符概述</h4><ul>
<li>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6cafd97a73e1496bbfff136c71371dc2"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> - <span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> * <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> / <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. % 取余 （取模）  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> % <span class="number">2</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">3</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> % <span class="number">5</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h4 id="浮点数的精度问题"><a href="#浮点数的精度问题" class="headerlink" title="浮点数的精度问题"></a>浮点数的精度问题</h4><ul>
<li>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。所以：不要直接判断两个浮点数是否相等 !</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 浮点数 算数运算里面会有问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.07</span> * <span class="number">100</span>); <span class="comment">// 7.000000000000001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 我们不能直接拿着浮点数来进行相比较 是否相等</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num == <span class="number">0.3</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>01 我们怎么判断 一个数能够被整除呢？</p>
<ul>
<li>它的余数是 0 就说明这个数能被整除， 这就是 % 取余运算符的主要用途</li>
</ul>
</li>
<li><p>02 请问 1 + 2 * 3 结果是？</p>
<ul>
<li>结果是7 ，注意算术运算符优先级的，先乘除，后加减，有小括号先算小括号里面的</li>
</ul>
</li>
</ul>
<h4 id="表达式和返回值"><a href="#表达式和返回值" class="headerlink" title="表达式和返回值"></a>表达式和返回值</h4><ul>
<li><strong>表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</strong></li>
<li>简单理解：是由数字、运算符、变量等组成的式子</li>
<li><strong>表达式最终都会有一个结果，返回给我们，我们称为返回值</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  是由数字、运算符、变量等组成的式子 我们成为表达式   1 + 1 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">1</span>); <span class="comment">// 2 就是返回值</span></span><br><span class="line"><span class="comment">// 1 + 1 = 2</span></span><br><span class="line"><span class="comment">// 在我们程序里面  2 = 1 + 1   把我们的右边表达式计算完毕把返回值给左边</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="递增-递减运算符"><a href="#递增-递减运算符" class="headerlink" title="递增&#x2F;递减运算符"></a>递增&#x2F;递减运算符</h3><ul>
<li><p>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。</p>
</li>
<li><p>在 JavaScript 中，递增（++）和递减（ – ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。</p>
</li>
<li><p>注意：<strong>递增和递减运算符必须和变量配合使用。</strong></p>
</li>
</ul>
<h4 id="前置递增运算符"><a href="#前置递增运算符" class="headerlink" title="前置递增运算符"></a>前置递增运算符</h4><ul>
<li><p>++num 前置递增，就是自加 1，类似于 num &#x3D; num + 1，但是 ++num 写起来更简单。</p>
</li>
<li><p>使用口诀：先自加，后返回值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(++num + <span class="number">10</span>); <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 想要一个变量自己加1   num = num + 1 比较麻烦</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">num = num + <span class="number">1</span>; <span class="comment">// ++num</span></span><br><span class="line">num = num + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 前置递增运算符  ++ 写在变量的前面</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">++age; <span class="comment">// 类似于 age = age + 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 先加1  后返回值</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++p + <span class="number">10</span>); <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>

<h4 id="后置递增运算符"><a href="#后置递增运算符" class="headerlink" title="后置递增运算符"></a>后置递增运算符</h4><ul>
<li><p>num++ 后置递增，就是自加1，类似于 num &#x3D; num + 1 ，但是 num++ 写起来更简单。</p>
</li>
<li><p>使用口诀：先返回原值，后自加</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">10</span> + num++); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num++; <span class="comment">// num = num + 1    ++num;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 前置自增和后置自增如果单独使用 效果是一样的</span></span><br><span class="line"><span class="comment">// 2. 后置自增 口诀：先返回原值 后自加1 </span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age++ + <span class="number">10</span>); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-递增案例"><a href="#案例-递增案例" class="headerlink" title="案例-递增案例"></a>案例-递增案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">++a; <span class="comment">// ++a  11    a = 11</span></span><br><span class="line"><span class="keyword">var</span> b = ++a + <span class="number">2</span>; <span class="comment">// a = 12   ++a = 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line">c++; <span class="comment">// c++ 11  c = 11</span></span><br><span class="line"><span class="keyword">var</span> d = c++ + <span class="number">2</span>; <span class="comment">//  c++  = 11     c = 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> f = e++ + ++e; <span class="comment">// 1. e++ =  10  e = 11  2. e = 12  ++e = 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f); <span class="comment">// 22</span></span><br><span class="line"><span class="comment">// 后置自增  先表达式返回原值 后面变量再自加1</span></span><br></pre></td></tr></table></figure>

<h4 id="前置递增和后置递增小结"><a href="#前置递增和后置递增小结" class="headerlink" title="前置递增和后置递增小结"></a>前置递增和后置递增小结</h4><ul>
<li><p>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1 比以前写法更简单</p>
</li>
<li><p>单独使用时，运行结果相同</p>
</li>
<li><p>与其他代码联用时，执行结果会不同</p>
</li>
<li><p>后置：先原值运算，后自加（先人后己）</p>
</li>
<li><p>前置：先自加，后运算（先已后人）</p>
</li>
<li><p>开发时，大多使用后置递增&#x2F;减，并且代码独占一行，例如：num++; 或者 num–;</p>
</li>
</ul>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><h4 id="比较运算符概述"><a href="#比较运算符概述" class="headerlink" title="比较运算符概述"></a>比较运算符概述</h4><ul>
<li>概念：<strong>比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true &#x2F; false）作为比较运算的结果。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a67c65ab24a04f70b6c2e7f113d116c2" alt="image-20220127221246618"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> &lt;= <span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 我们程序里面的等于符号 是 ==  默认转换数据类型 会把字符串型的数据转换为数字型 只要求值相等就可以</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> == <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> == <span class="string">&#x27;刘德华&#x27;</span>); <span class="comment">// flase</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> == <span class="number">18</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> == <span class="string">&#x27;18&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> != <span class="number">18</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 我们程序里面有全等 一模一样  要求 两侧的值 还有 数据类型完全一致才可以 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> === <span class="number">18</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> === <span class="string">&#x27;18&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="赋值-等于-全等小结"><a href="#赋值-等于-全等小结" class="headerlink" title="赋值&#x2F;等于&#x2F;全等小结"></a>赋值&#x2F;等于&#x2F;全等小结</h4><p><img src="https://s1.vika.cn/space/2023/02/26/3f123967a4424562ae702283b278cd37" alt="image-20220127221435071"></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul>
<li>概念：<strong>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。</strong>后面开发中经常用于多个条件的判断</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ccaac0cfe5f04fa7bf3a4ed1b6f07729" alt="image-20220127221601382"></p>
<h4 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h4><ul>
<li>两边都是 true才返回 true，否则返回 false</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/88a09bf4a3bd47288eb866001c3ec315" alt="image-20220127221648480"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 逻辑与 &amp;&amp;  两侧都为true  结果才是 true  只要有一侧为false  结果就为false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h4><ul>
<li>两边都为 false 才返回 false，否则都为 true</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/becf8a053da64833b60e1b23413e96d2" alt="image-20220127221737036"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 逻辑或 ||  两侧都为false  结果才是 false  只要有一侧为true  结果就是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &lt; <span class="number">2</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h4><ul>
<li>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 逻辑非  not  ！ </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-逻辑运算符案例"><a href="#案例-逻辑运算符案例" class="headerlink" title="案例-逻辑运算符案例"></a>案例-逻辑运算符案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;我爱你~中国~&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num &gt; <span class="number">5</span> &amp;&amp; str.<span class="property">length</span> &gt;= num); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num &lt; <span class="number">5</span> &amp;&amp; str.<span class="property">length</span> &gt;= num); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!(num &lt; <span class="number">10</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!(num &lt; <span class="number">10</span> || str.<span class="property">length</span> == num)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="短路运算-逻辑中断"><a href="#短路运算-逻辑中断" class="headerlink" title="短路运算(逻辑中断)"></a>短路运算(逻辑中断)</h4><ul>
<li><p>短路运算的原理：<strong>当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;也叫逻辑中断</strong></p>
</li>
<li><p>01 逻辑与</p>
<ul>
<li><p>语法： 表达式1 &amp;&amp; 表达式2</p>
<ul>
<li><p>如果第一个表达式的值为真，则返回表达式2的结果</p>
</li>
<li><p>如果第一个表达式的值为假，则返回表达式1的结果</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">123</span> &amp;&amp; <span class="number">456</span> ); <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">0</span> &amp;&amp; <span class="number">456</span> ); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">123</span> &amp;&amp; <span class="number">456</span> &amp;&amp; <span class="number">789</span> ); <span class="comment">// 789</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 用我们的布尔值参与的逻辑运算  true &amp;&amp; false  == false </span></span><br><span class="line"><span class="comment">// 2. 123 &amp;&amp; 456  是值 或者是 表达式 参与逻辑运算？ </span></span><br><span class="line"><span class="comment">// 3. 逻辑与短路运算  如果表达式1 结果为真 则返回表达式2  如果表达式1为假 那么返回表达式1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> &amp;&amp; <span class="number">456</span>); <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">456</span>); <span class="comment">//  0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">1</span> + <span class="number">2</span> &amp;&amp; <span class="number">456</span> * <span class="number">56789</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="number">1</span> + <span class="number">2</span> &amp;&amp; <span class="number">456</span> * <span class="number">56789</span>); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 如果有空的或者否定的则为假 其余是真的    假: 0  &#x27;&#x27;  null undefined  NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>02 逻辑或<ul>
<li>语法： 表达式1 || 表达式2<ul>
<li>如果第一个表达式的值为真，则返回表达式1的结果</li>
<li>如果第一个表达式的值为假，则返回表达式2的结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 逻辑或短路运算  如果表达式1 结果为真 则返回的是表达式1 如果表达式1 结果为假 则返回表达式2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || <span class="number">456</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || <span class="number">456</span> || <span class="number">456</span> + <span class="number">123</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> || <span class="number">456</span> || <span class="number">456</span> + <span class="number">123</span>); <span class="comment">// 456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑中断很重要 它会影响我们程序运行结果</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || num++); <span class="comment">// 123  因为直接返回了 123 , 表达式 num++ 并没有被执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul>
<li>概念：<strong>用来把数据赋值给变量的运算符。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/55fa46dfa4c54a1fba9adf0a73e1b610" alt="image-20220127222548310"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// num = num + 1; // 等同于: num++</span></span><br><span class="line"><span class="comment">// num = num + 2; // 等同于: num += 2;</span></span><br><span class="line"></span><br><span class="line">num += <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">2</span>;</span><br><span class="line">age *= <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><h4 id="运算符优先级-1"><a href="#运算符优先级-1" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p><img src="https://s1.vika.cn/space/2023/02/26/05b832060240466c85ff085caa3c9124" alt="image-20220127222648084"></p>
<ul>
<li><p>一元运算符里面的逻辑非优先级很高</p>
</li>
<li><p>逻辑与比逻辑或优先级高</p>
</li>
</ul>
<h4 id="运算符优先级案例"><a href="#运算符优先级案例" class="headerlink" title="运算符优先级案例"></a>运算符优先级案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> &gt;= <span class="number">6</span> || <span class="string">&#x27;人&#x27;</span> != <span class="string">&#x27;阿凡达&#x27;</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> == num / <span class="number">2</span> &amp;&amp; (<span class="number">2</span> + <span class="number">2</span> * num).<span class="title function_">toString</span>() === <span class="string">&#x27;22&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> &gt; <span class="number">5</span> &amp;&amp; <span class="number">2</span> &lt; <span class="number">7</span> &amp;&amp; <span class="number">3</span> == <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span> &lt;= <span class="number">4</span> || <span class="number">3</span> &gt; <span class="number">1</span> || <span class="number">3</span> != <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span> === <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = !c || b &amp;&amp; a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript流程控制-分支"><a href="#JavaScript流程控制-分支" class="headerlink" title="JavaScript流程控制-分支"></a>JavaScript流程控制-分支</h2><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul>
<li><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。</p>
</li>
<li><p>简单理解： <strong>流程控制就是来控制我们的代码按照什么结构顺序来执行</strong></p>
</li>
<li><p>流程控制主要有三种结构，分别是<strong>顺序结构、分支结构和循环结构</strong>，这三种结构代表三种代码执行的顺序。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/11469583364a4a7e8b973eba754da6aa" alt="image-20220128122027102"></p>
<h3 id="顺序流程控制"><a href="#顺序流程控制" class="headerlink" title="顺序流程控制"></a>顺序流程控制</h3><ul>
<li><strong>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行</strong>，程序中大多数的代码都是这样执行的。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/9c0aefd277ce4b44a71087afafc1fea4"></p>
<h3 id="分支流程控制-if语句"><a href="#分支流程控制-if语句" class="headerlink" title="分支流程控制_if语句"></a>分支流程控制_if语句</h3><ul>
<li><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果 , JS 语言提供了两种分支结构语句</p>
<ul>
<li><p>if 语句</p>
</li>
<li><p>switch 语句</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/97a298e1a5094e23a9cc4d16ea9373f7"></p>
<h4 id="if语句语法结构"><a href="#if语句语法结构" class="headerlink" title="if语句语法结构:"></a>if语句语法结构:</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">	<span class="comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</li>
</ul>
<h4 id="if语句执行流程"><a href="#if语句执行流程" class="headerlink" title="if语句执行流程"></a>if语句执行流程</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 执行思路  如果 if 里面的条件表达式结果为真(true) , 则执行大括号里面的 执行语句 </span></span><br><span class="line"><span class="comment">// 如果if 条件表达式结果为假(false) , 则不执行大括号里面的语句, 则执行 if 结构后面的代码</span></span><br><span class="line"><span class="comment">// 3. 代码体验</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;沙漠骆驼&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/234e3129ab2f4b86ac00898014a3b0eb" alt="1656570233242"></p>
<h4 id="if语句案例"><a href="#if语句案例" class="headerlink" title="if语句案例"></a>if语句案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹出 prompt 输入框，用户输入年龄， 程序把这个值取过来保存到变量中</span></span><br><span class="line"><span class="comment">// 使用 if 语句来判断年龄，如果年龄大于18 就执行 if 大括号里面的输出语句</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我想带你去网吧偷耳机&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 语法结构  if 如果  else 否则</span></span><br><span class="line"><span class="comment">// if (条件表达式) &#123;</span></span><br><span class="line"><span class="comment">//     // 执行语句1</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//     // 执行语句2 </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 2. 执行思路 如果表达式结果为真 那么执行语句1  否则  执行语句2</span></span><br></pre></td></tr></table></figure>

<h4 id="if-else语句执行流程"><a href="#if-else语句执行流程" class="headerlink" title="if else语句执行流程"></a>if else语句执行流程</h4><p><img src="https://s1.vika.cn/space/2023/02/26/748335e355c44dbda50b0c4391f89705" alt="1656570386429"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 代码验证</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我想带你去网吧偷耳机&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;滚， 回家做作业去&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5. if里面的语句1 和 else 里面的语句2 最终只能有一个语句执行  2选1</span></span><br><span class="line"><span class="comment">// 6.  else 后面直接跟大括号</span></span><br></pre></td></tr></table></figure>

<h4 id="if-else案例-判断闰年"><a href="#if-else案例-判断闰年" class="headerlink" title="if else案例-判断闰年"></a>if else案例-判断闰年</h4><ul>
<li>接收用户输入的年份，如果是闰年就弹出闰年，否则弹出是平年</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/319af748128743f9be13dbcb280bc545"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算法：能被4整除且不能整除100的为闰年（如2004年就是闰年，1901年不是闰年）或者能够被 400 整除的就是闰年</span></span><br><span class="line"><span class="comment">// 弹出prompt 输入框，让用户输入年份，把这个值取过来保存到变量中</span></span><br><span class="line"><span class="comment">// 使用 if 语句来判断是否是闰年，如果是闰年，就执行 if 大括号里面的输出语句，否则就执行 else里面的输出语句</span></span><br><span class="line"><span class="comment">// 一定要注意里面的且 &amp;&amp;  还有或者 || 的写法，同时注意判断整除的方法是取余为 0</span></span><br><span class="line"><span class="keyword">var</span> year = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入年份：&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;您输入的年份是闰年&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;您输入的年份是平年&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if-else案例-判断中奖"><a href="#if-else案例-判断中奖" class="headerlink" title="if else案例-判断中奖"></a>if else案例-判断中奖</h4><ul>
<li>接收用户输入的姓名，来判断是否中奖， 如果输入的是刘德华，则提示中了5块钱， 否则提示没有中奖。</li>
<li>案例分析:<ul>
<li>① 弹出 prompt 输入框，让用户输入姓名，把这个值取过来保存到变量中</li>
<li>② 使用 if 语句来判断是否存在这个姓名，如果存在，就执行 if 大括号里面的输出语句，否则就执行 else 里面的输出语句</li>
<li>③ 一定要注意判断是否相等，用 &#x3D;&#x3D; 或者 &#x3D;&#x3D;&#x3D;</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算法 如果你叫刘德华 恭喜您中奖了，否则没有中奖</span></span><br><span class="line"><span class="comment">// 获得用户名</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="title function_">prompt</span>(<span class="string">&quot;请输入您的姓名：&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>( username == <span class="string">&quot;刘德华&quot;</span>) &#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;恭喜发财&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;谢谢惠顾,欢迎下次再来&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if-else-if语句-语法结构"><a href="#if-else-if语句-语法结构" class="headerlink" title="if else if语句-语法结构"></a>if else if语句-语法结构</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 多分支语句   就是利用多个条件来选择不同的语句执行 得到不同的结果  多选1 的过程</span></span><br><span class="line"><span class="comment">// 2. if else if语句是多分支语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 语法规范</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 语句1;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 语句2;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 语句3;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 最后的语句;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 执行思路</span></span><br><span class="line"><span class="comment">// 如果条件表达式1 满足就执行 语句1 执行完毕后，退出整个if 分支语句  </span></span><br><span class="line"><span class="comment">// 如果条件表达式1 不满足，则判断条件表达式2  满足的话，执行语句2 以此类推</span></span><br><span class="line"><span class="comment">// 如果上面的所有条件表达式都不成立，则执行else 里面的语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 注意点</span></span><br><span class="line"><span class="comment">// (1) 多分支语句还是多选1 最后只能有一个语句执行</span></span><br><span class="line"><span class="comment">// (2) else if 里面的条件理论上是可以任意多个的</span></span><br><span class="line"><span class="comment">// (3) else if 中间有个空格</span></span><br></pre></td></tr></table></figure>

<h4 id="if-else-if语句-执行流程"><a href="#if-else-if语句-执行流程" class="headerlink" title="if else if语句-执行流程"></a>if else if语句-执行流程</h4><p><img src="https://s1.vika.cn/space/2023/02/26/92f5ee7c161747b09b12731ba02381bc" alt="image-20220128123310512"></p>
<h4 id="if-else-if-案例-判断级别"><a href="#if-else-if-案例-判断级别" class="headerlink" title="if else if 案例-判断级别"></a>if else if 案例-判断级别</h4><ul>
<li><p>要求：接收用户输入的分数，根据分数输出对应的等级字母 A、B、C、D、E。</p>
</li>
<li><p>其中：</p>
<ul>
<li><p>90分(含)以上 ，输出：A</p>
</li>
<li><p>80分(含)~ 90 分(不含)，输出：B</p>
</li>
<li><p>70分(含)~ 80 分(不含)，输出：C</p>
</li>
<li><p>60分(含)~ 70 分(不含)，输出：D</p>
</li>
<li><p>60分(不含) 以下，输出： E</p>
</li>
</ul>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 按照从大到小判断的思路</li>
</ul>
</li>
<li><p>② 弹出 prompt 输入框，让用户输入分数，把这个值取过来保存到变量中</p>
<ul>
<li>③ 使用多分支 if else if 语句来分别判断输出不同的值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  伪代码       按照从大到小判断的思路</span></span><br><span class="line"><span class="comment">// 弹出prompt输入框，让用户输入分数（score），把这个值取过来保存到变量中</span></span><br><span class="line"><span class="comment">// 使用多分支 if else if 语句来分别判断输出不同的值</span></span><br><span class="line"><span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入分数:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;宝贝，你是我的骄傲&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;宝贝，你已经很出色了&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你要继续加油喽&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;孩子，你很危险&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;熊孩子，我不想和你说话，我只想用鞭子和你说话&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><ul>
<li>三元表达式也能做一些简单的条件选择。 有三元运算符组成的式子称为三元表达式</li>
</ul>
<h4 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h4><ul>
<li><strong>表达式1 ? 表达式2 : 表达式3;</strong></li>
</ul>
<h4 id="执行思路"><a href="#执行思路" class="headerlink" title="执行思路"></a>执行思路</h4><ul>
<li>如果表达式 1 为 true ，则返回表达式 2 的值，如果表达式 1 为 false，则返回表达式 3 的值</li>
<li>简单理解： 就类似于 if else （双分支） 的简写</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 1. 有三元运算符组成的式子我们称为三元表达式</span></span><br><span class="line">    <span class="comment">// 2. ++num     3 + 5     ? :</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 语法结构 </span></span><br><span class="line">    <span class="comment">// 条件表达式 ？ 表达式1 ： 表达式2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 执行思路</span></span><br><span class="line">    <span class="comment">// 如果条件表达式结果为真 则 返回 表达式1 的值 如果条件表达式结果为假 则返回 表达式2 的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 代码体验</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> result = num &gt; <span class="number">5</span> ? <span class="string">&#x27;是的&#x27;</span> : <span class="string">&#x27;不是的&#x27;</span>; <span class="comment">// 我们知道表达式是有返回值的</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 是的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于:</span></span><br><span class="line"><span class="comment">// var num = 10;</span></span><br><span class="line">    <span class="comment">// if (num &gt; 5) &#123;</span></span><br><span class="line">    <span class="comment">//     result = &#x27;是的&#x27;;</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     result = &#x27;不是的&#x27;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(result); // 是的</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-数字补0"><a href="#案例-数字补0" class="headerlink" title="案例-数字补0"></a>案例-数字补0</h4><ul>
<li>用户输入数字，如果数字小于10，则在前面补 0 ，比如01，09 ，如果数字大于10，则不需要补，比如 20。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户输入0~59之间的一个数字</span></span><br><span class="line"><span class="comment">// 如果数字小于10，则在这个数字前面补0,（加0 拼接） 否则  不做操作</span></span><br><span class="line"><span class="comment">// 用一个变量接受这个返回值，输出</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入一个 0 ~ 59 之间的一个数字&#x27;</span>);</span><br><span class="line"><span class="comment">// 三元表达式   表达式 ？ 表达式1 ：表达式2 </span></span><br><span class="line"><span class="keyword">var</span> result = time &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + time : time; <span class="comment">//   把返回值赋值给一个变量</span></span><br><span class="line"><span class="title function_">alert</span>(result);</span><br></pre></td></tr></table></figure>

<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><h4 id="语法结构-1"><a href="#语法结构-1" class="headerlink" title="语法结构"></a>语法结构</h4><ul>
<li>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/58c61ca00eb64535bb0ca86b158b0c2e" alt="image-20220128123819975"></p>
<ul>
<li>switch ：开关 转换 ， case ：小例子 选项</li>
<li>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</li>
<li>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</li>
<li>switch 表达式的值会与结构中的 case 的值做全等(&#x3D;&#x3D;&#x3D;)比较</li>
<li>如果存在匹配全等(&#x3D;&#x3D;&#x3D;) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止整个 switch 语句代码的执行</li>
<li>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</li>
<li>注意： 执行 case 里面的语句时，如果没有 break，则继续执行下一个 case 里面的语句,指导遇到 break 才会停止 switch 的执行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 代码验证</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是1&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是2&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是3&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有匹配结果&#x27;</span>); <span class="comment">// 没有匹配结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch注意事项</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. 我们开发里面 表达式我们经常写成变量</span></span><br><span class="line"><span class="comment">// 2. 我们 num 的值 和 case 里面的值相匹配的时候是 全等   必须是值和数据类型一致才可以 num === 1</span></span><br><span class="line"><span class="comment">// 3. break 如果当前的 case 里面没有 break 则不会退出switch 而是继续执行下一个case</span></span><br></pre></td></tr></table></figure>

<h4 id="switch语句-案例"><a href="#switch语句-案例" class="headerlink" title="switch语句-案例"></a>switch语句-案例</h4><ul>
<li>用户在弹出框里面输入一个水果，如果有就弹出该水果的价格， 如果没有该水果就弹出“没有此水果”。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5910fa3fbf304096ae4411a24461b6e3"></p>
<ul>
<li>案例分析:<ul>
<li>01 弹出 prompt 输入框，让用户输入水果名称，把这个值取过来保存到变量中。</li>
<li>02 将这个变量作为 switch 括号里面的表达式。</li>
<li>03 case 后面的值写几个不同的水果名称，注意一定要加引号 ，因为必须是全等匹配。</li>
<li>04 弹出不同价格即可。同样注意每个 case 之后加上 break ，以便退出 switch 语句。</li>
<li>05 将 default 设置为没有此水果。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹出 prompt 输入框，让用户输入水果名称，把这个值取过来保存到变量中。</span></span><br><span class="line"><span class="comment">// 将这个变量作为 switch 括号里面的表达式。</span></span><br><span class="line"><span class="comment">// case 后面的值写几个不同的水果名称，注意一定要加引号 ，因为必须是全等匹配。</span></span><br><span class="line"><span class="comment">// 弹出不同价格即可。同样注意每个 case 之后加上 break ，以便退出 switch 语句。</span></span><br><span class="line"><span class="comment">// 将 default 设置为没有此水果。</span></span><br><span class="line"><span class="keyword">var</span> fruit = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入查询的水果:&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;苹果&#x27;</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;苹果的价格是 3.5/斤&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;榴莲&#x27;</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;榴莲的价格是 35/斤&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;没有此水果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="switch与if-else-if的区别"><a href="#switch与if-else-if的区别" class="headerlink" title="switch与if else if的区别"></a>switch与if else if的区别</h4><ul>
<li><p>01 一般情况下，它们两个语句可以相互替换</p>
</li>
<li><p>02 switch…case 语句通常处理 case 为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</p>
</li>
<li><p>03 switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而 if…else 语句有几种条件，就得判断多少次。</p>
</li>
<li><p>04 当分支比较少时，if… else 语句的执行效率比 switch 语句高。</p>
</li>
<li><p>05 当分支比较多时，switch 语句的执行效率比较高，而且结构更清晰。</p>
</li>
</ul>
<h4 id="其他案例"><a href="#其他案例" class="headerlink" title="其他案例"></a>其他案例</h4><ul>
<li>01 判断时间阶段。 比如 用户输入12点 弹出 中午好 用户输入 18点 弹出傍晚好 用户输入 23点 弹出深夜好</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为 switch 中进行的是全等匹配,所以需要对输入的内容进行类型转换</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请用户输入时间:&quot;</span>))</span><br><span class="line"><span class="keyword">switch</span> (time) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;中午好&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下午好&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;晚上好&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你输入的时间没有匹配到问候语~~~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>02 比较两个数的最大值 （用户依次输入2个值，最后弹出最大的那个值）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为 switch 中进行的是全等匹配,所以需要对输入的内容进行类型转换</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请用户输入数字1:&quot;</span>))</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请用户输入数字2:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最大值为&quot;</span> + num1)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num2 &gt; num1) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最大值为&quot;</span> + num2)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;两个值大小相等:&quot;</span> + num1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>03 用户输入一个数，来判断是奇数还是偶数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请用户输入数字:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是个奇数&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是个偶数&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>04 根据用户输入的数值（数字1 到 数字 7），返回星期几</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> week = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请用户输入1-7的数字:&quot;</span>))</span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;星期1&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;星期2&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;星期3&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;星期4&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;星期5&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;星期6&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;星期7&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你输入的数字没有匹配到星期&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>05 接收班长口袋里的钱数,若大于等于2000，请大家吃西餐。若小于2000，大于等于1500，请大家吃快餐。若小于1500，大于等于1000，请大家喝饮料。若小于1000，大于等于500，请大家吃棒棒糖。否则提醒班长下次把钱带够</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> money = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;班长你有多少钱请我们吃饭:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (money &gt;= <span class="number">2000</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请大家吃西餐&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">1500</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请大家吃快餐&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请大家喝饮料&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请大家吃棒棒糖&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;班长,带够钱啊~~&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>06 分数转换,给一个分数，判定等级。大于等于90 A，大于等于80小于90 B，大于等于70小于80 C ，大于等于60小于70 D，小于60 E</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请输入你的分数:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;BBB&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CCC&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DDD&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;EEE&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="JavaScript流程控制-循环"><a href="#JavaScript流程控制-循环" class="headerlink" title="JavaScript流程控制-循环"></a>JavaScript流程控制-循环</h2><ul>
<li><p>在实际问题中，有许多具有规律性的重复操作，因此在程序中要完成这类操作就需要重复执行某些语句</p>
</li>
<li><p>在 JS 中，主要有三种类型的循环语句：</p>
<ul>
<li><p><strong>for 循环</strong></p>
</li>
<li><p><strong>while 循环</strong></p>
</li>
<li><p><strong>do…while 循环</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul>
<li>在程序中，<strong>一组被重复执行的语句被称之为循环体，能否继续重复执行，取决于循环的终止条件。由循环体及循环的终止条件组成的语句，被称之为循环语句</strong></li>
</ul>
<h4 id="语法结构-2"><a href="#语法结构-2" class="headerlink" title="语法结构"></a>语法结构</h4><ul>
<li>for 循环主要用于把某些代码循环若干次，通常跟计数有关系。其语法结构如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;</span><br><span class="line">	<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化变量：通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</li>
<li>条件表达式：用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</li>
<li>操作表达式：每次循环的最后都要执行的表达式。通常被用于更新或者递增计数器变量。当然，递减变量也是可以的。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. for 重复执行某些代码， 通常跟计数有关系</span></span><br><span class="line"><span class="comment">// 2. for 语法结构</span></span><br><span class="line"><span class="comment">// for (初始化变量; 条件表达式; 操作表达式) &#123;</span></span><br><span class="line"><span class="comment">//     // 循环体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 3. 初始化变量 就是用var 声明的一个普通变量， 通常用于作为计数器使用 </span></span><br><span class="line"><span class="comment">// 4. 条件表达式 就是用来决定每一次循环是否继续执行 就是终止的条件</span></span><br><span class="line"><span class="comment">// 5. 操作表达式 是每次循环最后执行的代码 经常用于我们计数器变量进行更新（递增或者递减）</span></span><br><span class="line"><span class="comment">// 6. 代码体验 我们重复打印100局 你好</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好吗&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><ol>
<li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li>
<li>执行条件表达式，如果为 true，则执行循环体语句，否则退出循环，循环结束。</li>
<li>执行操作表达式，此时第一轮结束。</li>
<li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li>
<li>继续执行操作表达式，第二轮结束。</li>
<li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 循环的执行过程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好吗&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. 首先执行里面的计数器变量  var i = 1 .但是这句话在for 里面只执行一次  index</span></span><br><span class="line"><span class="comment">// 2. 去 i &lt;= 100 来判断是否满足条件， 如果满足条件  就去执行 循环体  不满足条件退出循环 </span></span><br><span class="line"><span class="comment">// 3. 最后去执行 i++  , i++ 是单独写的代码 递增  第一轮循环结束 </span></span><br><span class="line"><span class="comment">// 4. 接着去执行 i &lt;= 100 如果满足条件  就去执行循环体  不满足条件退出循环   第二轮</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-输出1-100"><a href="#案例-输出1-100" class="headerlink" title="案例-输出1-100"></a>案例-输出1-100</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 循环可以执行相同的代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;媳妇我错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以让用户控制输出的次数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入次数&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;媳妇我错了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 循环可以重复执行不同的代码  因为我们有计数器变量 i 的存在, i每次循环值都会变化</span></span><br><span class="line"><span class="comment">// 我们想要输出1个人 1~100岁</span></span><br><span class="line"><span class="comment">// for (var i = 1; i &lt;= 100; i++) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;这个人今年&#x27; + i + &#x27;岁了&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年1岁了，他出生了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年100岁了，他死了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例-求1-100累加和"><a href="#案例-求1-100累加和" class="headerlink" title="案例-求1-100累加和"></a>案例-求1-100累加和</h4><ul>
<li>案例分析:<ul>
<li>① 需要循环100次，我们需要一个计数器 i</li>
<li>② 我们需要一个存储结果的变量 sum ，但是初始值一定是 0</li>
<li>③ 核心算法：1 + 2 + 3 + 4 …. ，sum &#x3D; sum + i;</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 循环重复执行某些操作 比如说我们做了100次加法运算</span></span><br><span class="line"><span class="comment">// 求 1~100 之间的整数累加和</span></span><br><span class="line"><span class="comment">//         需要循环100次，我们需要一个计数器  i  </span></span><br><span class="line"><span class="comment">// 我们需要一个存储结果的变量 sum ，但是初始值一定是 0</span></span><br><span class="line"><span class="comment">// 核心算法：1 + 2 + 3 + 4 ....   ，sum  =  sum + i;</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">// 求和 的变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i; <span class="comment">// sum = sum + i;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 5050</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-求1到100的平均数"><a href="#案例-求1到100的平均数" class="headerlink" title="案例-求1到100的平均数"></a>案例-求1到100的平均数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 求1-100之间所有数的平均值   需要一个 sum 和的变量 还需要一个平均值 average 变量</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line">average = sum / <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(average);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求 1 到 n 的整数和,平均值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请输入整数N:&quot;</span>))</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">// 和</span></span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>; <span class="comment">// 平均值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">  sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 累加和</span></span><br><span class="line">average = sum / num;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(average); <span class="comment">// 平均值</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-求1到100的奇偶和"><a href="#案例-求1到100的奇偶和" class="headerlink" title="案例-求1到100的奇偶和"></a>案例-求1到100的奇偶和</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 求1-100之间所有偶数和奇数的和   我们需要一个偶数的和变量 even  还需要一个奇数 odd</span></span><br><span class="line"><span class="keyword">var</span> even = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> odd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    even = even + i;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    odd = odd + i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1~100 之间所有的偶数和是&#x27;</span> + even); <span class="comment">// 2550</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1~100 之间所有的奇数和是&#x27;</span> + odd); <span class="comment">// 2500</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-求被3整除的数字和"><a href="#案例-求被3整除的数字和" class="headerlink" title="案例-求被3整除的数字和"></a>案例-求被3整除的数字和</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 求1-100之间所有能被3整除的数字的和   </span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        result += i; <span class="comment">// result = result + i;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1~100之间能够被3整数的数字的和是：&#x27;</span> + result);</span><br></pre></td></tr></table></figure>

<h4 id="案例-求学生成绩"><a href="#案例-求学生成绩" class="headerlink" title="案例-求学生成绩"></a>案例-求学生成绩</h4><ul>
<li>要求用户输入班级人数，之后依次输入每个学生的成绩，最后打印出该班级总的成绩以及平均成绩。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b10727cc427a41aaa4dac09ed939458d" alt="image-20220128130747692"></p>
<ul>
<li><p>案例分析:</p>
<ul>
<li><p>① 弹出输入框输入总的班级人数 ( num )</p>
</li>
<li><p>② 依次输入学生的成绩（保存起来 score），此时我们需要用到 for 循环，弹出的次数跟班级</p>
</li>
<li><p>总人数有关系 条件表达式 i &lt;&#x3D; num</p>
</li>
<li><p>③ 进行业务处理: 计算成绩。 先求总成绩（sum），之后求平均成绩（average）</p>
</li>
<li><p>④ 弹出结果</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹出输入框输入总的班级人数(num)</span></span><br><span class="line"><span class="comment">// 依次输入学生的成绩（ 保存起来 score）， 此时我们需要用到</span></span><br><span class="line"><span class="comment">// for 循环， 弹出的次数跟班级总人数有关系 条件表达式 i &lt;= num</span></span><br><span class="line"><span class="comment">// 进行业务处理: 计算成绩。 先求总成绩（sum）， 之后求平均成绩（average）</span></span><br><span class="line"><span class="comment">// 弹出结果</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入班级的总人数:&#x27;</span>); <span class="comment">// num 总的班级人数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">// 求和的变量</span></span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>; <span class="comment">// 求平均值的变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入第&#x27;</span> + i + <span class="string">&#x27;个学生成绩&#x27;</span>);</span><br><span class="line">    <span class="comment">// 因为从prompt取过来的数据是 字符串型的需要转换为数字型</span></span><br><span class="line">    sum = sum + <span class="built_in">parseFloat</span>(score);</span><br><span class="line">&#125;</span><br><span class="line">average = sum / num;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;班级总的成绩是&#x27;</span> + sum);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;班级平均分是：&#x27;</span> + average);</span><br></pre></td></tr></table></figure>

<h4 id="案例-一行打印5个星星"><a href="#案例-一行打印5个星星" class="headerlink" title="案例-一行打印5个星星"></a>案例-一行打印5个星星</h4><ul>
<li>我们采取追加字符串的方式，这样可以打印到控制台上。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环输出五次 ★</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;★&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一行打印五个星星 </span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    str = str + <span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一行打印指定个数的 ★</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入星星的个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    str = str + <span class="string">&#x27;★&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h3 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h3><h4 id="双重for循环概述"><a href="#双重for循环概述" class="headerlink" title="双重for循环概述"></a>双重for循环概述</h4><ul>
<li>很多情况下，单层 for 循环并不能满足我们的需求，比如我们要打印一个 5 行 5 列的图形、打印一个倒直角三角形等，此时就可以通过循环嵌套来实现。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e9ba4c0c18bf466f9aaadadea0c20c3b" alt="image-20220128131109366"></p>
<ul>
<li>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如<strong>在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环</strong>。</li>
</ul>
<h4 id="双重for循环语法"><a href="#双重for循环语法" class="headerlink" title="双重for循环语法"></a>双重for循环语法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 双重for循环 语法结构</span></span><br><span class="line"><span class="comment">// for (外层的初始化变量; 外层的条件表达式; 外层的操作表达式) &#123;</span></span><br><span class="line"><span class="comment">//     for (里层的初始化变量; 里层的条件表达式; 里层的操作表达式) &#123;</span></span><br><span class="line"><span class="comment">//         // 执行语句;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 我们可以把里面的循环看做是外层循环的语句</span></span><br><span class="line"><span class="comment">// 3. 外层循环循环一次， 里面的循环执行全部</span></span><br><span class="line"><span class="comment">// 4. 代码验证</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是外层循环第&#x27;</span> + i + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是里层的循环第&#x27;</span> + j + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例-打印5行5列星星"><a href="#案例-打印5行5列星星" class="headerlink" title="案例-打印5行5列星星"></a>案例-打印5行5列星星</h4><ul>
<li>核心：<ul>
<li>内层循环负责一行打印五个星星</li>
<li>外层循环负责打印五行</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印五行五列星星</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123; <span class="comment">// 外层循环负责打印五行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123; <span class="comment">// 里层循环负责一行打印五个星星</span></span><br><span class="line">        str = str + <span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果一行打印完毕5个星星就要另起一行 加 \n</span></span><br><span class="line">    str = str + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h4 id="案例-打印N行N列星星"><a href="#案例-打印N行N列星星" class="headerlink" title="案例-打印N行N列星星"></a>案例-打印N行N列星星</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印n行n列的星星</span></span><br><span class="line"><span class="keyword">var</span> rows = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入行数:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cols = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入列数:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= cols; j++) &#123;</span><br><span class="line">        str = str + <span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h4 id="案例-打印倒三角"><a href="#案例-打印倒三角" class="headerlink" title="案例-打印倒三角"></a>案例-打印倒三角</h4><p><img src="https://s1.vika.cn/space/2023/02/26/8702c60b547040fcadbbef350cf65b21"></p>
<ul>
<li><p>① 一共有10行，但是每行的星星个数不一样，因此需要用到双重 for 循环</p>
</li>
<li><p>② 外层的 for 控制行数 i ，循环10次可以打印10行</p>
</li>
<li><p>③ 内层的 for 控制每行的星星个数 j</p>
</li>
<li><p>④ 核心算法： 每一行星星的个数 j &#x3D; i ; j &lt;&#x3D; 10; j++</p>
</li>
<li><p>⑤ 每行打印完毕后，都需要重新换一行</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印倒三角形案例</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123; <span class="comment">// 外层循环控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= <span class="number">10</span>; j++) &#123; <span class="comment">// 里层循环打印的个数不一样  j = i</span></span><br><span class="line">        str = str + <span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h4 id="02-6-打印99乘法表"><a href="#02-6-打印99乘法表" class="headerlink" title="02.6 打印99乘法表"></a>02.6 打印99乘法表</h4><ul>
<li><p>案例分析:</p>
</li>
<li><p>① 一共有9行，但是每行的个数不一样，因此需要用到双重 for 循环</p>
</li>
<li><p>② 外层的 for 循环控制行数 i ，循环9次 ，可以打印 9 行</p>
</li>
<li><p>③ 内层的 for 循环控制每行公式 j</p>
</li>
<li><p>④ 核心算法：每一行 公式的个数正好和行数一致， j &lt;&#x3D; i;</p>
</li>
<li><p>⑤ 每行打印完毕，都需要重新换一行</p>
</li>
<li><p>⑥ 把公式用 i 和 j 替换</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 九九乘法表</span></span><br><span class="line"><span class="comment">// 一共有9行，但是每行的个数不一样，因此需要用到双重 for 循环</span></span><br><span class="line"><span class="comment">// 外层的 for 循环控制行数 i ，循环9次 ，可以打印 9 行  </span></span><br><span class="line"><span class="comment">// 内层的 for 循环控制每行公式  j  </span></span><br><span class="line"><span class="comment">// 核心算法：每一行 公式的个数正好和行数一致， j &lt;= i;</span></span><br><span class="line"><span class="comment">// 每行打印完毕，都需要重新换一行</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">// 外层循环控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">// 里层循环控制每一行的个数  j &lt;= i</span></span><br><span class="line">        <span class="comment">// 1 × 2 = 2</span></span><br><span class="line">        <span class="comment">// str = str + &#x27;★&#x27;;</span></span><br><span class="line">        str += j + <span class="string">&#x27;×&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h4 id="其他案例-1"><a href="#其他案例-1" class="headerlink" title="其他案例"></a>其他案例</h4><p><img src="https://s1.vika.cn/space/2023/02/26/1f87e4a815f14f22a2e585dcc8c200f7"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/* 用于拼接字符串 */</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="comment">/* 外层循环用于控制打印的行数 */</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">/* 内层循环用于控制打印的个数*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j= <span class="number">0</span>;j &lt;= i; j++ )&#123;</span><br><span class="line">      res += <span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打印完成一行,换行*/</span></span><br><span class="line">    res += <span class="string">&quot;\n&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/* 全部行数打印完成后输出 */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h4 id="for循环总结"><a href="#for循环总结" class="headerlink" title="for循环总结"></a>for循环总结</h4><ul>
<li><p>for 循环可以重复执行某些相同代码</p>
</li>
<li><p>for 循环可以重复执行些许不同的代码，因为我们有计数器</p>
</li>
<li><p>for 循环可以重复执行某些操作，比如算术运算符加法操作</p>
</li>
<li><p>随着需求增加，双重for循环可以做更多、更好看的效果</p>
</li>
<li><p>双重 for 循环，外层循环一次，内层 for 循环全部执行</p>
</li>
<li><p>for 循环是循环条件和数字直接相关的循环</p>
</li>
<li><p>分析要比写代码更重要</p>
</li>
<li><p>一些核心算法想不到，但是要学会，分析它执行过程</p>
</li>
<li><p>举一反三，自己经常总结，做一些相似的案例</p>
</li>
</ul>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="语法结构-3"><a href="#语法结构-3" class="headerlink" title="语法结构"></a>语法结构</h4><ul>
<li><p><strong>while 语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。</strong></p>
</li>
<li><p>while语句的语法结构如下：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">	<span class="comment">// 循环体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ul>
<li>执行思路：<ul>
<li>① 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li>
<li>② 执行循环体代码</li>
<li>③ 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. while 循环语法结构  while 当...的时候</span></span><br><span class="line"><span class="comment">// while (条件表达式) &#123;</span></span><br><span class="line"><span class="comment">//     // 循环体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 2. 执行思路  当条件表达式结果为true 则执行循环体 否则 退出循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 代码验证</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;好啊有&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 里面应该也有计数器 初始化变量</span></span><br><span class="line"><span class="comment">// 5. 里面应该也有操作表达式  完成计数器的更新 防止死循环</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意:<ul>
<li>01 使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</li>
<li>02 while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</li>
</ul>
</li>
</ul>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ul>
<li><ol>
<li>打印人的一生，从1岁到100岁</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 打印人的一生，从1岁到100岁</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>计算 1 ~ 100 之间所有整数的和</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 计算 1 ~ 100 之间所有整数的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问。</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 弹出一个提示框， 你爱我吗？  如果输入我爱你，就提示结束，否则，一直询问。</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (message !== <span class="string">&#x27;我爱你&#x27;</span>) &#123;</span><br><span class="line">    message = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我也爱你啊！&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><h4 id="语法结构-4"><a href="#语法结构-4" class="headerlink" title="语法结构"></a>语法结构</h4><ul>
<li>do… while 语句其实是 while 语句的一个变体。<strong>该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.do while 循环 语法结构</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br><span class="line"><span class="comment">// 2.  执行思路 跟while不同的地方在于 do while 先执行一次循环体 在判断条件 如果条件表达式结果为真，则继续执行循环体，否则退出循环</span></span><br></pre></td></tr></table></figure>

<h4 id="执行顺序-1"><a href="#执行顺序-1" class="headerlink" title="执行顺序"></a>执行顺序</h4><ul>
<li><p>① 先执行一次循环体代码</p>
</li>
<li><p>② 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</p>
</li>
<li><p>注意：先再执行循环体，再判断，我们会发现 <strong>do…while 循环语句至少会执行一次循环体代码</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 代码验证</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;how are you?&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line"><span class="comment">// 4. 我们的do while 循环体至少执行一次</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 打印人的一生，从1岁到100岁</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 计算 1 ~ 100 之间所有整数的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++;</span><br><span class="line">&#125; <span class="keyword">while</span> (j &lt;= <span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><ul>
<li><p>弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问。</p>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 弹出输入框，要求用户输入。</li>
</ul>
</li>
<li><p>② 判断条件我们使用 do…while 循环。</p>
<ul>
<li>③ do… while 循环语句中的条件表达式只要输入的不是我爱你，就一直循环。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 弹出一个提示框， 你爱我吗？  如果输入我爱你，就提示结束，否则，一直询问。</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (message !== <span class="string">&#x27;我爱你&#x27;</span>)</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我也爱你啊&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="do-while-循环总结"><a href="#do-while-循环总结" class="headerlink" title="do while 循环总结"></a>do while 循环总结</h4><ul>
<li><p>JS 中循环有 for 、while 、 do while</p>
</li>
<li><p>三个循环很多情况下都可以相互替代使用</p>
</li>
<li><p>如果是用来计次数，跟数字相关的，三者使用基本相同，但是我们更喜欢用 for</p>
</li>
<li><p>while 和 do…while 可以做更复杂的判断条件，比 for 循环灵活一些</p>
</li>
<li><p><strong>while 和 do…while 执行顺序不一样，while 先判断后执行，do…while 先执行一次，再判断执行</strong></p>
</li>
<li><p><strong>while 和 do…while 执行次数不一样，do…while 至少会执行一次循环体， 而 while 可能一次也不执行</strong></p>
</li>
<li><p>实际工作中，我们更常用for 循环语句，它写法更简洁直观， 所以这个要重点学习</p>
</li>
</ul>
<h3 id="循环中的关键字"><a href="#循环中的关键字" class="headerlink" title="循环中的关键字"></a>循环中的关键字</h3><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul>
<li><p><strong>continue 关键字用于立即跳出本次循环，继续下一次循环</strong>（本次循环体中 continue 之后的代码就会少执行一次）。</p>
</li>
<li><p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// continue 关键字   退出本次（当前次的循环）  继续执行剩余次数循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 只要遇见 continue 就退出本次循环 直接跳到 i++</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 求1~100 之间， 除了能被7整除之外的整数和 </span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul>
<li><p><strong>break 关键字用于立即跳出整个循环（循环结束）</strong>。</p>
</li>
<li><p>例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// break 退出整个循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="JavaScript简单-复杂类型"><a href="#JavaScript简单-复杂类型" class="headerlink" title="JavaScript简单&#x2F;复杂类型"></a>JavaScript简单&#x2F;复杂类型</h2><h3 id="简单-复杂类型"><a href="#简单-复杂类型" class="headerlink" title="简单&#x2F;复杂类型"></a>简单&#x2F;复杂类型</h3><ul>
<li><strong>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。</strong><ul>
<li><p>值类型：简单数据类型&#x2F;基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型,比如: string ，number，boolean，undefined，null</p>
</li>
<li><p>引用类型：复杂数据类型，<strong>在存储时变量中存储的仅仅是地址（引用）</strong>，因此叫做引用数据类型通过,比如通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</p>
</li>
</ul>
</li>
</ul>
<h3 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h3><ul>
<li><p>堆栈空间分配区别：</p>
<ul>
<li><ol>
<li>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；<strong>简单数据类型存放到栈里面</strong></li>
</ol>
</li>
<li><ol start="2">
<li>堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。<strong>复杂数据类型存放到堆里面</strong></li>
</ol>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/be13f2fbab0746a89bb1656d23b5ab95"></p>
<ul>
<li>注意：JavaScript 中没有堆栈的概念，通过堆栈的方式，可以让大家更容易理解代码的一些执行方式，便于将来学习其他语言。</li>
</ul>
<h3 id="简单类型的内存分配"><a href="#简单类型的内存分配" class="headerlink" title="简单类型的内存分配"></a>简单类型的内存分配</h3><ul>
<li><p>值类型（简单数据类型）： string ，number，boolean，undefined，null</p>
</li>
<li><p>值类型变量的数据直接存放在变量（栈空间）中</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/1d49b632d9ad40968df866bd4d4ea935"></p>
<h3 id="复杂类型的内存分配"><a href="#复杂类型的内存分配" class="headerlink" title="复杂类型的内存分配"></a>复杂类型的内存分配</h3><ul>
<li><p>引用类型（复杂数据类型）：通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</p>
</li>
<li><p><strong>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</strong></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6cbeb095771a42f6bd3d93f98b2ec927"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单数据类型 null  返回的是一个空的对象  object </span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有个变量我们以后打算存储为对象，暂时没想好放啥， 这个时候就给 null </span></span><br><span class="line"><span class="comment">// 1. 简单数据类型 是存放在栈里面 里面直接开辟一个空间存放的是值</span></span><br><span class="line"><span class="comment">// 2. 复杂数据类型 首先在栈里面存放地址,用十六进制表示,然后这个地址指向堆里面的数据</span></span><br></pre></td></tr></table></figure>

<h3 id="简单类型传参"><a href="#简单类型传参" class="headerlink" title="简单类型传参"></a>简单类型传参</h3><ul>
<li>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单数据类型传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fn</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure>

<h3 id="复杂类型传参"><a href="#复杂类型传参" class="headerlink" title="复杂类型传参"></a>复杂类型传参</h3><ul>
<li>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复杂数据类型传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>) &#123; <span class="comment">// x = p</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 2. 这个输出什么 ?  刘德华   </span></span><br><span class="line">    x.<span class="property">name</span> = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 3. 这个输出什么 ?   张学友</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// 1. 这个输出什么 ?   刘德华 </span></span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// 4. 这个输出什么 ?   张学友</span></span><br></pre></td></tr></table></figure>


<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><h3 id="解释型语言和编译型语言"><a href="#解释型语言和编译型语言" class="headerlink" title="解释型语言和编译型语言"></a>解释型语言和编译型语言</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/1b5845ea417549a0a170debbdac5ed3f" alt="image-20220127215705808"></p>
<ul>
<li><p>翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同</p>
</li>
<li><p>编译器是在代码执行之前进行编译，生成中间代码文件</p>
</li>
<li><p>解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</p>
</li>
</ul>
<h4 id="执行过程-1"><a href="#执行过程-1" class="headerlink" title="执行过程"></a>执行过程</h4><p><img src="https://s1.vika.cn/space/2023/02/26/b4158167b3404b77898be98f23993417"></p>
<h3 id="标识符-关键字-保留字"><a href="#标识符-关键字-保留字" class="headerlink" title="标识符&#x2F;关键字&#x2F;保留字"></a>标识符&#x2F;关键字&#x2F;保留字</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul>
<li><p>标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。</p>
</li>
<li><p>标识符不能是关键字或保留字。</p>
</li>
</ul>
<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><ul>
<li><p>关键字：是指 JS 本身已经使用了的字，不能再用它们充当变量名、方法名。</p>
</li>
<li><p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p>
</li>
</ul>
<h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><ul>
<li><p>保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p>
</li>
<li><p>包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p>
</li>
<li><p>注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript数组</title>
    <url>/2024/01/12/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/105_JavaScript/10502_JS_Array/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# JavaScript 数组

<h2 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h2><ul>
<li><p>之前学习的变量， 一个变量只能存储一个值,如果我们想存储班级中所有学生的姓名时， 那么该如何存储呢？</p>
<ul>
<li>可以使用数组(Array)。数组可以把一组相关的数据—起存放，并提供方便的访问（获取）方式。</li>
</ul>
</li>
<li><p>什么是数组呢？</p>
<ul>
<li><strong>数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任何类型的元素。</strong></li>
</ul>
</li>
</ul>
<h2 id="数组的创建与初始化"><a href="#数组的创建与初始化" class="headerlink" title="数组的创建与初始化"></a>数组的创建与初始化</h2><h3 id="利用-new-创建数组"><a href="#利用-new-创建数组" class="headerlink" title="利用 new 创建数组"></a>利用 new 创建数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 利用 new 创建数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 创建了一个空的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>); <span class="comment">// 创建了长度为3的空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;ww&quot;</span>); <span class="comment">// 创建数组并初始化</span></span><br></pre></td></tr></table></figure>

<h3 id="用数组字面量创建数组"><a href="#用数组字面量创建数组" class="headerlink" title="用数组字面量创建数组"></a>用数组字面量创建数组</h3><ul>
<li>数组的字面量是方括号［ ］</li>
<li><strong>声明数组并赋值称为数组的初始化</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用数组字面量创建数组 []</span></span><br><span class="line"><span class="keyword">var</span> arr = []; <span class="comment">// 创建了一个空的数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;pink老师&#x27;</span>, <span class="literal">true</span>]; <span class="comment">// 创建数组并初始化</span></span><br></pre></td></tr></table></figure>

<h3 id="创建数组并初始化"><a href="#创建数组并初始化" class="headerlink" title="创建数组并初始化"></a>创建数组并初始化</h3><ul>
<li>这种字面量方式创建数组,也是我们以后最多使用的方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用数组字面量创建数组 []</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;pink老师&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 我们数组里面的数据一定用逗号分隔</span></span><br><span class="line"><span class="comment">// 2. 数组里面的数据 比如1,2， 我们称为数组元素</span></span><br><span class="line"><span class="comment">// 3. 获取数组元素: 数组名[索引号]  索引号从 0 开始 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [1, 2, &#x27;pink老师&#x27;, true]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">2</span>]); <span class="comment">// pink老师</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">3</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;迪丽热巴&#x27;</span>, <span class="string">&#x27;古丽扎娜&#x27;</span>, <span class="string">&#x27;佟丽丫丫&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">3</span>]); <span class="comment">// 因为没有这个数组元素 所以输出结果是 undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="数组元素的类型"><a href="#数组元素的类型" class="headerlink" title="数组元素的类型"></a>数组元素的类型</h2><ul>
<li>01 和其它编程语言不同,如果数组对应的索引中没有存储数据，默认存储的就是 undefined</li>
<li>02 JavaScript 中访问了数组中不存在的索引不会报错, 会返回 undefined</li>
<li>03 JavaScript 的数组可以存储不同类型数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//数组中可以存放任意类型的数据，例如字符串，数字，布尔值等</span></span><br><span class="line">    <span class="keyword">var</span> arrStus = [<span class="string">&quot;小白&quot;</span>, <span class="number">12</span>, <span class="literal">true</span>, <span class="number">28.9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrStus[<span class="number">4</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>04 数组元素的存储<ul>
<li>和其它编程语言不同, JavaScript 中数组分配的存储空间不一定是连续的</li>
<li>其它语言数组分配的存储空间都是连续的, JavaScript 数组是采用”哈希映射”方式分配存储空间</li>
<li>什么是哈希映射? 好比字典可以通过偏旁部首找到对应汉字, 我们可以通过索引找到对应空间</li>
<li>在浏览器中各大浏览器也对数组分配存储空间进行了优化<ul>
<li>如果存储的都是相同类型的数据, 那么会尽量分配连续的存储空间</li>
<li>如果存储的不是相同的数据类型, 那么就不会分配连续的存储空间</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h2><ul>
<li>索引下标：<strong>用来访问数组元素的序号（数组索引从0开始）</strong>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的索引: 用来访问数组元素的序号（数组下标从0开始）。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;小白&quot;</span>, <span class="string">&quot;小黑&quot;</span>, <span class="string">&quot;大黄&quot;</span>, <span class="string">&quot;奇瑞&quot;</span>];</span><br><span class="line"><span class="comment">//索引号:     0       1       2      3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组可以通过索引来访问、设置、修改对应的数组元素， 我们可以通过<code>arr[1]</code> 的形式来获取数组中的元素。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrstus = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 获取数组中的第二个元素</span></span><br><span class="line"><span class="title function_">alert</span>(arrStus[<span class="number">1</span>]); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 案例:定义一个数组，里面存放星期一、星期二.... 直到星期日(共7天)，在控制台输出:星期日。*/</span></span><br><span class="line"><span class="keyword">var</span> week = [<span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>, <span class="string">&quot;星期日&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(week[<span class="number">6</span>]); <span class="comment">// 星期日</span></span><br></pre></td></tr></table></figure>
<h2 id="新增数组元素"><a href="#新增数组元素" class="headerlink" title="新增数组元素"></a>新增数组元素</h2><ul>
<li>可以通过修改 length 长度来实现数组扩容的目的</li>
<li>length 属性是可读写的.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 新增数组元素 修改length长度 </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">5</span>; <span class="comment">// 把我们数组的长度修改为了 5  里面应该有5个元素 </span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//  [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, empty × 2] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其中索引号是 3,4 的空间没有给值，默认值就是 undefined。</li>
<li>可以通过修改数组索引的方式追加数组元素</li>
<li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 新增数组元素 修改索引号 追加数组元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr1[<span class="number">3</span>] = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);    <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">4</span>] = <span class="string">&#x27;hotpink&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);    <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;, &#x27;hotpink&#x27;]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span>;   <span class="comment">// 这里是替换原来的数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);    <span class="comment">// [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;, &#x27;hotpink&#x27;]</span></span><br><span class="line"></span><br><span class="line">arr1 = <span class="string">&#x27;有点意思&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);    <span class="comment">// 有点意思  不要直接给数组名赋值,否则里面的数组元素都没有了</span></span><br></pre></td></tr></table></figure>
<h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><ul>
<li><p><strong>数组的长度就是元素的个数</strong></p>
</li>
<li><p>和其它编程语言不同, <strong>当 JavaScript 中数组的存储空间不够时数组会自动扩容</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>); <span class="comment">// 定义一个长度为 3 的空数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;lnj&quot;</span>; <span class="comment">// 给空数组添加元素</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">&quot;it666&quot;</span>;	<span class="comment">// 数组会自动扩容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;lnj&quot;,&quot;zs&quot;,&quot;ls&quot;,&quot;it666&quot;] 自动扩容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>, <span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;姜维&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>, <span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;姜维&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="comment">// 数组长度 : arr.length , 动态监测数组元素的个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 如何清空数组</span></span><br><span class="line">arr = []; <span class="comment">// 直接赋值一个空数组</span></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">0</span>; <span class="comment">// 将数组的长度设置为 0</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, arr.<span class="property">length</span>) <span class="comment">// 删除数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>

<h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><h3 id="什么是遍历数组"><a href="#什么是遍历数组" class="headerlink" title="什么是遍历数组"></a>什么是遍历数组</h3><ul>
<li>数组中的每—项我们怎么取出来？<ul>
<li>答：可以通过“数组名［索引号］ ＂ 的方式—项项的取出来</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历数组：就是把数组的元素从头到尾访问一次</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>怎么把数组里面的元素全部取出来？</p>
</li>
<li><p>规律：</p>
<ul>
<li>从代码中我们可以发现，从数组中取出每一个元素时，代码是重复的，有所不一样的是索引值在递增,答案就是循环</li>
</ul>
</li>
<li><p><strong>遍历：数组的遍历就是依次取出数组中存储的所有数据, 我们就称之为数组的遍历,就是把数组中的每个元素从头到尾都访问—次</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 遍历数组：就是把数组的元素从头到尾访问一次</span></span><br><span class="line">    <span class="comment">// 1. 因为我们的数组索引号从0开始 ，所以 i 必须从 0开始  i &lt; 3</span></span><br><span class="line">    <span class="comment">// 2. 输出的时候 arr[i]  i 计数器当索引号来用</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]); <span class="comment">// red green blue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的长度 arr.length</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]); <span class="comment">// red green blue</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="【案例】遍历数组"><a href="#【案例】遍历数组" class="headerlink" title="【案例】遍历数组"></a>【案例】遍历数组</h3><ul>
<li>请将数组 [‘关羽’,’张飞’,’马超’,’赵云’,’黄忠’,’刘备’,’姜维’] 里的元素依次打印在控制台:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>, <span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;姜维&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="【案例】求和及平均值"><a href="#【案例】求和及平均值" class="headerlink" title="【案例】求和及平均值"></a>【案例】求和及平均值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 求数组 [2,6,1,7, 4] 里面所有元素的和以及平均值。</span></span><br><span class="line"><span class="comment">// 		(1)声明一个求和变量 sum。</span></span><br><span class="line"><span class="comment">// 		(2)遍历这个数组，把里面每个数组元素加到 sum 里面。</span></span><br><span class="line"><span class="comment">// 		(3)用求和变量 sum 除以数组的长度就可以得到数组的平均值。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; 				<span class="comment">// 和</span></span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>; 		<span class="comment">// 平均值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    sum += arr[i];  <span class="comment">// 我们加的是数组元素 arr[i] 不是计数器 i</span></span><br><span class="line">&#125;</span><br><span class="line">average = sum / arr.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum, average); <span class="comment">// 想要输出多个变量，用逗号分隔即可</span></span><br></pre></td></tr></table></figure>

<h3 id="【案例】求最大值"><a href="#【案例】求最大值" class="headerlink" title="【案例】求最大值"></a>【案例】求最大值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求数组[2,6,1,77,52,25,7]中的最大值</span></span><br><span class="line"><span class="comment">// 		01 声明一个保存最大元素的变量 max。</span></span><br><span class="line"><span class="comment">// 		02 默认最大值可以取数组中的第一个元素。</span></span><br><span class="line"><span class="comment">// 		03 遍历这个数组，把里面每个数组元素和 max 相比较。</span></span><br><span class="line"><span class="comment">// 		04 如果这个数组元素大于max 就把这个数组元素存到 max 里面，否则继续下一轮比较。</span></span><br><span class="line"><span class="comment">// 		05 最后输出这个 max</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">52</span>, <span class="number">25</span>, <span class="number">7</span>, <span class="number">99</span>];</span><br><span class="line"><span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;该数组里面的最大值是：&#x27;</span> + max);</span><br></pre></td></tr></table></figure>

<h3 id="【案例】指定字符分隔数组"><a href="#【案例】指定字符分隔数组" class="headerlink" title="【案例】指定字符分隔数组"></a>【案例】指定字符分隔数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数组 [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;] 转换为字符串，并且用 | 或其他符号分割</span></span><br><span class="line"><span class="comment">// 		1.需要一个新变量用于存放转换完的字符串 str。</span></span><br><span class="line"><span class="comment">// 		2.遍历原来的数组，分别把里面数据取出来，加到字符串里面。</span></span><br><span class="line"><span class="comment">// 		3.同时在后面多加一个分隔符</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sep = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    str += arr[i] + sep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// red*green*blue*pink*</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历数组小结"><a href="#遍历数组小结" class="headerlink" title="遍历数组小结"></a>遍历数组小结</h3><ul>
<li>01 什么是遍历？<ul>
<li><strong>遍历数组：就是把数组的元素从头到尾访问一次</strong></li>
</ul>
</li>
<li>02 我们通过什么来遍历数组里面的元素？<ul>
<li>for 循环</li>
</ul>
</li>
<li>03 for 里面的 i 是什么？当什么使用？for 里面的数组元素怎么写？<ul>
<li>i 是计数器，当索引号使用，<code>arr[i] </code>是数组元素第 i 个数组元素</li>
</ul>
</li>
<li>04 怎么获取数组的长度？<ul>
<li>使用 数组名.length <code>(arr.length)</code>可以访问数组的元素数量（数组长度）</li>
</ul>
</li>
<li>05 数组索引号和数组长度有什么关系？<ul>
<li><strong>索引号从0开始，数组长度是元素个数</strong></li>
</ul>
</li>
</ul>
<h3 id="【案例】遍历填充数组"><a href="#【案例】遍历填充数组" class="headerlink" title="【案例】遍历填充数组"></a>【案例】遍历填充数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个数组，里面存放10个整数（ 1~10）</span></span><br><span class="line"><span class="comment">// 		核心原理：使用循环来追加数组。</span></span><br><span class="line"><span class="comment">// 		1、声明一个空数组 arr。</span></span><br><span class="line"><span class="comment">// 		2、循环中的计数器 i 可以作为数组元素存入。</span></span><br><span class="line"><span class="comment">// 		3、由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// arr = i; 不要直接给数组名赋值 否则以前的元素都没了</span></span><br><span class="line">    arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>

<h3 id="【案例】筛选出指定值"><a href="#【案例】筛选出指定值" class="headerlink" title="【案例】筛选出指定值"></a>【案例】筛选出指定值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组。</span></span><br><span class="line">  <span class="comment">// 		1、声明一个新的数组用于存放新数据newArr。</span></span><br><span class="line">  <span class="comment">// 		2、遍历原来的旧数组， 找出大于等于 10 的元素。</span></span><br><span class="line">  <span class="comment">// 		3、依次追加给新数组 newArr。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 新数组索引号应该从0开始 依次递增</span></span><br><span class="line">    newArr[j] = arr[i];</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [77, 52, 25]</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 方法2 </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="comment">// 刚开始 newArr.length 就是 0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 新数组索引号应该从0开始 依次递增</span></span><br><span class="line">    newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [77, 52, 25]</span></span><br></pre></td></tr></table></figure>

<h3 id="【案例】删除指定值"><a href="#【案例】删除指定值" class="headerlink" title="【案例】删除指定值"></a>【案例】删除指定值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</span></span><br><span class="line"><span class="comment">// 		1、需要一个新数组用于存放筛选之后的数据。</span></span><br><span class="line"><span class="comment">// 		2、遍历原来的数组， 把不是 0 的数据添加到新数组里面(此时要注意采用数组名 + 索引的格式接收数据)。</span></span><br><span class="line"><span class="comment">// 		3、新数组里面的个数， 用 length 不断累加。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [2, 6, 1, 77, 52, 25, 7]</span></span><br></pre></td></tr></table></figure>

<h3 id="【案例】翻转数组"><a href="#【案例】翻转数组" class="headerlink" title="【案例】翻转数组"></a>【案例】翻转数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数组 [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;, &#x27;purple&#x27;] 的内容反过来存放</span></span><br><span class="line"><span class="comment">// 		1、声明一个新数组 newArr</span></span><br><span class="line"><span class="comment">// 		2、把旧数组索引号第4个取过来（arr.length - 1)，给新数组索引号第0个元素 (newArr.length)</span></span><br><span class="line"><span class="comment">// 		3、我们采取 递减的方式  i--</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>, <span class="string">&#x27;hotpink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newArr[newArr.<span class="property">length</span>] = arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [&#x27;hotpink&#x27;, &#x27;purple&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;red&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="【案例】数组冒泡排序"><a href="#【案例】数组冒泡排序" class="headerlink" title="【案例】数组冒泡排序"></a>【案例】数组冒泡排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="comment">// 冒泡排序．是一种算法，把一系列的数据按照一定的顺序进行排列显示,从小到大或从大到小）</span></span><br><span class="line"><span class="comment">// 我们可以将数组 [4, 1, 2, 3, 5] 中的元素按照从小到大的顺序进行排序，输出1,2,3,4,5</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123; <span class="comment">// 外层循环管趟数 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123; <span class="comment">// 里面的循环管 每一趟的交换次数</span></span><br><span class="line">        <span class="comment">// 内部交换2个变量的值 前一个和后面一个数组元素相比较</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><h3 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h3><ul>
<li>instanceof  运算符，可以判断一个对象是否属于某种类型</li>
<li>instanceof 的官方解释:  <strong>instanceof 运算符用于检测构造函数的 prototype属性是否出现在某个实例对象的原型链上。</strong> </li>
<li><strong>Array.isArray() 用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 翻转数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// if (arr instanceof Array) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;error 这个参数要求必须是数组格式 [1,2,3]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverse</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])); <span class="comment">// [3, 2, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverse</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// error 这个参数要求必须是数组格式 [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测是否为数组</span></span><br><span class="line"><span class="comment">// (1) instanceof  运算符 它可以用来检测是否为数组,(实际上是检测一个对象是否是指定构造函数的实例对象)</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true (检测 arr 是否为 Array 的实例对象)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) Array.isArray(参数);  H5新增的方法  ie9以上版本支持</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="新增和删除元素"><a href="#新增和删除元素" class="headerlink" title="新增和删除元素"></a>新增和删除元素</h3><p><img src="https://s1.vika.cn/space/2023/02/26/bb57c95b325f480f9b1a893f97b0daa7" alt="image-20220129151742023"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. push() 在数组的末尾 添加一个或者多个数组元素   push  推</span></span><br><span class="line"><span class="comment">// 		(1) push 是可以给数组后面追加新的元素</span></span><br><span class="line"><span class="comment">// 		(2) push() 参数直接写要追加的数组元素就可以了</span></span><br><span class="line"><span class="comment">// 		(3) push完毕之后，返回的结果是插入新元素后的数组的长度 </span></span><br><span class="line"><span class="comment">// 		(4) 原数组会发生变化,即往某个数组内插入新的元素,定然会改变该数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3, 4, &#x27;pink&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. pop() 它可以删除数组的最后一个元素  </span></span><br><span class="line"><span class="comment">// 		(1) pop是可以删除数组的最后一个元素 记住一次只能删除一个元素</span></span><br><span class="line"><span class="comment">// 		(2) pop() 没有参数</span></span><br><span class="line"><span class="comment">// 		(3) pop完毕之后，返回的结果是 删除的那个元素 </span></span><br><span class="line"><span class="comment">// 		(4) 原数组也会发生变化</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;pink&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">pop</span>(); <span class="comment">// 返回的是被删除掉的那个元素,一次只能删除一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// pink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. unshift 在数组的开头 添加一个或者多个数组元素</span></span><br><span class="line">    <span class="comment">// 		(1) unshift 可以在数组前面追加新的元素</span></span><br><span class="line">    <span class="comment">// 		(2) unshift() 参数直接写要追加的数组元素就可以了</span></span><br><span class="line">    <span class="comment">// 		(3) unshift完毕之后，返回的结果是插入新元素后的数组的长度 </span></span><br><span class="line">    <span class="comment">// 		(4) 原数组也会发生变化</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> res = arr.<span class="title function_">unshift</span>(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;red&#x27;, &#x27;purple&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. shift() 它可以删除数组的第一个元素</span></span><br><span class="line"><span class="comment">// 		(1) shift 可以删除数组的第一个元素 记住一次只能删除一个元素</span></span><br><span class="line"><span class="comment">// 		(2) shift() 没有参数</span></span><br><span class="line"><span class="comment">// 		(3) shift完毕之后，返回的结果是 删除的那个元素</span></span><br><span class="line"><span class="comment">// 		(4) 原数组也会发生变化  </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;pink&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [2, &#x27;pink&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="【案例】筛选数组元素"><a href="#【案例】筛选数组元素" class="headerlink" title="【案例】筛选数组元素"></a>【案例】筛选数组元素</h4><ul>
<li>有一个包含工资的数组[1500, 1200, 2000, 2100, 1800]，要求把数组中工资超过2000的删除，剩余的放到新数组里面</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有一个包含工资的数组[1500, 1200, 2000, 2100, 1800]，要求把数组中工资超过2000的删除，剩余的放到新数组里面</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="comment">// newArr[newArr.length] = arr[i];</span></span><br><span class="line">        newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">//  [1500, 1200, 1800]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组反转与排序"><a href="#数组反转与排序" class="headerlink" title="数组反转与排序"></a>数组反转与排序</h3><p><img src="https://s1.vika.cn/space/2023/02/26/70e7682ab42744858e51fa529aab74c8" alt="image-20220129151852687"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. reverse() 翻转数组,会修改原有的数组,返回的是经过翻转后的原数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&#x27;blue&#x27;, &#x27;red&#x27;, &#x27;pink&#x27;]  </span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. sort() 数组排序（冒泡排序）</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">13</span>, <span class="number">4</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">7</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="comment">//  return a - b; 升序的顺序排列</span></span><br><span class="line">    <span class="keyword">return</span> b - a; <span class="comment">// 降序的顺序排列</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [77, 13, 7, 4, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="获取元素的索引"><a href="#获取元素的索引" class="headerlink" title="获取元素的索引"></a>获取元素的索引</h3><p><img src="https://s1.vika.cn/space/2023/02/26/25ec02c4c07742ba8b74c3b1c2784e02" alt="image-20220129151953594"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找</span></span><br><span class="line"><span class="comment">// 		它只返回第一个满足条件的索引号 , indexOf方法默认是从左至右的查找, 一旦找到就会立即停止查找</span></span><br><span class="line"><span class="comment">// 		它如果在该数组里面找不到元素，则返回的是 -1  </span></span><br><span class="line"><span class="comment">// var arr = [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;]; //2</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 参数1: 需要查找的元素</span></span><br><span class="line"><span class="comment">// 参数2: 从什么位置开始查找</span></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">indexOf</span>(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 从索引号为 4 的位置开始往后查找元素 3 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 2. lastIndexOf(数组元素)  作用就是返回该数组元素的索引号 从后面往前开始查找</span></span><br><span class="line"><span class="comment">// 		lastIndexOf方法默认是从右至左的查找, 一旦找到就会立即停止查找</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="comment">// 参数1: 需要查找的元素</span></span><br><span class="line">    <span class="comment">// 参数2: 从什么位置开始查找</span></span><br><span class="line">    <span class="keyword">let</span> res = arr.<span class="title function_">lastIndexOf</span>(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 从索引号为 4 的位置开始往前查找元素 3 </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 3.如何判断数组中是否包含某个元素,返回值为 true / false</span></span><br><span class="line"><span class="comment">// 	也可以通过 indexOf / lastIndexOf 是否等于 -1 ,判断一个数组中是否包含有某个元素,返回 -1 就是数组中没有这个元素</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="comment">// let res = arr.includes(8);</span></span><br><span class="line">    <span class="keyword">let</span> res = arr.<span class="title function_">includes</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="【案例】数组去重"><a href="#【案例】数组去重" class="headerlink" title="【案例】数组去重"></a>【案例】数组去重</h4><ul>
<li><p>有一个数组 [‘c’, ‘a’, ‘z’, ‘a’, ‘x’, ‘a’, ‘x’, ‘c’, ‘b’]，要求去除数组中重复的元素。</p>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 目标：把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个，放到新数组中去。</li>
<li>② 核心算法：我们遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过，我们就添加，否则不添加。</li>
<li>③ 我们怎么知道该元素没有存在？ 利用 新数组.indexOf(数组元素) , 如果返回时 -1 就说明新数组里面没有该元素</li>
</ul>
</li>
<li><p>旧数组 [‘c’, ‘a’, ‘z’, ‘a’, ‘x’, ‘a’, ‘x’, ‘c’, ‘b’]</p>
</li>
<li><p>新数组 [ ]</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组去重 [&#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;b&#x27;] 要求去除数组中重复的元素。</span></span><br><span class="line"><span class="comment">// 		1.目标： 把旧数组里面不重复的元素选取出来放到新数组中， 重复的元素只保留一个， 放到新数组中去重。</span></span><br><span class="line"><span class="comment">// 		2.核心算法： 我们遍历旧数组， 然后拿着旧数组元素去查询新数组， 如果该元素在新数组里面没有出现过， 我们就添加，否则不添加。</span></span><br><span class="line"><span class="comment">// 		3.我们怎么知道该元素没有存在？ 利用 新数组.indexOf(数组元素) 如果返回时 -1 就说明 新数组里面没有改元素</span></span><br><span class="line"><span class="comment">// 封装一个 去重的函数 unique:独一无二的 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var demo = unique([&#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;b&#x27;])</span></span><br><span class="line"><span class="keyword">var</span> demo = <span class="title function_">unique</span>([<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo); <span class="comment">//  [&#x27;blue&#x27;, &#x27;green&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="转字符串与分隔元素"><a href="#转字符串与分隔元素" class="headerlink" title="转字符串与分隔元素"></a>转字符串与分隔元素</h3><p><img src="https://s1.vika.cn/space/2023/02/26/b1a154a44f6b4b5090385d0215f2e623" alt="image-20220129152131869"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组转换为字符串 </span></span><br><span class="line"><span class="comment">// 1. toString() 将数组转换为字符串,返回的字符串中是没有括号的</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> str = arr.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. join(分隔符) </span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>()); <span class="comment">// green,blue,pink  不写参数,默认用逗号分隔</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// green-blue-pink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)); <span class="comment">// green&amp;blue&amp;pink</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.如何将数组转换成指定格式字符串</span></span><br><span class="line"><span class="comment">// 	join 方法默认情况下如果没有传递参数, 就是调用toString();</span></span><br><span class="line"><span class="comment">// 	join 方法如果传递了参数, 就会将传递的参数作为元素和元素之间的连接符号</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> str = arr.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 1+2+3+4+5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<h3 id="数组的拼接与截取"><a href="#数组的拼接与截取" class="headerlink" title="数组的拼接与截取"></a>数组的拼接与截取</h3><p><img src="https://s1.vika.cn/space/2023/02/26/0df0ad5120f3462f9c1d79774fb14d8b" alt="image-20220129152147091"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 1.1 concat() 拼接数组,返回的是一个经过拼接后的新数组</span></span><br><span class="line">    <span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> arr3 = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> res = arr2.<span class="title function_">concat</span>(arr3);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// [1, 2, 3, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 注意点: 数组不能够使用加号进行拼接, 如果使用加号进行拼接会先转换成字符串再拼接</span></span><br><span class="line">    <span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">let</span> res = arr1 + arr2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 1,3,52,4,6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.3 使用扩展运算符将两个数组拼接为一个数组</span></span><br><span class="line">    <span class="comment">// 注意点: 扩展运算符在解构赋值中(等号的左边)表示将剩余的数据打包成一个新的数组</span></span><br><span class="line">    <span class="comment">//         扩展运算符在等号右边, 那么表示将数组中所有的数据解开, 放到所在的位置</span></span><br><span class="line">    <span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">let</span> res = [...arr1, ...arr2]; <span class="comment">// 相当于: let res = [1, 3, 5, 2, 4, 6];</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// [1, 3, 5, 2, 4, 6]</span></span><br><span class="line">    <span class="comment">// 注意点: 不会修改原有的数组, 会生成一个新的数组返回给我们</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">//  [1, 3, 5]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//  [2, 4, 6]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.1 slice() 数组截取</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> res2 = arr4.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// 从索引值0位开始截取,截取到索引值为2,但是不包括2位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">// [1, 2]  返回的是截取到的数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8] 不会更改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2 slice方法是包头不包尾(包含起始位置, 不包含结束的位置)</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 3. splice() 删除数组元素 </span></span><br><span class="line">   <span class="keyword">var</span> arr5 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line">   <span class="keyword">var</span> res3 = arr5.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">3</span>);<span class="comment">// 参数:开始删除的索引 要删除的个数</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(res3); <span class="comment">// [1, 2, 3]  返回的是被删除的数组元素组成的数组</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr5); <span class="comment">// [4, 5, 6, 7, 8]  会更改原数组</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, arr.<span class="property">length</span>);	<span class="comment">// 清空整个数组 </span></span><br></pre></td></tr></table></figure>

<h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><ul>
<li>01 数组的完全解构</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr; <span class="comment">// 数组的解构赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c = &quot;</span> + c); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>02 等号左边的格式必须和等号右边的格式一模一样, 才能完全解构</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let [a, b, c] = [1, 3, 5];         // 1 3 5</span></span><br><span class="line"><span class="comment">// let [a, b, c] = [1, 3, [2, 4]];    // 1 3 2,4 报错 d is not defined</span></span><br><span class="line"><span class="keyword">let</span> [a, b, [c, d]] = [<span class="number">1</span>, <span class="number">3</span>, [<span class="number">2</span>, <span class="number">4</span>]];  <span class="comment">// 1 3 2 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c = &quot;</span> + c); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d = &quot;</span> + d); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>03 在数组的解构赋值中, 左边的个数可以和右边的个数不一样</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>04 在数组的解构赋值中, 右边的个数可以和左边的个数不一样</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c = &quot;</span> + c); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>05 在数组的解构赋值中,如果右边的个数和左边的个数不一样, 那么我们可以给左边指定默认值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b = <span class="number">666</span>, c = <span class="number">888</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">// 666</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c = &quot;</span> + c); <span class="comment">// 888</span></span><br></pre></td></tr></table></figure>

<ul>
<li>06 在数组的解构赋值中, 如果左边的个数和右边的个数不一样, 那么设置的默认值会被覆盖</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b = <span class="number">666</span>] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>07 在数组的解构赋值中, 还可以使用ES6中新增的扩展运算符来打包剩余的数据,返回的是一个数组<ul>
<li>在数组的解构赋值中, 如果使用了扩展运算符, 那么扩展运算符只能写在最后</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6中新增的扩展运算符: ...</span></span><br><span class="line"><span class="comment">// let [a, b] = [1, 3, 5];</span></span><br><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// a = 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">// [3, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul>
<li><p>1 什么是二维数组?</p>
<ul>
<li><strong>二维数组就是数组的每一个元素又是一个数组, 我们就称之为二维数组</strong></li>
</ul>
</li>
<li><p>2 如何操作二维数组?</p>
<ul>
<li>2.1 如何从二维数组中获取数据<ul>
<li>数组名称[二维数组索引]; 得到一个一维数组</li>
<li>数组名称[二维数组索][一维数组索引]; 得到一维数组中的元素</li>
</ul>
</li>
<li>2.2 如何往二维数组中存储数据<ul>
<li>数组名称[二维数组索引] &#x3D; 一维数组;</li>
<li>数组名称[二维数组索引][一维数组索引] &#x3D; 值;</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">// 一维数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>]]; <span class="comment">// 二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意点: 在定义二维数组的时候, 将来需要存储多少个一维数组, 就写上多少个[]即可</span></span><br><span class="line"><span class="keyword">let</span> arr = [[],[]];</span><br><span class="line">arr[<span class="number">0</span>] = [<span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [Array(2), Array(1)]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历二维数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> subArray = arr[i];</span><br><span class="line">    <span class="comment">// console.log(subArray);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; subArray.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(subArray[j]); <span class="comment">// 1 3 2 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组的三个高阶方法"><a href="#数组的三个高阶方法" class="headerlink" title="数组的三个高阶方法"></a>数组的三个高阶方法</h2><h3 id="for-of-实现元素处理"><a href="#for-of-实现元素处理" class="headerlink" title="for of 实现元素处理"></a>for of 实现元素处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">444</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求1: 取出所有小于 100 的数字</span></span><br><span class="line"><span class="keyword">let</span> newNums = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    newNums.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums) <span class="comment">// [ 10, 20, 40, 50 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求2: 在需求1的结果的基础上,将数组的每一项都乘以 2</span></span><br><span class="line"><span class="keyword">let</span> newNums2 = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> newNums) &#123;</span><br><span class="line">  newNums2.<span class="title function_">push</span>(item * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums2) <span class="comment">// [ 20, 40, 80, 100 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求3: 在需求2的结果的基础上,将数组的每一项进行相加求和</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> newNums2) &#123;</span><br><span class="line">  total = total + item</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">//240</span></span><br></pre></td></tr></table></figure>

<h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter 方法"></a>filter 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求1: 取出所有小于 100 的数字</span></span><br><span class="line"><span class="comment">// 需求2: 在需求1的结果的基础上,将数组的每一项都乘以 2</span></span><br><span class="line"><span class="comment">// 需求3: 在需求2的结果的基础上,将数组的每一项进行相加求和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">444</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求1: 取出所有小于 100 的数字</span></span><br><span class="line"><span class="comment">// filter 方法:</span></span><br><span class="line"><span class="comment">//   filter 中的回调函数,必须返回一个 Boolean 值</span></span><br><span class="line"><span class="comment">//          true : 当返回的是 true 时,函数内部会自动将这次回调的 item 加入到新的数组 nuwNums 中</span></span><br><span class="line"><span class="comment">//          false : 当返回的是 false 时,函数内部会过滤掉这次的 item</span></span><br><span class="line"><span class="comment">// 对数组 nums 进行遍历,数组中有多少个元素,就会执行多少次回调方法,形参 item 为遍历的数组中的每一项</span></span><br><span class="line"><span class="keyword">let</span> nuwNums = nums.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &lt; <span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nuwNums) <span class="comment">// [ 10, 20, 40, 50 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a>map 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求2: 在需求1的结果的基础上,将数组的每一项都乘以 2</span></span><br><span class="line"><span class="comment">// map 方法:</span></span><br><span class="line"><span class="comment">//  对数组 nuwNums 进行遍历,数组中有多少个元素,就会执行多少次回调方法,形参 item 为遍历的数组中的每一项</span></span><br><span class="line"><span class="comment">//  新数组 newNum2 中的每一项,由 map 方法中的回调的返回值决定</span></span><br><span class="line"><span class="keyword">let</span> newNum2 = nuwNums.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNum2) <span class="comment">//[ 20, 40, 80, 100 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce 方法"></a>reduce 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求3: 在需求2的结果的基础上,将数组的每一项进行相加求和</span></span><br><span class="line"><span class="comment">// reduce 方法:</span></span><br><span class="line"><span class="comment">//    参数一: 遍历时执行的回调</span></span><br><span class="line"><span class="comment">//            回调中的形参 preValue: 第一次遍历时,值为初始化 0 , 即 reduce 方法的参数二,</span></span><br><span class="line"><span class="comment">//																以后每次遍历时,该值等于每次遍历时回调的返回值</span></span><br><span class="line"><span class="comment">//            回调中的形参 item : 为每次遍历数组时的每一项数组元素</span></span><br><span class="line"><span class="comment">//    参数二: 初始值</span></span><br><span class="line"><span class="comment">// 遍历的数组由多少项,就会执行多少次回调函数</span></span><br><span class="line"><span class="keyword">let</span> total1 = newNum2.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue, item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> preValue + item</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total1) <span class="comment">// 240</span></span><br></pre></td></tr></table></figure>

<h3 id="对以上方法的综合写法"><a href="#对以上方法的综合写法" class="headerlink" title="对以上方法的综合写法"></a>对以上方法的综合写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">444</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对以上三个需求的综合写法</span></span><br><span class="line"><span class="keyword">let</span> total2 = nums</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">100</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue, item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + item</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total2) <span class="comment">// 240</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript函数</title>
    <url>/2024/01/14/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/105_JavaScript/10504_JS_Function/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# JavaScript 函数

<h2 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h2><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><ul>
<li><p>在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for 循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p>
</li>
<li><p><strong>函数：就是封装了一段可被重复调用执行的代码块。</strong>通过此代码块可以实现大量代码的重复使用。</p>
<ul>
<li>不使用函数的弊端: <ul>
<li>冗余代码太多</li>
<li>需求变更, 需要修改很多的代码</li>
</ul>
</li>
<li>使用函数的好处:<ul>
<li>冗余代码变少了</li>
<li>需求变更, 需要修改的代码变少了</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 不使用函数:</span></span><br><span class="line"><span class="comment">// 0. 要求计算两个变量的和</span></span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> num2 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">let</span> res = num1 + num2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> value1 = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">let</span> value2 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">let</span> res2 = value1 +value2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 求 1~100的累加和</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 求 10~50的累加和</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">10</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函数</span></span><br><span class="line"><span class="comment">// 3. 函数就是封装了一段可以被重复执行调用的代码块 目的： 就是让大量代码重复使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = num1; i &lt;= num2; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">100</span>); <span class="comment">// 5050</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">10</span>, <span class="number">50</span>); <span class="comment">// 1230</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">1000</span>);<span class="comment">// 500500</span></span><br></pre></td></tr></table></figure>

<h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><ul>
<li>函数定义步骤<ul>
<li>书写函数的固定格式</li>
<li>给函数起一个有意义的名称<ul>
<li>为了提升代码的阅读性</li>
<li>函数名称也是标识符的一种, 所以也需要遵守标识符的命名规则和规范</li>
</ul>
</li>
<li>确定函数的形参列表<ul>
<li>看看使用函数的时候是否需要传入一些辅助的数据</li>
</ul>
</li>
<li>将需要封装的代码书写到 { } 中</li>
<li>确定函数的返回值<ul>
<li>可以通过 return 数据; 的格式, 将函数中的计算结果返回给函数的调用者</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">	<span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>function 是声明函数的关键字,必须小写</li>
<li>由于函数一般是为了实现某个功能才定义的，所以通常我们将函数名命名为动词，比如 getSum</li>
</ul>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript中的函数和数组一样, 都是引用数据类型(对象类型)</span></span><br><span class="line"><span class="comment">// 既然是一种数据类型, 所以也可以保存到一个变量中</span></span><br><span class="line"><span class="comment">// 将一个函数保存到一个变量中</span></span><br><span class="line"><span class="comment">// 将来可以通过变量名称找到函数并执行函数</span></span><br><span class="line"><span class="keyword">let</span> say = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>();</span><br></pre></td></tr></table></figure>

<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名(); <span class="comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用的时候千万不要忘记添加小括号</li>
<li>口诀：函数不调用，自己不执行。</li>
<li>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数使用分为两步： 声明函数 和 调用函数</span></span><br><span class="line"><span class="comment">// 1. 声明函数</span></span><br><span class="line"><span class="comment">// function 函数名() &#123;</span></span><br><span class="line"><span class="comment">//     // 函数体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (1) function 声明函数的关键字 全部小写</span></span><br><span class="line"><span class="comment">// (2) 函数是做某件事情，函数名一般是动词 sayHi </span></span><br><span class="line"><span class="comment">// (3) 函数不调用自己不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用函数</span></span><br><span class="line"><span class="comment">// 函数名();</span></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br><span class="line"><span class="comment">// 调用函数的时候千万不要忘记加小括号</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h3><ul>
<li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p>
</li>
<li><p>简单理解：封装类似于将电脑配件整合组装到机箱中</p>
</li>
</ul>
<h3 id="案例-求1-100累加和"><a href="#案例-求1-100累加和" class="headerlink" title="案例-求1-100累加和"></a>案例-求1-100累加和</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用函数计算1-100之间的累加和 </span></span><br><span class="line"><span class="comment">// 1. 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用函数</span></span><br><span class="line"><span class="title function_">getSum</span>();</span><br><span class="line"><span class="title function_">getSum</span>();</span><br></pre></td></tr></table></figure>

<h3 id="函数的使用小结"><a href="#函数的使用小结" class="headerlink" title="函数的使用小结"></a>函数的使用小结</h3><ul>
<li>01 函数是做什么的（作用）？</li>
<li>02 声明函数用什么关键词？</li>
<li>03 如何调用函数？</li>
<li>04 封装是什么意思？</li>
</ul>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><ul>
<li>在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为形参，而在调用该函数时，同样也需要传递相应的参数，这些参数被称为实参。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ed6bdd581840493d9e9828398ccfde79" alt="image-20220128205809979"></p>
<ul>
<li><strong>参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 函数可以重复相同的代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cook</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;酸辣土豆丝&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cook</span>();</span><br><span class="line"><span class="title function_">cook</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 我们可以利用函数的参数实现函数重复不同的代码</span></span><br><span class="line"><span class="comment">// function 函数名(形参1,形参2,...) &#123; // 在声明函数的小括号里面的是 形参 （形式上的参数）</span></span><br><span class="line">        <span class="comment">// 函数体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 函数名(实参1,实参2...); // 在函数调用的小括号里面是实参（实际的参数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 形参和实参的执行过程</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cook</span>(<span class="params">aru</span>) &#123; <span class="comment">// 形参是接受实参的  aru = &#x27;酸辣土豆丝&#x27; 形参类似于一个变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aru);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cook</span>(<span class="string">&#x27;酸辣土豆丝&#x27;</span>);</span><br><span class="line"><span class="title function_">cook</span>(<span class="string">&#x27;大肘子&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 函数的参数可以有，也可以没有,看实际是否需要传参,形参个数不限</span></span><br><span class="line"><span class="comment">// 一个函数可以有形参也可以没有形参(零个或多个)</span></span><br><span class="line"><span class="comment">// 什么是形参? 定义函数时函数括号中的变量我们就称之为形参</span></span><br><span class="line"><span class="comment">// 没有形参的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有形参的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>(<span class="string">&quot;lnj&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="案例-求任意两个数的和"><a href="#案例-求任意两个数的和" class="headerlink" title="案例-求任意两个数的和"></a>案例-求任意两个数的和</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 利用函数求任意两个数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用函数求任意两个数之间的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSums</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSums</span>(<span class="number">1</span>, <span class="number">100</span>); <span class="comment">// 5050</span></span><br><span class="line"><span class="title function_">getSums</span>(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">// 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 注意点</span></span><br><span class="line"><span class="comment">// 	(1) 多个参数之间用逗号隔开</span></span><br><span class="line"><span class="comment">// 	(2) 形参可以看做是不用声明的变量</span></span><br></pre></td></tr></table></figure>

<h3 id="函数参数的传递过程"><a href="#函数参数的传递过程" class="headerlink" title="函数参数的传递过程"></a>函数参数的传递过程</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">6</span>, <span class="number">5</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用的时候实参是传递给形参的</li>
<li>形参简单理解为：不用声明的变量</li>
<li>实参和形参的多个参数之间用逗号（,）分隔</li>
</ul>
<h3 id="形参与实参个数不匹配"><a href="#形参与实参个数不匹配" class="headerlink" title="形参与实参个数不匹配"></a>形参与实参个数不匹配</h3><p><img src="https://s1.vika.cn/space/2023/02/26/dc9e1c4232b343888fe62d14de19a668" alt="image-20220128210203900"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">100</span>, <span class="number">200</span>); <span class="comment">// 300  形参和实参个数相等，输出正确结果</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">100</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">700</span>); <span class="comment">// 500  实参个数多于形参，只取到形参的个数</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">200</span>); <span class="comment">// NaN 实参个数少于形参，多的形参定义为undefined，结果为NaN</span></span><br><span class="line"><span class="comment">//注意：在JavaScript中，形参的默认值是undefined。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数形参实参个数匹配</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 如果实参的个数和形参的个数一致 则正常输出结果</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 如果实参的个数多于形参的个数 ,会按照形参的个数去接收参数</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 如果实参的个数小于形参的个数, 多于的形参定义为 undefined  最终的结果就是 NaN</span></span><br><span class="line"><span class="comment">// 形参可以看做是不用声明的变量 ,num2 是一个变量但是没有接收值,结果就是undefined </span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 建议 我们尽量让实参的个数和形参相匹配</span></span><br></pre></td></tr></table></figure>

<h3 id="函数形参的默认值"><a href="#函数形参的默认值" class="headerlink" title="函数形参的默认值"></a>函数形参的默认值</h3><ul>
<li>在 ES6 之前可以通过逻辑运算符来给形参指定默认值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="comment">// 格式: 条件A || 条件B</span></span><br><span class="line">        <span class="comment">// 如果条件A成立, 那么就返回条件A</span></span><br><span class="line">        <span class="comment">// 如果条件A不成立, 无论条件B是否成立, 都会返回条件B</span></span><br><span class="line">        a = a || <span class="string">&quot;指趣学院&quot;</span>;</span><br><span class="line">        b = b || <span class="string">&quot;知播渔教育&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 123 &#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getSum</span>(<span class="number">123</span>, <span class="string">&quot;abc&quot;</span>); <span class="comment">// 123 &#x27;abc&#x27;  //若传递了实参,则实参会覆盖默认值,使用实参</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从 ES6 开始, 可以直接在形参后面通过 &#x3D; 指定默认值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a = <span class="string">&quot;指趣学院&quot;</span>, b = <span class="string">&quot;知播渔教育&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(); <span class="comment">// 指趣学院 李南江</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">123</span>, <span class="string">&quot;abc&quot;</span>); <span class="comment">// 123 &#x27;abc&#x27;  //若传递了实参,则实参会覆盖默认值,使用实参</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ES6 开始的默认值还可以从其它的函数中获取</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a = <span class="string">&quot;指趣学院&quot;</span>, b = getDefault()</span>) &#123; <span class="comment">// 形参 b 的默认值就是 getDefault 函数调用后的返回值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(); <span class="comment">// 指趣学院 李南江</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">123</span>, <span class="string">&quot;abc&quot;</span>); <span class="comment">// 123 &#x27;abc&#x27;  //若传递了实参,则实参会覆盖默认值,使用实参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDefault</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;李南江&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将函数作为其他函数的参数        </span></span><br><span class="line"><span class="keyword">let</span> say = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn</span>) &#123; <span class="comment">// let fn = say;</span></span><br><span class="line">         <span class="title function_">fn</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">test</span>(say); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>

<h3 id="函数参数小结"><a href="#函数参数小结" class="headerlink" title="函数参数小结"></a>函数参数小结</h3><ul>
<li><p>函数可以带参数也可以不带参数</p>
</li>
<li><p>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</p>
</li>
<li><p>调用函数的时候，函数名括号里面的是实参</p>
</li>
<li><p>多个参数中间用逗号分隔</p>
</li>
<li><p>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</p>
</li>
</ul>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p>
</li>
<li><p>return 语句的语法格式如下：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名（）&#123;</span><br><span class="line">	<span class="comment">//函数体...</span></span><br><span class="line">	<span class="keyword">return</span> 需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名(); <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在使用 return 语句时，return 语句后面的代码会停止执行，并返回指定的值</li>
<li>如果函数没有 return ，返回的值是 undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.函数是做某件事或者实现某种功能</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cook</span>(<span class="params">aru</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aru);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cook</span>(<span class="string">&#x27;大肘子&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 函数的返回值格式</span></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">    <span class="keyword">return</span> 需要返回的结果;</span><br><span class="line">&#125;</span><br><span class="line">函数名();</span><br><span class="line"><span class="comment">// (1) 函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名() 通过return 实现的</span></span><br><span class="line"><span class="comment">// (2) 只要函数遇到 return , 就把后面的结果返回给函数的调用者,  函数名() = return后面的结果</span></span><br></pre></td></tr></table></figure>

<h3 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h3><ul>
<li><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p>
</li>
<li><p>例如，声明了一个 sum() 函数，该函数的返回值为 666，其代码如下：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> sum（）&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sum</span>(); <span class="comment">// 此时 sum 的值就等于666，因为 return 语句会把自身后面的值返回给调用者</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 代码验证</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getResult</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getResult</span>()); <span class="comment">// 666</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cook</span>(<span class="params">aru</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> aru;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cook</span>(<span class="string">&#x27;大肘子&#x27;</span>)); <span class="comment">// 大肘子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 求任意两个数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-求两个数的最大值"><a href="#案例-求两个数的最大值" class="headerlink" title="案例-求两个数的最大值"></a>案例-求两个数的最大值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用函数 求两个数的最大值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="comment">// if (num1 &gt; num2) &#123;</span></span><br><span class="line">    <span class="comment">//     return num1;</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     return num2;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">11</span>, <span class="number">3</span>)); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-求数组中的最大值"><a href="#案例-求数组中的最大值" class="headerlink" title="案例-求数组中的最大值"></a>案例-求数组中的最大值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用函数求数组 [5,2,99,101,67,77] 中的最大数值。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArrMax</span>(<span class="params">arr</span>) &#123; <span class="comment">// arr 接受一个数组  arr =  [5,2,99,101,67,77]</span></span><br><span class="line">    <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getArrMax([5, 2, 99, 101, 67, 77]); // 实参是一个数组送过去</span></span><br><span class="line"><span class="comment">// 在我们实际开发里面，我们经常用一个变量来接受 函数的返回结果 使用更简单</span></span><br><span class="line"><span class="comment">// var re = getArrMax([5, 2, 99, 101, 67, 77]);</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="title function_">getArrMax</span>([<span class="number">3</span>, <span class="number">77</span>, <span class="number">44</span>, <span class="number">99</span>, <span class="number">143</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h3 id="return终止函数"><a href="#return终止函数" class="headerlink" title="return终止函数"></a>return终止函数</h3><ul>
<li><strong>return 语句之后的代码不被执行。</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1，num2</span>)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">  <span class="keyword">return</span> num1 + num2; <span class="comment">// 注意：return 后的代码不执行</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我不会被执行，因为前面有 return&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = <span class="title function_">add</span>(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line"><span class="title function_">alert</span>(resNum); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. return 会终止函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2; <span class="comment">// return 后面的代码不会被执行</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我是不会被执行的哦！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h3 id="return只能返回一个值"><a href="#return只能返回一个值" class="headerlink" title="return只能返回一个值"></a>return只能返回一个值</h3><ul>
<li>return 只能返回一个值。如果用逗号隔开多个值，以最后一个为准。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. return 只能返回一个值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1, num2; <span class="comment">// 返回的结果是最后一个值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.一个函数可以有返回值也可以没有返回值</span></span><br><span class="line">    <span class="comment">// 没有返回值的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello  world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(); <span class="comment">// 不写返回值,函数调用会默认返回 undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有返回值的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="title function_">getSum</span>(<span class="number">10</span> , <span class="number">20</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>

<h3 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将函数作为其他函数的返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 注意点: 在其它编程语言中函数是不可以嵌套定义的,</span></span><br><span class="line">    <span class="comment">// 但是在JavaScript中函数是可以嵌套定义的</span></span><br><span class="line">    <span class="keyword">let</span> say = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> say;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">test</span>(); <span class="comment">// let fn = say;</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<h3 id="返回值案例"><a href="#返回值案例" class="headerlink" title="返回值案例"></a>返回值案例</h3><ul>
<li>案例：创建一个函数，实现两个数之间的加减乘除运算，并将结果返回</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第一个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第二个数&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [a + b, a - b, a * b, a / b];</span><br><span class="line">	<span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">count</span>(a, b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.  我们求任意两个数的加减乘除的结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [num1 + num2, num1 - num2, num1 * num2, num1 / num2];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> re = <span class="title function_">getResult</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 返回的是一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re);</span><br></pre></td></tr></table></figure>

<h3 id="函数的默认返回值"><a href="#函数的默认返回值" class="headerlink" title="函数的默认返回值"></a>函数的默认返回值</h3><ul>
<li><p>函数没有 return ,则默认返回 undefined.</p>
</li>
<li><p>函数都是有返回值的</p>
<ul>
<li>如果有return, 则返回 return 后面的值</li>
<li>如果没有return ,则返回 undefined</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 我们的函数如果有return 则返回的是 return 后面的值，如果函数没有 return 则返回undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun1</span>()); <span class="comment">// 返回 666</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">888</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun2</span>()); <span class="comment">// undefined ,函数返回的结果是 undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="break-continue-return"><a href="#break-continue-return" class="headerlink" title="break&#x2F;continue&#x2F;return"></a>break&#x2F;continue&#x2F;return</h3><ul>
<li>break ：结束当前的循环体（如 for、while）</li>
<li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li>
<li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.return的作用和break相似, 所以return后面不能编写任何语句(永远执行不到)</span></span><br><span class="line"><span class="comment">// break作用立即结束switch语句或者循环语句</span></span><br><span class="line"><span class="comment">// return作用立即结束当前所在函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;return后面的代码&quot;</span>);<span class="comment">// 不会执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>();</span><br></pre></td></tr></table></figure>

<h3 id="其他案例"><a href="#其他案例" class="headerlink" title="其他案例"></a>其他案例</h3><ul>
<li><p>写一个函数，用户输入任意两个数字的任意算术运算（简单的计算器小功能），并能弹出运算后的结果。</p>
</li>
<li><p>写一个函数，用户输入任意两个数字的最大值，并能出弹运算后的结果。</p>
</li>
<li><p>写一个函数，用户输入任意三个不同数字的最大值，并能弹出运算后的结果。</p>
</li>
<li><p>写一个函数，用户输入一个数判断是否是素数，并返弹出回值(又叫质数，只能被1和自身整数的数)</p>
</li>
</ul>
<h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h2><h3 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 因为console.log();也是通过()来调用的, 所以log也是一个函数</span></span><br><span class="line"><span class="comment">// 2. log函数的特点</span></span><br><span class="line"><span class="comment">//     可以接收1个或多个参数</span></span><br><span class="line"><span class="comment">// 3. 为什么log函数可以接收1个或多个参数</span></span><br><span class="line"><span class="comment">//     内部的实现原理就用到了arguments</span></span><br><span class="line"><span class="comment">// 4. arguments的作用</span></span><br><span class="line"><span class="comment">//     保存所有传递给函数的实参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><ul>
<li><p>当我们不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，<strong>arguments 实际上它是当前函数的一个内置对象</strong>。所有函数都内置了一个 arguments 对象，<strong>arguments 对象中存储了传递的所有实参</strong>。</p>
</li>
<li><p><strong>arguments 展示形式是一个伪数组</strong>，因此可以进行遍历。</p>
</li>
<li><p>伪数组具有以下特点：</p>
<ul>
<li>具有 length 属性</li>
</ul>
</li>
<li><p>按索引方式储存数据</p>
<ul>
<li>不具有数组的 push , pop 等数组方法</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arguments 的使用  只有函数才有 arguments 对象,而且是每个函数都内置好了这个arguments</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(arguments); // 里面存储了所有传递过来的实参  arguments = [1,2,3]</span></span><br><span class="line">    <span class="comment">// console.log(arguments.length);</span></span><br><span class="line">    <span class="comment">// console.log(arguments[2]);</span></span><br><span class="line">    <span class="comment">// 我们可以按照数组的方式遍历arguments</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 伪数组 并不是真正意义上的数组</span></span><br><span class="line"><span class="comment">// 1. 具有数组的 length 属性</span></span><br><span class="line"><span class="comment">// 2. 按照索引的方式进行存储的</span></span><br><span class="line"><span class="comment">// 3. 它没有真正数组的一些方法 pop()  push() 等等</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-求任意个数的最大值"><a href="#案例-求任意个数的最大值" class="headerlink" title="案例-求任意个数的最大值"></a>案例-求任意个数的最大值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; <span class="variable language_">arguments</span>[i]) &#123;</span><br><span class="line">      max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxValue</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>)); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxValue</span>(<span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>)); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用函数求任意个数的最大值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params"></span>) &#123; <span class="comment">// arguments = [1,2,3]</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">            max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">11</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">444</span>, <span class="number">5</span>, <span class="number">100</span>)); <span class="comment">// 444</span></span><br></pre></td></tr></table></figure>

<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><ul>
<li>扩展运算符在等号左边, 将剩余的数据打包到一个新的数组中,只能写在最后</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">// a = 1; b = [3, 5];</span></span><br></pre></td></tr></table></figure>

<ul>
<li>扩展运算符在等号右边, 将数组中的数据解开</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [...arr1, ...arr2]; <span class="comment">//等价于:  let arr = [1, 3, 5, 2, 4, 6];</span></span><br></pre></td></tr></table></figure>

<ul>
<li>扩展运算符在函数的形参列表中的作用<ul>
<li>将传递给函数的所有实参打包到一个数组中</li>
<li>和在等号左边一样, 也只能写在形参列表的最后,否则会报错</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [10, 20, 30, 40]</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = values[i];</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">getSum</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a, ...values</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [20, 30]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">10</span>, <span class="number">20</span> , <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h2 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h2><h3 id="函数封装-翻转数组"><a href="#函数封装-翻转数组" class="headerlink" title="函数封装-翻转数组"></a>函数封装-翻转数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用函数翻转任意数组 reverse 翻转</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="title function_">reverse</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [9, 6, 4, 3, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="title function_">reverse</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// [&#x27;blue&#x27;, &#x27;pink&#x27;, &#x27;red&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="函数封装-对数组冒泡排序"><a href="#函数封装-对数组冒泡排序" class="headerlink" title="函数封装-对数组冒泡排序"></a>函数封装-对数组冒泡排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用函数冒泡排序 sort 排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="title function_">sort</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [1, 2, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="title function_">sort</span>([<span class="number">11</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">999</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// [7, 11, 22, 999]</span></span><br></pre></td></tr></table></figure>

<h3 id="判断闰年"><a href="#判断闰年" class="headerlink" title="判断闰年"></a>判断闰年</h3><ul>
<li>要求：输入一个年份，判断是否是闰年（闰年：能被4整除并且不能被100整数，或者能被400整除）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用函数判断闰年</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRunYear</span>(<span class="params">year</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是闰年我们返回 true  否则 返回 false </span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRunYear</span>(<span class="number">2000</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRunYear</span>(<span class="number">1999</span>));</span><br></pre></td></tr></table></figure>

<h2 id="函数调用函数"><a href="#函数调用函数" class="headerlink" title="函数调用函数"></a>函数调用函数</h2><h3 id="函数互相调用"><a href="#函数互相调用" class="headerlink" title="函数互相调用"></a>函数互相调用</h3><ul>
<li><p>函数可以调用另外一个函数.</p>
</li>
<li><p>因为每个函数都是独立的代码块，用于完成特殊任务，因此经常会用到函数相互调用的情况。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<h3 id="案例-判断2月的天数"><a href="#案例-判断2月的天数" class="headerlink" title="案例-判断2月的天数"></a>案例-判断2月的天数</h3><ul>
<li>如果是闰年，则 2 月份是 29 天， 如果是平年，则 2 月份是 28 天</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义判断是否为闰年的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRunYear</span>(<span class="params">year</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是闰年我们返回 true  否则 返回 false </span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户输入年份，输出当前年份2月份的天数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backDay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入年份:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isRunYear</span>(year)) &#123; <span class="comment">// 调用函数需要加小括号</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;当前年份是闰年2月份有29天&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;当前年份是平年2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">backDay</span>();</span><br></pre></td></tr></table></figure>

<h2 id="函数的声明方式"><a href="#函数的声明方式" class="headerlink" title="函数的声明方式"></a>函数的声明方式</h2><h3 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h3><ul>
<li>利用函数关键字 function 自定义函数方式。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;...&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>因为有名字，所以也被称为命名函数</li>
<li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 利用函数关键字自定义函数(命名函数)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//函数体...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数-1"><a href="#匿名函数-1" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul>
<li>利用函数表达式方式的写法如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>因为函数没有名字，所以也被称为匿名函数</li>
<li>这个 fn 里面存储的是一个函数</li>
<li>函数表达式方式原理跟声明变量方式是一致的</li>
<li>函数调用的代码必须写到函数体后面,否则会报错,因为 undefined 不是函数,不能加括号调用执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 函数表达式(匿名函数) </span></span><br><span class="line"><span class="comment">// var 变量名 = function() &#123;&#125;;</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">aru</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是函数表达式&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aru);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&#x27;pink老师&#x27;</span>);</span><br><span class="line"><span class="comment">// (1) fun是变量名 不是函数名  </span></span><br><span class="line"><span class="comment">// (2) 函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值 而 函数表达式里面存的是函数</span></span><br><span class="line"><span class="comment">// (3) 函数表达式也可以进行传递参数</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul>
<li><p>什么是箭头函数?</p>
<ul>
<li>箭头函数是 ES6 中新增的一种定义函数的格式</li>
<li>目的: 就是为了简化定义函数的代码</li>
</ul>
</li>
<li><p>在 ES6 之前如何定义函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称(形参列表)&#123;</span><br><span class="line">  <span class="comment">//需要封装的代码;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 函数名称 = <span class="keyword">function</span>(<span class="params">形参列表</span>)&#123;</span><br><span class="line">  <span class="comment">//需要封装的代码;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>从 ES6 开始如何定义函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 函数名称 = <span class="function">(<span class="params">形参列表</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 需要封装的代码;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// function say() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;hello lnj&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">say</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello lnj&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>箭头函数的注意点<ul>
<li>在箭头函数中如果只有一个形参, 那么()可以省略</li>
<li>在箭头函数中如果{}中只有一句代码, 那么{}也可以省略</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// ES6之前的函数定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello  &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">say</span>(<span class="string">&quot;it666&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的箭头函数</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">say</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello  &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="string">&quot;it666&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只有一个形参,可以省略小括号</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">say</span> = name =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello  &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="string">&quot;it666&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数体只有一句代码,可以省略大括号</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">say</span> = name =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello  &quot;</span> + name);</span><br><span class="line">    <span class="title function_">say</span>(<span class="string">&quot;it666&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><ul>
<li>什么是递归函数?<ul>
<li><strong>递归函数就是在函数中自己调用自己, 我们就称之为递归函数</strong></li>
<li>递归函数在一定程度上可以实现循环的功能</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求: 要求用户输入密码, 判断输入密码是否正确(假设正确密码是123456)</span></span><br><span class="line"><span class="comment">          如果正确, 输出&quot;欢迎回来&quot;</span></span><br><span class="line"><span class="comment">          如果不正确, 要求用户重新输入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用do..whild..循环实现</span></span><br><span class="line">    <span class="keyword">let</span> pwd = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        pwd = <span class="title function_">prompt</span>(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span> (pwd !== <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;欢迎回来&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 使用递归函数实现 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="comment">// 1.接收用户输入的密码</span></span><br><span class="line">         <span class="keyword">let</span> pwd = <span class="title function_">prompt</span>(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">         <span class="comment">// 2.判断密码是否正确</span></span><br><span class="line">         <span class="keyword">if</span>(pwd !== <span class="string">&quot;123456&quot;</span>)&#123;</span><br><span class="line">             <span class="title function_">login</span>();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 3.输出欢迎回来</span></span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&quot;欢迎回来&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">login</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>递归函数的注意点<ul>
<li>每次调用递归函数都会开辟一块新的存储空间, 所以性能不是很好</li>
</ul>
</li>
</ul>
<h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.立即执行函数: 不需要调用，立马能够自己执行的函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 写法 也可以传递参数进来</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.(function() &#123;&#125;)()    </span></span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> num = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 第二个小括号可以看做是调用函数</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. (function()&#123;&#125;());</span></span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// 局部变量</span></span></span><br><span class="line"><span class="language-javascript">        &#125;(<span class="number">2</span>, <span class="number">3</span>));</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 立即执行函数最大的作用就是独立创建了一个作用域, 里面所有的变量都是局部变量, 不会有命名冲突的情况</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript作用域"><a href="#JavaScript作用域" class="headerlink" title="JavaScript作用域"></a>JavaScript作用域</h2><h3 id="作用域概述"><a href="#作用域概述" class="headerlink" title="作用域概述"></a>作用域概述</h3><ul>
<li><strong>通常来说, —段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</strong>作用域的使用增强了程序的可靠性，减少了名字冲突。</li>
</ul>
<h3 id="作用域的分类"><a href="#作用域的分类" class="headerlink" title="作用域的分类"></a>作用域的分类</h3><ul>
<li><p>在 JavaScript 中 { } 外面的作用域, 我们称之为全局作用域</p>
</li>
<li><p>在 JavaScript 中函数后面 { } 中的的作用域, 我们称之为”局部作用域”</p>
</li>
<li><p>在 ES6 中只要 { } 没有和函数结合在一起, 那么应该 “块级作用域”</p>
</li>
<li><p>块级作用域和局部作用域区别</p>
<ul>
<li>在块级作用域中通过 var 定义的变量是全局变量</li>
<li>在局部作用域中通过 var 定义的变量是局部变量</li>
</ul>
</li>
<li><p>无论是在块级作用域还是在局部作用域, 省略变量前面的 let 或者 var 就会变成一个全局变量</p>
</li>
<li><p>在 JavaScript 中，根据作用域的不同，变量可以分为两种：</p>
<ul>
<li>全局变量</li>
<li>局部变量</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;<span class="keyword">while</span> (<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> () &#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 局部作用域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">666</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">666</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 666</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// var num = 123; // 局部变量</span></span><br><span class="line">    <span class="comment">// let num = 123; // 局部变量</span></span><br><span class="line">    num = <span class="number">123</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>在 JavaScript 中定义变量有两种方式<ul>
<li>ES6 之前: <code>var 变量名称;</code></li>
<li>ES6 开始:<code> let 变量名称;</code></li>
</ul>
</li>
<li>两种定义变量方式的区别</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.1 是否能够定义同名变量</span></span><br><span class="line"><span class="comment">// 通过var定义变量,可以重复定义同名的变量,并且后定义的会覆盖先定义的</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2如果通过let定义变量,  &quot;相同作用域内&quot;不可以重复定义同名的变量</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">456</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.2是否能够先使用后定义</span></span><br><span class="line"><span class="comment">// 通过var定义变量, 可以先使用后定义(预解析)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过let定义变量, 不可以先使用再定义(不会预解析)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.3是否能被&#123;&#125;限制作用域</span></span><br><span class="line"><span class="comment">// 无论是var还是let定义在&#123;&#125;外面都是全局变量</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将var定义的变量放到一个单独的&#123;&#125;里面, 还是一个全局变量</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">//123 不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将let定义的变量放到一个单独的&#123;&#125;里面, 是一个局部变量</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure>

<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ul>
<li><strong>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）</strong>。<ul>
<li>全局变量在代码的任何位置都可以使用</li>
</ul>
</li>
<li>特殊情况下，在函数内不使用 var&#x2F;let 关键字声明的变量也是全局变量（不建议使用）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.JavaScript作用域 ： 就是代码名字（变量）在某个范围内起作用和效果 目的是为了提高程序的可靠性更重要的是减少命名冲突</span></span><br><span class="line"><span class="comment">// 2. js的作用域（es6）之前 ： 全局作用域   局部作用域 </span></span><br><span class="line"><span class="comment">// 3. 全局作用域： 整个script标签 或者是一个单独的js文件</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure>

<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ul>
<li><strong>在局部作用域下声明的变最叫做局部变量（在函数内部定义的变量）</strong><ul>
<li>局部变量只能在该函数内部使用</li>
<li>函数的形参实际上就是局部变量</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 局部作用域（函数作用域） 在函数内部就是局部作用域 这个代码的名字只在函数内部起效果和作用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 局部作用域</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<h4 id="局部-全局变量的区别"><a href="#局部-全局变量的区别" class="headerlink" title="局部&#x2F;全局变量的区别"></a>局部&#x2F;全局变量的区别</h4><ul>
<li><strong>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</strong></li>
<li><strong>局部变量：只在函数内部使用， 当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁， 因此更节省内存空间</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 局部变量   在局部作用域下的变量   后者在函数内部的变量就是 局部变量</span></span><br><span class="line"><span class="comment">// 注意： 函数的形参也可以看做是局部变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">aru</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">10</span>; <span class="comment">// num1就是局部变量 只能在函数内部使用</span></span><br><span class="line">    num2 = <span class="number">20</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 中没有块级作用域  js的作用域： 全局作用域  局部作用域  </span></span><br><span class="line"><span class="comment">// 我们js 也是在 es6 的时候新增的块级作用域</span></span><br><span class="line"><span class="comment">// 块级作用域 &#123;&#125;   if &#123;&#125;  for &#123;&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 10 没有块级作用域</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域案例"><a href="#作用域案例" class="headerlink" title="作用域案例"></a>作用域案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 1.找出下列哪些是全局变量,哪些是局部变量</span></span><br><span class="line"><span class="comment">// 1.1</span></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">123</span>; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> num2 = <span class="number">456</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.3</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> num3 = <span class="number">789</span>; <span class="comment">// 全局变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.4 </span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        num4 = <span class="number">666</span>; <span class="comment">// 全局变量</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 2.找出下列哪些是全局变量,哪些是局部变量</span></span><br><span class="line"><span class="comment">// 2.1 </span></span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">123</span>; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> num2 = <span class="number">456</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.3</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> num3 = <span class="number">789</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.4</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        num4 = <span class="number">666</span>; <span class="comment">// 全局变量</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 3.下列代码运行是否会报错</span></span><br><span class="line"><span class="comment">// 3.1</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">456</span>; <span class="comment">// 不会报错</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3.2</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="number">456</span>; <span class="comment">// 不会报错</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 不会报错</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 4.下列代码运行是否会报错</span></span><br><span class="line"><span class="comment">// 4.1</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">456</span>; <span class="comment">// 会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.2</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 注意点: 在不同的作用域范围内, 是可以出现同名的变量的</span></span><br><span class="line">            <span class="keyword">let</span> num = <span class="number">456</span>; <span class="comment">// 不会报错</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 会报错</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 5.下列代码运行是否会报错</span></span><br><span class="line"><span class="comment">// 5.1</span></span><br><span class="line">    <span class="comment">// 注意点: 只要出现了let, 在相同的作用域内, 就不能出现同名的变量</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">456</span>; <span class="comment">// 会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.2</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">456</span>; <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ul>
<li>注意点: 初学者在研究”作用域链”的时候最好将 ES6 之前和 ES6 分开研究</li>
<li>需要明确:<ul>
<li>1 ES6 之前定义变量通过 var</li>
<li>2 ES6 之前没有块级作用域, 只有全局作用域和局部作用域</li>
<li>3 ES6 之前函数大括号外的都是全局作用域</li>
<li>4 ES6 之前函数大括号中的都是局部作用域</li>
</ul>
</li>
<li>ES6 之前作用域链<ul>
<li>01 全局作用域我们又称之为 0 级作用域</li>
<li>02 定义函数开启的作用域就是1级&#x2F;2级&#x2F;3级&#x2F;…作用域</li>
<li>03 JavaScript 会将这些作用域链接在一起形成一个链条, 这个链条就是作用域链<ul>
<li>0  —&gt;  1 —-&gt;  2  —-&gt;  3 —-&gt; 4</li>
</ul>
</li>
<li>04 除 0 级作用域以外, 当前作用域级别等于上一级+1</li>
</ul>
</li>
<li>变量在作用域链查找规则<ul>
<li>01 先在当前找, 找到就使用当前作用域找到的</li>
<li>02 如果当前作用域中没有找到, 就去上一级作用域中查找</li>
<li>03 以此类推直到 0 级为止, 如果 0 级作用域还没找到, 就报错</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局作用域 / 0级作用域</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1级作用域</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 2级作用域</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">789</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 789</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局作用域 / 0级作用域</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1级作用域</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">456</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 2级作用域</span></span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">789</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 789</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>只要是代码，就至少有一个作用域</li>
<li>写在函数内部的局部作用域</li>
<li>如果函数中还有函数，那么在这个作用域中就又可以诞生—个作用域</li>
<li>根据在内部函数可以访问外部函数变量的这种机制， 用链式查找决定哪些数据能被内部函数访问， 就称作作用域链</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作用域链  ： 内部函数访问外部函数的变量，采取的是链式查找的方式来决定取那个值 这种结构我们称为作用域链   就近原则</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="comment">// 外部函数</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123; <span class="comment">// 内部函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/1b306fe9dda64726bf3831b63a677b1a" alt="image-20220128221614536"></p>
<h3 id="作用域链案例"><a href="#作用域链案例" class="headerlink" title="作用域链案例"></a>作用域链案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例1 ： 结果是几？</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 0 站在目标出发，一层一层的往外查找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例2 ：结果是几？</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;22&#x27;</span>;</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="title function_">fn3</span>();</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 4 </span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 22 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a>JavaScript预解析</h2><h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><ul>
<li>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步,预解析和代码执行(先定义后执行)。</li>
<li>什么是预解析<ul>
<li>浏览器在执行 JS 代码的时候会分成两部分操作：预解析以及逐行执行代码</li>
<li>也就是说浏览器不会直接执行代码, 而是加工处理之后再执行,</li>
<li>这个加工处理的过程, 我们就称之为预解析</li>
</ul>
</li>
<li>预解析规则<ul>
<li><ol>
<li>将变量声明和函数声明提升到当前作用域最前面</li>
</ol>
</li>
<li><ol start="2">
<li>将剩余代码按照书写顺序依次放到后面</li>
</ol>
</li>
</ul>
</li>
<li>注意点<ul>
<li>通过 let 定义的变量不会被提升(不会被预解析)</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1问  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// undefined  坑 1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 相当于执行了以下代码:</span></span><br><span class="line"><span class="comment">// var num;</span></span><br><span class="line"><span class="comment">// console.log(num);</span></span><br><span class="line"><span class="comment">// num = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3问  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4问</span></span><br><span class="line"><span class="title function_">fun</span>(); <span class="comment">// 报错  坑2  </span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 函数表达式 调用必须写在函数表达式的下面</span></span><br><span class="line"> <span class="comment">// 相当于执行了以下代码:</span></span><br><span class="line"> <span class="comment">// var fun;</span></span><br><span class="line"> <span class="comment">// fun();</span></span><br><span class="line"> <span class="comment">// fun = function() &#123;</span></span><br><span class="line"> <span class="comment">//         console.log(22);</span></span><br><span class="line"> <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 我们js引擎运行js 分为两步：  预解析  代码执行</span></span><br><span class="line"><span class="comment">// (1). 预解析 js引擎会把js 里面所有的 var  还有 function 提升到当前作用域的最前面</span></span><br><span class="line"><span class="comment">// (2). 代码执行  按照代码书写的顺序从上往下执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 预解析分为 变量预解析（变量提升） 和 函数预解析（函数提升）</span></span><br><span class="line"><span class="comment">// (1) 变量提升 就是把所有的变量声明提升到当前的作用域最前面  不提升赋值操作</span></span><br><span class="line"><span class="comment">// (2) 函数提升 就是把所有的函数声明提升到当前作用域的最前面  不调用函数</span></span><br></pre></td></tr></table></figure>

<h3 id="预解析案例"><a href="#预解析案例" class="headerlink" title="预解析案例"></a>预解析案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// // 相当于执行了以下操作</span></span><br><span class="line"><span class="comment">// // var num;</span></span><br><span class="line"><span class="comment">// // function fun() &#123;</span></span><br><span class="line"><span class="comment">// //     var num;</span></span><br><span class="line"><span class="comment">// //     console.log(num);</span></span><br><span class="line"><span class="comment">// //     num = 20;</span></span><br><span class="line"><span class="comment">// // &#125;</span></span><br><span class="line"><span class="comment">// // num = 10;</span></span><br><span class="line"><span class="comment">// // fun();</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// // 案例2</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">// // 相当于以下代码</span></span><br><span class="line"><span class="comment">// // var num;</span></span><br><span class="line"><span class="comment">// // function fn() &#123;</span></span><br><span class="line"><span class="comment">// //     var num;</span></span><br><span class="line"><span class="comment">// //     console.log(num);</span></span><br><span class="line"><span class="comment">// //     num = 20;</span></span><br><span class="line"><span class="comment">// //     console.log(num);</span></span><br><span class="line"><span class="comment">// // &#125;</span></span><br><span class="line"><span class="comment">// // num = 10;</span></span><br><span class="line"><span class="comment">// // fn();</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// // 案例3</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于以下代码</span></span><br><span class="line"><span class="comment">// var a;</span></span><br><span class="line"><span class="comment">// function f1() &#123;</span></span><br><span class="line"><span class="comment">//     var b;</span></span><br><span class="line"><span class="comment">//     var a;</span></span><br><span class="line"><span class="comment">//     b = 9;</span></span><br><span class="line"><span class="comment">//     console.log(a);</span></span><br><span class="line"><span class="comment">//     console.log(b);</span></span><br><span class="line"><span class="comment">//     a = &#x27;123&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// a = 18;</span></span><br><span class="line"><span class="comment">// f1();</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例4</span></span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以下代码</span></span><br><span class="line"><span class="comment">// function f1() &#123;</span></span><br><span class="line"><span class="comment">//     var a;</span></span><br><span class="line"><span class="comment">//     a = b = c = 9;</span></span><br><span class="line"><span class="comment">//     // 相当于 var  a  = 9; b = 9; c = 9; b 和 c 直接赋值 没有var 声明 当 全局变量看</span></span><br><span class="line"><span class="comment">//     // 集体声明  var a = 9, b = 9, c = 9;</span></span><br><span class="line"><span class="comment">//     console.log(a);</span></span><br><span class="line"><span class="comment">//     console.log(b);</span></span><br><span class="line"><span class="comment">//     console.log(c);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// f1();</span></span><br><span class="line"><span class="comment">// console.log(c);</span></span><br><span class="line"><span class="comment">// console.log(b);</span></span><br><span class="line"><span class="comment">// console.log(a);</span></span><br></pre></td></tr></table></figure>

<h2 id="函数的-this-指向"><a href="#函数的-this-指向" class="headerlink" title="函数的 this 指向"></a>函数的 this 指向</h2><h3 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h3><ul>
<li>定义一个函数，我们采用三种不同的方式对它进行调用，它产生了三种不同的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.方式一: 直接调用,此时 this 指向 window</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.方式二: 通过对象调用,此时 this 指向 obj 对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span> &#125;</span><br><span class="line">obj.<span class="property">aaa</span> = foo</span><br><span class="line">obj.<span class="title function_">aaa</span>() <span class="comment">// &#123;name: &#x27;why&#x27;, aaa: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo函数:&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.方式三:通过 call / apply 调用</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// String &#123;&#x27;abc&#x27;&#125; ,  此时 this 指向 String &#123;&#x27;abc&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数在调用时， JavaScript 会 默认给 this 绑定一个值</li>
<li>this 的 绑定和定义的位置（编写的位置） 没有关系；</li>
<li>this 的 绑定和调用方式以及调用的位置有关系</li>
<li>this 是 在运行时被绑定</li>
</ul>
<h3 id="函数独立调用时的-this"><a href="#函数独立调用时的-this" class="headerlink" title="函数独立调用时的 this"></a>函数独立调用时的 this</h3><ul>
<li>独立的函数调用我们可以理解成函数没有被绑定到某个对象上进行调用；</li>
<li>严格模式(“use strict”)下, 独立调用的函数中的 this 指向的是 undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="comment">// 1.普通的函数被独立调用,this 指向 Window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// Window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.函数定义在对象中, 但是是独立调用,this 指向 Window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = obj.<span class="property">bar</span></span><br><span class="line"><span class="title function_">baz</span>() <span class="comment">// Window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.高阶函数</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>() <span class="comment">// Window ,独立调用,this 指向 Window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(obj.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>

<h3 id="方法通过对象调用的-this"><a href="#方法通过对象调用的-this" class="headerlink" title="方法通过对象调用的 this"></a>方法通过对象调用的 this</h3><ul>
<li>也就是它的调用位置中，是通过 某个对象发起的函数调用 。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">bar</span>: foo,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">bar</span>() <span class="comment">// this 指向 obj 对象,为 &#123;bar: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">  <span class="attr">obj1</span>: obj1,</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>() <span class="comment">// this 指向为 obj1 : &#123;name: &#x27;obj1&#x27;, foo: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = obj1.<span class="property">foo</span></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// this 指向为 window ,函数的独立调用</span></span><br></pre></td></tr></table></figure>

<h3 id="通过-new-绑定时的-this"><a href="#通过-new-绑定时的-this" class="headerlink" title="通过 new 绑定时的 this"></a>通过 new 绑定时的 this</h3><ul>
<li><p>JavaScript 中的函数可以当做一个类的构造函数来使用，也就是使用 new 关键字。</p>
</li>
<li><p>new 创建对象的过程:</p>
<ul>
<li><p>创建新的空对象</p>
</li>
<li><p>将 this 指向这个空对象</p>
</li>
<li><p>执行函数体中的代码</p>
</li>
<li><p>没有显示返回非空对象时, 默认返回这个对象</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;why&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">foo</span>() <span class="comment">// this 指向为 foo &#123;name: &#x27;why&#x27;&#125; , (通过foo构造函数创建的实例对象)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>new 创建对象的过程的另一种描述:<ul>
<li>创建一个全新的对象；</li>
<li>这个新对象会被执行 prototype 连接；</li>
<li>这个新对象会绑定到函数调用的 this 上（ this 的绑定在这个步骤完成）；</li>
<li>如果函数没有返回其他对象，表达式会返回这个新对象；</li>
</ul>
</li>
</ul>
<h3 id="call-apply-bind-显示绑定"><a href="#call-apply-bind-显示绑定" class="headerlink" title="call&#x2F;apply&#x2F;bind 显示绑定"></a>call&#x2F;apply&#x2F;bind 显示绑定</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><ul>
<li>因为明确的绑定了 this 指向的对象，所以称之为 显式绑定 。</li>
<li>显示绑定后， this 就会明确的指向绑定的对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age, height</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印参数:&#x27;</span>, name, age, height)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数加()直接调用</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;why&#x27;</span>, <span class="number">18</span>, <span class="number">1.88</span>) <span class="comment">// this 指向为 window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call , 会调用函数并修改函数中的 this 指向</span></span><br><span class="line"><span class="comment">// 		第一个参数: 绑定this指向</span></span><br><span class="line"><span class="comment">// 		后续参数列表: 后续的参数以多参数的形式传递, 会作为实参传递给 foo 函数</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>, <span class="string">&#x27;james&#x27;</span>, <span class="number">25</span>, <span class="number">2.05</span>) <span class="comment">// String &#123;&#x27;call&#x27;&#125;, this 执行为 String &#123;&#x27;call&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><ul>
<li>因为明确的绑定了 this 指向的对象，所以称之为 显式绑定 。</li>
<li>显示绑定后， this 就会明确的指向绑定的对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age, height</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印参数:&#x27;</span>, name, age, height)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数加()直接调用</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;why&#x27;</span>, <span class="number">18</span>, <span class="number">1.88</span>) <span class="comment">// this 指向为 window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 02 apply ,会调用函数并修改函数中的 this 指向</span></span><br><span class="line"><span class="comment">// 		第一个参数: 绑定this指向</span></span><br><span class="line"><span class="comment">// 		第二个参数: 传入额外的实参, 以数组的形式,会作为实参传递给 foo 函数</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;apply&#x27;</span>, [<span class="string">&#x27;kobe&#x27;</span>, <span class="number">30</span>, <span class="number">1.98</span>]) <span class="comment">// String &#123;&#x27;apply&#x27;&#125;, this 执行为 String &#123;&#x27;apply&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><ul>
<li>使用 bind 方法， bind() 方法创建一个新的 绑定函数（ bound function BF )</li>
<li>绑定函数是一个 exotic function object （<strong>怪异函数对象</strong> ECMAScript 2015 中的术语）</li>
<li>在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age, height, address</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo:&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;参数:&#x27;</span>, name, age, height, address)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求: 调用foo时, 总是绑定到obj对象身上(不希望obj对象身上有函数)</span></span><br><span class="line"><span class="comment">// 1. bind函数的基本使用</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj) <span class="comment">// foo 函数调用时修改this的绑定,相当于返回了一个新的函数赋值给 bar</span></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// 此时 this 指向为 &#123;name: &#x27;why&#x27;&#125;   未传参,形参为undefined</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age, height, address</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo:&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;参数:&#x27;</span>, name, age, height, address)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求: 调用foo时, 总是绑定到obj对象身上(不希望obj对象身上有函数)</span></span><br><span class="line"><span class="comment">// 2. bind函数的其他参数</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj, <span class="string">&#x27;kobe&#x27;</span>, <span class="number">18</span>, <span class="number">1.88</span>)</span><br><span class="line"><span class="comment">// bar 函数的形参 &quot;james&quot; 赋值给了形参 address,相当于在 bind 方法的实参中追加该参数</span></span><br><span class="line"><span class="title function_">bar</span>(<span class="string">&#x27;james&#x27;</span>) <span class="comment">// 此时 this 指向为 &#123;name: &#x27;why&#x27;&#125; / 参数: kobe 18 1.88 james</span></span><br></pre></td></tr></table></figure>

<h3 id="内置函数的调用绑定"><a href="#内置函数的调用绑定" class="headerlink" title="内置函数的调用绑定"></a>内置函数的调用绑定</h3><ul>
<li>这些内置函数会要求我们传入 另外一个函数</li>
<li>我们自己并不会显示的调用这些函数 ，而且 JavaScript 内部或者第三方库内部会帮助我们执行</li>
</ul>
<h4 id="定时器中的-this"><a href="#定时器中的-this" class="headerlink" title="定时器中的 this"></a>定时器中的 this</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 定时器</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window,严格模式下也是window</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h4 id="事件回调中的-this"><a href="#事件回调中的-this" class="headerlink" title="事件回调中的 this"></a>事件回调中的 this</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2 按钮的点击监听</span></span><br><span class="line"><span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btnEl.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// this 指向为 &lt;button&gt;按钮&lt;/button&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btnEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// this 指向为 &lt;button&gt;按钮&lt;/button&gt;,事件绑定给谁,this就指向谁</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="forEach-中的-this"><a href="#forEach-中的-this" class="headerlink" title="forEach 中的 this"></a>forEach 中的 this</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3 forEach forEach的第二个参数为回调函数的this的指向</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>]</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// String &#123;&#x27;aaaa&#x27;&#125;</span></span><br><span class="line">&#125;, <span class="string">&#x27;aaaa&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="this-绑定的优先级"><a href="#this-绑定的优先级" class="headerlink" title="this 绑定的优先级"></a>this 绑定的优先级</h3><ul>
<li>01 默认规则的优先级最低<ul>
<li>毫无疑问，默认规则的优先级是最低的，因为存在其他规则时，就会通过其他规则的方式来绑定 this</li>
</ul>
</li>
<li>02 显示绑定优先级高于隐式绑定</li>
<li>03 new 绑定优先级高于隐式绑定</li>
<li>04 new 绑定优先级高于 bind<ul>
<li>new 绑定和 call 、 apply 是不允许同时使用的，所以不存在谁的优先级更高</li>
<li>new 绑定可以和 bind 一起使用， new 绑定优先级更高</li>
</ul>
</li>
</ul>
<h4 id="显式绑定高于隐式绑定"><a href="#显式绑定高于隐式绑定" class="headerlink" title="显式绑定高于隐式绑定"></a>显式绑定高于隐式绑定</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: foo &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较优先级:</span></span><br><span class="line"><span class="comment">// 	1 显式绑定绑定的优先级高于隐式绑定</span></span><br><span class="line"><span class="comment">// 		1.1 测试一: apply/call高于隐式绑定</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">apply</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// this 指向为 String &#123;&#x27;abc&#x27;&#125;,而不是obj对象</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// this 指向为 String &#123;&#x27;abc&#x27;&#125;,而不是obj对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 测试二: bind高于隐式绑定</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">  <span class="attr">baz</span>: bar,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">baz</span>() <span class="comment">// this 指向为 String &#123;&#x27;aaa&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="new-绑定高于隐式绑定"><a href="#new-绑定高于隐式绑定" class="headerlink" title="new 绑定高于隐式绑定"></a>new 绑定高于隐式绑定</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.new绑定优先级高于隐式绑定</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === obj) <span class="comment">// false</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是通过 obj.foo() 的方式调用,this就是指向obj对象</span></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">foo</span>() <span class="comment">// this 指向为 foo &#123;&#125; , 即指向的是 foo 方法创建的实例对象,空对象</span></span><br></pre></td></tr></table></figure>

<h4 id="new-高于显示绑定"><a href="#new-高于显示绑定" class="headerlink" title="new 高于显示绑定"></a>new 高于显示绑定</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.new/显式</span></span><br><span class="line"><span class="comment">// 3.1. new 不可以和 apply/call一起使用</span></span><br><span class="line"><span class="comment">// 3.2. new 优先级高于 bind</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFn = foo.<span class="title function_">bind</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">bindFn</span>() <span class="comment">// this 指向为 foo 函数缔造出来的 &#123;&#125;,而不是指向 &quot;aaa&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="this-的特殊情况的绑定"><a href="#this-的特殊情况的绑定" class="headerlink" title="this 的特殊情况的绑定"></a>this 的特殊情况的绑定</h3><ul>
<li>情况一：如果在显示绑定中，我们传入一个 null 或者 undefined ，那么这个显示绑定会被忽略，使用默认规则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 特殊情况一: 显式绑定null/undefined, 那么使用的规则是默认绑定</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// this 指向为 String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">null</span>) <span class="comment">// this 指向为 Window , 严格模式(&quot;use strict&quot;)下this指向null</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="literal">undefined</span>) <span class="comment">// this 指向为 Window , 严格模式(&quot;use strict&quot;)下this指向undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>情况二：创建一个函数的 间接引用 ，这种情况使用默认绑定规则。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.情况二: 间接函数引用</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span></span><br><span class="line">obj2.<span class="title function_">foo</span>() <span class="comment">// this 指向为 &#123;name: &#x27;obj2&#x27;, foo: ƒ&#125;</span></span><br><span class="line">;(obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)() <span class="comment">// this 指向为 window , 相当于函数独立调用</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript_BOM</title>
    <url>/2024/01/16/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/105_JavaScript/10506_JS_BOM/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# BOM 浏览器对象模型

<h2 id="BOM-概述"><a href="#BOM-概述" class="headerlink" title="BOM 概述"></a>BOM 概述</h2><h3 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h3><ul>
<li><p><strong>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象</strong>，其核心对象是 window。</p>
</li>
<li><p>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p>
</li>
<li><p>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是 Netscape 浏览器标准的一部分。</p>
</li>
<li><p>DOM:</p>
<ul>
<li>文档对象模型</li>
<li>DOM 就是把「文档」当做一个「对象」来看待</li>
<li>DOM 的顶级对象是 document</li>
<li>DOM 主要学习的是操作页面元素</li>
<li>DOM 是 W3C 标准规范</li>
</ul>
</li>
<li><p>BOM:</p>
<ul>
<li>浏览器对象模型</li>
<li>把「浏览器」当做一个「对象」来看待</li>
<li><strong>BOM 的顶级对象是 window</strong></li>
<li>BOM 学习的是浏览器窗口交互的一些对象</li>
<li>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</li>
</ul>
</li>
</ul>
<h3 id="BOM-的构成"><a href="#BOM-的构成" class="headerlink" title="BOM 的构成"></a>BOM 的构成</h3><ul>
<li><strong>BOM 比 DOM 更大，它包含 DOM。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ed8025ad437045f499d22c8a18cca5b2" alt="1656687049701"></p>
<h3 id="BOM-顶级对象-window"><a href="#BOM-顶级对象-window" class="headerlink" title="BOM 顶级对象 window"></a>BOM 顶级对象 window</h3><ul>
<li>window 对象是浏览器的顶级对象，它具有双重角色。<ul>
<li>它是 JS 访问浏览器窗口的一个接口。</li>
<li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法。</li>
<li>在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 alert()、prompt() 等。</li>
<li>注意：window 下的一个特殊属性 window.name</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> num = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 10</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">num</span>); <span class="comment">// 10</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>); <span class="comment">// 11</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">fn</span>(); <span class="comment">// 11</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">11</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="variable language_">window</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>); <span class="comment">// 10</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="window-对象的常见事件"><a href="#window-对象的常见事件" class="headerlink" title="window 对象的常见事件"></a>window 对象的常见事件</h2><h3 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>window.onload 是窗口 (页面）加载事件, 当文档内容完全加载完成后才会触发该事件(包括图像、脚本文件、CSS文件等), 就调用的处理函数。</p>
</li>
<li><p>注意：</p>
<ul>
<li>有了 window.onload 就可以把 JS 代码写到页面元素的上方，因为 onload 是等页面内容全部加载完毕，再去执行处理函数。</li>
<li>window.onload 传统注册事件方式,只能写一次，如果有多个，会以最后一个为准。</li>
<li>如果使用 addEventListener 则没有限制</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;  &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// load 等页面内容全部加载完毕，包含页面 dom 元素 图片 flash  css 等等</span></span><br><span class="line"><span class="comment">// DOMContentLoaded 是 DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load 更快一些</span></span><br></pre></td></tr></table></figure>

<ul>
<li>DOMContentLoaded 事件触发时，仅当 DOM 加载完成，不包括样式表，图片，flash 等等。</li>
<li>Ie9 以上才支持</li>
<li>如果页面的图片很多的话, 从用户访问到 onload 触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</li>
</ul>
<h3 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>window.onresize 是调整窗口大小加载事件, 当触发时就调用的处理函数。</li>
<li>注意：<ul>
<li>只要窗口大小发生像素变化，就会触发这个事件。</li>
<li>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">800</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ul>
<li>window 对象给我们提供了 2 个非常好用的方法,定时器。<ul>
<li><strong>setTimeout()</strong></li>
<li><strong>setInterval()</strong></li>
</ul>
</li>
</ul>
<h3 id="setTimeout-定时器"><a href="#setTimeout-定时器" class="headerlink" title="setTimeout() 定时器"></a>setTimeout() 定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(调用函数, [延迟的毫秒数]);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>setTimeout() 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p>
</li>
<li><p>注意：</p>
<ul>
<li>window 可以省略。</li>
<li>这个调用函数可以直接写函数，或者写函数名或者采取字符串 ‘函数名()’ 三种形式。第三种不推荐</li>
<li>延迟的毫秒数省略默认是 0，如果写，必须是毫秒。</li>
<li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li>
</ul>
</li>
<li><p>setTimeout() 这个调用函数我们也称为回调函数 callback</p>
</li>
<li><p>普通函数是按照代码顺序直接调用。</p>
</li>
<li><p>而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数。</p>
</li>
<li><p>简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。</p>
</li>
<li><p>以前我们讲的 element.onclick &#x3D; function(){  } 或者 element.addEventListener(“click”, fn); 里面的函数也是回调函数。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. setTimeout </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 语法规范：  window.setTimeout(调用函数, 延时时间);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 这个window在调用的时候可以省略</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是0</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 &#x27;函数名()&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;时间到了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer2 = <span class="built_in">setTimeout</span>(callback, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// setTimeout(&#x27;callback()&#x27;, 3000); // 我们不提倡这个写法</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-5秒后自动关闭广告"><a href="#案例-5秒后自动关闭广告" class="headerlink" title="案例-5秒后自动关闭广告"></a>案例-5秒后自动关闭广告</h3><ul>
<li>核心思路：5 秒之后，就把这个广告隐藏起来</li>
<li>用定时器 setTimeout</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/ad.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ad = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ad&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            ad.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(timeoutID)</span><br></pre></td></tr></table></figure>

<ul>
<li>clearTimeout() 方法取消了先前通过调用 setTimeout() 建立的定时器。</li>
<li>注意：<ul>
<li>window 可以省略。</li>
<li>里面的参数就是定时器的标识符 。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval() 定时器"></a>setInterval() 定时器</h3><ul>
<li>window.setInterval(回调函数, [间隔的毫秒数]);</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. setInterval </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 语法规范：  window.setInterval(调用函数, 延时时间);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续输出&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. setTimeout  延时时间到了，就去调用这个回调函数，只调用一次 就结束了这个定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. setInterval  每隔这个延时时间，就去调用这个回调函数，会调用很多次，重复调用这个函数</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>setInterval() 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</li>
<li>注意：<ul>
<li>window 可以省略。</li>
<li>这个调用函数可以直接写函数，或者写函数名或者采取字符串 ‘函数名()’ 三种形式。</li>
<li>间隔的毫秒数省略默认是 0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数。</li>
<li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li>
<li>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次。</li>
</ul>
</li>
</ul>
<h3 id="案例-京东秒杀倒计时"><a href="#案例-京东秒杀倒计时" class="headerlink" title="案例-京东秒杀倒计时"></a>案例-京东秒杀倒计时</h3><ul>
<li>案例分析:<ul>
<li>① 这个倒计时是不断变化的，因此需要定时器来自动变化（setInterval）</li>
<li>② 三个黑色盒子里面分别存放时分秒</li>
<li>③ 三个黑色盒子利用innerHTML 放入计算的小时分钟秒数</li>
<li>④ 第一次执行也是间隔毫秒数，因此刚刷新页面会有空白</li>
<li>⑤ 最好采取封装函数的方式， 这样可以先调用一次这个函数，防止刚开始刷新页面有空白问题</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hour&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;minute&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hour = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour&#x27;</span>); <span class="comment">// 小时的黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> minute = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.minute&#x27;</span>); <span class="comment">// 分钟的黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.second&#x27;</span>); <span class="comment">// 秒数的黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-5-1 18:00:00&#x27;</span>); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">countDown</span>(); <span class="comment">// 我们先调用一次这个函数，防止第一次刷新页面有空白 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 开启定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(countDown, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span></span><br><span class="line"><span class="language-javascript">            h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span></span><br><span class="line"><span class="language-javascript">            hour.<span class="property">innerHTML</span> = h; <span class="comment">// 把剩余的小时给 小时黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span></span><br><span class="line"><span class="language-javascript">            m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span></span><br><span class="line"><span class="language-javascript">            minute.<span class="property">innerHTML</span> = m;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span></span><br><span class="line"><span class="language-javascript">            s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span></span><br><span class="line"><span class="language-javascript">            second.<span class="property">innerHTML</span> = s;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure>

<h3 id="清除-setInterval-定时器"><a href="#清除-setInterval-定时器" class="headerlink" title="清除 setInterval() 定时器"></a>清除 setInterval() 定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(intervalID);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;begin&quot;</span>&gt;</span>开启定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> begin = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.begin&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> stop = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stop&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 全局变量  null是一个空对象</span></span></span><br><span class="line"><span class="language-javascript">        begin.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ni hao ~~&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        stop.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>clearInterval() 方法取消了先前通过调用 setInterval() 建立的定时器。</li>
<li>注意：<ul>
<li>window 可以省略。</li>
<li>里面的参数就是定时器的标识符 。</li>
</ul>
</li>
</ul>
<h3 id="案例-发送手机验证码"><a href="#案例-发送手机验证码" class="headerlink" title="案例-发送手机验证码"></a>案例-发送手机验证码</h3><p><img src="https://s1.vika.cn/space/2023/02/26/ff3c5401c7cd4d068ac258d8e2fbf48f" alt="1656729620042"></p>
<ul>
<li>案例分析:<ul>
<li>① 按钮点击之后，会禁用 disabled 为 true</li>
<li>② 同时按钮里面的内容会变化， 注意 button 里面的内容通过 innerHTML修改</li>
<li>③ 里面秒数是有变化的，因此需要用到定时器</li>
<li>④ 定义一个变量，在定时器里面，不断递减</li>
<li>⑤ 如果变量为 0 , 说明到了时间，我们需要停止定时器，并且复原按钮初始状态。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    手机号码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 按钮点击之后，会禁用 disabled 为true </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 同时按钮里面的内容会变化， 注意 button 里面的内容通过 innerHTML修改</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 里面秒数是有变化的，因此需要用到定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义一个变量，在定时器里面，不断递减</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果变量为0 说明到了时间，我们需要停止定时器，并且复原按钮初始状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> time = <span class="number">60</span>; <span class="comment">// 定义剩下的秒数</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 清除定时器和复原按钮</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">innerHTML</span> = <span class="string">&#x27;发送&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">innerHTML</span> = <span class="string">&#x27;还剩下&#x27;</span> + time + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    time--;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定时器的-this-指向"><a href="#定时器的-this-指向" class="headerlink" title="定时器的 this 指向"></a>定时器的 this 指向</h3><ul>
<li>this 的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定 this 到底指向谁，一般情况下 this 的最终指向的是那个调用它的对象, 现阶段我们先了解一下几个 this 指向<ul>
<li>全局作用域或者普通函数中 this 指向全局对象 window（注意定时器里面的 this 指向 window ）</li>
<li>方法调用中,谁调用 this 就指向谁</li>
<li>构造函数中 this 指向构造函数的实例对象</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 方法调用中谁调用this指向谁</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &#123;sayHi: ƒ&#125; this 指向的是 o 这个对象</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// btn.onclick = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(this); // this指向的是btn这个按钮对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是btn这个元素按钮对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Fun &#123;&#125;, this 指向的是fun 的实例对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-时钟显示当前时间"><a href="#案例-时钟显示当前时间" class="headerlink" title="案例-时钟显示当前时间"></a>案例-时钟显示当前时间</h3><ul>
<li>做一个电子时钟，显示当前的年月日，时分秒，要求自动变化</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/11a8bf6cf40044d196dcbb2e8d9a9038" alt="1656729808255"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<h2 id="JS执行队列"><a href="#JS执行队列" class="headerlink" title="JS执行队列"></a>JS执行队列</h2><h3 id="JS-是单线程"><a href="#JS-是单线程" class="headerlink" title="JS 是单线程"></a>JS 是单线程</h3><ul>
<li>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</li>
<li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下代码执行的结果是什么？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">// 1 2 3 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 那么以下代码执行的结果又是什么？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>

<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><ul>
<li><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p>
</li>
<li><p>同步:</p>
<ul>
<li>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</li>
</ul>
</li>
<li><p>异步:</p>
<ul>
<li>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。他们的本质区别： 这条流水线上各个流程的执行顺序不同。</li>
</ul>
</li>
<li><p>同步任务:</p>
<ul>
<li><strong>同步任务都在主线程上执行，形成一个执行栈。</strong></li>
</ul>
</li>
<li><p>异步任务:</p>
<ul>
<li>JS 的异步是通过回调函数实现的。</li>
<li>一般而言，异步任务有以下三种类型:<ul>
<li>01 普通事件，如 click、resize 等</li>
<li>02 资源加载，如 load、error 等</li>
<li>03 定时器，包括 setInterval、setTimeout 等</li>
</ul>
</li>
<li><strong>异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</strong></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/df5f030180a54f7ebdaa5f7302c9bcb5" alt="1656730970440"></p>
<h3 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h3><ul>
<li><strong>01 先执行执行栈中的同步任务。</strong></li>
<li><strong>02 异步任务（回调函数）放入任务队列中。</strong></li>
<li><strong>03 一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/4b0308fe81f84e88a1fa66b27e2d7928" alt="1656731119409"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/c12df2c104f14e5f855a39ddb3fd738a" alt="1656731215761"></p>
<ul>
<li><strong>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</strong></li>
</ul>
<h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><h3 id="什么是-location-对象"><a href="#什么是-location-对象" class="headerlink" title="什么是 location 对象"></a>什么是 location 对象</h3><ul>
<li><strong>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL 。</strong> 因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</li>
</ul>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><ul>
<li><strong>统一资源定位符 (Uniform Resource Locator, URL) 是互联网上标准资源的地址。</strong>互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</li>
<li>URL 的一般语法格式为：<ul>
<li><code>protocol://host[:port]/path/[?query]#fragment</code></li>
<li><code>http://www.itcast.cn/index.html?name=andy&amp;age=18#link</code></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/4b07bed6ee1541a7bf7c8b1cbe129774" alt="1656731393387"></p>
<h3 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h3><p><img src="https://s1.vika.cn/space/2023/02/26/77172a1713464fa9a4a8b11a1ebaf248" alt="1656731419344"></p>
<h3 id="案例-自动跳转页面"><a href="#案例-自动跳转页面" class="headerlink" title="案例-自动跳转页面"></a>案例-自动跳转页面</h3><ul>
<li>案例分析<ul>
<li>① 利用定时器做倒计时效果</li>
<li>② 时间到了，就跳转页面。 使用 location.href</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(location.href);</span></span></span><br><span class="line"><span class="language-javascript">            location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">innerHTML</span> = <span class="string">&#x27;您将在&#x27;</span> + timer + <span class="string">&#x27;秒钟之后跳转到首页&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                timer--;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-获取url参数"><a href="#案例-获取url参数" class="headerlink" title="案例-获取url参数"></a>案例-获取url参数</h3><ul>
<li>案例分析<ul>
<li>① 第一个登录页面，里面有提交表单， action 提交到 index.html 页面</li>
<li>② 第二个页面，可以使用第一个页面的参数，这样实现了一个数据不同页面之间的传递效果</li>
<li>③ 第二个页面之所以可以使用第一个页面的数据，是利用了URL 里面的 location.search参数</li>
<li>④ 在第二个页面中，需要把这个参数提取。</li>
<li>⑤ 第一步去掉？ 利用 substr</li>
<li>⑥ 第二步 利用&#x3D;号分割 键 和 值 split(‘&#x3D;‘)</li>
<li>⑦ 第一个数组就是键 第二个数组就是值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="location-对象的方法"><a href="#location-对象的方法" class="headerlink" title="location 对象的方法"></a>location 对象的方法</h3><p><img src="https://s1.vika.cn/space/2023/02/26/b20889acfa5d43048c89145c21568fcf" alt="1656731610073"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 记录浏览历史，所以可以实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不记录浏览历史，不可以实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            location.<span class="title function_">reload</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h2><ul>
<li>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</li>
<li>下面前端代码可以判断用户那个终端打开页面，实现跳转</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>; <span class="comment">//手机</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>; <span class="comment">//电脑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><ul>
<li><strong>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。</strong>该对象包含用户（在浏览器窗口中）访问过的 URL。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ef8a89a1cbc842f3891015bdfbe19a39" alt="1656731797060"></p>
<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><ul>
<li><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5 规范提出了相关解决方案。</p>
</li>
<li><p>本地存储特性</p>
<ul>
<li>01 数据存储在用户浏览器中</li>
<li>02 设置、读取方便、甚至页面刷新不丢失数据</li>
<li>03 容量较大，**sessionStorage(会话存储)<strong>约5M、</strong>localStorage(本地存储)**约20M</li>
<li>04 只能存储字符串，可以将对象 JSON.stringify() 编码后存储</li>
</ul>
</li>
</ul>
<h3 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h3><ul>
<li>01 <strong>生命周期为关闭浏览器窗口</strong></li>
<li>02 在同一个窗口(页面)下数据可以共享</li>
<li>03 以键值对的形式存储使用</li>
</ul>
<h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure>

<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>

<h3 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h3><ul>
<li><strong>01 声明周期永久生效，除非手动删除,否则关闭页面也会存在</strong></li>
<li><strong>02 可以多窗口（页面）共享（同一浏览器可以共享）</strong></li>
<li>03 以键值对的形式存储使用</li>
</ul>
<h4 id="存储数据-1"><a href="#存储数据-1" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure>

<h4 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有数据-1"><a href="#删除所有数据-1" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>

<h3 id="案例-记住用户名"><a href="#案例-记住用户名" class="headerlink" title="案例-记住用户名"></a>案例-记住用户名</h3><ul>
<li><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 把数据存起来，用到本地存储</li>
<li>② 关闭页面，也可以显示用户名，所以用到localStorage</li>
<li>③ 打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</li>
<li>④ 当复选框发生改变的时候 change事件</li>
<li>⑤ 如果勾选，就存储，否则就移除</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;remember&quot;</span>&gt;</span> 记住用户名</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> remember = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#remember&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">            username.<span class="property">value</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            remember.<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        remember.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, username.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>Less</title>
    <url>/2024/01/10/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/104_Less/10401_Less/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><h2 id="什么是CSS预处理器"><a href="#什么是CSS预处理器" class="headerlink" title="什么是CSS预处理器"></a>什么是CSS预处理器</h2><blockquote>
<p>Less中文网: <a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p>
</blockquote>
<ul>
<li><p>CSS 预处理器就是用某一种语言用来为 CSS 增加一些动态语言的的特性(变量、函数、继承等)，</p>
</li>
<li><p>CSS 预处理器可以让你的 CSS 更见简洁，适应性更强，代码更直观等诸多好处</p>
</li>
<li><p>简而言之:CSS 预处理器就是升级版 CSS</p>
</li>
</ul>
<h2 id="常见的CSS预处理器"><a href="#常见的CSS预处理器" class="headerlink" title="常见的CSS预处理器"></a>常见的CSS预处理器</h2><ul>
<li>Less(Leaner Style Sheets) 、Sass 、Stylus</li>
</ul>
<h2 id="为什么需要less"><a href="#为什么需要less" class="headerlink" title="为什么需要less"></a>为什么需要less</h2><ul>
<li><p>CSS 的语法虽然简单，但它同时也带来一些问题</p>
</li>
<li><p>CSS 需要书写大量看似没有逻辑的代码，不方便维护及扩展，也不利于复用</p>
</li>
<li><p>造成这些原因的本质源于 CSS 是一门非程序式的语言，没有变量 &#x2F; 函数 &#x2F; 作用域等概念</p>
</li>
</ul>
<h2 id="什么是less"><a href="#什么是less" class="headerlink" title="什么是less"></a>什么是less</h2><ul>
<li>Less 是一门 CSS 预处理语言，为 CSS 赋予了动态语言的特征。</li>
<li>它扩展了 CSS 语言，增加了变量、Mixin(混合)、嵌套、函数和运算等特性，使 CSS 更易维护和扩展</li>
<li>一句话:用类似 JS 的语法去写 CSS</li>
</ul>
<h2 id="less基本使用"><a href="#less基本使用" class="headerlink" title="less基本使用"></a>less基本使用</h2><ul>
<li>在浏览器中直接运行<ul>
<li>编写 .less 文件–&gt;引入 .less 文件–&gt; 引入less.js</li>
</ul>
</li>
<li>运行注意点:<ul>
<li>一定要先引入 less.css , 再引入 less.js</li>
<li>如果 less 代码是写到单独的文件中,一定要在服务端环境运行才能生效</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-class">.box</span>;</span><br><span class="line">  <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-class">.center</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="提前预编译"><a href="#提前预编译" class="headerlink" title="提前预编译"></a>提前预编译</h2><ul>
<li>编写 less 文件–&gt;利用工具转换为 css 文件–&gt;引入 css 文件</li>
<li><strong>VScode插件: Easy Less (推荐)</strong></li>
<li>考拉客户端: <a href="http://koala-app.com/index-zh.html">http://koala-app.com/index-zh.html</a></li>
<li>开源中国 : <a href="https://tool.oschina.net/less">https://tool.oschina.net/less</a></li>
<li>构建工具配置 loader 自动编译:</li>
<li>后续课程内容注意点:<ul>
<li>无需引入 less.js，无需在服务端运行</li>
</ul>
</li>
</ul>
<h2 id="Less的注释"><a href="#Less的注释" class="headerlink" title="Less的注释"></a>Less的注释</h2><ul>
<li>单行注释和多行注释:<ul>
<li>单行注释,不会被编译到 .css文件中</li>
<li>多行注释,会编译到 .css 文件中( 在 css 中仅支持 &#x2F;**&#x2F; 注释)</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释,不会被编译到.css文件中</span></span><br><span class="line"><span class="comment">/*多行注释,会编译到.css文件中*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Less的变量"><a href="#Less的变量" class="headerlink" title="Less的变量"></a>Less的变量</h2><ul>
<li><ol>
<li>变量的定义: 和 JS 中的变量基本一致</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@height:</span><span class="number">200px</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>变量的赋值 (和 js 一样可以将一个变量赋值给另外一个变量)</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@height:</span><span class="variable">@width</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义变量*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>局部变量和全局变量:</li>
</ol>
<ul>
<li>和 js 一样, less 中的变量也有全局变量和局部变量, 定义在 { } 外面的就是全局的变量，什么地方都可以使用, 定义在 { } 里面的就是局部变量，只能在 { } 中使用</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义全局变量 */</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">100px</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*定义局部变量,优先使用就近的局部变量*/</span></span><br><span class="line">	<span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义全局变量 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*定义局部变量,优先使用就近的局部变量*/</span></span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意定: less 中的变量是延迟加载的，写到后面也能在前面使用</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>同一个变量,后定义的变量会覆盖前定义的变量</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@width:</span><span class="number">100px</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义全局变量*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Less变量的插值"><a href="#Less变量的插值" class="headerlink" title="Less变量的插值"></a>Less变量的插值</h2><ul>
<li><ol>
<li>什么是变量插值?</li>
</ol>
<ul>
<li>在 less 中如果属性的取值可以直接使用变量，但是如果是属性名称或者选择器名称并不能直接使用变量, 如果属性名称或者选择器名称想使用变量中保存的值，那么必须使用变量插值的格式</li>
</ul>
</li>
<li><ol start="2">
<li>变量作为样式的属性名:</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@height:</span>height;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  @&#123;<span class="attribute">height&#125;</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>变量作为选择器</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">200px</span>;</span><br><span class="line"><span class="variable">@div:</span>div;</span><br><span class="line"><span class="variable">@&#123;div&#125;</span>&#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义全局变量*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/*使用变量*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的运算"><a href="#Less的运算" class="headerlink" title="Less的运算"></a>Less的运算</h2><ul>
<li><p>和 CSS3 中新增的 calc 函数一样，都支持 + - * &#x2F; 运算</p>
</li>
<li><p>单位也可以写到后面,也可以两个都写</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:(<span class="number">200px</span> * <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">height</span>:(<span class="number">200px</span> / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的混合"><a href="#Less的混合" class="headerlink" title="Less的混合"></a>Less的混合</h2><ol>
<li>什么是 less 中的混合 ( Mix in )</li>
</ol>
<ul>
<li>将需要重复使用的代码封装到一个类中，在需要使用的地方调用封装好的类即可, 在预处理的时候 less 会自动将用到的封装好的类中的代码拷贝过来</li>
<li>本质就是 ctrl+c –&gt; ctrl +v</li>
</ul>
<ol start="2">
<li>less 中混合的注意点:</li>
</ol>
<ul>
<li>如果混合名称的后面没有 ()，那么在预处理的时候，会保留混合的代码</li>
<li>如果混合名称的后面加上 ()，那么在预处理的时候，不会保留混合的代码</li>
<li>使用混合类时,也可以在后面添加 (),也可以不加 (),效果同样</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* .box 类会被编译到 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>() &#123;</span><br><span class="line">  <span class="comment">/* .center 类不会被编译出现在 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-class">.box</span>;</span><br><span class="line">  <span class="selector-class">.center</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* .box 类会被编译到 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* .box 类会被编译到 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="comment">/* .center 类不会被编译出现在 .css 文件中 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less带参数混合"><a href="#Less带参数混合" class="headerlink" title="Less带参数混合"></a>Less带参数混合</h2><ul>
<li><ol>
<li>Less 带参数混合</li>
</ol>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.snail</span>(<span class="variable">@w</span>,<span class="variable">@h</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@w</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="variable">@h</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="variable">@c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="number">200px</span>,<span class="number">200px</span>,green)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="number">100px</span>,<span class="number">100px</span>,yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>带参数以及默认值的混合:</li>
</ol>
<ul>
<li>若传递了对应的参数,就用传递的参数</li>
<li>若不传参则使用默认值</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.snail</span>(<span class="variable">@w</span>:<span class="number">100px</span>,<span class="variable">@h</span>:<span class="number">100px</span>,<span class="variable">@c</span>:red)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@w</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="variable">@h</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="variable">@c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="number">200px</span>,<span class="number">200px</span>,green)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="comment">/*给指定的形参传递数据*/</span></span><br><span class="line">  <span class="selector-class">.snail</span>(<span class="variable">@c</span>:yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="comment">/*给指定的形参传递数据*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="混合的可变参数"><a href="#混合的可变参数" class="headerlink" title="混合的可变参数"></a>混合的可变参数</h2><ul>
<li><ol>
<li>arguments 不定参数</li>
</ol>
<ul>
<li>可以传递任意多个参数,不传递参数也可以</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animate</span>(...)&#123;</span><br><span class="line">  <span class="attribute">transition</span>:<span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.animate</span>(all,<span class="number">4s</span>,linear,<span class="number">0s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">4s</span> linear <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>指定必须最少传递的参数个数</li>
</ol>
<ul>
<li>若传递的参数个数,少于必须传递的参数个数,就会报错</li>
<li>若使用了 <code>...</code> ,则必须写到形参的最后面</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animate</span>(<span class="variable">@name</span>,<span class="variable">@time</span>,...)&#123;</span><br><span class="line">  <span class="attribute">transition</span>:<span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.animate</span>(all,<span class="number">4s</span>,linear,<span class="number">0s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">4s</span> linear <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的匹配模式"><a href="#Less的匹配模式" class="headerlink" title="Less的匹配模式"></a>Less的匹配模式</h2><h3 id="混合的按需匹配模式"><a href="#混合的按需匹配模式" class="headerlink" title="混合的按需匹配模式:"></a>混合的按需匹配模式:</h3><ul>
<li>就是通过混合的第一个字符串形参,来确定具体要执行哪一个同名混合</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="selector-class">.triangle</span>(Down,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Top,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Top,<span class="number">80px</span>,red) <span class="comment">/* 通过第一个参数 Top 决定匹配那个类 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">  <span class="comment">/* 通过第一个参数 Top 决定匹配那个类 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="混合的通用匹配模式"><a href="#混合的通用匹配模式" class="headerlink" title="混合的通用匹配模式"></a>混合的通用匹配模式</h3><ul>
<li>无论同名的哪一个混合被匹配了，都会先执行通用匹配模式中的代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="comment">/*通用匹配模式:  @_ 会先执行通用匹配 */</span></span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Down,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:<span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Top,<span class="variable">@width</span>,<span class="variable">@color</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-width</span>:<span class="variable">@width</span>;</span><br><span class="line">	<span class="attribute">border-style</span>:solid solid solid solid;</span><br><span class="line">	<span class="attribute">border-color</span>:transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Top,<span class="number">80px</span>,red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="comment">/*通用匹配模式:  @_ 会先执行通用匹配 */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在less中导入less"><a href="#在less中导入less" class="headerlink" title="在less中导入less"></a>在less中导入less</h2><ul>
<li>在 less 文件中导入其他 less 文件</li>
<li>导入文件时,后缀名<code>.less</code>可以省略</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;triangle.less&quot;</span>;</span><br><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Top,<span class="number">80px</span>,red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* triangle.less */</span></span><br><span class="line"><span class="comment">/*通用匹配模式:  @_ 会先执行通用匹配 */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成两个相同的类时因为 triangle.less 的 .div 类中也调用了一次 triangle */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less中的内置函数"><a href="#Less中的内置函数" class="headerlink" title="Less中的内置函数"></a>Less中的内置函数</h2><ul>
<li><p>isnumber(56px);		&#x2F;&#x2F; &#x3D;&gt;true是否含数字</p>
</li>
<li><p>isstring(“string”);	   &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>iscolor(#ffO);	   	 &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>iscolor(blue);           &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>iskeyword (keyword) ;   &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>isurl(url(…));           &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>ispixe1 (56px);       &#x2F;&#x2F; &#x3D;true</p>
</li>
<li><p>isem(7.8em);         &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>ispercentage(7.8%);   &#x2F;&#x2F; &#x3D;&gt;true</p>
</li>
<li><p>isunit(4rem,rem);     &#x2F;&#x2F; &#x3D;&gt;true是否为指定单位</p>
</li>
<li><p>isruleset (@rules);   &#x2F;&#x2F; &#x3D;&gt;true是否为变量</p>
</li>
</ul>
<h3 id="简单的变量使用"><a href="#简单的变量使用" class="headerlink" title="简单的变量使用"></a>简单的变量使用</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@str:</span><span class="string">&quot;./images/1.jpg&quot;</span>;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:url(<span class="string">@str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;images/1.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="replace函数"><a href="#replace函数" class="headerlink" title="replace函数"></a>replace函数</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@str:</span><span class="string">&quot;./images/1.jpg&quot;</span>;</span><br><span class="line"><span class="comment">/* 将 @str 变量中的1替换为2  */</span></span><br><span class="line"><span class="variable">@str2:</span><span class="built_in">replace</span>(<span class="variable">@str</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:url(<span class="string">@str2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将 @str 变量中的1替换为2  */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;images/2.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="颜色饱和度"><a href="#颜色饱和度" class="headerlink" title="颜色饱和度"></a>颜色饱和度</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/*降低颜色饱和度*/</span></span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">desaturate</span>(yellow,<span class="number">50%</span>);</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/*增加颜色饱和度*/</span></span><br><span class="line">  	<span class="attribute">background</span>:<span class="built_in">saturate</span>(yellow,<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/*降低颜色饱和度*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#bfbf40</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/*增加颜色饱和度*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffff00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less的层级结构"><a href="#Less的层级结构" class="headerlink" title="Less的层级结构"></a>Less的层级结构</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><ul>
<li>如果在某一个选择器的 { } 中直接写上了其它的选择器，会自动转换成后代选择器</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hover"><a href="#hover" class="headerlink" title=":hover"></a>:hover</h3><ul>
<li>这里的 &amp; 的作用，是告诉 less 在转换的时候不用后代来转换，直接拼接在当前选择器的后面即可</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="before"><a href="#before" class="headerlink" title="::before"></a>::before</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;子元素&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;子元素&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less中的继承"><a href="#Less中的继承" class="headerlink" title="Less中的继承"></a>Less中的继承</h2><ul>
<li>less 中的继承和 less 中混合的区别<ul>
<li>使用时的语法格式不同</li>
<li>转换之后的结果不同 (混合是直接拷贝,继承是并集选择器)</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span>:<span class="selector-tag">extend</span>(.center)&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="selector-class">.son</span>:<span class="selector-tag">extend</span>(.center)&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>,</span><br><span class="line"><span class="selector-class">.father</span>,</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less中的条件判断"><a href="#Less中的条件判断" class="headerlink" title="Less中的条件判断"></a>Less中的条件判断</h2><ul>
<li><p>less 中可以通过 when 给混合添加执行限定条件，只有条件满足(为真)才会执行混合中的代码</p>
</li>
<li><p>when 表达式中可以使用比较运算符<code> &gt;   &lt;    &lt;=   =   &gt;=</code>、逻辑运算符、或检查函数来进行条件判断</p>
</li>
</ul>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px时,才会执行混合   等于:一个等号 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="variable">@width</span> = <span class="number">100px</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px时,才会执行混合   等于:一个等号 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px 或者 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="variable">@width</span> = <span class="number">100px</span>),(<span class="variable">@height</span> = <span class="number">100px</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于100px 或者 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于 100px 且 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="variable">@width</span> = <span class="number">100px</span>)<span class="keyword">and</span>(<span class="variable">@height</span> = <span class="number">100px</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 等于 100px 且 height 等于100px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用检验函数"><a href="#使用检验函数" class="headerlink" title="使用检验函数"></a>使用检验函数</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 的单位是 px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.size</span>(<span class="variable">@width</span>,<span class="variable">@height</span>) <span class="keyword">when</span> (<span class="built_in">ispixel</span>(<span class="variable">@width</span>))&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.size</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后的结果如下:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当 widht 的单位是 px 时,才会执行混合 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2>]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript_DOM</title>
    <url>/2024/01/15/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/105_JavaScript/10505_JS_DOM/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM 文档对象模型"></a>DOM 文档对象模型</h1><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><ul>
<li><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p>
</li>
<li><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>
</li>
</ul>
<h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p><img src="https://s1.vika.cn/space/2023/02/26/5eeee0e7c3e646c1b3f5ff85859013ba"></p>
<ul>
<li><p>文档：一个页面就是一个文档，DOM 中使用 document 表示</p>
</li>
<li><p>元素：页面中的所有标签都是元素，DOM 中使用 element 表示</p>
</li>
<li><p>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</p>
</li>
<li><p>DOM 把以上内容都看做是对象</p>
</li>
</ul>
<h2 id="获取元素方法"><a href="#获取元素方法" class="headerlink" title="获取元素方法"></a>获取元素方法</h2><h3 id="如何获取页面元素"><a href="#如何获取页面元素" class="headerlink" title="如何获取页面元素"></a>如何获取页面元素</h3><ul>
<li><p>DOM 在我们实际开发中主要用来操作元素。</p>
</li>
<li><p>我们如何来获取页面中的元素呢?</p>
</li>
<li><p>获取页面中的元素可以使用以下几种方式:</p>
<ul>
<li><p>根据 ID 获取</p>
</li>
<li><p>根据标签名获取</p>
</li>
<li><p>通过 HTML5 新增的方法获取</p>
</li>
<li><p>特殊元素获取</p>
</li>
</ul>
</li>
</ul>
<h3 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h3><ul>
<li>使用 <strong>getElementById()</strong> 方法可以获取带有 ID 的元素对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <strong>console.dir()</strong> 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 因为我们文档页面从上往下加载，所以先得有标签 所以我们script写到标签的下面</span></span><br><span class="line"><span class="comment">// 2. get 获得 element 元素 by 通过 驼峰命名法 </span></span><br><span class="line"><span class="comment">// 3. 参数: id 是大小写敏感的字符串</span></span><br><span class="line"><span class="comment">// 4. 返回的是一个元素对象</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timer); <span class="comment">// &lt;div id=&quot;time&quot;&gt;2019-9-9&lt;/div&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(timer); <span class="comment">// div#time</span></span><br></pre></td></tr></table></figure>


<h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><ul>
<li>使用 <strong>getElementsByTagName()</strong> 方法可以返回带有指定标签名的对象的集合。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;ol&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis); <span class="comment">// HTMLCollection(8) [li, li, li, li, li, li, li, li]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 如果页面中只有一个li 返回的还是伪数组的形式 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 如果页面中没有这个元素 返回的是空的伪数组的形式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 5. element.getElementsByTagName(&#x27;标签名&#x27;); 父元素必须是指定的单个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var ol = document.getElementsByTagName(&#x27;ol&#x27;); // [ol]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(ol[0].getElementsByTagName(&#x27;li&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol); <span class="comment">// &lt;ol id=&quot;ol&quot;&gt;...&lt;/ol&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>));<span class="comment">// HTMLCollection(4) [li, li, li, li]</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</li>
<li>得到元素对象是动态的</li>
</ul>
</li>
</ul>
<h3 id="H5新增方法"><a href="#H5新增方法" class="headerlink" title="H5新增方法"></a>H5新增方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;类名&#x27;</span>);<span class="comment">// 根据类名返回元素对象集合</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">// 根据指定选择器返回第一个元素对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">// 根据指定选择器返回</span></span><br></pre></td></tr></table></figure>

<ul>
<li>querySelector 和 querySelectorAll 里面的选择器需要加符号,比如:document.querySelector(‘#nav’);</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合,是一个伪数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(boxs); <span class="comment">// HTMLCollection(2) [div.box, div.box]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记里面的选择器需要加符号 .box  #nav</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox); <span class="comment">// &lt;div class=&quot;box&quot;&gt;盒子1&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(nav); <span class="comment">// div#nav</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(li); <span class="comment">// &lt;li&gt;首页&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(allBox); <span class="comment">// NodeList(2) [div.box, div.box]</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis); <span class="comment">// NodeList(2) [li, li]</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="获取body-HTML"><a href="#获取body-HTML" class="headerlink" title="获取body&#x2F;HTML"></a>获取body&#x2F;HTML</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取body元素</span></span><br><span class="line">doucumnet.<span class="property">body</span> <span class="comment">// 返回body元素对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取html元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span> <span class="comment">// 返回html元素对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.获取body 元素</span></span><br><span class="line"><span class="keyword">var</span> bodyEle = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bodyEle);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(bodyEle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取html 元素</span></span><br><span class="line"><span class="keyword">var</span> htmlEle = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlEle);</span><br></pre></td></tr></table></figure>

<h2 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h2><h3 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h3><ul>
<li><p><strong>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</strong></p>
</li>
<li><p>简单理解： 触发— 响应机制。</p>
</li>
<li><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p>
</li>
</ul>
<h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul>
<li>事件源 （谁）</li>
<li>事件类型 （什么事件）</li>
<li>事件处理程序 （做啥）</li>
</ul>
<h3 id="案例-弹出警示框"><a href="#案例-弹出警示框" class="headerlink" title="案例-弹出警示框"></a>案例-弹出警示框</h3><p><img src="https://s1.vika.cn/space/2023/02/26/e7bff475c8f3479cbfd1ff0324d952e3"></p>
<ul>
<li>案例分析:<ul>
<li>01 获取事件源（按钮）</li>
<li>02 注册事件（绑定事件），使用 onclick</li>
<li>03 编写事件处理程序，写一个函数弹出 alert 警示框</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击一个按钮，弹出对话框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;点秋香&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h3><ul>
<li>01 获取事件源</li>
<li>02 注册事件（绑定事件）</li>
<li>03 添加事件处理程序（采取函数赋值形式）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 执行事件步骤</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击div 控制台输出 我被选中了</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取事件源</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.绑定事件(注册事件), 并添加点击事件处理程序 </span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被选中了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的鼠标事件"><a href="#常见的鼠标事件" class="headerlink" title="常见的鼠标事件"></a>常见的鼠标事件</h3><p><img src="https://s1.vika.cn/space/2023/02/26/41439181687448dab5bb825a1afd12e6" alt="image-20220130112639600"></p>
<ul>
<li>mouseenter 和 mouseover 的区别:<ul>
<li>当鼠标移动到元素上时就会触发 mouseenter 事件</li>
<li>类似 mouseover，它们两者之间的差别是<ul>
<li>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。</li>
<li>mouseenter 只会经过自身盒子触发</li>
<li>之所以这样，就是因为 mouseenter 不会冒泡</li>
</ul>
</li>
<li>跟 mouseenter 搭配 鼠标离开 mouseleave 同样不会冒泡</li>
</ul>
</li>
<li><strong>mouseover 和 mouseout 会触发事件冒泡</strong></li>
</ul>
<h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><ul>
<li><p>01 传统注册方式: 同一个元素,同一个事件,只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p>
</li>
<li><p>02 addEventListener 方法监听注册方式: </p>
<ul>
<li>同一个元素,同一个事件,可以注册多个监听,按注册顺序依次执行,w3c 标准推荐方式</li>
<li>该方法接收三个参数：<ul>
<li>type：事件类型字符串，比如 click 、mouseover ，注意这里不要带 on</li>
<li>listener：事件处理函数，事件发生时，会调用该监听函数</li>
<li>useCapture：可选参数，是一个布尔值，默认是 false</li>
</ul>
</li>
</ul>
</li>
<li><p>03 attachEvent() 方法:</p>
<ul>
<li>将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</li>
<li>该方法接收两个参数：<ul>
<li>eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li>
<li>callback： 事件处理函数，当目标触发事件时回调函数被调用</li>
<li>注意：IE8 及早期版本支持</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>传统注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>方法监听注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>ie9 attachEvent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 传统方式注册事件,后注册的事件会覆盖前注册的事件</span></span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;hao a u&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 事件侦听注册事件 addEventListener </span></span><br><span class="line"><span class="comment">// 		(1) 里面的事件类型是字符串 必定加引号 而且不带on</span></span><br><span class="line"><span class="comment">// 		(2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）,会按先后顺序依次执行</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">&#125;)</span><br><span class="line">btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. attachEvent ie9以前的版本支持</span></span><br><span class="line">btns[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>注册事件兼容性解决方案<ul>
<li>兼容性处理的原则： 首先照顾大多数浏览器，再处理特殊浏览器</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">	<span class="comment">// 判断当前浏览器是否支持 addEventListener 方法</span></span><br><span class="line">	<span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">		element.<span class="title function_">addEventListener</span>(eventName, fn); <span class="comment">// 第三个参数 默认是false</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">		element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// 相当于 element.onclick = fn;</span></span><br><span class="line">		element[<span class="string">&#x27;on&#x27;</span> + eventName] = fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移除事件监听"><a href="#移除事件监听" class="headerlink" title="移除事件监听"></a>移除事件监听</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 传统方式删除事件</span></span></span><br><span class="line"><span class="language-javascript">            divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. removeEventListener 删除事件 </span></span><br><span class="line">divs[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn) <span class="comment">// 里面的fn,不需要调用加小括号</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="comment">// 参数一:要移除的事件类型</span></span><br><span class="line">  	<span class="comment">// 参数二:指定要移除的函数。</span></span><br><span class="line">  	<span class="comment">// 参数三:指定移除事件的阶段,参数可选  可选参数:true/false, true:在捕获阶段移除,false:在冒泡阶段移除,不写默认为false </span></span><br><span class="line">    divs[<span class="number">1</span>].<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. detachEvent</span></span><br><span class="line">divs[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    divs[<span class="number">2</span>].<span class="title function_">detachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除事件兼容性解决方案:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">	<span class="comment">// 判断当前浏览器是否支持 removeEventListener 方法</span></span><br><span class="line">	<span class="keyword">if</span> (element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">		element.<span class="title function_">removeEventListener</span>(eventName, fn); <span class="comment">// 第三个参数 默认是false</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">		element.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		element[<span class="string">&#x27;on&#x27;</span> + eventName] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冒泡与捕获"><a href="#冒泡与捕获" class="headerlink" title="冒泡与捕获"></a>冒泡与捕获</h3><ul>
<li>事件流描述的是从页面中接收事件的顺序。</li>
<li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 <strong>DOM 事件流</strong>。</li>
<li>比如我们给一个 div 注册了点击事件：</li>
<li>DOM 事件流分为3个阶段：<ul>
<li>捕获阶段</li>
<li>当前目标阶段</li>
<li>冒泡阶段</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5d22982cd21b4d1c87e1937cb78016cf" alt="1656682782234"></p>
<ul>
<li>事件冒泡：<strong>IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</strong><ul>
<li>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/8988dfd8b7e44e88ae67cd7a2eb06ff2" alt="1656682866809"></p>
<ul>
<li>事件捕获： <strong>网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</strong></li>
<li>注意<ul>
<li><strong>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</strong></li>
<li>onclick 和 attachEvent 只能得到冒泡阶段。</li>
<li><strong>addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序。</strong></li>
<li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</li>
<li><strong>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</strong></li>
<li>事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件，我们后面讲解。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dom 事件流 三个阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. JS 代码中只能执行捕获或者冒泡其中的一个阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. onclick 和 attachEvent（ie） 只能得到冒泡阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -&gt; html -&gt; body -&gt; father -&gt; son</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -&gt; father -&gt;body -&gt; html -&gt; document</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul>
<li>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。</li>
<li>简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 event，它有很多属性和方法。</li>
<li>比如：<ul>
<li>谁绑定了这个事件。</li>
<li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li>
<li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li>
</ul>
</li>
<li>事件对象的使用语法:<ul>
<li>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去。</li>
<li>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt</span></span><br><span class="line">&#125;</span><br><span class="line">eventTarget.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt</span></span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 事件对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(window.event);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e = e || window.event;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. event 就是一个事件对象 写到我们侦听函数的小括号里面,当形参来看</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 事件对象是我们事件的一系列相关数据的集合,跟事件相关的,比如鼠标点击里面就包含了鼠标的相关信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息 比如,判断用户按下了那个键</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 这个事件对象我们可以自己命名 比如 event 、 evt、 e</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 5. 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// e.target 和 this 的区别：</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. e.target 返回的是触发事件的对象（元素）  2.this 返回的是绑定事件的对象（元素）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 区别 ： 1.e.target:点击了那个元素，就返回那个元素  2.this:那个元素绑定了这个点击事件，那么就返回谁</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">currentTarget</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是li e.target 指向的就是li</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 了解兼容性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// div.onclick = function(e) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     e = e || window.event;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     var target = e.target || e.srcElement;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(target);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 了解跟 this 有个非常相似的属性 currentTarget  ie678不认识</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/6177411a94794b72bf0c4ccb40ef41b3" alt="1656683313579"></p>
<h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 常见事件对象的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 返回事件类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, fn);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, fn);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>); <span class="comment">// 事件类型</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 阻止默认行为（事件） 让链接不跳转 或者让提交按钮不提交</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>(); <span class="comment">//  dom 标准写法</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 传统的注册方式</span></span></span><br><span class="line"><span class="language-javascript">        a.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 普通浏览器 e.preventDefault();  方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.preventDefault();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 低版本浏览器 ie678  returnValue  属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.returnValue;</span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题 特点： return 后面的代码不执行了， 而且只限于传统的注册方式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><ul>
<li>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点。</li>
<li>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</li>
<li>标准写法：利用事件对象里面的 stopPropagation()方法<ul>
<li><strong>e.stopPropagation()</strong></li>
</ul>
</li>
<li>非标准写法：IE 6-8 利用事件对象 cancelBubble 属性<ul>
<li>e.cancelBubble &#x3D; true;</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 常见事件对象的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止冒泡  dom 推荐的标准: e.stopPropagation() </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">stopPropagation</span>(); <span class="comment">// stop 停止  Propagation 传播</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.cancelBubble = true; // 非标准 cancel 取消 bubble 泡泡</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>阻止事件冒泡的兼容性解决方案</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(e &amp;&amp; e.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul>
<li>事件委托<ul>
<li>事件委托也称为事件代理， 在 jQuery 里面称为事件委派。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	点击每个 li 都会弹出对话框，以前需要给每个 li 注册事件，是非常辛苦的，而且访问 DOM 的次数越多，这就会延长整个页面的交互就绪时间。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>事件委托的原理<ul>
<li>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</li>
<li>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上，ul 有注册事件，就会触发事件监听器。</li>
</ul>
</li>
<li>事件委托的作用<ul>
<li>我们只操作了一次 DOM ，提高了程序的性能。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.target 这个可以得到我们点击的对象</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul>
<li>常用的鼠标事件</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7efdb10d2200410682476b0297e39d8b" alt="1656683918908"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是一段不愿意分享的文字</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. contextmenu 我们可以禁用鼠标右键菜单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 禁止选中文字 selectstart</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>鼠标事件对象<ul>
<li>event 对象代表事件的状态，跟事件相关的一系列信息的集合</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f266b4c272274fcca57ed72fa35b4aed" alt="1656684009693"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 鼠标事件对象 MouseEvent</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. client 鼠标在可视区的x和y坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientY</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. page 鼠标在页面文档的x和y坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageY</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenX</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenY</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-图片跟随鼠标移动"><a href="#案例-图片跟随鼠标移动" class="headerlink" title="案例_图片跟随鼠标移动"></a>案例_图片跟随鼠标移动</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/angel.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. mousemove只要我们鼠标移动1px 就会触发这个事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， 把这个x和y坐标做为图片的top和left 值就可以移动图片</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x坐标是&#x27;</span> + x, <span class="string">&#x27;y坐标是&#x27;</span> + y);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3 . 千万不要忘记给left 和top 添加px 单位</span></span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">left</span> = x - <span class="number">50</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">top</span> = y - <span class="number">40</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul>
<li>常用键盘事件</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/8aec05bf1d0b42a0ae877dd74378f361" alt="1656684132387"></p>
<ul>
<li>注意：<ul>
<li>如果使用 addEventListener 不需要加 on</li>
<li>onkeypress 和前面 2 个的区别是，它不识别功能键，比如左右箭头，shift 等。</li>
<li>三个事件的执行顺序是： keydown – keypress — keyup</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 常用的键盘事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. keyup 按键弹起的时候触发 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// document.onkeyup = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         console.log(&#x27;我弹起了&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我弹起了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了down&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了press&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h3><p><img src="https://s1.vika.cn/space/2023/02/26/d6da9c5af31f4aa99f60eb3c29af67b7" alt="1656684455252"></p>
<ul>
<li>注意： onkeydown 和 onkeyup 不区分字母大小写，onkeypress 区分字母大小写。</li>
<li>在我们实际开发中，我们更多的使用 keydown 和 keyup， 它能识别所有的键（包括功能键）</li>
<li>keypress 不识别功能键，但是 keyCode 属性能区分大小写，返回不同的 ASCII 值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. keyup 和 keydown 事件不区分字母大小写  a 和 A 得到的都是65</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 我们的 keypress 事件区分字母大小写  a  97 和 A 得到的是65</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;up:&#x27;</span> + e.<span class="property">keyCode</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">65</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您按下的a键&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有按下a键&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;press:&#x27;</span> + e.<span class="property">keyCode</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-按下S键输入框获得焦点"><a href="#案例-按下S键输入框获得焦点" class="headerlink" title="案例_按下S键输入框获得焦点"></a>案例_按下S键输入框获得焦点</h3><ul>
<li><p>当我们按下 s 键， 光标就定位到搜索框</p>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 核心思路： 检测用户是否按下了 s 键，如果按下 s 键，就把光标定位到搜索框里面</li>
<li>② 使用键盘事件对象里面的 keyCode 判断用户按下的是否是 s 键</li>
<li>③ 搜索框获得焦点： 使用 js 里面的 focus() 方法</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 核心思路： 检测用户是否按下了s 键，如果按下s 键，就把光标定位到搜索框里面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用键盘事件对象里面的keyCode 判断用户按下的是否是s键</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 搜索框获得焦点： 使用 js 里面的 focus() 方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> search = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e.keyCode);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">83</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                search.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-模拟京东快递单号查询"><a href="#案例-模拟京东快递单号查询" class="headerlink" title="案例_模拟京东快递单号查询"></a>案例_模拟京东快递单号查询</h3><ul>
<li><p>要求：当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 快递单号输入内容时， 上面的大号字体盒子（con）显示(这里面的文字</li>
<li>② 同时把快递单号里面的值（value）获取过来赋值给 con 盒子（innerText）做为内容</li>
<li>③ 如果快递单号里面内容为空，则隐藏大号字体盒子(con)盒子</li>
<li>④ 注意： keydown 和 keypress 在文本框里面的特点： 他们两个事件触发的时候，文字还没有落入文本框中。</li>
<li>⑤ keyup 事件触发的时候， 文字已经落入文本框里面了</li>
<li>⑥ 当我们失去焦点，就隐藏这个 con 盒子</li>
<li>⑦ 当我们获得焦点，并且文本框内容不为空，就显示这个 con 盒子</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的快递单号&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 快递单号输入内容时， 上面的大号字体盒子（con）显示(这里面的字号更大）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 表单检测用户输入： 给表单添加键盘事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 同时把快递单号里面的值（value）获取过来赋值给 con盒子（innerText）做为内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果快递单号里面内容为空，则隐藏大号字体盒子(con)盒子</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> con = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.con&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> jd_input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.jd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(&#x27;输入内容啦&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                con.<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当我们失去焦点，就隐藏这个con盒子</span></span></span><br><span class="line"><span class="language-javascript">        jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;blur&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当我们获得焦点，就显示这个con盒子</span></span></span><br><span class="line"><span class="language-javascript">        jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h2><ul>
<li>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。</li>
</ul>
<h3 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h3><ul>
<li>从起始位置到终止位置的内容, 但它去除 html 标签(不解析HTML标签)， 同时空格和换行也会去掉</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="property">innerText</span></span><br></pre></td></tr></table></figure>

<ul>
<li>起始位置到终止位置的全部内容，包括 html 标签(解析HTML标签)，同时保留空格和换行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="property">innerHTML</span></span><br></pre></td></tr></table></figure>

<ul>
<li>innerText 和 innerHTML 的区别:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是文字</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// innerText 和 innerHTML的区别 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. innerText 不识别html标签,标签会当成字符串一起输出 非标准  去除空格和换行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerText</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt;   2019&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. innerHTML 浏览会解析html标签 W3C标准 保留空格和换行</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这两个属性是可读可写的,可以获取元素里面的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>); <span class="comment">// 只获取到标签内的文字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>); <span class="comment">// 获取到标签内包含标签在内的所有内容</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>案例:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>显示当前系统时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>某个时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当我们点击了按钮，div 里面的文字会发生变化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// div.innerText = &#x27;2019-6-6&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = <span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 我们写一个 2019年 5月 1日 星期三</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> day = date.<span class="title function_">getDay</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day];</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 元素也可以不添加事件,也可以直接修改标签的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">innerHTML</span> = <span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见元素的属性操作"><a href="#常见元素的属性操作" class="headerlink" title="常见元素的属性操作"></a>常见元素的属性操作</h3><ul>
<li>innerText、innerHTML 改变元素内容</li>
<li>src、href</li>
<li>id、alt、title</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;ldh&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ldh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;刘德华&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改元素属性  src</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ldh = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ldh&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> zxy = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;zxy&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件  处理程序</span></span></span><br><span class="line"><span class="language-javascript">        zxy.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;images/zxy.jpg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;张学友&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        ldh.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;images/ldh.jpg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;刘德华&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-根据时间显示问候语"><a href="#案例-根据时间显示问候语" class="headerlink" title="案例-根据时间显示问候语"></a>案例-根据时间显示问候语</h3><ul>
<li><p>根据不同时间，页面显示不同图片，同时显示不同的问候语。</p>
<ul>
<li><p>如果上午时间打开页面，显示上午好，显示上午的图片。</p>
</li>
<li><p>如果下午时间打开页面，显示下午好，显示下午的图片。</p>
</li>
<li><p>如果晚上时间打开页面，显示晚上好，显示晚上的图片。</p>
</li>
</ul>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 根据系统不同时间来判断，所以需要用到日期内置对象</li>
</ul>
</li>
<li><p>② 利用多分支语句来设置不同的图片</p>
<ul>
<li><p>③ 需要一个图片，并且根据时间修改图片，就需要用到操作元素 src 属性</p>
</li>
<li><p>④ 需要一个 div 元素，显示不同问候语，修改元素内容即可</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/s.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>上午好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 根据系统不同时间来判断，所以需要用到日期内置对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 利用多分支语句来设置不同的图片</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 需要一个图片，并且根据时间修改图片，就需要用到操作元素 src 属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 需要一个 div 元素，显示不同问候语，修改元素内容即可</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 得到当前的小时数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 判断小时数改变图片和文字信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (h &lt; <span class="number">12</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;images/s.gif&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;亲，上午好，好好写代码&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h &lt; <span class="number">18</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;images/x.gif&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;亲，下午好，好好写代码&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;images/w.gif&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;亲，晚上好，好好写代码&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单元素属性的操作"><a href="#表单元素属性的操作" class="headerlink" title="表单元素属性的操作"></a>表单元素属性的操作</h3><ul>
<li><p>利用 DOM 可以操作如下表单元素的属性：</p>
<ul>
<li>type、value、checked、selected、disabled</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// input.innerHTML = &#x27;点击了&#x27;;  这个是 普通盒子 比如 div 标签里面的内容</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单里面的值 文字内容是通过 value 来修改的</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">value</span> = <span class="string">&#x27;被点击了&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// btn.disabled = true;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this 指向的是事件函数的调用者 btn</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-显示隐藏密码"><a href="#案例-显示隐藏密码" class="headerlink" title="案例-显示隐藏密码"></a>案例-显示隐藏密码</h3><ul>
<li>点击按钮将密码框切换为文本框，并可以查看密码明文。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/51aa8fe02af0410a83697ede6ca7c63c"></p>
<ul>
<li><p>案例分析:</p>
<ul>
<li>① 核心思路： 点击眼睛按钮，把密码框类型改为文本框就可以看见里面的密码</li>
</ul>
</li>
<li><p>② 一个按钮两个状态，点击一次，切换为文本框，继续点击一次切换为密码框</p>
<ul>
<li>③ 算法：利用一个 flag 变量，来判断 flag 的值，如果是 1 就切换为文本框，flag 设置为 0，如果是 0 就切换为密码框，flag 设置为 1</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">370px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/close.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;eye&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> eye = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;eye&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pwd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件处理程序</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        eye.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 点击一次之后， flag 一定要变化</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                pwd.<span class="property">type</span> = <span class="string">&#x27;text&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                eye.<span class="property">src</span> = <span class="string">&#x27;images/open.png&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">1</span>; <span class="comment">// 赋值操作</span></span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                pwd.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                eye.<span class="property">src</span> = <span class="string">&#x27;images/close.png&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式属性操作"><a href="#样式属性操作" class="headerlink" title="样式属性操作"></a>样式属性操作</h3><ul>
<li>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. element.style 行内样式操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. element.className 类名样式操作</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// div.style里面的属性 采取驼峰命名法 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;purple&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> test = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        test.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.backgroundColor = &#x27;purple&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.color = &#x27;#fff&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.fontSize = &#x27;25px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.marginTop = &#x27;100px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 让我们当前元素的类名改为了 change</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.className = &#x27;change&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;first change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>01 JS 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor</p>
</li>
<li><p>02 JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</p>
</li>
<li><p>03 如果样式修改较多，可以采取操作类名方式更改元素样式。</p>
</li>
<li><p>04 class 因为是个保留字，因此使用 className 来操作元素类名属性</p>
</li>
<li><p>05 className 会直接更改元素的类名，会覆盖原先的类名。</p>
</li>
</ul>
<h3 id="案例-点击关闭二维码"><a href="#案例-点击关闭二维码" class="headerlink" title="案例-点击关闭二维码"></a>案例-点击关闭二维码</h3><ul>
<li>当鼠标点击二维码关闭按钮的时候，则关闭整个二维码。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b7c0bc0b44564707b8b64d3e0c9fb412"></p>
<ul>
<li>案例分析:<ul>
<li>01 核心思路： 利用样式的显示和隐藏完成， display:none 隐藏元素 display:block 显示元素</li>
<li>02 点击按钮，就让这个二维码盒子隐藏起来即可</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        淘宝二维码</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tao.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;close-btn&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.close-btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.注册事件 程序处理</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            box.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-循环精灵图"><a href="#案例-循环精灵图" class="headerlink" title="案例-循环精灵图"></a>案例-循环精灵图</h3><ul>
<li>可以利用 for 循环设置一组元素的精灵图背景</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/afe759d6214b4c63b39304133de0e1cf"></p>
<ul>
<li>案例分析:<ul>
<li>01 首先精灵图图片排列有规律的</li>
<li>02 核心思路： 利用 for 循环 修改精灵图片的背景位置 background-position</li>
<li>03 剩下的就是考验你的数学功底了</li>
<li>04 让循环里面的 i 索引号 * 44 就是每个图片的y坐标</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 让索引号 乘以 44 就是每个li 的背景y坐标 index就是我们的y坐标</span></span><br><span class="line">    <span class="keyword">var</span> index = i * <span class="number">44</span>;</span><br><span class="line">    lis[i].<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">&#x27;0 -&#x27;</span> + index + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例-显示隐藏文本框内容"><a href="#案例-显示隐藏文本框内容" class="headerlink" title="案例-显示隐藏文本框内容"></a>案例-显示隐藏文本框内容</h3><ul>
<li>当鼠标点击文本框时，里面的默认文字隐藏，当鼠标离开文本框时，里面的文字显示。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/dcb2c49d471843ff94a5ae796f99e233" alt="image-20220130122907108"></p>
<ul>
<li>案例分析:<ul>
<li>① 首先表单需要 2 个新事件，获得焦点 onfocus 失去焦点 onblur</li>
<li>② 如果获得焦点， 判断表单里面内容是否为默认文字，如果是默认文字，就清空表单内容</li>
<li>③ 如果失去焦点， 判断表单内容是否为空，如果为空，则表单内容改为默认文字</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.注册事件 获得焦点事件 onfocus </span></span></span><br><span class="line"><span class="language-javascript">        text.<span class="property">onfocus</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(&#x27;得到了焦点&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> === <span class="string">&#x27;手机&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获得焦点需要把文本框里面的文字颜色变黑</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#333&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 注册事件 失去焦点事件 onblur</span></span></span><br><span class="line"><span class="language-javascript">        text.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(&#x27;失去了焦点&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">value</span> = <span class="string">&#x27;手机&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 失去焦点需要把文本框里面的文字颜色变浅色</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#999&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-密码框格式错误提示"><a href="#案例-密码框格式错误提示" class="headerlink" title="案例-密码框格式错误提示"></a>案例-密码框格式错误提示</h3><ul>
<li>用户如果离开密码框，里面输入个数不是6~16，则提示错误信息，否则提示输入正确信息</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ba58924f16c14bfab10251e9e33ac283" alt="image-20220130123203816"></p>
<ul>
<li><p>案例分析:</p>
<ul>
<li>① 首先判断的事件是表单失去焦点 onblur</li>
</ul>
</li>
<li><p>② 如果输入正确则提示正确的信息颜色为绿色小图标变化</p>
<ul>
<li><p>③ 如果输入不是 6 到 16 位，则提示错误信息颜色为红色,小图标变化</p>
</li>
<li><p>④ 因为里面变化样式较多，我们采取 className 修改样式</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span>请输入6~16位密码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 首先判断的事件是表单失去焦点 onblur</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果输入正确则提示正确的信息颜色为绿色小图标变化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果输入不是6到16位，则提示错误信息颜色为红色 小图标变化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 因为里面变化样式较多，我们采取className修改样式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ipt&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.message&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 注册事件 失去焦点</span></span></span><br><span class="line"><span class="language-javascript">        ipt.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 根据表单里面值的长度 ipt.value.length</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span>.<span class="property">length</span> &lt; <span class="number">6</span> || <span class="variable language_">this</span>.<span class="property">value</span>.<span class="property">length</span> &gt; <span class="number">16</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(&#x27;错误&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">                message.<span class="property">className</span> = <span class="string">&#x27;message wrong&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                message.<span class="property">innerHTML</span> = <span class="string">&#x27;您输入的位数不对要求6~16位&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                message.<span class="property">className</span> = <span class="string">&#x27;message right&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                message.<span class="property">innerHTML</span> = <span class="string">&#x27;您输入的正确&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="操作元素总结"><a href="#操作元素总结" class="headerlink" title="操作元素总结"></a>操作元素总结</h3><p><img src="https://s1.vika.cn/space/2023/02/26/0625588a53e2415b9bd05804b7a49378"></p>
<h3 id="其他案例"><a href="#其他案例" class="headerlink" title="其他案例"></a>其他案例</h3><ul>
<li>世纪佳缘 用户名 显示隐藏内容 </li>
<li>京东关闭广告（直接隐藏即可）</li>
<li>新浪下拉菜单（微博即可）</li>
<li>开关灯案例（见素材）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>开关灯<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;black&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;#fff&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="排它思想"><a href="#排它思想" class="headerlink" title="排它思想"></a>排它思想</h3><p><img src="https://s1.vika.cn/space/2023/02/26/f59a382b990343ed82a092af5394f13a" alt="image-20220130123649706"></p>
<ul>
<li>如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法：<ul>
<li>所有元素全部清除样式（干掉其他人）</li>
<li>给当前元素设置样式 （留下我自己）</li>
<li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取所有按钮元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. btns得到的是伪数组  里面的每一个元素 btns[i]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.1 我们先把所有的按钮背景颜色去掉  干掉所有人</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.2 然后才让当前的元素背景颜色为pink 留下我自己</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们成为排他思想</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-百度换背景"><a href="#案例-百度换背景" class="headerlink" title="案例-百度换背景"></a>案例-百度换背景</h3><ul>
<li>案例分析:<ul>
<li>① 这个案例练习的是给一组元素注册事件</li>
<li>② 给 4 个小图片利用循环注册点击事件</li>
<li>③ 当我们点击了这个图片，让我们页面背景改为当前的图片</li>
<li>④ 核心算法： 把当前图片的 src 路径取过来，给 body 做为背景即可</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/4.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.baidu&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(imgs);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 循环注册事件 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            imgs[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.src 就是我们点击图片的路径   images/2.jpg</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this.src);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 把这个路径 this.src 给body 就可以了</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">src</span> + <span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-表格隔行变色"><a href="#案例-表格隔行变色" class="headerlink" title="案例-表格隔行变色"></a>案例-表格隔行变色</h3><p><img src="https://s1.vika.cn/space/2023/02/26/7441fa60a79f46d4a9edec4e5357d235" alt="image-20220130123902117"></p>
<ul>
<li>案例分析:<ul>
<li>用到新的鼠标事件,鼠标经过 onmouseover 鼠标离开 onmouseout</li>
<li>核心思路：鼠标经过 tr 行，当前的行变背景颜色， 鼠标离开去掉当前的背景颜色</li>
<li>注意： 第一行（thead里面的行）不需要变换颜色，因此我们获取的是 tbody 里面的行</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.获取元素 获取的是 tbody 里面所有的行</span></span><br><span class="line">    <span class="keyword">var</span> trs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">    <span class="comment">// 2. 利用循环绑定注册事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 3. 鼠标经过事件 onmouseover</span></span><br><span class="line">        trs[i].<span class="property">onmouseover</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(11);</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;bg&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 鼠标离开事件 onmouseout</span></span><br><span class="line">        trs[i].<span class="property">onmouseout</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="案例：全选-取消全选"><a href="#案例：全选-取消全选" class="headerlink" title="案例：全选&#x2F;取消全选"></a>案例：全选&#x2F;取消全选</h3><p><img src="https://s1.vika.cn/space/2023/02/26/e23fc936c84240aa8cf55c3272a1f257"></p>
<ul>
<li><p>业务需求：</p>
<ul>
<li>点击上面全选复选框，下面所有的复选框都选中（全选）</li>
<li>再次点击全选复选框，下面所有的复选框都不中选（取消全选）</li>
<li>如果下面复选框全部选中，上面全选按钮就自动选中</li>
<li>如果下面复选框有一个没有选中，上面全选按钮就不选中</li>
<li>所有复选框一开始默认都没选中状态</li>
</ul>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 全选和取消全选做法： 让下面所有复选框的 checked 属性（选中状态） 跟随全选按钮即可</li>
<li>② 下面复选框需要全部选中， 上面全选才能选中做法： 给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有的复选框是否有没选中的，如果有一个没选中的， 上面全选就不选中。</li>
<li>③ 可以设置一个变量，来控制全选是否选中</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 全选和取消全选做法：  让下面所有复选框的checked属性（选中状态） 跟随 全选按钮即可</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> j_cbAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_cbAll&#x27;</span>); <span class="comment">// 全选按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> j_tbs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_tb&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>); <span class="comment">// 下面所有的复选框</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给全选按钮注册事件</span></span></span><br><span class="line"><span class="language-javascript">    j_cbAll.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// this.checked 它可以得到当前复选框的选中状态如果是true 就是选中，如果是false 就是未选中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">checked</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            j_tbs[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 下面复选框需要全部选中， 上面全选才能选中做法： 给下面所有复选框绑定点击事件，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 		每次点击，都要循环查看下面所有的复选框是否有没选中的，如果有一个没选中的， 上面全选就不选中。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        j_tbs[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// flag 控制全选按钮是否选中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 每次点击下面的复选框都要循环检查者4个小按钮是否全被选中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!j_tbs[i].<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>; <span class="comment">// 退出for循环 这样可以提高执行效率 因为只要有一个没有选中，剩下的就无需循环判断了</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            j_cbAll.<span class="property">checked</span> = flag;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><ul>
<li>element.属性 获取属性值。</li>
<li>element.getAttribute(‘属性’);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">// 1. 获取元素的属性值</span></span><br><span class="line"><span class="comment">// (1) element.属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>); <span class="comment">// demo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) element.getAttribute(&#x27;属性&#x27;)  get:获取 attribute:属性 我们程序员自己添加的属性我们称为自定义属性 index</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>)); <span class="comment">// demo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>区别：<ul>
<li>element.属性  获取内置属性值（元素本身自带的属性）</li>
<li>element.getAttribute(‘属性’);  主要获得自定义的属性 （标准） 我们程序员自定义的属性</li>
</ul>
</li>
</ul>
<h3 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h3><ul>
<li><p>element.属性 &#x3D; ‘值’ , 设置内置属性值。</p>
</li>
<li><p>element.setAttribute(‘属性’, ‘值’);</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 设置元素属性值</span></span><br><span class="line"><span class="comment">// (1) element.属性= &#x27;值&#x27;</span></span><br><span class="line">div.<span class="property">id</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;navs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, <span class="number">2</span>); <span class="comment">// 设置 index 属性,属性值为 2</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>); <span class="comment">// class 特殊  这里面写的就是class,不是className,会覆盖(1)中设置的类名</span></span><br></pre></td></tr></table></figure>

<ul>
<li>区别：<ul>
<li><p>element.属性 设置内置属性值</p>
</li>
<li><p>element.setAttribute(‘属性’); 主要设置自定义的属性 （标准）</p>
</li>
</ul>
</li>
</ul>
<h3 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h3><ul>
<li>element.removeAttribute(‘属性’);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3 移除属性 removeAttribute(属性)    </span></span><br><span class="line">div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;index&#x27;</span>); <span class="comment">// 移除 index 属性</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-tab栏切换"><a href="#案例-tab栏切换" class="headerlink" title="案例-tab栏切换"></a>案例-tab栏切换</h3><ul>
<li>当鼠标点击上面相应的选项卡（tab），下面内容跟随变化</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/da418392c9c24ca6932444639a6ddb3b" alt="image-20220130124502405"></p>
<ul>
<li>案例分析:<ul>
<li>① Tab 栏切换有 2 个大的模块</li>
<li>② 上的模块选项卡，点击某一个，当前这一个底色会是红色，其余不变（排他思想） 修改类名的方式</li>
<li>③ 下面的模块内容，会跟随上面的选项卡变化。所以下面模块变化写到点击事件里面。</li>
<li>④ 规律：下面的模块显示内容和上面的选项卡一一对应，相匹配。</li>
<li>⑤ 核心思路： 给上面的 tab_list 里面的所有小 li 添加自定义属性，属性值从 0 开始编号。</li>
<li>⑥ 当我们点击 tab_list 里面的某个小 li，让 tab_con 里面对应序号的 内容显示，其余隐藏（排他思想）</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">978px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab_list</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">39px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab_list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">39px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">39px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab_list</span> <span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#c81623</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item_info</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab_list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>商品介绍<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>规格与包装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>售后保障<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>商品评价（50000）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机社区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab_con&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: block;&quot;</span>&gt;</span></span><br><span class="line">                商品介绍模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                规格与包装模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                售后保障模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                商品评价（50000）模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                手机社区模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab_list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab_list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = tab_list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for循环绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 开始给5个小li 设置索引号 </span></span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 1. 上的模块选项卡，点击某一个，当前这一个底色会是红色，其余不变（排他思想） 修改类名的方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 干掉所有人 其余的li清除 class 这个类</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    lis[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 留下我自己 </span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2. 下面的显示内容模块</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 干掉所有人 让其余的item 这些div 隐藏</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    items[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 留下我自己 让对应的item 显示出来</span></span></span><br><span class="line"><span class="language-javascript">                items[index].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置H5自定义属性"><a href="#设置H5自定义属性" class="headerlink" title="设置H5自定义属性"></a>设置H5自定义属性</h3><ul>
<li><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</p>
</li>
<li><p>自定义属性获取是通过 getAttribute(‘属性’) 获取。</p>
</li>
<li><p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p>
</li>
<li><p>H5 给我们新增了自定义属性：</p>
</li>
<li><p>H5 规定自定义属性 data- 开头做为属性名并且赋值。</p>
</li>
<li><p>比如<code> &lt;div data-index=&quot;1&quot;&gt;&lt;/div&gt;</code>或者使用 JS 设置 <code>element.setAttribute(‘data-index’, 2)</code></p>
</li>
</ul>
<h3 id="获取H5自定义属性"><a href="#获取H5自定义属性" class="headerlink" title="获取H5自定义属性"></a>获取H5自定义属性</h3><ul>
<li>兼容性获取 element.getAttribute(‘data-index’);</li>
<li>H5 新增 element.dataset.index 或者 element.dataset[‘index’] , ie 11才开始支持</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">getTime</span>=<span class="string">&quot;20&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&quot;andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">getTime</span>); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;getTime&#x27;</span>)); <span class="comment">// 20</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-time&#x27;</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-time&#x27;</span>)); <span class="comment">// 20</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>)); <span class="comment">// 2</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-list-name&#x27;</span>)); <span class="comment">// andy</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dataset 是一个集合里面存放了所有以 data 开头的自定义属性,获取到的是一个对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>); <span class="comment">// DOMStringMap &#123;index: &#x27;2&#x27;, listName: &#x27;andy&#x27;, time: &#x27;20&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">index</span>); <span class="comment">// 2</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;index&#x27;</span>]); <span class="comment">// 2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果自定义属性里面有多个- 连接的单词，我们获取的时候采取,驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">listName</span>); <span class="comment">// andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;listName&#x27;</span>]); <span class="comment">// andy</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span> 开关灯<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// classList 返回元素的类名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(div.classList[1]);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 添加类名  是在后面追加类名不会覆盖以前的类名 注意前面不需要加.</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;three&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 删除类名</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;one&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 切换类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;bg&#x27;</span>); <span class="comment">// 切换类</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="为什么学节点操作"><a href="#为什么学节点操作" class="headerlink" title="为什么学节点操作"></a>为什么学节点操作</h3><ul>
<li>获取元素通常使用两种方式：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/4431b7c94291476ab1d2e007e4a10bdf" alt="image-20220130124854911"></p>
<ul>
<li>这两种方式都可以获取元素节点，我们后面都会使用，但是节点操作更简单</li>
</ul>
<h3 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h3><ul>
<li><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在 DOM 中，节点使用 node 来表示。</p>
</li>
<li><p>HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/3d57b675ba7c457d9a3c4be07b58e65e"></p>
<ul>
<li><p>一般地，节点至少拥有 nodeType（节点类型）、nodeName（节点名称）和 nodeValue（节点值）这三个基本属性。</p>
<ul>
<li><p>元素节点 nodeType 为 1</p>
</li>
<li><p>属性节点 nodeType 为 2</p>
</li>
<li><p>文本节点 nodeType 为 3 （文本节点包含文字、空格、换行等）</p>
</li>
</ul>
</li>
<li><p>我们在实际开发中，节点操作主要操作的是元素节点</p>
</li>
</ul>
<h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><ul>
<li>利用 DOM 树可以把节点划分为不同的层级关系，常见的是父子兄层级关系。</li>
</ul>
<h4 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 父节点 parentNode</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> erweima = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(erweima.<span class="property">parentNode</span>); <span class="comment">// &lt;div class=&quot;box&quot;&gt;...&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>parentNode 属性可返回某节点的父节点，注意是最近的一个父节点</li>
<li>如果指定的节点没有父节点则返回 null</li>
</ul>
<h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><ul>
<li>01  parentNode.childNodes（标准）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 节点的优点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// DOM 提供的方法（API）获取</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = ul.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>); <span class="comment">// NodeList(9) [text, li, text, li, text, li, text, li, text]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeType</span>); <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">1</span>].<span class="property">nodeType</span>); <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>); <span class="comment">// HTMLCollection(4) [li, li, li, li]</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>parentNode.childNodes 返回包含指定节点的子节点的集合，该集合为即时更新的集合。<strong>是一个数组,里面包含了各种类型的子节点</strong></p>
</li>
<li><p>注意：返回值里面包含了所有的子节点，包括元素节点，文本节点等。</p>
</li>
<li><p>如果只想要获得里面的元素节点，则需要专门处理。 所以我们一般不提倡使用 childNodes</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>. <span class="title function_">querySelector</span>(‘ul’);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ul.<span class="property">childNodes</span>.<span class="property">length</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ul.<span class="property">childNodes</span>[i].<span class="property">nodeType</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// ul.childNodes[i] 是元素节点</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>02 parentNode.children（非标准）</p>
<ul>
<li><p><strong>parentNode.children 是一个只读属性，返回所有的子元素节点。它只返回子元素节点，其余节点不返回 （这个是我们重点掌握的）。</strong></p>
</li>
<li><p>虽然 children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>); <span class="comment">// HTMLCollection(4) [li, li, li, li]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>03 parentNode.firstChild</p>
<ul>
<li>firstChild 返回第一个子节点，找不到则返回 null。同样，也是包含所有的节点。</li>
</ul>
</li>
<li><p>04 parentNode.lastChild</p>
<ul>
<li>lastChild 返回最后一个子节点，找不到则返回 null。同样，也是包含所有的节点。</li>
</ul>
</li>
<li><p>05 parentNode.firstElementChild</p>
<ul>
<li>firstElementChild 返回第一个子元素节点，找不到则返回 null。</li>
</ul>
</li>
<li><p>06 parentNode.lastElementChild</p>
<ul>
<li>lastElementChild 返回最后一个子元素节点，找不到则返回 null。</li>
</ul>
</li>
<li><p>注意：这两个方法有兼容性问题，IE9 以上才支持。</p>
</li>
<li><p>实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p>
<p>-<br>  解决方案：</p>
<ul>
<li>如果想要第一个子元素节点，可以使用 parentNode.chilren[0]</li>
<li>如果想要最后一个子元素节点，可以使用 parentNode.chilren[parentNode.chilren.length - 1]</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstChild</span>); <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastChild</span>); <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstElementChild</span>); <span class="comment">// li1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastElementChild</span>); <span class="comment">// li5</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[<span class="number">0</span>]); <span class="comment">// li1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[ol.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>]); <span class="comment">// li5</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-下拉菜单"><a href="#案例-下拉菜单" class="headerlink" title="案例-下拉菜单"></a>案例-下拉菜单</h4><p><img src="https://s1.vika.cn/space/2023/02/26/7312249b2af64a41a8cc5cefcd2d8549"></p>
<ul>
<li>案例分析:<ul>
<li>① 导航栏里面的 li 都要有鼠标经过效果，所以需要循环注册鼠标事件</li>
<li>② 核心原理： 当鼠标经过 li 里面的 第二个孩子 ul 显示， 当鼠标离开，则 ul 隐藏</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> lis = nav.<span class="property">children</span>; <span class="comment">// 得到4个小li</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.循环注册事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        lis[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        lis[i].<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><ul>
<li><p>01 node.nextSibling</p>
<ul>
<li>nextSibling 返回当前元素的下一个兄弟节点，找不到则返回 null。同样，也是包含所有的节点。</li>
</ul>
</li>
<li><p>02 node.previousSibling</p>
<ul>
<li>previousSibling 返回当前元素上一个兄弟节点，找不到则返回 null。同样，也是包含所有的节点。</li>
</ul>
</li>
<li><p>03 node.nextElementSibling</p>
<ul>
<li>nextElementSibling 返回当前元素下一个兄弟元素节点，找不到则返回 null。</li>
</ul>
</li>
<li><p>04 node.previousElementSibling</p>
<ul>
<li>previousElementSibling 返回当前元素上一个兄弟元素节点，找不到则返回 null。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextSibling</span>); <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousSibling</span>); <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextElementSibling</span>); <span class="comment">// span</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousElementSibling</span>); <span class="comment">// null</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>注意：这两个方法有兼容性问题， IE9 以上才支持。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决兼容性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNextElementSibling</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = element;</span><br><span class="line">  <span class="keyword">while</span> (el == el.<span class="property">nextSibling</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> el;</span><br><span class="line">      &#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tagName&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>document.createElement() 方法创建由 tagName 指定的 HTML 元素。因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为动态创建元素节点。</li>
</ul>
<h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><ul>
<li><p>01 node.appendChild(child)</p>
<ul>
<li>node.appendChild() 方法将一个节点添加到指定父节点的子节点列表末尾。类似于 CSS 里面的 after 伪元素。</li>
</ul>
</li>
<li><p>02 node.insertBefore(child, 指定元素)</p>
<ul>
<li>node.insertBefore() 方法将一个节点添加到父节点的指定子节点前面。类似于 CSS 里面的 before伪元素。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 创建节点元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素  类似于数组中的push</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lili = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">insertBefore</span>(lili, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-简单版留言版"><a href="#案例-简单版留言版" class="headerlink" title="案例-简单版留言版"></a>案例-简单版留言版</h3><ul>
<li>案例分析:<ul>
<li>① 核心思路： 点击按钮之后，就动态创建一个 li，添加到ul 里面。</li>
<li>② 创建 li 的同时，把文本域里面的值通过 li.innerHTML 赋值给 li</li>
<li>③ 如果想要新的留言后面显示就用 appendChild 如果想要前面显示就用 insertBefore</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">resize</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">209</span>, <span class="number">243</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// (1) 创建元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 先有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">                li.<span class="property">innerHTML</span> = text.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// (2) 添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul>
<li>node.removeChild() 方法从 DOM 中删除一个子节点，返回删除的节点。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>光头强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 删除元素  node.removeChild(child)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ul.removeChild(ul.children[0]);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 点击按钮依次删除里面的孩子</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (ul.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>; <span class="comment">// 禁用按钮</span></span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>]); <span class="comment">// 删除节点</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="案例-删除留言"><a href="#案例-删除留言" class="headerlink" title="案例-删除留言"></a>案例-删除留言</h3><ul>
<li><p>① 当我们把文本域里面的值赋值给 li 的时候，多添加一个删除的链接</p>
</li>
<li><p>② 需要把所有的链接获取过来，当我们点击当前的链接的时候，删除当前链接所在的 li</p>
</li>
<li><p>③ 阻止链接跳转需要添加 javascript:void(0); 或者 javascript:;</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">resize</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">209</span>, <span class="number">243</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// (1) 创建元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 先有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">                li.<span class="property">innerHTML</span> = text.<span class="property">value</span> + <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// (2) 添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// (3) 删除元素 删除的是当前链接的li  它的父亲</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// node.removeChild(child); 删除的是 li 当前a所在的li  this.parentNode;</span></span></span><br><span class="line"><span class="language-javascript">                        ul.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><ul>
<li><p><strong>node.cloneNode() 方法返回调用该方法的节点的一个副本。 也称为克隆节点&#x2F;拷贝节点</strong></p>
</li>
<li><p>注意：</p>
<ul>
<li><strong>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点。</strong></li>
<li><strong>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点。</strong></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签和里面的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lili = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">appendChild</span>(lili);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-动态生成表格"><a href="#案例-动态生成表格" class="headerlink" title="案例-动态生成表格"></a>案例-动态生成表格</h3><p><img src="https://s1.vika.cn/space/2023/02/26/47cde5d39e774a5789cb347372819a6b" alt="image-20220130131811781"></p>
<ul>
<li>案例分析:<ul>
<li>① 因为里面的学生数据都是动态的，我们需要 js 动态生成。 这里我们模拟数据，自己定义好数据。 数据我们采取对象形式存储。</li>
<li>② 所有的数据都是放到 tbody 里面的行里面。</li>
<li>③ 因为行很多，我们需要循环创建多个行（对应多少人）</li>
<li>④ 每个行里面又有很多单元格（对应里面的数据），我们还继续使用循环创建多个单元格，并且把数据存入里面（双重for循环）</li>
<li>⑤ 最后一列单元格是删除，需要单独创建单元格。</li>
<li>⑥ 最后添加删除操作，单击删除，可以删除当前行。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">thead</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.准备学生数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> datas = [&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;魏璎珞&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;弘历&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="number">98</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;傅恒&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="number">99</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;明玉&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="number">88</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;大猪蹄子&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;];</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 往tbody 里面创建行： 有几个人（通过数组的长度）我们就创建几行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.<span class="property">length</span>; i++) &#123; <span class="comment">// 外面的for循环管行 tr</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 创建 tr行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            tbody.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 行里面创建单元格(跟数据有关系的3个单元格) td 单元格的数量取决于每个对象里面的属性个数  for循环遍历对象 datas[i]</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> datas[i]) &#123; <span class="comment">// 里面的for循环管列 td</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 创建单元格 </span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 把对象里面的属性值 datas[i][k] 给 td  </span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(datas[i][k]);</span></span></span><br><span class="line"><span class="language-javascript">                td.<span class="property">innerHTML</span> = datas[i][k];</span></span><br><span class="line"><span class="language-javascript">                tr.<span class="title function_">appendChild</span>(td);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 创建有删除2个字的单元格 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            td.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;a href=&quot;javascript:;&quot;&gt;删除 &lt;/a&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            tr.<span class="title function_">appendChild</span>(td);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 删除操作 开始 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 点击a 删除 当前a 所在的行(链接的爸爸的爸爸)  node.removeChild(child)  </span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for(var k in obj) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     k 得到的是属性名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     obj[k] 得到是属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="三种动态创建元素的区别"><a href="#三种动态创建元素的区别" class="headerlink" title="三种动态创建元素的区别"></a>三种动态创建元素的区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// document.write()</span></span><br><span class="line"><span class="comment">// element.innerHTML</span></span><br><span class="line"><span class="comment">// document.createElement()</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>区别:</p>
<ul>
<li>document.write 是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</li>
<li>innerHTML 是将内容写入某个 DOM 节点，不会导致页面全部重绘</li>
<li>innerHTML 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</li>
<li>createElement() 创建多个元素效率稍低一点点，但是结构更清晰</li>
</ul>
</li>
<li><p>总结：不同浏览器下，innerHTML 效率要比 creatElement 高</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三种创建元素方式区别 </span></span><br><span class="line"><span class="comment">// 1. document.write() 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘</span></span><br><span class="line"><span class="comment">// var btn = document.querySelector(&#x27;button&#x27;);</span></span><br><span class="line"><span class="comment">// btn.onclick = function() &#123;</span></span><br><span class="line"><span class="comment">//     document.write(&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. innerHTML 创建元素</span></span><br><span class="line"><span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span><br><span class="line"><span class="comment">// for (var i = 0; i &lt;= 100; i++) &#123;</span></span><br><span class="line"><span class="comment">//     inner.innerHTML += &#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">inner.<span class="property">innerHTML</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. document.createElement() 创建元素</span></span><br><span class="line"><span class="keyword">var</span> create = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.create&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    create.<span class="title function_">appendChild</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DOM-重点核心总结"><a href="#DOM-重点核心总结" class="headerlink" title="DOM 重点核心总结"></a>DOM 重点核心总结</h2><ul>
<li><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（ HTML 或者 XML ）的标准编程接口。</p>
</li>
<li><p>我们获取过来的 DOM 元素是一个对象（object），所以称为文档对象模型</p>
</li>
<li><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>
<ul>
<li>对于 JavaScript，为了能够使 JavaScript 操作 HTML，JavaScript 就有了一套自己的 dom 编程接口。</li>
<li>对于 HTML，dom 使得 html 形成一棵 dom 树. 包含 文档、元素、节点</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ea6f138c8e8c4db19186d2b58439ae26" alt="image-20220130132143078"></p>
<ul>
<li>关于 dom 操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</li>
</ul>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li>document.write</li>
<li>innerHTML</li>
<li>createElement</li>
</ul>
<h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul>
<li>appendChild</li>
<li>insertBefore</li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>removeChild</li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul>
<li>主要修改 dom 的元素属性，dom 元素的内容、属性, 表单的值等<ul>
<li>修改元素属性： src、href、title等</li>
<li>修改普通元素内容： innerHTML 、innerText</li>
<li>修改表单元素： value、type、disabled等</li>
<li>修改元素样式： style、className</li>
</ul>
</li>
</ul>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li>DOM 提供的 API 方法： getElementById、getElementsByTagName 古老用法 不太推荐</li>
<li><strong>H5提供的新方法： querySelector、querySelectorAll 提倡</strong></li>
<li><strong>利用节点操作获取元素： 父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling) 提倡</strong></li>
</ul>
<h3 id="属性操作-1"><a href="#属性操作-1" class="headerlink" title="属性操作"></a>属性操作</h3><ul>
<li>setAttribute：设置dom的属性值</li>
<li>getAttribute：得到dom的属性值</li>
<li>removeAttribute移除属性</li>
</ul>
<h3 id="事件操作-1"><a href="#事件操作-1" class="headerlink" title="事件操作"></a>事件操作</h3><ul>
<li>给元素注册事件， 采取 事件源.事件类型 &#x3D; 事件处理程序</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0a58c6bd216c4e6da9966a3b02ee45e9" alt="image-20220130132506613"></p>
<h2 id="PC端网页特效"><a href="#PC端网页特效" class="headerlink" title="PC端网页特效"></a>PC端网页特效</h2><h3 id="元素偏移量-offset"><a href="#元素偏移量-offset" class="headerlink" title="元素偏移量 offset"></a>元素偏移量 offset</h3><ul>
<li>offset 翻译过来就是偏移量， 我们使用 offset 系列相关属性可以动态的得到该元素的位置（偏移）、大小等。<ul>
<li>获得元素距离带有定位父元素的位置</li>
<li>获得元素自身的大小（宽度高度）</li>
<li>注意： 返回的数值都不带单位</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e67ece4f7df84eb89ded1e1a03725613" alt="1656678135906"></p>
<ul>
<li>offset 系列常用属性：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/58397d7877ee42c1ab9cfab6e2712fcf" alt="1656677900398"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// offset 系列</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.可以得到元素的偏移 位置 返回的不带单位的数值  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetTop</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetLeft</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 它以带有定位的父级元素为准  如果没有父元素或者父元素没有定位 则以 body 为准</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetLeft</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> w = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.w&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.可以得到元素的大小 宽度和高度 是包含padding + border + width </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetWidth</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetHeight</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 返回带有定位的父亲 否则返回的是body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetParent</span>); <span class="comment">// 返回带有定位的父亲 否则返回的是body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">parentNode</span>); <span class="comment">// 返回父亲 是最近一级的父亲 亲爸爸 不管父亲有没有定位</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="offset-与-style-区别"><a href="#offset-与-style-区别" class="headerlink" title="offset 与 style 区别"></a>offset 与 style 区别</h3><ul>
<li><p>offset</p>
<ul>
<li>offset 可以得到任意样式表中的样式值</li>
<li>offset 系列获得的数值是没有单位的</li>
<li>offsetWidth 包含 padding+border+width</li>
<li>offsetWidth 等属性是只读属性，只能获取,不能赋值</li>
<li>所以，我们想要获取元素大小位置，用 offset 更合适</li>
</ul>
</li>
<li><p>style</p>
<ul>
<li>style 只能得到行内样式表中的样式值</li>
<li>style.width 获得的是带有单位的字符串</li>
<li>style.width 获得不包含 padding 和 border 的值</li>
<li>style.width 是可读写属性，可以获取也可以赋值</li>
<li>所以，我们想要给元素更改值，则需要用 style 改变</li>
</ul>
</li>
</ul>
<h3 id="案例-鼠标在盒子内的坐标"><a href="#案例-鼠标在盒子内的坐标" class="headerlink" title="案例-鼠标在盒子内的坐标"></a>案例-鼠标在盒子内的坐标</h3><ul>
<li>① 我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li>
<li>② 首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li>
<li>③ 其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)</li>
<li>④ 用鼠标距离页面的坐标减去盒子在页面中的距离，得到 鼠标在盒子内的坐标</li>
<li>⑤ 如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动事件 mousemove</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 我们在盒子内点击， 想要得到鼠标距离盒子左右的距离。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 首先得到鼠标在页面中的坐标（ e.pageX, e.pageY）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 其次得到盒子在页面中的距离(box.offsetLeft, box.offsetTop)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用鼠标距离页面的坐标减去盒子在页面中的距离， 得到 鼠标在盒子内的坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e.pageX);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e.pageY);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(box.offsetLeft);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;x坐标是&#x27;</span> + x + <span class="string">&#x27; y坐标是&#x27;</span> + y;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-模态框拖拽"><a href="#案例-模态框拖拽" class="headerlink" title="案例-模态框拖拽"></a>案例-模态框拖拽</h3><ul>
<li><p>弹出框，我们也称为模态框。</p>
<ul>
<li>01 点击弹出层， 会弹出模态框， 并且显示灰色半透明的遮挡层。</li>
<li>02 点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</li>
<li>03 鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</li>
<li>04 鼠标松开，可以停止拖动模态框移动。</li>
</ul>
</li>
<li><p>案例分析:</p>
<ul>
<li>① 点击弹出层， 模态框和遮挡层就会显示出来 display:block;</li>
<li>② 点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li>
<li>③ 在页面中拖拽的原理： 鼠标按下并且移动， 之后松开鼠标</li>
<li>④ 触发事件是鼠标按下 mousedown， 鼠标移动mousemove 鼠标松开 mouseup</li>
<li>⑤ 拖拽过程: 鼠标移动过程中，获得最新的值赋值给模态框的left和top值， 这样模态框可以跟着鼠标走了</li>
<li>⑥ 鼠标按下触发的事件源是 最上面一行，就是 id 为 title</li>
<li>⑦ 鼠标的坐标 减去 鼠标在盒子内的坐标， 才是模态框真正的位置。</li>
<li>⑧ 鼠标按下，我们要得到鼠标在盒子的坐标。</li>
<li>⑨ 鼠标移动，就让模态框的坐标 设置为 ： 鼠标坐标 减去盒子坐标即可，注意移动事件写到按下事件里面。</li>
<li>⑩ 鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ol</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">dl</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">dt</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">dd</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h3</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h4</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h5</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h6</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">512px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-title</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input-content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-bg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-button</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input</span> <span class="selector-tag">input</span><span class="selector-class">.list-input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-title</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>点击，弹出登录框<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>登录会员</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;closeBtn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close-login&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-input-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;info[username]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>登录密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入登录密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;info[password]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-button&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login-button-submit&quot;</span>&gt;</span>登录会员<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遮盖层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> login = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login-bg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#link&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> closeBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#closeBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#title&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span></span></span><br><span class="line"><span class="language-javascript">        link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span></span></span><br><span class="line"><span class="language-javascript">        closeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4. 开始拖拽</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span></span></span><br><span class="line"><span class="language-javascript">        title.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span> - login.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span> - login.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                login.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - x + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                login.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - y + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-仿京东放大镜"><a href="#案例-仿京东放大镜" class="headerlink" title="案例-仿京东放大镜"></a>案例-仿京东放大镜</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="元素可视区-client"><a href="#元素可视区-client" class="headerlink" title="元素可视区 client"></a>元素可视区 client</h3><ul>
<li>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client 系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/4a12fc8fbfd44b0dacd5b56564ed4524" alt="1656678654363"></p>
<p><img src="https://s1.vika.cn/space/2023/02/26/9d3eac0b483949fdb60a915032e87b2e" alt="1656678671686"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client 宽度 和我们 offsetWidth 最大的区别就是 不包含边框</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientWidth</span>);</span><br></pre></td></tr></table></figure>

<h3 id="案例-flexible-js-源码分析"><a href="#案例-flexible-js-源码分析" class="headerlink" title="案例- flexible.js 源码分析"></a>案例- flexible.js 源码分析</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<h3 id="元素滚动-scroll"><a href="#元素滚动-scroll" class="headerlink" title="元素滚动 scroll"></a>元素滚动 scroll</h3><ul>
<li>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/3b81903baf194387b9b680104833043b" alt="1656678916019"></p>
<p><img src="https://s1.vika.cn/space/2023/02/26/f864ca5bf0b643fdb268cd5530d7d255" alt="1656678931721"></p>
<ul>
<li>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll 事件。</li>
<li>页面被卷去的头部兼容性解决方案:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法：</span></span><br><span class="line"><span class="comment">		1. 声明了 DTD，使用 document.documentElement.scrollTop</span></span><br><span class="line"><span class="comment">		2. 未声明 DTD，使用 document.body.scrollTop</span></span><br><span class="line"><span class="comment">		3. 新方法 window.pageYOffset 和 window.pageXOffset，IE9 开始支持</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// scroll 系列</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollHeight</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientHeight</span>);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// scroll滚动事件当我们滚动条发生变化会触发的事件</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollTop</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-仿淘宝固定右侧侧边栏"><a href="#案例-仿淘宝固定右侧侧边栏" class="headerlink" title="案例-仿淘宝固定右侧侧边栏"></a>案例-仿淘宝固定右侧侧边栏</h3><ul>
<li>① 需要用到页面滚动事件 scroll 因为是页面滚动，所以事件源是 document</li>
<li>② 滚动到某个位置，就是判断页面被卷去的上部值。</li>
<li>③ 页面被卷去的头部：可以通过window.pageYOffset 获得 如果是被卷去的左侧 window.pageXOffset</li>
<li>④ 注意，元素被卷去的头部是 element.scrollTop , 如果是页面被卷去的头部 则是 window.pageYOffset</li>
<li>⑤ 其实这个值 可以通过盒子的 offsetTop 可以得到，如果大于等于这个值，就可以让盒子固定定位了</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.slider-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">130px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-bar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header w&quot;</span>&gt;</span>头部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner w&quot;</span>&gt;</span>banner区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main w&quot;</span>&gt;</span>主体部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sliderbar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-bar&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> banner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> bannerTop = banner.<span class="property">offsetTop</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sliderbarTop = sliderbar.<span class="property">offsetTop</span> - bannerTop;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取main 主体元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.main&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> goBack = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goBack&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> mainTop = main.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 页面滚动事件 scroll</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(11);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// window.pageYOffset 页面被卷去的头部</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(window.pageYOffset);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= bannerTop) &#123;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">top</span> = sliderbarTop + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;300px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= mainTop) &#123;</span></span><br><span class="line"><span class="language-javascript">                goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h3><p><img src="https://s1.vika.cn/space/2023/02/26/fb350309eb8e464e9f48c63a7fd816d3" alt="1656679355339"></p>
<p><img src="https://s1.vika.cn/space/2023/02/26/6374b5ad0e34466a932603a3d20d5419" alt="1656679370479"></p>
<ul>
<li>他们主要用法：<ul>
<li>offset系列 经常用于获得元素位置 offsetLeft offsetTop</li>
<li>client 经常用于获取元素大小 clientWidth clientHeight</li>
<li>scroll 经常用于获取滚动距离 scrollTop scrollLeft</li>
<li>注意页面滚动的距离通过 window.pageXOffset 获得</li>
</ul>
</li>
</ul>
<h2 id="常见网页特效案例"><a href="#常见网页特效案例" class="headerlink" title="常见网页特效案例"></a>常见网页特效案例</h2><h3 id="网页轮播图"><a href="#网页轮播图" class="headerlink" title="网页轮播图"></a>网页轮播图</h3><ul>
<li>轮播图也称为焦点图，是网页中比较常见的网页特效。</li>
<li>功能需求：<ul>
<li>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</li>
<li>点击右侧按钮一次，图片往左播放一张，以此类推， 左侧按钮同理。</li>
<li>图片播放的同时，下面小圆圈模块跟随一起变化。</li>
<li>点击小圆圈，可以播放相应图片。</li>
<li>鼠标不经过轮播图， 轮播图也会自动播放图片。</li>
<li>鼠标经过，轮播图模块， 自动播放停止。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h3><ul>
<li>案例分析<ul>
<li>① 带有动画的返回顶部</li>
<li>② 此时可以继续使用我们封装的动画函数</li>
<li>③ 只需要把所有的left 相关的值 改为 跟 页面垂直滚动距离相关就可以了</li>
<li>④ 页面滚动了多少，可以通过 window.pageYOffset 得到</li>
<li>⑤ 最后是页面滚动，使用 window.scroll(x,y)</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="筋头云案例"><a href="#筋头云案例" class="headerlink" title="筋头云案例"></a>筋头云案例</h3><ul>
<li>案例分析:<ul>
<li>① 利用动画函数做动画效果</li>
<li>② 原先筋斗云的起始位置是0</li>
<li>③ 鼠标经过某个小li， 把当前小li 的 offsetLeft 位置 做为目标值即可</li>
<li>④ 鼠标离开某个小li， 就把目标值设为 0</li>
<li>⑤ 如果点击了某个小li， 就把li当前的位置存储起来，做为筋斗云的起始位置</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="移动端网页特效"><a href="#移动端网页特效" class="headerlink" title="移动端网页特效"></a>移动端网页特效</h2><h3 id="触屏事件概述"><a href="#触屏事件概述" class="headerlink" title="触屏事件概述"></a>触屏事件概述</h3><ul>
<li>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。</li>
<li>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</li>
<li>常见的触屏事件如下：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f1b71eabfa8b4f6ca0dd7488cc8122df" alt="1656684890029"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 手指触摸DOM元素事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我摸了你&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 手指在DOM元素身上移动事件</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我继续摸&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 手指离开DOM元素事件</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;轻轻的我走了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="触摸事件对象"><a href="#触摸事件对象" class="headerlink" title="触摸事件对象"></a>触摸事件对象</h3><ul>
<li><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p>
</li>
<li><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p>
</li>
<li><p>触摸事件对象重点我们看三个常见对象列表：</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5c53e6558efa471da05c1877ec69048a" alt="1656684945660"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 触摸事件对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 手指触摸DOM元素事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// touches 正在触摸屏幕的所有手指的列表 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// targetTouches 正在触摸当前DOM元素的手指列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果侦听的是一个DOM元素，他们两个是一样的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// changedTouches 手指状态发生了改变的列表 从无到有 或者 从有到无</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 因为我们一般都是触摸元素 所以最经常使用的是 targetTouches</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">targetTouches</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// targetTouches[0] 就可以得到正在触摸dom元素的第一个手指的相关信息比如 手指的坐标等等</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 手指在DOM元素身上移动事件</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">					 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;手指移动了~~~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 手指离开DOM元素事件</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们手指离开屏幕的时候，就没有了 touches 和 targetTouches 列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 但是会有 changedTouches</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="移动端拖动元素"><a href="#移动端拖动元素" class="headerlink" title="移动端拖动元素"></a>移动端拖动元素</h3><ul>
<li>01 touchstart、touchmove、touchend 可以实现拖动元素</li>
<li>02 但是拖动元素需要当前手指的坐标值 我们可以使用 targetTouches[0] 里面的pageX 和 pageY</li>
<li>03 移动端拖动的原理： 手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li>
<li>04 手指移动的距离： 手指滑动中的位置 减去 手指刚开始触摸的位置</li>
<li>拖动元素三步曲：<ul>
<li>01 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</li>
<li>02 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</li>
<li>03 离开手指 touchend:</li>
</ul>
</li>
<li>注意：手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// （1） 触摸元素 touchstart：  获取手指初始坐标，同时获得盒子原来的位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// （2） 移动手指 touchmove：  计算手指的滑动距离，并且移动盒子</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// （3） 离开手指 touchend:</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> startX = <span class="number">0</span>; <span class="comment">//获取手指初始坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> startY = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = <span class="number">0</span>; <span class="comment">//获得盒子原来的位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> y = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//  获取手指初始坐标</span></span></span><br><span class="line"><span class="language-javascript">            startX = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">            startY = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript">            x = <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            y = <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//  计算手指的移动距离： 手指移动之后的坐标减去手指初始的坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> moveX = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span> - startX;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> moveY = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span> - startY;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 移动我们的盒子 盒子原来的位置 + 手指移动的距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">left</span> = x + moveX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">top</span> = y + moveY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止屏幕滚动的默认行为</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="移动端常见特效"><a href="#移动端常见特效" class="headerlink" title="移动端常见特效"></a>移动端常见特效</h2><h3 id="移动端轮播图"><a href="#移动端轮播图" class="headerlink" title="移动端轮播图"></a>移动端轮播图</h3><h3 id="click-延时解决方案"><a href="#click-延时解决方案" class="headerlink" title="click 延时解决方案"></a>click 延时解决方案</h3><ul>
<li><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p>
</li>
<li><p>01 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉 300ms 的点击延迟。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>02 利用 touch 事件自己封装这个事件解决 300ms 延迟。<ul>
<li>原理就是：<ul>
<li>当我们手指触摸屏幕，记录当前触摸时间</li>
<li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li>
<li>如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装tap，解决click 300ms 延时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tap</span> (obj, callback) &#123;</span><br><span class="line">	<span class="keyword">var</span> isMove = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">var</span> startTime = <span class="number">0</span>; <span class="comment">// 记录触摸时候的时间变量</span></span><br><span class="line">	obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">		startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 记录触摸时间</span></span><br><span class="line">	&#125;);</span><br><span class="line">	obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">		isMove = <span class="literal">true</span>; <span class="comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line">	&#125;);</span><br><span class="line">	obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isMove &amp;&amp; (<span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime) &lt; <span class="number">150</span>) &#123; <span class="comment">// 如果手指触摸和离开时间小于150ms 算点击</span></span><br><span class="line">		callback &amp;&amp; <span class="title function_">callback</span>(); <span class="comment">// 执行回调函数</span></span><br><span class="line">	&#125;</span><br><span class="line">	isMove = <span class="literal">false</span>; <span class="comment">// 取反 重置</span></span><br><span class="line">	startTime = <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="comment">//调用</span></span><br><span class="line"><span class="title function_">tap</span>(div, <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 执行代码 &#125;);</span></span><br></pre></td></tr></table></figure>

<ul>
<li>03 使用插件。 fastclick 插件解决 300ms 延迟。</li>
</ul>
<h3 id="移动端常用开发插件"><a href="#移动端常用开发插件" class="headerlink" title="移动端常用开发插件"></a>移动端常用开发插件</h3><ul>
<li><ol>
<li>什么是插件:</li>
</ol>
<ul>
<li>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</li>
<li>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</li>
<li>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</li>
<li>我们以前写的animate.js 也算一个最简单的插件</li>
<li>fastclick 插件解决 300ms 延迟。 使用延时</li>
<li>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></li>
</ul>
</li>
<li><ol start="2">
<li>插件的使用</li>
</ol>
<ul>
<li>略</li>
</ul>
</li>
<li><ol start="3">
<li>移动端常用插件</li>
</ol>
<ul>
<li>superslide： <a href="http://www.superslide2.com/">http://www.superslide2.com/</a></li>
<li>iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></li>
<li>移动端视频插件 zy.media.js:<ul>
<li>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</li>
<li>不同的视频格式文件，我们可以通过source 解决。</li>
<li>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</li>
<li>这个时候我们可以使用插件方式来制作。</li>
</ul>
</li>
</ul>
</li>
<li><ol start="4">
<li>fastclick.js的使用</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="string">&#x27;addEventListener&#x27;</span> <span class="keyword">in</span> <span class="variable language_">document</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">FastClick</span>.<span class="title function_">attach</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="移动端常用开发框架"><a href="#移动端常用开发框架" class="headerlink" title="移动端常用开发框架"></a>移动端常用开发框架</h3><ul>
<li>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</li>
<li>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</li>
<li>前端常用的移动端插件有 swiper、superslide、iscroll等。</li>
<li>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</li>
<li>框架： 大而全，一整套解决方案</li>
<li>插件： 小而专一，某个功能的解决方案</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>浏览器执行原理</title>
    <url>/2024/01/18/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/106_JavaScript%E9%AB%98%E7%BA%A7/10508_%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# 浏览器执行过程

<h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><h3 id="网页被解析的过程"><a href="#网页被解析的过程" class="headerlink" title="网页被解析的过程"></a>网页被解析的过程</h3><ul>
<li>大家有没有深入思考过：一个网页URL从输入到浏览器中，到显示经历过怎么样的解析过程呢?<ul>
<li><strong>输入域名 -&gt; DNS解析(也叫域名解析) -&gt; IP地址 -&gt; 根据解析出来的IP地址找到服务器 -&gt; 服务器返回资源</strong></li>
<li>从服务器最先返回的是 index.html , 浏览器会对 index.html 进行解析,遇到 css 文件或 js 文件等资源,会再次发起请求从服务器下载对应资源</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b59d560839804af1880d1f39c632d99f" alt="1660052470611"></p>
<ul>
<li>要想深入理解下载的过程，我们还要先理解，一个 index.html 被下载下来后是如何被解析和显示在浏览器上的 .</li>
</ul>
<h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><ul>
<li>常见的浏览器内核有<ul>
<li><strong>Trident</strong> (三叉戟）： IE 、 360 安全浏览器、搜狗高速浏览器、百度浏览器、 UC 浏览器；</li>
<li><strong>Gecko</strong> (壁虎）: Mozilla Firefox</li>
<li><strong>Presto</strong>（急板乐曲)  -&gt;  <strong>Blink</strong> （眨眼) :  Opera</li>
<li><strong>Webkit</strong> : Safari 、 360 极速浏览器、搜狗高速浏览器、移动端浏览器（ Android 、 iOS)</li>
<li><strong>Webkit</strong> -&gt; <strong>Blink</strong> : Google Chrome Edge</li>
</ul>
</li>
<li>我们经常说的浏览器内核指的是浏览器的排版引擎：<ul>
<li><strong>排版引擎 (layout engine），也称为 浏览器引擎 ( browser engine ）、 页面渲染引擎( rendering engine ）或 样版引擎 。</strong></li>
<li>也就是一个网页下载下来后，就是由我们的渲染引擎来帮助我们解析的。</li>
</ul>
</li>
</ul>
<h3 id="渲染引擎解析页面过程"><a href="#渲染引擎解析页面过程" class="headerlink" title="渲染引擎解析页面过程"></a>渲染引擎解析页面过程</h3><ul>
<li>渲染引擎在拿到一个页面后，如何解析整个页面并且最终呈现出我们的网页呢？<ul>
<li>若解析 HTML 时遇到 CSS,就会去加载 CSS,但是不会阻塞 HTML 的解析，会继续进行 HTML 解析创建DOM树</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/57277cc11a784a4e9d227a485f05be89" alt="1660054670561"></p>
<ul>
<li>渲染引擎解析页面的更加详细的过程如下:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/37b9ee04865d4cacbae2f0ace596b568" alt="1660054790133"></p>
<ul>
<li>参考链接: <a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork">https://www.html5rocks.com/en/tutorials/internals/howbrowserswork</a></li>
</ul>
<h3 id="渲染过程详解"><a href="#渲染过程详解" class="headerlink" title="渲染过程详解"></a>渲染过程详解</h3><h4 id="生成DOM树"><a href="#生成DOM树" class="headerlink" title="生成DOM树"></a>生成DOM树</h4><ul>
<li><p>第一步: 解析 HTML ，会构建 DOM Tree</p>
</li>
<li><p>因为默认情况下服务器会给浏览器返回 index.html 文件，所以解析 HTML 是所有步骤的开始：</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f64595d2d28f4b08a6cbde83189f762a" alt="1660055665240"></p>
<h4 id="生成CSS规则"><a href="#生成CSS规则" class="headerlink" title="生成CSS规则"></a>生成CSS规则</h4><ul>
<li><p>第二步: 解析出对应的规则树</p>
<ul>
<li>在解析的过程中，如果遇到CSS 的 link 元素，那么会由浏览器负责下载对应的 CSS 文件：<ul>
<li>注意：下载CSS 文件是不会影响 DOM 的解析的；</li>
</ul>
</li>
<li>浏览器下载完CSS 文件后，就会对 CSS 文件进行解析， 解析出对应的规则树<ul>
<li>我们可以称之为 CSSOM ( CSS Object Model , <strong>CSS 对象模型</strong>）；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/9c29e8efc00e4bf4be59d16c174298e9" alt="1660055786901"></p>
<h4 id="构建渲染树"><a href="#构建渲染树" class="headerlink" title="构建渲染树"></a>构建渲染树</h4><ul>
<li><p>第三步: 构建 Render Tree</p>
<ul>
<li>当有了 DOM Tree 和 CSSOM Tree 后，就可以两个结合来构建 Render Tree(渲染树) 了</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/dbc410f3f5fe4b51b538793e8624ad43" alt="1660055918084"></p>
<ul>
<li>注意一：link 元素不会阻塞 DOM Tree 的构建过程 ，但是 会阻塞 Render Tree 的构建过程<ul>
<li>这是因为 Render Tree 在构建时，需要对应的 CSSOM Tree</li>
</ul>
</li>
<li>注意二：Render Tree 和 DOM Tree 并不是一一对应的关系 ，比如对于 display 为 none 的元素，压根不会出现在 render tree 中；</li>
</ul>
<h4 id="布局与绘制"><a href="#布局与绘制" class="headerlink" title="布局与绘制"></a>布局与绘制</h4><ul>
<li><p>第四步: 是在渲染树（ Render Tree Tree）上运行 布局（ LayoutLayout）以计算每个节点的几何体。</p>
<ul>
<li>渲染树会表示显示哪些节点以及其他样式，但是不表示每个节点的尺寸、位置 等信息；</li>
<li>布局是确定呈现树中 所有节点的宽度、高度和位置信息 ；</li>
</ul>
</li>
<li><p>第五步: 是将每个节点绘制（ PaintPaint）</p>
<ul>
<li>在绘制阶段，浏览器将布局阶段计算的每个 frame 转为屏幕上实际的像素点 ；</li>
<li>包括将元素的可见部分进行绘制 ，比如 文本、颜色、边框、阴影、替换元素（比如 img）</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/626f4b95bbc0432bbd34c58da5aea690" alt="1660056344252"></p>
<h4 id="合成图层"><a href="#合成图层" class="headerlink" title="合成图层"></a>合成图层</h4><ul>
<li><p>第五步: 特殊解析 – composite 合成图层</p>
</li>
<li><p>绘制的过程，可以将布局后的元素绘制到多个合成图层中。</p>
<ul>
<li>这是浏览器的一种优化手段；</li>
</ul>
</li>
<li><p>默认情况下，标准流中的内容都是被绘制在同一个图层（Layer）中的；</p>
</li>
<li><p>而一些特殊的属性，会创建一个新的合成层（ CompositingLayer ），并且新的图层可以利用GPU来加速绘制；</p>
<ul>
<li>因为每个合成层都是单独渲染的；</li>
</ul>
</li>
<li><p>哪些属性可以形成新的合成层呢？常见的一些属性：</p>
<ul>
<li>3D transforms</li>
<li>video、canvas、iframe</li>
<li>opacity 动画转换时；</li>
<li>position: fixed</li>
<li>will-change：一个实验性的属性，提前告诉浏览器元素可能发生哪些变化；</li>
<li>animation 或 transition 设置了opacity、transform；</li>
</ul>
</li>
<li><p>分层确实可以提高性能，但是它以内存管理为代价，因此不应作为 web 性能优化策略的一部分过度使用。</p>
</li>
<li><p>谷歌浏览器查看网页图层:</p>
<ul>
<li>谷歌浏览器查看网页图层: F12 -&gt; 右边三个点 -&gt; more tools -&gt; Layers</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/25e21d2507864e9bbc6c8f19b8c1312d" alt="1660056739176"></p>
<h3 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h3><h4 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h4><ul>
<li>理解回流 reflowreflow：（也可以称之为重排）<ul>
<li>第一次确定节点的大小和位置，称之为<strong>布局</strong>（ layoutlayout）。</li>
<li><strong>对节点的大小、位置修改重新计算称为回流。</strong></li>
</ul>
</li>
<li>什么情况下引起回流呢？<ul>
<li>比如 DOM 结构发生改变（添加新的节点或者移除）；</li>
<li>比如改变了布局（修改 width 、height 、padding 、font-size 等值）</li>
<li>比如窗口 resizeresize（修改了窗口的尺寸等）</li>
<li>比如调用 getComputedStyle 方法获取尺寸,位置信息</li>
</ul>
</li>
</ul>
<h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><ul>
<li>理解重绘 repaintrepaint：<ul>
<li>第一次渲染内容称之为<strong>绘制</strong>（ paintpaint）。</li>
<li><strong>重新渲染称为重绘。</strong></li>
</ul>
</li>
<li>什么情况下会引起重绘呢？<ul>
<li>比如修改背景色、文字颜色、边框颜色、样式等；</li>
</ul>
</li>
</ul>
<h4 id="如何避免回流重绘"><a href="#如何避免回流重绘" class="headerlink" title="如何避免回流重绘"></a>如何避免回流重绘</h4><ul>
<li><strong>回流一定会引起重绘，所以回流是一件很消耗性能的事情。</strong></li>
<li>在开发中要尽量避免发生回流<ul>
<li><strong>01 修改样式时尽量一次性修改</strong><ul>
<li>比如通过 cssText 修改，比如通过添加 class 修改</li>
</ul>
</li>
<li><strong>02 尽量避免频繁的操作 DOM</strong><ul>
<li>我们可以在一个 DocumentFragment (文档片段)或者父元素中将要操作的 DOM 操作完成，再一次性的操作；</li>
</ul>
</li>
<li><strong>03 尽量避免通过 getComputedStyle 获取尺寸、位置等信息；</strong></li>
<li><strong>04 对某些元素使用 position 的 absolute 或者 fixed</strong><ul>
<li><code>并不是不会引起回流，而是开销相对较小，不会对其他元素造成影响。</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="script标签与页面解析"><a href="#script标签与页面解析" class="headerlink" title="script标签与页面解析"></a>script标签与页面解析</h3><ul>
<li>我们现在已经知道了页面的渲染过程，但是 JavaScript 在哪里呢？<ul>
<li>事实上，浏览器在解析 HTML 的过程中，遇到了 script 元素是不能继续构建 DOM 树的；</li>
<li>它会停止继续构建，首先下载 JavaScript 代码，并且执行 JavaScript 的脚本；</li>
<li>只有等到 JavaScript 脚本执行结束后，才会继续解析 HTML，构建 DOM 树；</li>
</ul>
</li>
<li>为什么要这样做呢？<ul>
<li>这是因为 JavaScript 的作用之一就是操作 DOM，并且可以修改 DOM；</li>
<li>如果我们等到 DOM 树构建完成并且渲染再执行 JavaScript，会造成严重的回流和重绘，影响页面的性能；</li>
<li>所以会在遇到 script 元素时，优先下载和执行 JavaScript 代码，再继续构建 DOM 树；</li>
</ul>
</li>
<li>但是这个也往往会带来新的问题，特别是现代页面开发中：<ul>
<li>在目前的开发模式中（比如 Vue、React），脚本往往比 HTML 页面更“重”，处理时间需要更长；</li>
<li>所以会造成页面的解析阻塞，在脚本下载、执行完成之前，用户在界面上什么都看不到；</li>
</ul>
</li>
<li>为了解决这个问题，script 元素给我们提供了两个属性（attribute）：<strong>defer 和 async</strong>。</li>
</ul>
<h4 id="defer属性"><a href="#defer属性" class="headerlink" title="defer属性"></a>defer属性</h4><ul>
<li>defer 属性告诉浏览器不要等待脚本下载，而继续解析 HTML，构建 DOM Tree。<ul>
<li>脚本会由浏览器来进行下载，但是不会阻塞 DOM Tree 的构建过程；</li>
<li>如果脚本提前下载好了，它会等待 DOM Tree 构建完成，在 DOMContentLoaded 事件之前先执行 defer 中的代码；</li>
</ul>
</li>
<li>所以 DOMContentLoaded 总是会等待 defer 中的代码先执行完成。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/99315db99b1343a1a4412505187b54d3" alt="1660057689993"></p>
<ul>
<li>另外多个带 defer 的脚本是可以保持正确的顺序执行的。</li>
<li>从某种角度来说，defer 可以提高页面的性能，并且推荐放到 head 元素中,让浏览器提前下载</li>
<li>注意：defer 仅适用于外部脚本，对于 script 默认内容会被忽略。</li>
</ul>
<h4 id="async属性"><a href="#async属性" class="headerlink" title="async属性"></a>async属性</h4><ul>
<li>async 特性与 defer 有些类似，它也能够让脚本不阻塞页面。</li>
<li>async 是让一个脚本完全独立的：</li>
<li>浏览器不会因 async 脚本而阻塞（与 defer 类似）；</li>
<li>async 脚本不能保证顺序，它是独立下载、独立运行，不会等待其他脚本；</li>
<li>async 不会能保证在 DOMContentLoaded 之前或者之后执行；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d7d51c4d3b594548afd09555aab84244" alt="1660057807407"></p>
<ul>
<li>defer 通常用于需要在文档解析后操作 DOM 的 JavaScript 代码，并且对多个 script 文件有顺序要求的；</li>
<li>async 通常用于独立的脚本，对其他脚本，甚至 DOM 没有依赖的；</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>移动端开发基础</title>
    <url>/2024/01/06/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10301_WebMobileBase/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><h2 id="浏览器现状"><a href="#浏览器现状" class="headerlink" title="浏览器现状"></a>浏览器现状</h2><ul>
<li><p>PC 端常见浏览器</p>
<ul>
<li><strong>360 浏览器、谷歌浏览器、火狐浏览器、QQ 浏览器、百度浏览器、搜狗浏览器、IE 浏览器。</strong></li>
</ul>
</li>
<li><p>移动端常见浏览器</p>
<ul>
<li>UC 浏览器，QQ 浏览器，欧朋浏览器，百度手机浏览器，360 安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器 ，以及其他各种杂牌浏览器。</li>
</ul>
</li>
<li><p>国内的 UC 和 QQ，百度等手机浏览器都是根据 Webkit 修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于 Android 修改开发的一样。</p>
</li>
<li><p>总结：兼容移动端主流浏览器，处理 Webkit 内核浏览器即可。</p>
</li>
</ul>
<h2 id="手机屏幕现状"><a href="#手机屏幕现状" class="headerlink" title="手机屏幕现状"></a>手机屏幕现状</h2><ul>
<li>移动端设备屏幕尺寸非常多，碎片化严重。</li>
<li>Android 设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920 等，还有传说中的 2K，4k 屏。</li>
<li>近年来 iPhone 的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208 等。</li>
<li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li>
</ul>
<h2 id="常见的移动端屏幕尺寸"><a href="#常见的移动端屏幕尺寸" class="headerlink" title="常见的移动端屏幕尺寸"></a>常见的移动端屏幕尺寸</h2><p><img src="https://s1.vika.cn/space/2023/02/26/a837698c86b54537acd6ca5b5171ecec" alt="1656501267544"></p>
<ul>
<li>注：以上数据均参考自 <a href="https://material.io/devices/">https://material.io/devices/</a> 。</li>
<li>注：作为前端开发，不建议大家去纠结 dp，dpi，pt，ppi 等单位。</li>
</ul>
<h2 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h2><ul>
<li>又称:设备像素，物理像素是一个长度单位，单位是 px，1 个物理像素就是屏幕上的一个物理成像点,就是屏幕中一个微小的发光物理元器件(可简单理解为超级微小的灯泡)，是屏幕能显示的最小粒度。它由屏幕制造商决定，屏幕生产后无法修改。</li>
<li>例如 iPhone 6 的横向上拥有的物理像素为 750、纵向上拥有的物理像素为 1334，我们也可以用: 750*1334 表示。</li>
</ul>
<h2 id="CSS-像素"><a href="#CSS-像素" class="headerlink" title="CSS 像素"></a>CSS 像素</h2><ul>
<li>又称:逻辑像素，css 像素是一个抽象的长度单位，单位也是 px，它是为 Web 开发者创造的，用来精确的度量 Web 页面上的内容大小。我们在编写 css、js、less 中所使用的都是 css 像素</li>
</ul>
<h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><ul>
<li>屏幕分辨率指屏幕在:横向、纵向上所拥有的物理像素点总数。一般表示用 n * m 表示。<ul>
<li>例如: iPhone 6 的屏幕分辨率为 750 * 1334</li>
</ul>
</li>
<li>注意点:<ul>
<li><strong>屏幕分辨率是一个固定值，屏幕生产出来就确定了，无法修改!!</strong></li>
<li>屏幕分辨率、显示分辨率是两个概念，系统设置中可以修改的是:显示分辨率。</li>
<li>显示分辨率是设备当前所用到的物理像素点数，也可以说:屏幕分辨率 &gt;&#x3D; 显示分辨率。</li>
</ul>
</li>
<li>手机屏幕尺寸参数查询: <a href="https://uiiiuiii.com/screen/">https://uiiiuiii.com/screen/</a></li>
</ul>
<h2 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h2><ul>
<li>又称:屏幕像素密度，<strong>是指屏幕上每英寸里包含的物理像素点个数</strong>，单位是 ppi(pixels per inch)，其实这里还有另一个单位 dpi (dots per inch)，两个值的计算方式都一样，只是使用的场景不同。ppi 主要用来衡量屏幕，dpi 用来衡量打印机等。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ecb9507ca2974d99a0d27f8e3807d032" alt="1659588896358"></p>
<h2 id="物理像素比"><a href="#物理像素比" class="headerlink" title="物理像素比"></a>物理像素比</h2><ul>
<li><strong>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的</strong>。这是厂商在出厂时就设置好了,比如苹果 6\7\8 是 750* 1334</li>
<li>我们开发时候的 1px 不是一定等于 1 个物理像素的</li>
<li>PC 端页面，1 个 px 等于 1 个物理像素的，但是移动端就不尽相同</li>
<li><strong>一个 px 的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a837698c86b54537acd6ca5b5171ecec" alt="1656501267544"></p>
<ul>
<li>PC 端 和 早前的手机屏幕 &#x2F; 普通手机屏幕: 1 CSS 像素 &#x3D; 1 物理像素的</li>
<li>Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a680fd4dd3424c6cac6d7e94d01b727e" alt="1656505788678"></p>
<h2 id="移动端调试方法"><a href="#移动端调试方法" class="headerlink" title="移动端调试方法"></a>移动端调试方法</h2><ul>
<li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li>
<li>搭建本地 web 服务器，手机和服务器一个局域网内，通过手机访问服务器</li>
<li>使用外网服务器，直接 IP 或域名访问</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>移动端浏览器我们主要对 webkit 内核进行兼容</li>
<li>我们现在开发的移动端主要针对手机端开发</li>
<li>现在移动端碎片化比较严重，分辨率和屏幕尺寸大小不一</li>
<li>学会用谷歌浏览器模拟手机界面以及调试</li>
</ul>
<h2 id="PC-端视口"><a href="#PC-端视口" class="headerlink" title="PC 端视口"></a>PC 端视口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>) <span class="comment">// 宽度 = 内容区域宽度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>) <span class="comment">// 宽度 = 内容区域 + 滚动条</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerWidth</span>) <span class="comment">// 宽度 = 内容区域 + 滚动条 + 浏览器边框</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">width</span>) <span class="comment">// 宽度 = 当前显示器显示的分辨率的横向值</span></span><br></pre></td></tr></table></figure>

<h2 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h2><ul>
<li><p>视口（ viewport ）就是浏览器显示页面内容的屏幕区域。 视口可以分为 <strong>布局视口、视觉视口和理想视口</strong></p>
</li>
<li><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的 PC 端页面在手机上显示的问题。</p>
</li>
<li><p>iOS, Android 基本都将这个视口分辨率设置为 980px，所以 PC 上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/31467d306aa34d0aa9d085f6153cfd10" alt="1656501478263"></p>
<h2 id="视觉视口"><a href="#视觉视口" class="headerlink" title="视觉视口"></a>视觉视口</h2><ul>
<li>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</li>
<li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/705f33a9540342568280d5700fb4ecee" alt="1656501520825"></p>
<h2 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h2><ul>
<li><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p>
</li>
<li><p>理想视口，对设备来讲，是最理想的视口尺寸</p>
</li>
<li><p>需要手动添写 meta 视口标签通知浏览器操作</p>
</li>
<li><p>meta 视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p>
</li>
</ul>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul>
<li>视口就是浏览器显示页面内容的屏幕区域</li>
<li>视口分为布局视口、视觉视口和理想视口</li>
<li>我们移动端布局想要的是理想视口就是手机屏幕有多宽，我们的布局视口就有多宽</li>
<li>想要理想视口，我们需要给我们的移动端页面添加 meta 视口标签</li>
</ul>
<h2 id="meta-视口标签"><a href="#meta-视口标签" class="headerlink" title="meta 视口标签"></a>meta 视口标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.vika.cn/space/2023/02/26/d862f110bb9942bdab2d29cd9e07194a" alt="1656505546837"></p>
<h2 id="标准的-viewport-设置"><a href="#标准的-viewport-设置" class="headerlink" title="标准的 viewport 设置"></a>标准的 viewport 设置</h2><ul>
<li><strong>视口宽度和设备保持一致</strong></li>
<li><strong>视口的默认缩放比例 1.0</strong></li>
<li><strong>不允许用户自行缩放</strong></li>
<li><strong>最大允许的缩放比例 1.0</strong></li>
<li><strong>最小允许的缩放比例 1.0</strong></li>
<li>viewport-fit 设置为 cover 值, 可以解决刘海屏的留白问题</li>
</ul>
<h2 id="多倍图"><a href="#多倍图" class="headerlink" title="多倍图"></a>多倍图</h2><ul>
<li>对于一张 50px * 50px 的图片,在手机 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</li>
<li>在标准的 viewport 设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</li>
<li>通常使用二倍图， 因为 iPhone 6\7\8 的影响,但是现在还存在 3 倍图, 4 倍图的情况，这个看实际开发公司需求</li>
<li>背景图片 注意缩放问题</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在 iphone8 下,物理像素比为 2  */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="comment">/*原始图片100*100px*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/*原始图片100*100px*/</span></span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>尚硅谷:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 当物理像素比最小为 2 时,使用 2 倍图, 区分匹配的先后顺序 */</span></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 修改 img 的 src 属性 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">&#x27;../img/logo@2x.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 当物理像素比最小为 3 时,使用 3 倍图, 区分匹配的先后顺序 */</span></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 修改 img 的 src 属性 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="built_in">url</span>(<span class="string">&#x27;../img/logo@3x.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="背景图缩放"><a href="#背景图缩放" class="headerlink" title="背景图缩放"></a>背景图缩放</h2><ul>
<li>background-size 属性规定背景图像的尺寸</li>
<li><strong>background-size: 背景图片宽度 背景图片高度;</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>可选值： 长度 | 百分比 | cover | contain;</li>
<li><strong>cover : 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</strong></li>
<li><strong>contain : 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</strong></li>
</ul>
<h2 id="多倍图切图"><a href="#多倍图切图" class="headerlink" title="多倍图切图"></a>多倍图切图</h2><ul>
<li>Photoshop 插件 : <strong>cutterman</strong></li>
</ul>
<h2 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h2><ul>
<li><ol>
<li>单独移动端页面（主流）</li>
</ol>
<ul>
<li>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b356040a43744ef990c7177f5b273205" alt="1656510014638"></p>
<ul>
<li><ol start="2">
<li>响应式兼容 PC 移动端</li>
</ol>
<ul>
<li>三星电子官网： <a href="http://www.samsung.com/cn/">www.samsung.com/cn/</a> ，通过判断屏幕宽度来改变样式，以适应不同终端。</li>
<li>缺点：制作麻烦， 需要花很大精力去调兼容性问题</li>
</ul>
</li>
<li><ol start="3">
<li>小结:</li>
</ol>
<ul>
<li>现在市场常见的移动端开发有 单独制作移动端页面 和 响应式页面 两种方案</li>
<li>现在<strong>市场主流的选择还是单独制作移动端页面</strong></li>
</ul>
</li>
</ul>
<h2 id="移动端浏览器的兼容性"><a href="#移动端浏览器的兼容性" class="headerlink" title="移动端浏览器的兼容性"></a>移动端浏览器的兼容性</h2><ul>
<li>移动端浏览器基本以 webkit 内核为主，因此我们就考虑 webkit 兼容性问题。</li>
<li>我们可以放心使用 H5 标签和 CSS3 样式。</li>
<li>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/15c46985dab7419786019383521a9a29" alt="1656510420226"></p>
<h2 id="CSS-初始化"><a href="#CSS-初始化" class="headerlink" title="CSS 初始化"></a>CSS 初始化</h2><ul>
<li>移动端 CSS 初始化推荐使用 <strong>normalize.css</strong></li>
<li>保护了有价值的默认值</li>
<li>修复了浏览器的 bug</li>
<li>是模块化的</li>
<li>拥有详细的文档</li>
<li>官网地址： <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></li>
</ul>
<h2 id="CSS-3-盒子模型"><a href="#CSS-3-盒子模型" class="headerlink" title="CSS 3 盒子模型"></a>CSS 3 盒子模型</h2><ul>
<li>传统模式宽度计算：盒子的宽度 &#x3D; CSS 中设置的 width + border + padding</li>
<li>CSS3 盒子模型： 盒子的宽度 &#x3D; CSS 中设置的宽度 width, 里面包含了 border 和 padding,也就是说，我们的 CSS3 中的盒子模型， padding 和 border 不会撑大盒子了</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/*传统盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: content-box;</span><br></pre></td></tr></table></figure>

<ul>
<li>传统 or CSS3 盒子模型:<ul>
<li>移动端可以全部 CSS3 盒子模型</li>
<li>PC 端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">-webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/*点击高亮我们需要清除 设置为transparent 完成透明*/</span></span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line">-webkit-appearance: none;</span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h2><ul>
<li><ol>
<li>单独制作移动端页面（主流）</li>
</ol>
<ul>
<li>流式布局（百分比布局）</li>
<li>flex 弹性布局（强烈推荐）</li>
<li>less+rem+媒体查询布局</li>
<li>混合布局</li>
</ul>
</li>
<li><ol start="2">
<li>响应式页面兼容移动端（其次）</li>
</ol>
<ul>
<li>媒体查询</li>
<li>bootstarp</li>
</ul>
</li>
</ul>
<h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><ul>
<li>为什么要做适配</li>
<li>由于移动端设备的屏幕尺寸大小不一，会出现:同一个元素，在两个不同的手机上显尔双果个一样(比例不同)。要想让同一个元素在不同设备上，显示效果一样，就需要适配，无论采用何种适配方式，中心原则永远是:等比。</li>
<li>主流的适配方式有三种:<ul>
<li>viewport 适配</li>
<li>rem 适配(主流方式,几乎完美适配).</li>
<li>vw 适配</li>
</ul>
</li>
</ul>
<h3 id="viewport-适配"><a href="#viewport-适配" class="headerlink" title="viewport 适配"></a>viewport 适配</h3><ul>
<li>方法:拿到设计稿之后，设置布局视口宽度为设计稿宽度，然后直接按照设计稿给宽高进行布局即可。·优点:不用复杂的计算，直接使用图稿上标注的 px 值</li>
<li>缺点:<ul>
<li>不能使用完整的 meta 标签，会导致在某些安卓手机上有兼容性问题</li>
<li>不希望适配的东西，例如边框，也强制参与了适配</li>
<li>图片会失真</li>
</ul>
</li>
</ul>
<h3 id="vw-适配"><a href="#vw-适配" class="headerlink" title="vw 适配"></a>vw 适配</h3><ul>
<li>vw 和 vh 是两个相对单位<ul>
<li>1 vw &#x3D; 等于布局视口宽度的 1%</li>
<li>1 vh &#x3D; 等于布局视口高度的 1%</li>
</ul>
</li>
</ul>
<h2 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h2><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><ul>
<li>移动端事件列表<ul>
<li>touchstart 元素上触摸开始时触发.</li>
<li>touchmove 元素上触摸移动时触发.</li>
<li>touchend 手指从元素上离开时触发.</li>
<li>touchcancel 触摸被打断时触发</li>
</ul>
</li>
<li>这几个事件最早出现于 IOS safari 中，为了向开发人员转达一些特殊的信息。</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><p>touchstart 事件可用于元素触摸的交互，比如页面跳转，标签页切换.</p>
</li>
<li><p>touchmove 事件可用于页面的滑动特效，网页游戏，画板</p>
</li>
<li><p>touchend 事件主要跟 touchmove 事件结合使用</p>
</li>
<li><p>touchcancel 使用率不高</p>
</li>
<li><p>注意:</p>
<ul>
<li>touchmove 事件触发后，即使手指离开了元素，touchmove 事件也会持续触发·</li>
<li>触发 touchmove 与 touchend 事件，一定要先触发 touchstart</li>
<li>事件的作用在于实现移动端的界面交互</li>
</ul>
</li>
</ul>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul>
<li><p>touches : 屏幕上的触点数</p>
</li>
<li><p>targetTouches : 当前元素上的触点数</p>
</li>
<li><p>changedTouches : 同时按下几个手指</p>
</li>
</ul>
<h3 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h3><ul>
<li>touch 事件结束后会默认触发元素的 click 事件，如没有设置完美视口，则事件触发的时间间隔为 300ms 左右，如设置完美视口则时间间隔为 30ms 左右(备注:具体的时间也看设备的特性). 如果 touch 事件隐藏了元素，则 click 动作将作用到新的元素上，触发新元素的 click 事件或页面跳转，此现象称为点击穿透</li>
</ul>
<h3 id="点击穿透解决方案一"><a href="#点击穿透解决方案一" class="headerlink" title="点击穿透解决方案一"></a>点击穿透解决方案一</h3><ul>
<li>给顶层元素,阻止默认行为 ( 类似于事件冒泡 )</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="点击穿透解决方案二"><a href="#点击穿透解决方案二" class="headerlink" title="点击穿透解决方案二"></a>点击穿透解决方案二</h3><ul>
<li>使背后的元素不具备 click 特性, 给背后的元素添加 touchXXX 事件,代替 click 事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  location.<span class="property">href</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="点击穿透解决方案三"><a href="#点击穿透解决方案三" class="headerlink" title="点击穿透解决方案三"></a>点击穿透解决方案三</h3><ul>
<li>让背后的元素暂时失去 click 事件，300 毫秒左右再复原</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*添加CSS样式,不再响应点击事件*/</span></span><br><span class="line"><span class="selector-id">#anode</span> &#123;</span><br><span class="line">  pointer-enents: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    anode.<span class="property">style</span>.<span class="property">pointerEvents</span> = <span class="string">&#x27;auto&#x27;</span> <span class="comment">//重新响应点击事件</span></span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="点击穿透解决方案四"><a href="#点击穿透解决方案四" class="headerlink" title="点击穿透解决方案四"></a>点击穿透解决方案四</h3><ul>
<li>延迟隐藏顶层元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    shade.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JS代码执行原理</title>
    <url>/2024/01/19/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/106_JavaScript%E9%AB%98%E7%BA%A7/10509_JS%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# JS 代码的执行原理

<h2 id="JS-代码的执行原理"><a href="#JS-代码的执行原理" class="headerlink" title="JS 代码的执行原理"></a>JS 代码的执行原理</h2><ul>
<li>我们知道，浏览器内核是由两部分组成的，以 webkit 为例：<ul>
<li>WebCore 负责 HTML 解析、布局、渲染等等相关的工作；</li>
<li>JavaScriptCore 解析、执行 JavaScript 代码；另外一个强大的 JavaScript 引擎就是 V8 引擎。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/85d72e341f354d7796ac5ff482daa627" alt="1660112626791"></p>
<h3 id="V8-引擎的执行原理"><a href="#V8-引擎的执行原理" class="headerlink" title="V8 引擎的执行原理"></a>V8 引擎的执行原理</h3><ul>
<li>官方对 V8 引擎的定义：<ul>
<li>V8 是用 C ++编写的 Google 开源高性能 JavaScript 和 WebAssembly 引擎，它用于 Chrome 和 Node.js 等。</li>
<li>它实现 ECMAScript 和 WebAssembly，并在 Windows 7 或更高版本，macOS 10.12+和使用 x64，IA-32，ARM 或 MIPS 处理器的 Linux 系统上运行。</li>
<li>V8 可以独立运行，也可以嵌入到任何 C ++应用程序中。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0e165b5c2d5b4ed8a689f703d1378955" alt="1660112808469"></p>
<h3 id="V8-引擎的架构"><a href="#V8-引擎的架构" class="headerlink" title="V8 引擎的架构"></a>V8 引擎的架构</h3><ul>
<li><p>V8 引擎本身的源码非常复杂，大概有超过 100w 行 C++ 代码，通过了解它的架构，我们可以知道它是如何对 JavaScript 执行的：</p>
</li>
<li><p><strong>Parse 模块会将 JavaScript 代码转换成 AST（抽象语法树）</strong>，这是因为解释器并不直接认识 JavaScript 代码；</p>
<ul>
<li>如果函数没有被调用，那么是不会被转换成 AST 的；</li>
<li>Parse 的 V8 官方文档：<a href="https://v8.dev/blog/scanner">https://v8.dev/blog/scanner</a></li>
</ul>
</li>
<li><p><strong>Ignition 是一个解释器，会将 AST 转换成 ByteCode（字节码）</strong></p>
<ul>
<li>同时会收集 TurboFan 优化所需要的信息（比如函数参数的类型信息，有了类型才能进行真实的运算）；</li>
<li>如果函数只调用一次，Ignition 会解释执行 ByteCode；</li>
<li>Ignition 的 V8 官方文档：<a href="https://v8.dev/blog/ignition-interpreter">https://v8.dev/blog/ignition-interpreter</a></li>
</ul>
</li>
<li><p><strong>TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码；</strong></p>
</li>
<li><p>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能；</p>
</li>
<li><p>但是，机器码实际上也会被还原为 ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码；</p>
</li>
<li><p>TurboFan 的 V8 官方文档：<a href="https://v8.dev/blog/turbofan-jit">https://v8.dev/blog/turbofan-jit</a></p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/868e80dbbbd74e1e988c59c23040be43" alt="1660113245614"></p>
<h3 id="ECMAScript-版本说明"><a href="#ECMAScript-版本说明" class="headerlink" title="ECMAScript 版本说明"></a>ECMAScript 版本说明</h3><ul>
<li><p>在 ECMA 早期的版本中（ ECMAScript3 ），代码的执行流程的术语和 ECMAScript5 以及之后的术语会有所区别：</p>
<ul>
<li>目前网上大多数流行的说法都是基于 ECMAScript3 版本的解析 ，并且在面试时问到的大多数都是 ECMAScript3 的版本内容。</li>
<li>但是 ECMAScript3 终将过去， ECMAScript5 必然会成为主流 ，所以最好也理解 ECMAScript5 甚至包括 ECMAScript6 以及更好版本的内容；</li>
<li>事实上在 TC39 的最新描述中，和 ECMAScript5 之后的版本又出现了一定的差异；</li>
</ul>
</li>
<li><p>通过 ECMAScript3 中的概念学习 <strong>JavaScript 执行原理、作用域、作用域链、闭包</strong> 等概念；</p>
</li>
<li><p>通过 ECMAScript5 中的概念学习 <strong>块级作用域、 let 、 const</strong> 等概念；</p>
</li>
</ul>
<h2 id="JS-代码的执行过程"><a href="#JS-代码的执行过程" class="headerlink" title="JS 代码的执行过程"></a>JS 代码的执行过程</h2><ul>
<li>假如我们有下面一段代码，它在 JavaScript 中是如何被执行的呢？</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;Global Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;Foo Message&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">  <span class="keyword">var</span> height = <span class="number">1.88</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> result = num1 + num2</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="JS-代码的执行过程-1"><a href="#JS-代码的执行过程-1" class="headerlink" title="JS 代码的执行过程"></a>JS 代码的执行过程</h3><h4 id="初始化全局对象"><a href="#初始化全局对象" class="headerlink" title="初始化全局对象"></a>初始化全局对象</h4><ul>
<li><strong>js 引擎会在执行代码之前，会在堆内存中创建一个全局对象</strong>：Global Object（GO）</li>
<li>该对象 所有的作用域（scope）都可以访问；</li>
<li>里面会包含 Date、Array、String、Number、setTimeout、setInterval 等等；</li>
<li>其中还有一个 window 属性指向自己；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f3cebe3db0f74213a7fa9a3daf2a93a0" alt="1674136596767"></p>
<h4 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h4><ul>
<li><strong>js 引擎内部有一个执行上下文栈（Execution Context Stack，简称 ECS），它是用于执行代码的调用栈</strong>。</li>
<li>那么现在它要执行谁呢？执行的是全局的代码块：</li>
<li>全局的代码块为了执行会构建一个 Global Execution Context（GEC）(全局执行上下文)；</li>
<li>GEC 会 被放入到 ECS 中 执行；</li>
<li>GEC 被放入到 ECS 中里面包含两部分内容：</li>
<li>第一部分：在代码执行前，在 parser 转成 AST 的过程中，会将全局定义的变量、函数等加入到 GlobalObject 中，但是并不会赋值；<br>-  这个过程也称之为变量的作用域提升（hoisting）</li>
<li>第二部分：在代码执行中，对变量赋值，或者执行其他的函数；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/04/02/74cc2e3379ea42b19dab6916046dc2e2" alt="1674136652927"></p>
<h4 id="认识-VO-对象"><a href="#认识-VO-对象" class="headerlink" title="认识 VO 对象"></a>认识 VO 对象</h4><ul>
<li>每一个执行上下文会关联一个 VO（Variable Object，变量对象），变量和函数声明会被添加到这个 VO 对象中。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/04/02/970ce14aa852436981550c7b86420aa0" alt="1674136723774"></p>
<ul>
<li>当全局代码被执行的时候，VO 就是 GO 对象了</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/04/02/9c9a4c58a5bc42d8a6fcb0739a1de0ac" alt="1674136730223"></p>
<h3 id="全局代码的执行过程"><a href="#全局代码的执行过程" class="headerlink" title="全局代码的执行过程"></a>全局代码的执行过程</h3><h4 id="执行前"><a href="#执行前" class="headerlink" title="执行前"></a>执行前</h4><p><img src="https://s1.vika.cn/space/2023/02/26/06c1e9dc7b1d4c7192ea9942215360b2" alt="1674136785563"></p>
<h4 id="执行后"><a href="#执行后" class="headerlink" title="执行后"></a>执行后</h4><p><img src="https://s1.vika.cn/space/2023/02/26/05b1dd87ad324060b5b43c88965b6ee1" alt="1674136799002"></p>
<h3 id="函数的执行过程"><a href="#函数的执行过程" class="headerlink" title="函数的执行过程"></a>函数的执行过程</h3><ul>
<li>在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文（Functional Execution Context，简称 FEC），并且压入到 EC Stack 中。<br>因为每个执行上下文都会关联一个 VO，那么函数执行上下文关联的 VO 是什么呢？</li>
<li>当进入一个函数执行上下文时，会创建一个 AO 对象（Activation Object）；</li>
<li>这个 AO 对象会使用 arguments 作为初始化，并且初始值是传入的参数；</li>
<li>这个 AO 对象会作为执行上下文的 VO 来存放变量的初始化；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/04/02/b365f650c7ad4dbc9ef15f44da85e435" alt="1674136853384"></p>
<h4 id="执行前-1"><a href="#执行前-1" class="headerlink" title="执行前"></a>执行前</h4><p><img src="https://s1.vika.cn/space/2023/02/26/c474fc27a09f41b3b36d48bc66137891" alt="1674136882431"></p>
<h4 id="执行后-1"><a href="#执行后-1" class="headerlink" title="执行后"></a>执行后</h4><p><img src="https://s1.vika.cn/space/2023/02/26/4862f04cb56d45dda3d961b953e18fd6" alt="1674136895779"></p>
<h3 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h3><h4 id="作用域与作用域链-1"><a href="#作用域与作用域链-1" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h4><ul>
<li>当进入到一个执行上下文时，执行上下文也会关联一个作用域链（Scope Chain）</li>
<li>作用域链是一个对象列表，用于变量标识符的求值；</li>
<li>当进入一个执行上下文时，这个作用域链被创建，并且根据代码类型，添加一系列的对象；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/326be69505af4e2db7d435f2622a4f89" alt="1674137043066"></p>
<h4 id="作用域链面试题"><a href="#作用域链面试题" class="headerlink" title="作用域链面试题"></a>作用域链面试题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-内存管理"><a href="#JavaScript-内存管理" class="headerlink" title="JavaScript 内存管理"></a>JavaScript 内存管理</h2><h3 id="认识内存管理"><a href="#认识内存管理" class="headerlink" title="认识内存管理"></a>认识内存管理</h3><ul>
<li><p>不管什么样的编程语言，在代码的执行过程中都是需要给它分配内存的，不同的是某些编程语言需要我们自己手动的管理内存，某些编程语言会可以自动帮助我们管理内存：</p>
</li>
<li><p>不管以什么样的方式来管理内存，内存的管理都会有如下的生命周期：</p>
<ul>
<li>第一步：分配申请你需要的内存（申请）；</li>
<li>第二步：使用分配的内存（存放一些东西，比如对象等）；</li>
<li>第三步：不需要使用时，对其进行释放；</li>
</ul>
</li>
<li><p>不同的编程语言对于第一步和第三步会有不同的实现：</p>
<ul>
<li>手动管理内存：比如 C、C++，包括早期的 OC，都是需要手动来管理内存的申请和释放的（malloc 和 free 函数）；</li>
<li>自动管理内存：比如 Java、JavaScript、Python、Swift、Dart 等，它们有自动帮助我们管理内存；</li>
</ul>
</li>
<li><p>对于开发者来说，JavaScript 的内存管理是自动的、无形的。</p>
</li>
<li><p>我们创建的原始值、对象、函数……这一切都会占用内存；</p>
</li>
<li><p>但是我们并不需要手动来对它们进行管理，JavaScript 引擎会帮助我们处理好它；</p>
</li>
</ul>
<h3 id="JavaScript-的内存管理"><a href="#JavaScript-的内存管理" class="headerlink" title="JavaScript 的内存管理"></a>JavaScript 的内存管理</h3><ul>
<li><p>JavaScript 会在定义数据时为我们分配内存。</p>
</li>
<li><p>JS 对于原始数据类型内存的分配会在执行时，直接在栈空间进行分配；</p>
</li>
<li><p>JS 对于复杂数据类型内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用；</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7c67954f54cc41c7b9e1869197272338" alt="1660128151953"></p>
<h3 id="JavaScript-的垃圾回收"><a href="#JavaScript-的垃圾回收" class="headerlink" title="JavaScript 的垃圾回收"></a>JavaScript 的垃圾回收</h3><ul>
<li>因为内存的大小是有限的，所以当内存不再需要的时候，我们需要对其进行释放，以便腾出更多的内存空间。</li>
<li>在手动管理内存的语言中，我们需要通过一些方式自己来释放不再需要的内存，比如 free 函数：<ul>
<li>但是这种管理的方式其实非常的低效，影响我们编写逻辑的代码的效率；</li>
<li>并且这种方式对开发者的要求也很高，并且一不小心就会产生内存泄露；</li>
</ul>
</li>
<li>所以大部分现代的编程语言都是有自己的垃圾回收机制：<ul>
<li>垃圾回收的英文是 Garbage Collection，简称 GC；</li>
<li>对于那些不再使用的对象，我们都称之为是垃圾，它需要被回收，以释放更多的内存空间；</li>
<li>而我们的语言运行环境，比如 Java 的运行环境 JVM，JavaScript 的运行环境 js 引擎都会内存垃圾回收器；</li>
<li>垃圾回收器我们也会简称为 GC，所以在很多地方你看到 GC 其实指的是垃圾回收器；</li>
</ul>
</li>
<li>但是这里又出现了另外一个很关键的问题：GC 怎么知道哪些对象是不再使用的呢？<ul>
<li>这里就要用到 GC 的实现以及对应的算法；</li>
</ul>
</li>
</ul>
<h4 id="常见的垃圾回收算法"><a href="#常见的垃圾回收算法" class="headerlink" title="常见的垃圾回收算法"></a>常见的垃圾回收算法</h4><ul>
<li>01 引用计数：<ul>
<li>当一个对象有一个引用指向它时，那么这个对象的引用就+1；</li>
<li>当一个对象的引用为 0 时，这个对象就可以被销毁掉；</li>
<li>这个算法有一个很大的弊端就是会产生循环引用；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/2b7da00ea1c040d998c46994d6778a40" alt="1660128423769"></p>
<ul>
<li>02 标记清除：<ul>
<li>标记清除的核心思路是可达性（Reachability）</li>
<li>这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些没有引用到的对象，就认为是不可用的对象；</li>
<li>这个算法可以很好的解决循环引用的问题；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7217ba0c638c40d3b444163b1a52d9f2" alt="1660128457208"></p>
<h4 id="其他算法优化补充"><a href="#其他算法优化补充" class="headerlink" title="其他算法优化补充"></a>其他算法优化补充</h4><ul>
<li>JS 引擎比较广泛的采用的就是可达性中的标记清除算法，当然类似于 V8 引擎为了进行更好的优化，它在算法的实现细节上也会结合一些其他的算法。</li>
<li>标记整理（Mark-Compact） 和“标记－清除”相似；<ul>
<li>不同的是，回收期间同时会将保留的存储对象搬运汇集到连续的内存空间，从而整合空闲空间，避免内存碎片化；</li>
</ul>
</li>
<li>分代收集（Generational collection）—— 对象被分成两组：“新的”和“旧的”。<ul>
<li>许多对象出现，完成它们的工作并很快死去，它们可以很快被清理；</li>
<li>那些长期存活的对象会变得“老旧”，而且被检查的频次也会减少；</li>
</ul>
</li>
<li>增量收集（Incremental collection）<ul>
<li>如果有许多对象，并且我们试图一次遍历并标记整个对象集，则可能需要一些时间，并在执行过程中带来明显的延迟。</li>
<li>所以引擎试图将垃圾收集工作分成几部分来做，然后将这几部分会逐一进行处理，这样会有许多微小的延迟而不是一个大的延迟；</li>
</ul>
</li>
<li>闲时收集（Idle-time collection）<ul>
<li>垃圾收集器只会在 CPU 空闲时尝试运行，以减少可能对代码执行的影响。</li>
</ul>
</li>
</ul>
<h3 id="V8-引擎的详细内存图"><a href="#V8-引擎的详细内存图" class="headerlink" title="V8 引擎的详细内存图"></a>V8 引擎的详细内存图</h3><p><img src="https://s1.vika.cn/space/2023/02/26/b6e4bb3eb92c4a5ab386cdede00f2044" alt="1660128544663"></p>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>流式布局</title>
    <url>/2024/01/07/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10302_Percent/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h1><h2 id="什么是流式布局"><a href="#什么是流式布局" class="headerlink" title="什么是流式布局"></a>什么是流式布局</h2><ul>
<li><strong>流式布局，就是百分比布局，也称非固定像素布局。</strong></li>
<li><strong>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</strong></li>
<li>流式布局方式是移动 web 开发使用的比较常见的布局方式。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/43c46a3e474f4c628dc692b2f0e6fca0" alt="1656511289177"></p>
<ul>
<li>max-width 最大宽度 （max-height 最大高度）</li>
<li>min-width 最小宽度 （min-height 最小高度）</li>
</ul>
<h2 id="流式布局示例网站"><a href="#流式布局示例网站" class="headerlink" title="流式布局示例网站"></a>流式布局示例网站</h2><p><img src="https://s1.vika.cn/space/2023/02/26/1936148a92744d529d35cab2134adb48" alt="1656511329177"></p>
<h2 id="常用初始化样式"><a href="#常用初始化样式" class="headerlink" title="常用初始化样式"></a>常用初始化样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: -apple-system, Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二倍精灵图做法"><a href="#二倍精灵图做法" class="headerlink" title="二倍精灵图做法"></a>二倍精灵图做法</h2><ul>
<li>01 在 firework 里面把精灵图等比例缩放为原来的一半</li>
<li>02 之后根据大小 测量坐标</li>
<li>03 注意代码里面 background-size 也要写： 精灵图原来宽度的一半</li>
</ul>
<h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><ul>
<li><p>DPG 图片压缩技术</p>
<ul>
<li>京东自主研发推出 DPG 图片压缩技术，经测试该技术，可直接节省用户近 50% 的浏览流量，极大的提升了用户的网页打开速度。能够兼容 .jpeg，实现全平台、全部浏览器的兼容支持，经过内部和外部上万张图片的人眼浏览测试后发现，压缩后的图片和 webp 的清晰度对比没有差距。</li>
</ul>
</li>
<li><p>webp 图片格式</p>
<ul>
<li>谷歌开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有 JPEG 的 2&#x2F;3，并能节省大量的服务器宽带资源和数据空间</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>rem布局</title>
    <url>/2024/01/08/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10303_Rem/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="rem-适配布局"><a href="#rem-适配布局" class="headerlink" title="rem 适配布局"></a>rem 适配布局</h1><ul>
<li>思考:<ul>
<li>页面布局文字能否随着屏幕大小变化而变化？</li>
<li>流式布局和 flex 布局主要针对于宽度布局，那高度如何设置？</li>
<li>怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放？</li>
</ul>
</li>
</ul>
<h2 id="rem-单位"><a href="#rem-单位" class="headerlink" title="rem 单位"></a>rem 单位</h2><ul>
<li><p><strong>rem</strong> (root em)是一个相对单位，类似于 em，<strong>em 是父元素字体大小</strong>。</p>
</li>
<li><p>不同的是 <strong>rem 的基准是相对于 html 元素的字体大小。</strong></p>
<ul>
<li><strong>比如，根元素（ html ）设置 font-size&#x3D;12px; 非根元素设置 width:2rem; 则换成 px 表示就是 24px。</strong></li>
</ul>
</li>
<li><p>rem 的优势：父元素文字大小可能不一致， 但是整个页面只有一个 html ，可以很好来控制整个页面的元素大小</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 根html 为 12px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 此时 div 的字体大小就是 24px */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h2><ul>
<li>媒体查询（Media Query）是 CSS3 新语法。<ul>
<li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式</li>
<li>@media 可以针对不同的屏幕尺寸设置不同的样式</li>
<li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li>
<li>目前针对很多苹果手机、Android 手机，平板等设备都用得到多媒体查询</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6d45362a7b9540d195a8a53ed288de44" alt="1656556079314"></p>
<h2 id="媒体查询语法规范"><a href="#媒体查询语法规范" class="headerlink" title="媒体查询语法规范"></a>媒体查询语法规范</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) &#123;</span><br><span class="line">	CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用 @media 开头 注意 @ 符号</li>
<li>mediatype 媒体类型</li>
<li>关键字 and not only</li>
<li>media feature 媒体特性 必须有小括号包含</li>
</ul>
<h2 id="mediatype-查询类型"><a href="#mediatype-查询类型" class="headerlink" title="mediatype 查询类型"></a>mediatype 查询类型</h2><ul>
<li>将不同的终端设备划分成不同的类型，称为媒体类型</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d913028e5a624282bd6381c7917f3da7" alt="1656556163195"></p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li>关键字: 将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。<ul>
<li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li>
<li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li>
<li>only：指定某个特定的媒体类型，可以省略。</li>
</ul>
</li>
</ul>
<h2 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h2><ul>
<li>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。注意他们要加小括号包含</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ebfbc9ab4762418dad58f0c1d3c1174b" alt="1656556282794"></p>
<h2 id="媒体查询案例"><a href="#媒体查询案例" class="headerlink" title="媒体查询案例"></a>媒体查询案例</h2><ul>
<li>页面效果</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/017ec913d59646499081d5915660e80a" alt="1656556335356"></p>
<ul>
<li><p>实现思路</p>
<ul>
<li><p>01 按照从大到小的或者从小到大的思路</p>
</li>
<li><p>02 注意我们有最大值 max-width 和最小值 min-width 都是包含等于的</p>
</li>
<li><p>03 当屏幕小于 540 像素， 背景颜色变为蓝色 （x &lt;&#x3D; 539）</p>
</li>
<li><p>04 当屏幕大于等于 540 像素 并且小于等于 969 像素的时候 背景颜色为 绿色 ( 540&#x3D;&lt;x &lt;&#x3D; 969）</p>
</li>
<li><p>05 当屏幕大于等于 970 像素的时候，背景颜色为红色 （ x &gt;&#x3D; 970）</p>
</li>
<li><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0f36183432f14daf8014604324fa340d" alt="1656556468050"></p>
<h2 id="媒体查询与-rem"><a href="#媒体查询与-rem" class="headerlink" title="媒体查询与 rem"></a>媒体查询与 rem</h2><ul>
<li>rem 单位是跟着 html 来走的，有了 rem 页面元素可以设置不同大小尺寸</li>
<li>媒体查询可以根据不同设备宽度来修改样式</li>
<li>媒体查询 + rem 就可以实现不同设备宽度，实现页面元素大小的动态变化</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7c56580400104cb48be133fa27a5653c" alt="1656556546440"></p>
<h2 id="资源的分别引入"><a href="#资源的分别引入" class="headerlink" title="资源的分别引入"></a>资源的分别引入</h2><ul>
<li>当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets（样式表）。</li>
<li>原理，就是直接在 link 中判断设备的尺寸，然后引用不同的 css 文件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styleA.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width: 400px)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="rem-适配方案"><a href="#rem-适配方案" class="headerlink" title="rem 适配方案"></a>rem 适配方案</h2><ul>
<li>01 让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</li>
<li><strong>02 使用媒体查询根据不同设备按比例设置 html 的字体大小，然后页面元素使用 rem 做尺寸单位，当 html 字体大小变化,元素尺寸也会发生变化，从而达到等比缩放的适配。</strong></li>
</ul>
<h2 id="rem-实际开发适配方案"><a href="#rem-实际开发适配方案" class="headerlink" title="rem 实际开发适配方案"></a>rem 实际开发适配方案</h2><ul>
<li>01 按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；（媒体查询）</li>
<li>02 CSS 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/47011040d3d148c484ec058c13948123" alt="1656557355775"></p>
<h2 id="rem-适配方案技术使用"><a href="#rem-适配方案技术使用" class="headerlink" title="rem 适配方案技术使用"></a>rem 适配方案技术使用</h2><ul>
<li><p>技术方案 1</p>
<ul>
<li>less</li>
<li>媒体查询</li>
<li>rem</li>
</ul>
</li>
<li><p>技术方案 2（推荐）</p>
<ul>
<li>flexible.js</li>
<li>rem</li>
</ul>
</li>
<li><p>总结：</p>
<ul>
<li>01 两种方案现在都存在。</li>
<li>02 方案 2 更简单，现阶段大家无需了解里面的 js 代码。</li>
</ul>
</li>
</ul>
<h2 id="rem-实际开发适配方案-1"><a href="#rem-实际开发适配方案-1" class="headerlink" title="rem 实际开发适配方案 1"></a>rem 实际开发适配方案 1</h2><ul>
<li><p>rem + 媒体查询 + less 技术</p>
</li>
<li><ol>
<li>设计稿常见尺寸宽度</li>
</ol>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5d46d99ca40b4094bbe93529969fe25e" alt="1656557544955"></p>
<ul>
<li><p>一般情况下，我们以一套或两套效果图适应大部分的屏幕，放弃极端屏或对其优雅降级，牺牲一些效果现在基本以 750 为准。</p>
</li>
<li><ol start="2">
<li>动态设置 html 标签 font-size 大小</li>
</ol>
<ul>
<li>01 假设设计稿是 750px</li>
<li>02 假设我们把整个屏幕划分为 15 等份（划分标准不一,可以是 20 份,也可以是 10 等份）</li>
<li>03 每一份作为 html 字体大小，这里就是 50px</li>
<li>04 那么在 320px 设备的时候，字体大小为 320&#x2F;15 就是 21.33px</li>
<li>05 用我们页面元素的大小 除以不同的 html 字体大小会发现他们比例还是相同的</li>
<li>06 比如我们以 750 为标准设计稿</li>
<li>07 一个 100*100 像素的页面元素 在 750 屏幕下， 就是 100 &#x2F; 50 转换为 rem 是 2rem * 2rem 比例是 1 比 1</li>
<li>08 320 屏幕下，html 字体大小为 21.33 则 2rem &#x3D; 42.66px 此时宽和高都是 42.66 但是 宽和高的比例还是 1 比 1</li>
<li>09 但是已经能实现不同屏幕下,页面元素盒子等比例缩放的效果</li>
</ul>
</li>
<li><ol start="3">
<li>元素大小取值方法</li>
</ol>
<ul>
<li>01 最后的公式： 页面元素的 rem 值 &#x3D; 页面元素值（ px ） &#x2F; （屏幕宽度 &#x2F; 划分的份数）</li>
<li>02 屏幕宽度 &#x2F; 划分的份数 就是 html font-size 的大小</li>
<li>03 或者： 页面元素的 rem 值 &#x3D; 页面元素值（px） &#x2F; html font-size 字体大小</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尚硅谷: 方案一</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adapter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取布局视口宽度，因为开启了理想视口，布局视口=设备横向独立像素值</span></span><br><span class="line">  <span class="keyword">const</span> dpWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">  <span class="comment">// 计算根字体大小</span></span><br><span class="line">  <span class="keyword">const</span> rootFontSize = (dpWidth * <span class="number">100</span>) / <span class="number">375</span></span><br><span class="line">  <span class="comment">// 设置根字体大小</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = rootFontSize + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">adapter</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = adapter</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尚硅谷: 方案二</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adapter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取布局视口宽度，因为开启了理想视口，布局视口=设备横向独立像素值</span></span><br><span class="line">  <span class="keyword">const</span> dpWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">  <span class="comment">// 计算根字体大小</span></span><br><span class="line">  <span class="keyword">const</span> rootFontSize = dpWidth / <span class="number">10</span></span><br><span class="line">  <span class="comment">// 设置根字体大小</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = rootFontSize + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">adapter</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = adapter</span><br></pre></td></tr></table></figure>

<h2 id="案例-苏宁网移动端首页"><a href="#案例-苏宁网移动端首页" class="headerlink" title="案例-苏宁网移动端首页"></a>案例-苏宁网移动端首页</h2><ul>
<li>01 效果图展示</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/0c450d96763a452bafb3b14cb0a0e8f3" alt="1656557768576"></p>
<ul>
<li><p>02 技术选型</p>
<ul>
<li>方案：我们采取单独制作移动页面方案</li>
<li>技术：布局采取 rem 适配布局（ less + rem + 媒体查询 ）</li>
<li>设计图： 本设计图采用 750px 设计尺寸</li>
</ul>
</li>
<li><p>03 设置视口标签以及引入初始化样式</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no,</span></span></span><br><span class="line"><span class="string"><span class="tag">initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/normalize.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>04 设置公共 common.less 文件</p>
<ul>
<li>01 新建 common.less 设置好最常见的屏幕尺寸，利用媒体查询设置不同的 html 字体大小，因为除了首页其他页面也需要</li>
<li>02 我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px</li>
<li>03 划分的份数我们定为 15 等份</li>
<li>04 因为我们 pc 端也可以打开我们苏宁移动端首页，我们默认 html 字体大小为 50px，注意这句话写到最上面</li>
</ul>
</li>
<li><p>05 新建 index.less 文件</p>
<ul>
<li>01 新建 index.less 这里面写首页的样式</li>
<li>02 将刚才设置好的 common.less 引入到 index.less 里面 语法：**@import “common”**</li>
<li>03 生成 index.css 引入到 index.html 里面</li>
</ul>
</li>
<li><p>06 body 样式</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rem-实际开发适配方案-2"><a href="#rem-实际开发适配方案-2" class="headerlink" title="rem 实际开发适配方案 2"></a>rem 实际开发适配方案 2</h2><ul>
<li>简洁高效的 rem 适配方案 flexible.js<ul>
<li>手机淘宝团队出的简洁高效 移动端适配库</li>
<li>我们再也不需要在写不同屏幕的媒体查询，因为里面 js 做了处理</li>
<li>它的原理是把当前设备划分为 10 等份，但是不同设备下，比例还是一致的。</li>
<li>我们要做的，就是确定好我们当前设备的 html 文字大小就可以了</li>
<li>比如当前设计稿是 750px ， 那么我们只需要把 html 文字大小设置为 75px(750px &#x2F; 10) 就可以</li>
<li>里面页面元素 rem 值： 页面元素的 px 值 &#x2F; 75</li>
<li>剩余的，让 flexible.js 来去算</li>
<li>github 地址：<a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></li>
</ul>
</li>
</ul>
<h2 id="案例-苏宁移动端首页"><a href="#案例-苏宁移动端首页" class="headerlink" title="案例-苏宁移动端首页"></a>案例-苏宁移动端首页</h2><ul>
<li><p>01 技术选型</p>
<ul>
<li>方案：我们采取单独制作移动页面方案</li>
<li>技术：布局采取 rem 适配布局 2（ flexible.js + rem）</li>
<li>设计图： 本设计图采用 750px 设计尺寸</li>
</ul>
</li>
<li><p>02 设置视口标签以及引入初始化样式还有 js 文件</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no,</span></span></span><br><span class="line"><span class="string"><span class="tag">initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/normalize.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们页面需要引入 这个 js 文件，在 index.html 中 引入 flexible.js 这个文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“js/flexible.js”</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>03 body 样式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript_ES6-ES13</title>
    <url>/2024/01/17/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/106_JavaScript%E9%AB%98%E7%BA%A7/10507_JS_ES6-ES13/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# ES6-ES13

<h2 id="ECMA新描述概念"><a href="#ECMA新描述概念" class="headerlink" title="ECMA新描述概念"></a>ECMA新描述概念</h2><h3 id="ECMA新描述概念-1"><a href="#ECMA新描述概念-1" class="headerlink" title="ECMA新描述概念"></a>ECMA新描述概念</h3><ul>
<li><p>在执行学习JavaScript代码执行过程中，我们学习了很多ECMA文档的术语：</p>
<ul>
<li><strong>执行上下文栈</strong>：Execution Context Stack，用于执行上下文的栈结构；</li>
<li><strong>执行上下文</strong>：Execution Context，代码在执行之前会先创建对应的执行上下文；</li>
<li><strong>变量对象</strong>：Variable Object，上下文关联的VO对象，用于记录函数和变量声明；</li>
<li><strong>全局对象</strong>：Global Object，全局执行上下文关联的VO对象；</li>
<li><strong>激活对象</strong>：Activation Object，函数执行上下文关联的VO对象；</li>
<li><strong>作用域链</strong>：scope chain，作用域链，用于关联指向上下文的变量查找；</li>
</ul>
</li>
<li><p>在新的ECMA 代码执行描述中（ES5以及之上），对于代码的执行流程描述改成了另外的一些词汇：</p>
<ul>
<li>基本思路是相同的，只是对于一些词汇的描述发生了改变；</li>
<li>执行上下文栈和执行上下文也是相同的；</li>
</ul>
</li>
</ul>
<h3 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h3><ul>
<li>词法环境是一种规范类型，用于在词法嵌套结构中定义关联的变量、函数等标识符；<ul>
<li>一个词法环境是由环境记录（Environment Record）和一个外部词法环境（oute;r Lexical Environment）组成；</li>
<li>一个词法环境经常用于关联一个函数声明、代码块语句、try-catch语句，当它们的代码被执行时，词法环境被创建出来；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/cdfd81c5a7904af28b9e13e9327473fc" alt="1674715027356"></p>
<ul>
<li>也就是在ES5之后，执行一个代码，通常会关联对应的词法环境；<ul>
<li>那么执行上下文会关联哪些词法环境呢？</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d403060c249d4a85a6686a726e1fd4a5" alt="1674715053861"></p>
<ul>
<li>LexicalEnvironment用于处理let、const声明的标识符：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e54174478fde45a0acecff113176079d" alt="1674715087198"></p>
<ul>
<li>VariableEnvironment用于处理var和function声明的标识符：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/4fe55c3557864fb6bea5431b69066cc8" alt="1674715092632"></p>
<h3 id="环境记录"><a href="#环境记录" class="headerlink" title="环境记录"></a>环境记录</h3><ul>
<li>在这个规范中有两种主要的环境记录值:声明式环境记录和对象环境记录。<ul>
<li>声明式环境记录：声明性环境记录用于定义ECMAScript语言语法元素的效果，如函数声明、变量声明和直接将标识符绑定与ECMAScript语言值关联起来的Catch子句。</li>
<li>对象式环境记录：对象环境记录用于定义ECMAScript元素的效果，例如WithStatement，它将标识符绑定与某些对象的属性关联起来。</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/683a0713f14f429b984990ec900b9c64" alt="1674715125454"></p>
<ul>
<li>新ECMA描述内存图</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ba7b9a53fd7643f99102898614495e0b" alt="1674715163644"></p>
<h2 id="let-const的使用"><a href="#let-const的使用" class="headerlink" title="let&#x2F;const的使用"></a>let&#x2F;const的使用</h2><h3 id="let-const的使用-1"><a href="#let-const的使用-1" class="headerlink" title="let&#x2F;const的使用"></a>let&#x2F;const的使用</h3><ul>
<li><p>在 ES5 中我们声明变量都是使用的 var关键字，从ES6开始新增了两个关键字可以声明变量：let、const</p>
<ul>
<li>let、const 在其他编程语言中都是有的，所以也并不是新鲜的关键字；</li>
<li>但是 let、const 确确实实给 JavaScript 带来一些不一样的东西；</li>
</ul>
</li>
<li><p>let 关键字：</p>
<ul>
<li>从直观的角度来说，let 和 var 是没有太大的区别的，都是用于声明一个变量；</li>
</ul>
</li>
<li><p>const 关键字：</p>
<ul>
<li>const 关键字是 constant 的单词的缩写，表示常量、衡量的意思；</li>
<li>它表示保存的数据一旦被赋值，就不能被修改；</li>
<li>但是如果赋值的是引用类型，那么可以通过引用找到对应的对象，修改对象的内容；</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>另外 let、const 不允许重复声明变量,否则会报错</li>
<li>var 声明过的变量也不能再通过 let &#x2F; const 再次声明,否则会报错</li>
</ul>
</li>
</ul>
<h3 id="let-const无作用域提升"><a href="#let-const无作用域提升" class="headerlink" title="let&#x2F;const无作用域提升"></a>let&#x2F;const无作用域提升</h3><ul>
<li>let、const 和 var 的另一个重要区别是作用域提升：<ul>
<li>我们知道 var 声明的变量是会进行作用域提升的；</li>
<li>但是如果我们使用 let 声明的变量，在声明之前访问会报错；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>那么是不是意味着foo变量只有在代码执行阶段才会创建的呢？<ul>
<li>事实上并不是这样的，我们可以看一下 ECMA262 对 let 和 const 的描述；</li>
<li>这些变量会被创建在包含他们的词法环境被实例化时，但是是不可以访问它们的，直到词法绑定被求值；</li>
</ul>
</li>
<li>从上面我们可以看出，在执行上下文的词法环境创建出来的时候，<strong>变量事实上已经被创建了，只是这个变量是不能被访问</strong>的。</li>
<li>那么变量已经有了，但是不能被访问，是不是一种作用域的提升呢？<ul>
<li>事实上维基百科并没有对作用域提升有严格的概念解释，那么我们自己从字面量上理解；<ul>
<li><strong>作用域提升：在声明变量的作用域中，如果这个变量可以在声明之前被访问，那么我们可以称之为作用域提升；</strong></li>
<li>在这里，它虽然被创建出来了，但是不能被访问，我认为不能称之为作用域提升；</li>
</ul>
</li>
<li>所以我的观点是 <strong>let、const 没有进行作用域提升，但是会在解析阶段被创建出来</strong>。</li>
</ul>
</li>
</ul>
<h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><ul>
<li>我们知道，在let、const定义的标识符真正执行到声明的代码之前，是不能被访问的<ul>
<li>从块作用域的顶部一直到变量声明完成之前，这个变量处在暂时性死区（TDZ，temporal dead zone）</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">	<span class="keyword">let</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用术语 “temporal” 是因为区域取决于执行顺序（时间），而不是编写代码的位置；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<h3 id="window对象添加属性"><a href="#window对象添加属性" class="headerlink" title="window对象添加属性"></a>window对象添加属性</h3><ul>
<li><p>我们知道，在全局通过 var 来声明一个变量，事实上会在 window 上添加一个属性：</p>
</li>
<li><p>但是 let、const 是不会给 window 上添加任何属性的。</p>
</li>
<li><p>那么我们可能会想这个变量是保存在哪里呢？</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/3ae09183701e4358904d45161d63038c" alt="1674715256606"></p>
<h3 id="var-的作用域"><a href="#var-的作用域" class="headerlink" title="var 的作用域"></a>var 的作用域</h3><ul>
<li>在我们前面的学习中，JavaScript只会形成两个作用域：<strong>全局作用域和函数作用域</strong>。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/28b0e492f8e448a29a8a48442aaaa4da" alt="1674715309954"></p>
<ul>
<li>ES5中放到一个代码中定义的变量，外面是可以访问的：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/5178084a46584889811f09ce817c54a7" alt="1674715335028"></p>
<h3 id="let-const的块级作用域"><a href="#let-const的块级作用域" class="headerlink" title="let&#x2F;const的块级作用域"></a>let&#x2F;const的块级作用域</h3><ul>
<li>在ES6中新增了块级作用域，并且通过let、const、function、class声明的标识符是具备块级作用域的限制的：<ul>
<li>使用 let 和 const 声明的变量是有块级作用域的</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">&quot;foo&quot;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Person</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(foo) // 报错: Uncaught ReferenceError: foo is not defined</span></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// bar</span></span><br><span class="line"><span class="comment">// let p = new Person; // 报错: Uncaught ReferenceError: Person is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>但是我们会发现函数拥有块级作用域，但是外面依然是可以访问的：<ul>
<li>这是因为引擎会对函数的声明进行特殊的处理，允许像 var 那样进行提升；</li>
</ul>
</li>
</ul>
<h3 id="块级作用域的应用"><a href="#块级作用域的应用" class="headerlink" title="块级作用域的应用"></a>块级作用域的应用</h3><ul>
<li>点击按钮,输出不同的索引值:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btnEl.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    btnEl[i].<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="var-let-const的选择"><a href="#var-let-const的选择" class="headerlink" title="var&#x2F;let&#x2F;const的选择"></a>var&#x2F;let&#x2F;const的选择</h3><ul>
<li>那么在开发中，我们到底应该选择使用哪一种方式来定义我们的变量呢？</li>
<li>对于var的使用：<ul>
<li>我们需要明白一个事实，var所表现出来的特殊性：比如作用域提升、window全局对象、没有块级作用域等都是一些历史遗留问题；</li>
<li>其实是JavaScript在设计之初的一种语言缺陷；</li>
<li>当然目前市场上也在利用这种缺陷出一系列的面试题，来考察大家对JavaScript语言本身以及底层的理解；</li>
<li>但是在实际工作中，我们可以使用最新的规范来编写，也就是<strong>不再使用var来定义变量</strong>了；</li>
</ul>
</li>
<li>对于let、const：<ul>
<li><strong>对于let和const来说，是目前开发中推荐使用的；</strong></li>
<li>我们会优先推荐使用const，这样可以保证数据的安全性不会被随意的篡改；</li>
<li>只有当我们明确知道一个变量后续会需要被重新赋值时，这个时候再使用let；</li>
<li>这种在很多其他语言里面也都是一种约定俗成的规范，尽量我们也遵守这种规范；</li>
</ul>
</li>
</ul>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><ul>
<li>在ES6之前，如果我们想要将字符串和一些动态的变量（标识符）拼接到一起，是非常麻烦和丑陋的（ugly）。</li>
<li>ES6允许我们使用字符串模板来嵌入JS的变量或者表达式来进行拼接：<ul>
<li>首先，我们会使用 &#96;&#96; 符号来编写字符串，称之为模板字符串；</li>
<li>其次，在模板字符串中，我们可以通过 ${expression} 来嵌入动态的内容；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.1.ES6之前</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> info = <span class="string">&quot;my name is&quot;</span> + name + <span class="string">&quot;, age is &quot;</span> + age</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info); <span class="comment">// my name iswhy, age is 18</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.2.ES6之后</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> info = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info) <span class="comment">// my name is why, age is 18</span></span><br></pre></td></tr></table></figure>

<h3 id="标签模板字符串使用"><a href="#标签模板字符串使用" class="headerlink" title="标签模板字符串使用"></a>标签模板字符串使用</h3><ul>
<li>模板字符串还有另外一种用法：标签模板字符串（Tagged Template Literals）。</li>
<li>我们一起来看一个普通的JavaScript的函数：</li>
<li>如果我们使用标签模板字符串，并且在调用的时候插入其他的变量：<ul>
<li>模板字符串被拆分了；</li>
<li>第一个元素是数组，是被模块字符串拆分的字符串组合；</li>
<li>后面的元素是一个个模块字符串传入的内容；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.标签模板字符串的用法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数:&quot;</span>, args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>) <span class="comment">//  [&#x27;why&#x27;, 18, 1.88]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line">foo <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>, height is <span class="subst">$&#123;<span class="number">1.88</span>&#125;</span>`</span> <span class="comment">//  [Array(4), &#x27;why&#x27;, 18, 1.88]  // 也是函数调用的一种方式</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="箭头函数简介"><a href="#箭头函数简介" class="headerlink" title="箭头函数简介"></a>箭头函数简介</h3><ul>
<li>箭头函数是 ES6 之后增加的一种编写函数的方法，并且它比函数表达式要更加简洁：</li>
<li>箭头函数 不会绑定 this 、arguments 属性</li>
<li>箭头函数 不能作为构造函数来使用 （不能和 new 一起来使用，会抛出错误）；</li>
</ul>
<h3 id="箭头函数的格式"><a href="#箭头函数的格式" class="headerlink" title="箭头函数的格式"></a>箭头函数的格式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.之前声明函数的方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> foo2 = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数体代码&#x27;</span>, <span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.箭头函数完整写法</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">foo3</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;箭头函数的函数体&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo3</span>(<span class="string">&#x27;why&#x27;</span>, <span class="number">18</span>) <span class="comment">// 函数调用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.箭头函数的练习</span></span><br><span class="line"><span class="comment">// 3.1. forEach , forEach的三个参数依次分别为:每次遍历的数组元素,数组索引,被遍历的数组</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>]</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index, arr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2. setTimeout</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的简写"><a href="#箭头函数的简写" class="headerlink" title="箭头函数的简写"></a>箭头函数的简写</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">111</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.优化一: 如果箭头函数只有一个参数, 那么()可以省略</span></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// abc cba nba</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums) <span class="comment">// [20, 30]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">111</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.优化二: 如果函数体中只有一行执行代码, 那么&#123;&#125;可以省略,并且这行代码的返回值会作为整个函数的返回值</span></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"><span class="comment">// 一行代码中不能带return关键字, 如果省略, 需要带return一起省略</span></span><br><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums) <span class="comment">// [20, 30]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.优化三: 只有一行代码时, 这行代码的表达式结果会作为函数的返回值默认返回的</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">111</span>]</span><br><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;newNums:&#x27;</span>, newNums) <span class="comment">// newNums: [20, 30]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.优化四: 如果默认返回值是一个对象, 那么这个对象必须加()</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>] <span class="comment">// [&#x27;abc&#x27;, &#x27;cba&#x27;] 将会作为返回值</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; &#123;&#125; <span class="comment">// 注意: 这里是&#123;&#125;执行体</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span> &#125;) <span class="comment">// &#123;name: &#x27;why&#x27;&#125; ,要返回一个对象,必须加小括号才能作为返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrFn</span>())</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭头函数实现nums的所有偶数平方的和</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">111</span>]</span><br><span class="line"><span class="keyword">var</span> result = nums</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item * item)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">prevValue, item</span>) =&gt;</span> prevValue + item)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 1300</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的-this-指向"><a href="#箭头函数的-this-指向" class="headerlink" title="箭头函数的 this 指向"></a>箭头函数的 this 指向</h3><ul>
<li>箭头函数根据外层作用域来决定 this 的指向</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 普通函数中是有this的标识符</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// window</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;aaa&#x27;</span>) <span class="comment">// String &#123;&#x27;aaa&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.箭头函数中, 压根没有this</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar:&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// window</span></span><br><span class="line">bar.<span class="title function_">apply</span>(<span class="string">&#x27;aaaa&#x27;</span>) <span class="comment">// window , 通过apply调用时, 也是没有this</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全局this:&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.this的查找规则</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar222:&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = obj.<span class="title function_">foo</span>()</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="string">&#x27;bbb&#x27;</span>) <span class="comment">// window ,如果 foo 是一个普通函数,this 就是指向 obj 对象</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数中-this-的应用"><a href="#箭头函数中-this-的应用" class="headerlink" title="箭头函数中 this 的应用"></a>箭头函数中 this 的应用</h3><ul>
<li>案例一:调用 obj 对象中的一个方法发起网络请求获取数据,并存放在 obj 的 name 属性中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 网络请求的工具函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, callbackFn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> results = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>]</span><br><span class="line">  <span class="title function_">callbackFn</span>(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际操作的位置(业务)</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">names</span>: [],</span><br><span class="line">  <span class="attr">network</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 普通方法中的this指向 obj 对象</span></span><br><span class="line">    <span class="comment">// 1.早期的时候</span></span><br><span class="line">    <span class="comment">// var _this = this</span></span><br><span class="line">    <span class="comment">// request(&quot;/names&quot;, function(res) &#123;</span></span><br><span class="line">    <span class="comment">//   _this.names = [].concat(res)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.箭头函数写法</span></span><br><span class="line">    <span class="title function_">request</span>(<span class="string">&#x27;/names&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">names</span> = [].<span class="title function_">concat</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">network</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<ul>
<li>案例二:定时器中的 this 的使用<ul>
<li>调用 obj 对象中的一个方法发起网络请求获取数据,并存放在 obj 的 name 属性中</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">data</span>: [],</span><br><span class="line">  <span class="attr">getData</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> res = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;nba&#x27;</span>]</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(...res)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// this 的指向为 obj2 对象</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj2.<span class="title function_">getData</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br></pre></td></tr></table></figure>

<h3 id="常见-this-指向的面试题"><a href="#常见-this-指向的面试题" class="headerlink" title="常见 this 指向的面试题"></a>常见 this 指向的面试题</h3><h4 id="面试题一"><a href="#面试题一" class="headerlink" title="面试题一"></a>面试题一</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sss = person.<span class="property">sayName</span></span><br><span class="line">  <span class="title function_">sss</span>() <span class="comment">// 绑定: 默认绑定, window -&gt; window</span></span><br><span class="line">  person.<span class="title function_">sayName</span>() <span class="comment">// 绑定: 隐式绑定, person -&gt; person</span></span><br><span class="line">  person.<span class="title function_">sayName</span>() <span class="comment">// 绑定: 隐式绑定, person -&gt; person</span></span><br><span class="line">  ;(b = person.<span class="property">sayName</span>)() <span class="comment">// 术语: 间接函数引用, window -&gt; window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>()</span><br></pre></td></tr></table></figure>

<h4 id="面试题二"><a href="#面试题二" class="headerlink" title="面试题二"></a>面试题二</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo2</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="attr">foo3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;person2&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始题目:</span></span><br><span class="line">person1.<span class="title function_">foo1</span>() <span class="comment">// 隐式绑定: person1</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo2</span>() <span class="comment">// 上层作用域: window</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2) <span class="comment">// 上层作用域: window</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo3</span>()() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo4</span>()() <span class="comment">// person1</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)() <span class="comment">// person2</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2) <span class="comment">// person1</span></span><br></pre></td></tr></table></figure>

<h4 id="面试题三"><a href="#面试题三" class="headerlink" title="面试题三"></a>面试题三</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1.创建一个空的对象</span></span><br><span class="line"><span class="comment">  2.将这个空的对象赋值给this</span></span><br><span class="line"><span class="comment">  3.执行函数体中代码</span></span><br><span class="line"><span class="comment">  4.将这个新的对象默认返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  ;(<span class="variable language_">this</span>.<span class="property">foo1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">    (<span class="variable language_">this</span>.<span class="property">foo2</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)),</span><br><span class="line">    (<span class="variable language_">this</span>.<span class="property">foo3</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    (<span class="variable language_">this</span>.<span class="property">foo4</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person1/person2都是对象(实例instance)</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面试题目:</span></span><br><span class="line">person1.<span class="title function_">foo1</span>() <span class="comment">// 隐式绑定: person1</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo2</span>() <span class="comment">// 上层作用域查找: person1</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2) <span class="comment">// 上层作用域查找: person1</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo3</span>()() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo4</span>()() <span class="comment">// 上层作用域查找: person1(隐式绑定)</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)() <span class="comment">//  上层作用域查找: person2(显式绑定)</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2) <span class="comment">// 上层作用域查找: person1(隐式绑定)</span></span><br></pre></td></tr></table></figure>

<h4 id="面试题四"><a href="#面试题四" class="headerlink" title="面试题四"></a>面试题四</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">obj</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>()() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo1</span>.<span class="title function_">call</span>(person2)() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>().<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>()() <span class="comment">// 上层作用域查找: obj(隐式绑定)</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo2</span>.<span class="title function_">call</span>(person2)() <span class="comment">// 上层作用域查找: person2(显式绑定)</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>().<span class="title function_">call</span>(person2) <span class="comment">// 上层作用域查找: obj(隐式绑定)</span></span><br></pre></td></tr></table></figure>

<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><ul>
<li><p>在ES6之前，我们编写的函数参数是没有默认值的，所以我们在编写函数时，如果有下面的需求：</p>
<ul>
<li>传入了参数，那么使用传入的参数；</li>
<li>没有传入参数，那么使用一个默认值；</li>
<li>而在ES6中，我们允许给函数一个默认值：</li>
</ul>
</li>
<li><p>不严谨的默认值写法:</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg1</span>) &#123;</span><br><span class="line">  <span class="comment">// 1.1 这种写法不严谨, 像 0 , &quot;&quot; , false , null , undefined 等值会被判为 false ,得到默认值,而不是传递的参数</span></span><br><span class="line">  <span class="comment">// 默认值写法一:</span></span><br><span class="line">  arg1 =  arg1 ? arg1 : <span class="string">&quot;我是默认值&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>, <span class="number">321</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">0</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">false</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">null</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>) <span class="comment">// 我是默认值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg1</span>) &#123;</span><br><span class="line">  <span class="comment">// 1.2 这种写法不严谨, 像 0 , &quot;&quot; , false , null , undefined 等值会得到默认值,而不是传递的参数</span></span><br><span class="line">  <span class="comment">// 默认值写法二:</span></span><br><span class="line">  arg1 = arg1 || <span class="string">&quot;我是默认值&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>, <span class="number">321</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">0</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">false</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">null</span>) <span class="comment">// 我是默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>) <span class="comment">// 我是默认值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>严谨的写法:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg1</span>) &#123;</span><br><span class="line">  <span class="comment">// 2.1 严谨的写法</span></span><br><span class="line">  <span class="comment">// 三元运算符</span></span><br><span class="line">  arg1 = (arg1 === <span class="literal">undefined</span> || arg1 === <span class="literal">null</span>) ? <span class="string">&quot;我是默认值&quot;</span> : arg1</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>, <span class="number">321</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 我是默认值           </span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// &quot;&quot; 空字符串</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">null</span>) <span class="comment">// 我是默认值       </span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>) <span class="comment">// 我是默认值 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg1</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.2 ES6之后新增语法: ??</span></span><br><span class="line">    arg1 = arg1 ?? <span class="string">&quot;我是默认值&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="number">123</span>, <span class="number">321</span>) <span class="comment">// 123</span></span><br><span class="line">  <span class="title function_">foo</span>() <span class="comment">// 我是默认值           // 不传参就会使用默认值</span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="number">0</span>) <span class="comment">// 0                  </span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// &quot;&quot; 空字符串</span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="literal">null</span>) <span class="comment">// 我是默认值       // null 会被判为空</span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="literal">undefined</span>) <span class="comment">// 我是默认值 // undefined 会被判为空</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg1 = <span class="string">&quot;我是默认值&quot;</span>, arg2 = <span class="string">&quot;我也是默认值&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 3.简便的写法: 默认参数,在形参使用默认值, 注意: 默认参数是不会对null进行处理的</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>, <span class="number">321</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 我是默认值 , 没有传实参而使用默认值</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// &quot;&quot; 空字符串</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">null</span>) <span class="comment">// null</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>) <span class="comment">// 我是默认值 , undefined 会被判为没有传实参而使用默认值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认值也可以和解构一起来使用：</li>
<li>另外参数的默认值我们通常会将其放到最后（在很多语言中，如果不放到最后其实会报错的）：</li>
<li>但是JavaScript允许不将其放到最后，但是意味着还是会按照顺序来匹配；</li>
<li>另外默认值会改变函数的length的个数，默认值以及后面的参数都不计算在length之内了。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.解构的回顾</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name = <span class="string">&quot;kobe&quot;</span>, age = <span class="number">18</span> &#125; = obj  <span class="comment">// 对对象解构的同时赋予默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">// why 18</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.1 函数的默认值是一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj = &#123; name: <span class="string">&quot;why&quot;</span>, age: <span class="number">18</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// why 18  函数调用,不传参</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;qwe&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">height</span>: <span class="number">1.88</span> &#125;) <span class="comment">// qwe 20  函数调用,并传递实参</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.2 函数的默认值是一个对象,同时进行解构</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123; name, age &#125; = &#123; name: <span class="string">&quot;why&quot;</span>, age: <span class="number">18</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// why 18  函数调用,不传参</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;abc&quot;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">height</span>: <span class="number">1.88</span> &#125;) <span class="comment">// abc 19  函数调用,并传递参数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.3 函数的默认值是一个空对象,同时进行解构</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123; name = <span class="string">&quot;why&quot;</span>, age = <span class="number">18</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// why 18  函数调用,不传参</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;qwe&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">height</span>: <span class="number">1.88</span> &#125;) <span class="comment">// qwe 20  函数调用,并传递参数</span></span><br></pre></td></tr></table></figure>

<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><ul>
<li>ES6中引用了rest parameter，可以将不定数量的参数放入到一个数组中：<ul>
<li>如果最后一个参数是 … 为前缀的，那么它会将剩余的参数放到该参数中，并且作为一个数组；</li>
</ul>
</li>
<li>那么剩余参数和arguments有什么区别呢？<ul>
<li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参；</li>
<li>arguments对象不是一个真正的数组，而rest参数是一个真正的数组，可以进行数组的所有操作；</li>
<li>arguments是早期的ECMAScript中为了方便去获取所有的参数提供的一个数据结构，而rest参数是ES6中提供并且希望以此来替代arguments的；</li>
<li>注意：剩余参数必须放到最后一个位置，否则会报错。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.function定义的函数是有两个原型的:</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// new foo() -&gt; f.__proto__ = foo.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">__proto__</span>) <span class="comment">// -&gt; Function.prototype</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.箭头函数是没有显式原型</span></span><br><span class="line"><span class="comment">// 在ES6之后, 定义一个类要使用class定义</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 没有显式原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// var b = new bar() // 报错 bar is not a constructor</span></span><br></pre></td></tr></table></figure>

<h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><h3 id="展开语法-1"><a href="#展开语法-1" class="headerlink" title="展开语法"></a>展开语法</h3><ul>
<li>展开语法(Spread syntax)：<ul>
<li>可以在函数调用&#x2F;数组构造时，将数组表达式或者string在语法层面展开；</li>
<li>还可以在构造字面量对象时, 将对象表达式按key-value的方式展开；</li>
</ul>
</li>
<li>展开语法的场景：<ul>
<li>在函数调用时使用；</li>
<li>在数组构造时使用；</li>
<li>在构建对象字面量时，也可以使用展开运算符，这个是在ES2018（ES9）中添加的新特性；</li>
</ul>
</li>
<li>注意：展开运算符其实是一种浅拷贝；</li>
</ul>
<h3 id="数组展开"><a href="#数组展开" class="headerlink" title="数组展开"></a>数组展开</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="comment">// 1.1 将一个数组展开</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">const</span> newNames = [...names, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNames) <span class="comment">//  [&#x27;abc&#x27;, &#x27;cba&#x27;, &#x27;nba&#x27;, &#x27;mba&#x27;, &#x27;aaa&#x27;, &#x27;bbb&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.2 函数调用时,将数组或字符串展开作为实参使用</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name1, name2, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name2, args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(...names) <span class="comment">// abc cba  [&#x27;nba&#x27;, &#x27;mba&#x27;]</span></span><br><span class="line"><span class="title function_">foo</span>(...str) <span class="comment">// H e [&#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="对象展开"><a href="#对象展开" class="headerlink" title="对象展开"></a>对象展开</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES9(ES2018)  在构建对象字面量时，也可以使用展开运算符，这个是在ES2018（ES9）中添加的新特性；</span></span><br><span class="line"><span class="comment">// 2.1 在一个函数调用时,对一个对象进行展开作为形参使用,会报错,不可以这样来使用</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name1, name2, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name2, args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在函数的调用时, 用展开运算符, 将对应的展开数据, 进行迭代  可迭代对象: 数组/string/arguments</span></span><br><span class="line"><span class="title function_">foo</span>(...obj) <span class="comment">// 报错 Found non-callable @@iterator</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.2 在构建一个对象字面量时,可以将已有的对象展开作为另一个对象的属性和属性值</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  ...obj,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&quot;广州市&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info) <span class="comment">// &#123;name: &#x27;why&#x27;, age: 18, height: 1.88, address: &#x27;广州市&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引用赋值 , 赋值的是引用的内存地址</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;curry&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> info1 = obj <span class="comment">// info1 和 obj 是同一个对象 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info1) <span class="comment">// &#123;name: &#x27;why&#x27;, age: 18, height: 1.88, friend: &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.浅拷贝  </span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;curry&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> info2 = &#123;</span><br><span class="line">  <span class="comment">// 展开运算符其实是一种浅拷贝；info2 对象会开辟新的内存空间,将 obj 对象的属性和属性值拷贝到 info2 中作为属性使用</span></span><br><span class="line">  <span class="comment">// 若原对象 obj 中还有对象,则拷贝的是引用的内存地址,,此时obj和info2对象的 firend 对象是同一个对象. (相当于赋值引用的内存地址)</span></span><br><span class="line">  ...obj,</span><br><span class="line">&#125;</span><br><span class="line">info2.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span> <span class="comment">// 修改 info2 的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info2.<span class="property">name</span>) <span class="comment">// kobe </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// why  原对象 obj 的属性并没有被更改 </span></span><br><span class="line">info2.<span class="property">friend</span>.<span class="property">name</span> = <span class="string">&quot;james&quot;</span> <span class="comment">// 修改 info2 对象中 friend 对象的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">friend</span>.<span class="property">name</span>) <span class="comment">// james 原对象 obj 的属性会被更改,因为拷贝时拷贝的是引用的内存地址 </span></span><br></pre></td></tr></table></figure>

<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.深拷贝</span></span><br><span class="line"><span class="comment">// 方式一: 第三方库</span></span><br><span class="line"><span class="comment">// 方式二: 自己实现</span></span><br><span class="line"><span class="comment">// function deepCopy(obj) &#123;&#125;</span></span><br><span class="line"><span class="comment">// 方式三: 利用先有的js机制, 实现深拷贝JSON</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;curry&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> info3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)) <span class="comment">// 将一个对象转为字符串型,再转回对象,可以实现深拷贝(在转回对象时就会开辟新的内存空间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info3.<span class="property">friend</span>.<span class="property">name</span>) <span class="comment">// curry</span></span><br><span class="line">info3.<span class="property">friend</span>.<span class="property">name</span> = <span class="string">&quot;james&quot;</span> <span class="comment">// 修改新对象 info3 中的 friend 对象中的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info3.<span class="property">friend</span>.<span class="property">name</span>) <span class="comment">// james</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">friend</span>.<span class="property">name</span>) <span class="comment">// curry 相当于从obj拷贝出一新的对象,新旧两个对象之间互相不干扰</span></span><br></pre></td></tr></table></figure>

<h2 id="进制与数值的表示"><a href="#进制与数值的表示" class="headerlink" title="进制与数值的表示"></a>进制与数值的表示</h2><h3 id="进制的表示"><a href="#进制的表示" class="headerlink" title="进制的表示"></a>进制的表示</h3><p>在ES6中规范了二进制和八进制的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>) <span class="comment">// 100   十进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b100</span>) <span class="comment">// 4   二进制, 0b开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0o100</span>) <span class="comment">// 64   八进制, 0o开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0x100</span>) <span class="comment">// 256  十六进制, 0x开头</span></span><br></pre></td></tr></table></figure>

<h3 id="数值的表示"><a href="#数值的表示" class="headerlink" title="数值的表示"></a>数值的表示</h3><p>另外在ES2021新增特性：数字过长时，可以使用_作为连接符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.长数字的表示,下划线的位置不能放到开头,仅可用于数字中,便于阅读,对多少个0就分隔一次没有限制</span></span><br><span class="line"><span class="keyword">const</span> money1 = <span class="number">100_00_00_0000_00_00</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(money1) <span class="comment">// 100000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> money2 = <span class="number">100_0000_0000_0000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(money2) <span class="comment">// 100000000000000</span></span><br></pre></td></tr></table></figure>

<h2 id="Symbol的使用"><a href="#Symbol的使用" class="headerlink" title="Symbol的使用"></a>Symbol的使用</h2><h3 id="Symbol的基本使用"><a href="#Symbol的基本使用" class="headerlink" title="Symbol的基本使用"></a>Symbol的基本使用</h3><ul>
<li>Symbol是什么呢？Symbol是ES6中新增的一个基本数据类型，翻译为符号。</li>
<li>那么为什么需要Symbol呢？<ul>
<li>在ES6之前，对象的属性名都是字符串形式，那么很容易造成属性名的冲突；</li>
<li>比如原来有一个对象，我们希望在其中添加一个新的属性和值，但是我们在不确定它原来内部有什么内容的情况下，很容易造成冲突，从而覆盖掉它内部的某个属性；</li>
<li>比如我们前面在讲apply、call、bind实现时，我们有给其中添加一个fn属性，那么如果它内部原来已经有了fn属性了呢？</li>
<li>比如开发中我们使用混入，那么混入中出现了同名的属性，必然有一个会被覆盖掉；</li>
</ul>
</li>
<li>Symbol就是为了解决上面的问题，用来生成一个独一无二的值。<ul>
<li>Symbol值是通过Symbol函数来生成的，生成后可以作为属性名；</li>
<li>也就是在ES6中，对象的属性名可以使用字符串，也可以使用Symbol值；</li>
</ul>
</li>
<li>Symbol即使多次创建值，它们也是不同的：Symbol函数执行后每次创建出来的值都是独一无二的；</li>
<li>我们也可以在创建Symbol值的时候传入一个描述description：这个是ES2019（ES10）新增的特性；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6之前存在的问题: (命名冲突问题)</span></span><br><span class="line"><span class="comment">// 比如原来有一个对象，我们希望在其中添加一个新的属性和值，但是我们在不确定它原来内部有什么内容的情况下，很容易造成冲突，从而覆盖掉它内部的某个属性；</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给obj对象添加一个新的属性 name</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125; <span class="comment">// 不确定 obj 对象中是否已经存在 fn 属性,如已经存在,则会被覆盖. (命名冲突问题)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;name: &#x27;why&#x27;, fn: ƒ&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">fn</span>) <span class="comment">// ƒ () &#123; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol作为属性名"><a href="#Symbol作为属性名" class="headerlink" title="Symbol作为属性名"></a>Symbol作为属性名</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6之后可以使用Symbol生成一个独一无二的值</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>(); <span class="comment">// 调用 Symbol 函数生成一个独一无二的值</span></span><br><span class="line"><span class="comment">// const info = &#123; name: &quot;why&quot; &#125; // 不能将对象作为另一个对象的 key. 若使用,则会将对象转为字符串作为 key 使用,结果例如: &#123;[object Object]: &#x27;aaa&#x27;&#125;</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [s1]: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;Symbol(): &#x27;aaa&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>() <span class="comment">// 调用 Symbol 函数生成一个独一无二的值</span></span><br><span class="line">obj[s2] = <span class="string">&quot;bbb&quot;</span> <span class="comment">// 修改对象中的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;Symbol(): &#x27;aaa&#x27;, Symbol(): &#x27;bbb&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sKey = <span class="title class_">Symbol</span>() <span class="comment">// 调用 Symbol 函数生成一个独一无二的值</span></span><br><span class="line">  obj[sKey] = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125; <span class="comment">// 修改对象中的属性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;Symbol(): &#x27;aaa&#x27;, Symbol(): &#x27;bbb&#x27;, Symbol(): ƒ&#125;</span></span><br><span class="line">  <span class="keyword">delete</span> obj[sKey] <span class="comment">// 删除对象中的属性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;Symbol(): &#x27;aaa&#x27;, Symbol(): &#x27;bbb&#x27;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(obj)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.1 将生成的唯一值加入对象中,作为属性使用</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  [s1]: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">  [s2]: <span class="string">&quot;bbb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;name: &#x27;why&#x27;, age: 18, Symbol(): &#x27;aaa&#x27;, Symbol(): &#x27;bbb&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;</span><br><span class="line">obj1[s1] = <span class="string">&quot;aaa&quot;</span></span><br><span class="line">obj1[s2] = <span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1) <span class="comment">// &#123;Symbol(): &#x27;aaa&#x27;, Symbol(): &#x27;bbb&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2, s1, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2) <span class="comment">// &#123;Symbol(): &#x27;aaa&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.获取symbol对应的key</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  [s1]: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">  [s2]: <span class="string">&quot;bbb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) <span class="comment">// [&#x27;name&#x27;, &#x27;age&#x27;]  获取到指定对象的 key ,但是获取不到 symbol 类型的 key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)) <span class="comment">// [Symbol(), Symbol()] 获取指定对象中 symbol 类型的 key,获取不到普通的 key</span></span><br><span class="line"><span class="comment">// 根据 symbol 类型的 key 获取到对应的属性值:</span></span><br><span class="line"><span class="keyword">const</span> symbolKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> symbolKeys) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]) <span class="comment">// aaa / bbb</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="相同值的Symbol"><a href="#相同值的Symbol" class="headerlink" title="相同值的Symbol"></a>相同值的Symbol</h3><ul>
<li>前面我们讲Symbol的目的是为了创建一个独一无二的值，那么如果我们现在就是想创建相同的Symbol应该怎么来做呢？<ul>
<li>我们可以使用Symbol.for方法来做到这一点；</li>
<li>并且我们可以通过Symbol.keyFor方法来获取对应的key；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.description</span></span><br><span class="line"><span class="comment">// 3.1. Symbol函数直接生成的值, 都是独一无二</span></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;ccc&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="property">description</span>) <span class="comment">// ccc</span></span><br><span class="line"><span class="keyword">const</span> s4 = <span class="title class_">Symbol</span>(s3.<span class="property">description</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3 === s4) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2. 通过 Symbol.for 可以生成相同的 Symbol 值</span></span><br><span class="line"><span class="keyword">const</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> s6 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s5 === s6) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.3 获取传入的key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s5)) <span class="comment">// ddd</span></span><br></pre></td></tr></table></figure>

<h2 id="Set的使用"><a href="#Set的使用" class="headerlink" title="Set的使用"></a>Set的使用</h2><h3 id="Set的基本使用"><a href="#Set的基本使用" class="headerlink" title="Set的基本使用"></a>Set的基本使用</h3><ul>
<li><p>在ES6之前，我们存储数据的结构主要有两种：数组、对象。</p>
<ul>
<li>在ES6中新增了另外两种数据结构：Set、Map，以及它们的另外形式WeakSet、WeakMap。</li>
</ul>
</li>
<li><p>Set是一个新增的数据结构，可以用来保存数据，类似于数组，但是和数组的区别是元素不能重复。</p>
<ul>
<li>创建Set我们需要通过Set构造函数（暂时没有字面量创建的方式）：</li>
<li>我们可以发现Set中存放的元素是不会重复的，那么Set有一个非常常用的功能就是给数组去重。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建Set</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set) <span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 2.添加元素   </span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">  set.<span class="title function_">add</span>(<span class="number">10</span>)</span><br><span class="line">  set.<span class="title function_">add</span>(<span class="number">22</span>)</span><br><span class="line">  set.<span class="title function_">add</span>(<span class="number">35</span>)</span><br><span class="line">  set.<span class="title function_">add</span>(<span class="number">22</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(set) <span class="comment">// Set(3) &#123;10, 22, 35&#125;</span></span><br><span class="line">  <span class="keyword">const</span> info = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>&#125;</span><br><span class="line">  set.<span class="title function_">add</span>(info)</span><br><span class="line">  set.<span class="title function_">add</span>(obj)</span><br><span class="line">  set.<span class="title function_">add</span>(obj)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(set) <span class="comment">// Set(5) &#123;10, 22, 35, &#123;…&#125;, &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.应用场景: 数组的去重</span></span><br><span class="line"><span class="comment">// 数组去重方法一:</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> newNames = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> names) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!newNames.<span class="title function_">includes</span>(item)) &#123;</span><br><span class="line">    newNames.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNames)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重方法二:</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> newNamesSet = <span class="keyword">new</span> <span class="title class_">Set</span>(names)</span><br><span class="line"><span class="keyword">const</span> newNames = <span class="title class_">Array</span>.<span class="title function_">from</span>(newNamesSet) <span class="comment">// 将 set 对象转为数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNames) <span class="comment">// [&#x27;abc&#x27;, &#x27;cba&#x27;, &#x27;nba&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Set的常见方法"><a href="#Set的常见方法" class="headerlink" title="Set的常见方法"></a>Set的常见方法</h3><ul>
<li>Set常见的属性：<ul>
<li>size：返回Set中元素的个数；</li>
</ul>
</li>
<li>Set常用的方法：<ul>
<li>add(value)：添加某个元素，返回Set对象本身；</li>
<li>delete(value)：从set中删除和这个值相等的元素，返回boolean类型；</li>
<li>has(value)：判断set中是否存在某个元素，返回boolean类型；</li>
<li>clear()：清空set中所有的元素，没有返回值；</li>
<li>forEach(callback, [, thisArg])：通过forEach遍历set；</li>
</ul>
</li>
<li>另外Set是支持for of的遍历的。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.Set的其他属性和方法</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="comment">// 4.0 size 属性: 对象的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="comment">// 4.1. add方法 往 set 对象中添加属性</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> info = &#123;&#125;</span><br><span class="line">set.<span class="title function_">add</span>(obj)</span><br><span class="line">set.<span class="title function_">add</span>(info)</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set) <span class="comment">// Set(3) &#123;&#123;…&#125;, &#123;…&#125;, 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.2. delete方法 删除 set 对象中的某个属性</span></span><br><span class="line">set.<span class="title function_">delete</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set) <span class="comment">// Set(2) &#123;&#123;…&#125;, 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.3. has方法 判断 set 对象中是否包含有指定的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(info)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.4. clear方法 清空 set 对象</span></span><br><span class="line"><span class="comment">// set.clear()</span></span><br><span class="line"><span class="comment">// console.log(set) // Set(0) &#123;size: 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.5. forEach 遍历 set 对象</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item)) <span class="comment">// &#123;&#125; / 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. set 支持 for...of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// &#123;&#125; / 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WeakSet的使用"><a href="#WeakSet的使用" class="headerlink" title="WeakSet的使用"></a>WeakSet的使用</h2><h3 id="WeakSet的使用-1"><a href="#WeakSet的使用-1" class="headerlink" title="WeakSet的使用"></a>WeakSet的使用</h3><ul>
<li>和Set类似的另外一个数据结构称之为WeakSet，也是内部元素不能重复的数据结构。</li>
<li>那么和Set有什么区别呢？<ul>
<li>区别一：WeakSet中只能存放对象类型，不能存放基本数据类型；</li>
<li>区别二：WeakSet对元素的引用是弱引用，如果没有其他引用对某个对象进行引用，那么GC可以对该对象进行回收；</li>
</ul>
</li>
<li>WeakSet常见的方法：<ul>
<li>add(value)：添加某个元素，返回WeakSet对象本身；</li>
<li>delete(value)：从WeakSet中删除和这个值相等的元素，返回boolean类型；</li>
<li>has(value)：判断WeakSet中是否存在某个元素，返回boolean类型；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.Weak Reference(弱引用) 和 Strong Reference(强引用)</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&quot;jame&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [obj1, obj2, obj3]</span><br><span class="line">obj1 = <span class="literal">null</span> <span class="comment">// 此处将 obj1 赋值为 null,但是 arr 还在引用该对象的内存地址,因此不会被回收</span></span><br><span class="line">obj2 = <span class="literal">null</span> <span class="comment">// 同上</span></span><br><span class="line">obj3 = <span class="literal">null</span> <span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(3) &#123;&#123;…&#125;, &#123;…&#125;, &#123;…&#125;&#125;</span></span><br><span class="line">arr = <span class="literal">null</span> <span class="comment">// 此时将 arr 赋值 null , obj1,obj2,obj3 的内存地址不再被其他对象引用,就会被回收</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.WeakSet的用法</span></span><br><span class="line"><span class="comment">// 2.1 和Set的区别一: 只能存放对象类型,放其他类型的数据会报错</span></span><br><span class="line"><span class="comment">// 2.2 和Set的区别二: 对对象的引用都是弱引用,添加的对象将会被回收</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&quot;jame&quot;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>()</span><br><span class="line">weakSet.<span class="title function_">add</span>(obj1) <span class="comment">// obj1 将会被回收</span></span><br><span class="line">weakSet.<span class="title function_">add</span>(obj2) <span class="comment">// 同上</span></span><br><span class="line">weakSet.<span class="title function_">add</span>(obj3) <span class="comment">// 同上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet); <span class="comment">// WeakSet &#123;&#123;…&#125;, &#123;…&#125;, &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="WeakSet的应用"><a href="#WeakSet的应用" class="headerlink" title="WeakSet的应用"></a>WeakSet的应用</h3><ul>
<li>注意：WeakSet不能遍历<ul>
<li>因为WeakSet只是对对象的弱引用，如果我们遍历获取到其中的元素，那么有可能造成对象不能正常的销毁。</li>
<li>所以存储到WeakSet中的对象是没办法获取的；</li>
</ul>
</li>
<li>那么这个东西有什么用呢？<ul>
<li>事实上这个问题并不好回答，我们来使用一个Stack Overflow上的答案；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.WeakSet的应用</span></span><br><span class="line"><span class="keyword">const</span> pWeakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    pWeakSet.<span class="title function_">add</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pWeakSet.<span class="title function_">has</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Type error: 调用的方式不对&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;running~&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// p = null</span></span><br><span class="line">p.<span class="title function_">running</span>()</span><br><span class="line"><span class="keyword">const</span> runFn = p.<span class="property">running</span></span><br><span class="line"><span class="title function_">runFn</span>()</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">run</span>: runFn &#125;</span><br><span class="line">obj.<span class="title function_">run</span>()</span><br></pre></td></tr></table></figure>

<h2 id="Map的使用"><a href="#Map的使用" class="headerlink" title="Map的使用"></a>Map的使用</h2><h3 id="Map的基本使用"><a href="#Map的基本使用" class="headerlink" title="Map的基本使用"></a>Map的基本使用</h3><ul>
<li>另外一个新增的数据结构是Map，用于存储映射关系。</li>
<li>但是我们可能会想，在之前我们可以使用对象来存储映射关系，他们有什么区别呢？</li>
<li>事实上我们对象存储映射关系只能用字符串（ES6新增了Symbol）作为属性名（key）；</li>
<li>某些情况下我们可能希望通过其他类型作为key，比如对象，这个时候会自动将对象转成字符串来作为key；</li>
<li>那么我们就可以使用Map：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.对象类型的局限性: 不可以使用复杂类型作为key</span></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> info2 = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&quot;北京市&quot;</span>,</span><br><span class="line">  [info]: <span class="string">&quot;哈哈哈&quot;</span>,</span><br><span class="line">  [info2]: <span class="string">&quot;呵呵呵&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;address: &#x27;北京市&#x27;, [object Object]: &#x27;呵呵呵&#x27;&#125;  ,若写多个这样的 key,会使用后面的那个 key 和 值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.Map映射类型</span></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> info2 = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(info, <span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(info2, <span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// Map(2) &#123;&#123;…&#125; =&gt; &#x27;aaaa&#x27;, &#123;…&#125; =&gt; &#x27;bbbb&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Map的常用方法"><a href="#Map的常用方法" class="headerlink" title="Map的常用方法"></a>Map的常用方法</h3><ul>
<li>Map常见的属性：<ul>
<li>size：返回Map中元素的个数；</li>
</ul>
</li>
<li>Map常见的方法：<ul>
<li>set(key, value)：在Map中添加key、value，并且返回整个Map对象；</li>
<li>get(key)：根据key获取Map中的value；</li>
<li>has(key)：判断是否包括某一个key，返回Boolean类型；</li>
<li>delete(key)：根据key删除一个键值对，返回Boolean类型；</li>
<li>clear()：清空所有的元素；</li>
<li>forEach(callback, [, thisArg])：通过forEach遍历Map；</li>
</ul>
</li>
<li>Map也可以通过for of进行遍历。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.Map的常见属性和方法</span></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> info2 = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.0 map 对象的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.1. set方法, 设置内容</span></span><br><span class="line">map.<span class="title function_">set</span>(info, <span class="string">&quot;cccc&quot;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(info2, <span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// Map(2) &#123;&#123;…&#125; =&gt; &#x27;cccc&#x27;, &#123;…&#125; =&gt; &#x27;bbbb&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2. get方法, 获取内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(info)) <span class="comment">// cccc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.3. delete方法, 删除内容</span></span><br><span class="line">map.<span class="title function_">delete</span>(info)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// Map(1) &#123;&#123;…&#125; =&gt; &#x27;bbbb&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.4. has方法, 判断内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(info2)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.5. clear方法, 清空内容</span></span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// Map(0) &#123;size: 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.6. forEach方法</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.for...of遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="keyword">const</span> [key, value] = item</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WeakMap的使用"><a href="#WeakMap的使用" class="headerlink" title="WeakMap的使用"></a>WeakMap的使用</h2><h3 id="WeakMap的使用-1"><a href="#WeakMap的使用-1" class="headerlink" title="WeakMap的使用"></a>WeakMap的使用</h3><ul>
<li>和Map类型的另外一个数据结构称之为WeakMap，也是以键值对的形式存在的。</li>
<li>那么和Map有什么区别呢？<ul>
<li>区别一：WeakMap的key只能使用对象，不接受其他的类型作为key；</li>
<li>区别二：WeakMap的key对对象想的引用是弱引用，如果没有其他引用引用这个对象，那么GC可以回收该对象；</li>
</ul>
</li>
<li>WeakMap常见的方法有四个：<ul>
<li>set(key, value)：在Map中添加key、value，并且返回整个Map对象；</li>
<li>get(key)：根据key获取Map中的value；</li>
<li>has(key)：判断是否包括某一个key，返回Boolean类型；</li>
<li>delete(key)：根据key删除一个键值对，返回Boolean类型；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.WeakMap的基本使用</span></span><br><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="comment">// weakMap.set(123, &quot;aaa&quot;) // 报错,WeakMap的key只能使用对象，不接受其他的类型作为key</span></span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&quot;bbb&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj1 = <span class="literal">null</span> <span class="comment">// 回收obj1</span></span><br><span class="line">obj2 = <span class="literal">null</span> <span class="comment">// 回收obj2</span></span><br></pre></td></tr></table></figure>

<h3 id="WeakMap的应用"><a href="#WeakMap的应用" class="headerlink" title="WeakMap的应用"></a>WeakMap的应用</h3><ul>
<li>注意：WeakMap也是不能遍历的</li>
<li>没有forEach方法，也不支持通过for of的方式进行遍历；</li>
<li>那么我们的WeakMap有什么作用呢？（后续专门讲解）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ES6-的其他说明"><a href="#ES6-的其他说明" class="headerlink" title="ES6 的其他说明"></a>ES6 的其他说明</h2><ul>
<li>事实上ES6（ES2015）是一次非常大的版本更新，所以里面重要的特性非常多：</li>
<li>除了前面讲到的特性外还有很多其他特性；<ul>
<li>Proxy、Reflect，我们会在后续专门进行学习。</li>
<li>并且会利用Proxy、Reflect来讲解Vue3的响应式原理；</li>
</ul>
</li>
<li>Promise，用于处理异步的解决方案<ul>
<li>后续会详细学习；</li>
<li>并且会学习如何手写Promise；</li>
</ul>
</li>
<li>ES Module模块化开发：<ul>
<li>从ES6开发，JavaScript可以进行原生的模块化开发；</li>
<li>这部分内容会在工程化部分学习；</li>
<li>包括其他模块化方案：CommonJS、AMD、CMD等方案；</li>
</ul>
</li>
</ul>
<h2 id="ES7-ES13"><a href="#ES7-ES13" class="headerlink" title="ES7-ES13"></a>ES7-ES13</h2><h3 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h3><h4 id="Array-Includes"><a href="#Array-Includes" class="headerlink" title="Array Includes"></a>Array Includes</h4><ul>
<li>在ES7之前，如果我们想判断一个数组中是否包含某个元素，需要通过 indexOf 获取结果，并且判断是否为 -1。</li>
<li>在ES7中，我们可以通过includes来判断一个数组中是否包含一个指定的元素，根据情况，如果包含则返回 true，否则返回false。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h4><ul>
<li>在ES7之前，计算数字的乘方需要通过 Math.pow 方法来完成。</li>
<li>在ES7中，增加了<code> **</code> 运算符，可以对数字来计算乘方。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h3><h4 id="Object-values"><a href="#Object-values" class="headerlink" title="Object values"></a>Object values</h4><ul>
<li>之前我们可以通过 Object.keys 获取一个对象所有的key</li>
<li>在ES8中提供了 Object.values 来获取所有的value值：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object entries"></a>Object entries</h4><ul>
<li>通过 Object.entries 可以获取到一个数组，数组中会存放可枚举属性的键值对数组。</li>
<li>可以针对对象、数组、字符串进行操作；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="String-Padding"><a href="#String-Padding" class="headerlink" title="String Padding"></a>String Padding</h4><ul>
<li>某些字符串我们需要对其进行前后的填充，来实现某种格式化效果，ES8中增加了 padStart 和 padEnd 方法，分别是对字符串的首尾进行填充的。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>我们简单具一个应用场景：比如需要对身份证、银行卡的前面位数进行隐藏：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Trailing-Commas"><a href="#Trailing-Commas" class="headerlink" title="Trailing Commas"></a>Trailing Commas</h4><ul>
<li>在ES8中，我们允许在函数定义和调用时多加一个逗号：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Object-Descriptors"><a href="#Object-Descriptors" class="headerlink" title="Object Descriptors"></a>Object Descriptors</h4><ul>
<li>Object.getOwnPropertyDescriptors ：<ul>
<li>这个在之前已经讲过了，这里不再重复。</li>
</ul>
</li>
<li>Async Function：async、await<ul>
<li>后续讲完Promise讲解</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h3><ul>
<li>Async iterators：后续迭代器讲解</li>
<li>Object spread operators：前面讲过了</li>
<li>Promise finally：后续讲Promise讲解</li>
</ul>
<h3 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h3><h4 id="flat-flatMap"><a href="#flat-flatMap" class="headerlink" title="flat flatMap"></a>flat flatMap</h4><ul>
<li>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。<ul>
<li>注意一：flatMap是先进行map操作，再做flat的操作；</li>
<li>注意二：flatMap中的flat相当于深度为1；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object fromEntries"></a>Object fromEntries</h4><ul>
<li>在前面，我们可以通过 Object.entries 将一个对象转换成 entries</li>
<li>那么如果我们有一个entries了，如何将其转换成对象呢？</li>
<li>ES10提供了 Object.formEntries来完成转换：</li>
<li>那么这个方法有什么应用场景呢？</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="rimStart-trimEnd"><a href="#rimStart-trimEnd" class="headerlink" title="rimStart trimEnd"></a>rimStart trimEnd</h4><ul>
<li>去除一个字符串首尾的空格，我们可以通过trim方法，如果单独去除前面或者后面呢？</li>
<li>ES10中给我们提供了trimStart和trimEnd；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h4><ul>
<li>Symbol description：已经讲过了</li>
<li>Optional catch binding：后面讲解try cach讲解</li>
</ul>
<h3 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h3><h4 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h4><ul>
<li>在早期的JavaScript中，我们不能正确的表示过大的数字：<ul>
<li>大于MAX_SAFE_INTEGER的数值，表示的可能是不正确的。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>那么ES11中，引入了新的数据类型BigInt，用于表示大的整数：<ul>
<li>BitInt的表示方法是在数值的后面加上n</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="空值合并操作符"><a href="#空值合并操作符" class="headerlink" title="空值合并操作符"></a>空值合并操作符</h4><ul>
<li>ES11，Nullish Coalescing Operator增加了空值合并操作符：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h4><ul>
<li>可选链也是ES11中新增一个特性，主要作用是让我们的代码在进行null和undefined判断时更加清晰和简洁：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Global-This"><a href="#Global-This" class="headerlink" title="Global This"></a>Global This</h4><ul>
<li>在之前我们希望获取JavaScript环境的全局对象，不同的环境获取的方式是不一样的</li>
<li>比如在浏览器中可以通过this、window来获取；</li>
<li>比如在Node中我们需要通过global来获取；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在ES11中对获取全局对象进行了统一的规范：globalThis</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="for-in标准化"><a href="#for-in标准化" class="headerlink" title="for..in标准化"></a>for..in标准化</h4><ul>
<li>在ES11之前，虽然很多浏览器支持for…in来遍历对象类型，但是并没有被ECMA标准化。</li>
<li>在ES11中，对其进行了标准化，for…in是用于遍历对象的key的：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="其他内容-1"><a href="#其他内容-1" class="headerlink" title="其他内容"></a>其他内容</h4><ul>
<li>Dynamic Import：后续ES Module模块化中讲解。</li>
<li>Promise.allSettled：后续讲Promise的时候讲解。</li>
<li>import meta：后续ES Module模块化中讲解。</li>
</ul>
<h3 id="ES12"><a href="#ES12" class="headerlink" title="ES12"></a>ES12</h3><h4 id="FinalizationRegistry"><a href="#FinalizationRegistry" class="headerlink" title="FinalizationRegistry"></a>FinalizationRegistry</h4><ul>
<li>FinalizationRegistry 对象可以让你在对象被垃圾回收时请求一个回调。</li>
<li>FinalizationRegistry 提供了这样的一种方法：当一个在注册表中注册的对象被回收时，请求在某个时间点上调用一个清理回调。（清理回调有时被称为 finalizer ）;</li>
<li>你可以通过调用register方法，注册任何你想要清理回调的对象，传入该对象和所含的值;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="WeakRefs"><a href="#WeakRefs" class="headerlink" title="WeakRefs"></a>WeakRefs</h4><ul>
<li>如果我们默认将一个对象赋值给另外一个引用，那么这个引用是一个强引用：</li>
<li>如果我们希望是一个弱引用的话，可以使用WeakRef；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="其他内容-2"><a href="#其他内容-2" class="headerlink" title="其他内容"></a>其他内容</h4><ul>
<li>Numeric Separator：讲过了；</li>
<li>String.replaceAll：字符串替换；</li>
</ul>
<h3 id="ES13"><a href="#ES13" class="headerlink" title="ES13"></a>ES13</h3><h4 id="method-at"><a href="#method-at" class="headerlink" title="method.at()"></a>method.at()</h4><ul>
<li>前面我们有学过字符串、数组的at方法，它们是作为ES13中的新特性加入的：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Object-hasOwn"><a href="#Object-hasOwn" class="headerlink" title="Object.hasOwn()"></a>Object.hasOwn()</h4><ul>
<li>Object中新增了一个静态方法（类方法）： hasOwn(obj, propKey)<ul>
<li>该方法用于判断一个对象中是否有某个自己的属性；</li>
<li>那么和之前学习的Object.prototype.hasOwnProperty有什么区别呢？<ul>
<li>区别一：防止对象内部有重写hasOwnProperty</li>
<li>区别二：对于隐式原型指向null的对象， hasOwnProperty无法进行判断</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="class类成员字段"><a href="#class类成员字段" class="headerlink" title="class类成员字段"></a>class类成员字段</h4><ul>
<li>在ES13中，新增了定义class类中成员字段（field）的其他方式：<ul>
<li>Instance public fields</li>
<li>Static public fields</li>
<li>Instance private fields</li>
<li>static private fields</li>
<li>static block</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Proxy使用详解"><a href="#Proxy使用详解" class="headerlink" title="Proxy使用详解"></a>Proxy使用详解</h2><h3 id="监听对象的操作"><a href="#监听对象的操作" class="headerlink" title="监听对象的操作"></a>监听对象的操作</h3><ul>
<li><p>我们先来看一个需求：有一个对象，我们希望监听这个对象中的属性被设置或获取的过程</p>
<ul>
<li>通过我们前面所学的知识，能不能做到这一点呢？</li>
<li>其实是可以的，我们可以通过之前的属性描述符中的存储属性描述符来做到；</li>
</ul>
</li>
<li><p>左边这段代码就利用了前面讲过的 Object.defineProperty 的存储属性描述符来对属性的操作进行监听。<br>但是这样做有什么缺点呢？</p>
<ul>
<li>首先，Object.defineProperty设计的初衷，不是为了去监听截止一个对象中所有的属性的。<ul>
<li>我们在定义某些属性的时候，初衷其实是定义普通的属性，但是后面我们强行将它变成了数据属性描述符。</li>
</ul>
</li>
<li>其次，如果我们想监听更加丰富的操作，比如新增属性、删除属性，那么 Object.defineProperty是无能为力的。</li>
</ul>
</li>
<li><p>所以我们要知道，存储数据描述符设计的初衷并不是为了去监听一个完整的对象。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Proxy基本使用"><a href="#Proxy基本使用" class="headerlink" title="Proxy基本使用"></a>Proxy基本使用</h3><ul>
<li>在ES6中，新增了一个Proxy类，这个类从名字就可以看出来，是用于帮助我们创建一个代理的：</li>
<li>也就是说，如果我们希望监听一个对象的相关操作，那么我们可以先创建一个代理对象（Proxy对象）；</li>
<li>之后对该对象的所有操作，都通过代理对象来完成，代理对象可以监听我们想要对原对象进行哪些操作；</li>
<li>我们可以将上面的案例用Proxy来实现一次：<ul>
<li>首先，我们需要new Proxy对象，并且传入需要侦听的对象以及一个处理对象，可以称之为handler；<ul>
<li><code>const p = new Proxy(target, handler)</code></li>
</ul>
</li>
</ul>
</li>
<li>其次，我们之后的操作都是直接对Proxy的操作，而不是原有的对象，因为我们需要在handler里面进行侦听；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Proxy的set和get捕获器"><a href="#Proxy的set和get捕获器" class="headerlink" title="Proxy的set和get捕获器"></a>Proxy的set和get捕获器</h3><ul>
<li><p>如果我们想要侦听某些具体的操作，那么就可以在handler中添加对应的捕捉器（Trap）：</p>
</li>
<li><p>set和get分别对应的是函数类型；</p>
<ul>
<li>set函数有四个参数：<ul>
<li>target：目标对象（侦听的对象）；</li>
<li>property：将被设置的属性key；</li>
<li>value：新属性值；</li>
<li>receiver：调用的代理对象；</li>
</ul>
</li>
<li>get函数有三个参数：<ul>
<li>target：目标对象（侦听的对象）；</li>
<li>property：被获取的属性key；</li>
<li>receiver：调用的代理对象；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Proxy的所有捕获器"><a href="#Proxy的所有捕获器" class="headerlink" title="Proxy的所有捕获器"></a>Proxy的所有捕获器</h3><p><img src="https://s1.vika.cn/space/2023/02/26/5efd6284e2674a76a4001d387a529641" alt="1674720558176"></p>
<h3 id="construct和apply"><a href="#construct和apply" class="headerlink" title="construct和apply"></a>construct和apply</h3><ul>
<li>当然，我们还会看到捕捉器中还有construct和apply，它们是应用于函数对象的：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Reflect使用详解"><a href="#Reflect使用详解" class="headerlink" title="Reflect使用详解"></a>Reflect使用详解</h2><h3 id="Reflect的作用"><a href="#Reflect的作用" class="headerlink" title="Reflect的作用"></a>Reflect的作用</h3><ul>
<li>Reflect也是ES6新增的一个API，它是一个对象，字面的意思是反射。</li>
<li>那么这个Reflect有什么用呢？<ul>
<li>它主要提供了很多操作JavaScript对象的方法，有点像Object中操作对象的方法；</li>
<li>比如Reflect.getPrototypeOf(target)类似于 Object.getPrototypeOf()；</li>
<li>比如Reflect.defineProperty(target, propertyKey, attributes)类似于Object.defineProperty() ；</li>
</ul>
</li>
<li>如果我们有Object可以做这些操作，那么为什么还需要有Reflect这样的新增对象呢？<ul>
<li>这是因为在早期的ECMA规范中没有考虑到这种对 对象本身 的操作如何设计会更加规范，所以将这些API放到了Object上面；</li>
<li>但是Object作为一个构造函数，这些操作实际上放到它身上并不合适；</li>
<li>另外还包含一些类似于 in、delete操作符，让JS看起来是会有一些奇怪的；</li>
<li>所以在ES6中新增了Reflect，让我们这些操作都集中到了Reflect对象上；</li>
<li>另外在使用Proxy时，可以做到不操作原对象；</li>
</ul>
</li>
<li>那么Object和Reflect对象之间的API关系，可以参考MDN文档：<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/Comparing_Reflect_and_Object_methods">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/Comparing_Reflect_and_Object_methods</a></li>
</ul>
</li>
</ul>
<h3 id="Reflect的常见方法"><a href="#Reflect的常见方法" class="headerlink" title="Reflect的常见方法"></a>Reflect的常见方法</h3><p><img src="https://s1.vika.cn/space/2023/02/26/bf91345b42444b71b9ebe5a941459449" alt="1674720719657"></p>
<h3 id="Reflect的使用"><a href="#Reflect的使用" class="headerlink" title="Reflect的使用"></a>Reflect的使用</h3><ul>
<li>那么我们可以将之前Proxy案例中对原对象的操作，都修改为Reflect来操作：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Receiver的作用"><a href="#Receiver的作用" class="headerlink" title="Receiver的作用"></a>Receiver的作用</h3><ul>
<li>我们发现在使用getter、setter的时候有一个receiver的参数，它的作用是什么呢？<ul>
<li>如果我们的源对象（obj）有setter、getter的访问器属性，那么可以通过receiver来改变里面的this；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Reflect的construct"><a href="#Reflect的construct" class="headerlink" title="Reflect的construct"></a>Reflect的construct</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="迭代器与生成器详解"><a href="#迭代器与生成器详解" class="headerlink" title="迭代器与生成器详解"></a>迭代器与生成器详解</h2><h3 id="什么是迭代器"><a href="#什么是迭代器" class="headerlink" title="什么是迭代器"></a>什么是迭代器</h3><ul>
<li>迭代器（iterator），使用户在容器对象（container，例如链表或数组）上遍访的对象，使用该接口无需关心对象的内部实现细节。<ul>
<li>其行为像数据库中的光标，迭代器最早出现在1974年设计的CLU编程语言中；</li>
<li>在各种编程语言的实现中，迭代器的实现方式各不相同，但是基本都有迭代器，比如Java、Python等；</li>
</ul>
</li>
<li>从迭代器的定义我们可以看出来，迭代器是帮助我们对某个数据结构进行遍历的对象。</li>
<li>在JavaScript中，迭代器也是一个具体的对象，这个对象需要符合迭代器协议（iterator protocol）：<ul>
<li>迭代器协议定义了产生一系列值（无论是有限还是无限个）的标准方式；</li>
<li>在JavaScript中这个标准就是一个特定的next方法；</li>
</ul>
</li>
<li>next方法有如下的要求：<ul>
<li>一个无参数或者一个参数的函数，返回一个应当拥有以下两个属性的对象：</li>
<li>done（boolean）<ul>
<li>如果迭代器可以产生序列中的下一个值，则为 false。（这等价于没有指定 done 这个属性。）</li>
<li>如果迭代器已将序列迭代完毕，则为 true。这种情况下，value 是可选的，如果它依然存在，即为迭代结束之后的默认返回值。</li>
</ul>
</li>
<li>value<ul>
<li>迭代器返回的任何 JavaScript 值。done 为 true 时可省略。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><ul>
<li>但是上面的代码整体来说看起来是有点奇怪的：<ul>
<li>我们获取一个数组的时候，需要自己创建一个index变量，再创建一个所谓的迭代器对象；</li>
<li>事实上我们可以对上面的代码进行进一步的封装，让其变成一个可迭代对象；</li>
</ul>
</li>
<li>什么又是可迭代对象呢？<ul>
<li>它和迭代器是不同的概念；</li>
<li>当一个对象实现了iterable protocol协议时，它就是一个可迭代对象；</li>
<li>这个对象的要求是必须实现 @@iterator 方法，在代码中我们使用 Symbol.iterator 访问该属性；</li>
</ul>
</li>
<li>当然我们要问一个问题，我们转成这样的一个东西有什么好处呢？<ul>
<li>当一个对象变成一个可迭代对象的时候，就可以进行某些迭代操作；</li>
<li>比如 for…of 操作时，其实就会调用它的 @@iterator 方法；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="原生迭代器对象"><a href="#原生迭代器对象" class="headerlink" title="原生迭代器对象"></a>原生迭代器对象</h3><ul>
<li>事实上我们平时创建的很多原生对象已经实现了可迭代协议，会生成一个迭代器对象的：<ul>
<li>String、Array、Map、Set、arguments对象、NodeList集合；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="可迭代对象的应用"><a href="#可迭代对象的应用" class="headerlink" title="可迭代对象的应用"></a>可迭代对象的应用</h3><ul>
<li>那么这些东西可以被用在哪里呢？<ul>
<li>JavaScript中语法：for …of、展开语法（spread syntax）、yield*（后面讲）、解构赋值（Destructuring_assignment）；</li>
<li>创建一些对象时：new Map([Iterable])、new WeakMap([iterable])、new Set([iterable])、new WeakSet([iterable]);</li>
<li>一些方法的调用：Promise.all(iterable)、Promise.race(iterable)、Array.from(iterable);</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义类的迭代"><a href="#自定义类的迭代" class="headerlink" title="自定义类的迭代"></a>自定义类的迭代</h3><ul>
<li><p>在前面我们看到Array、Set、String、Map等类创建出来的对象都是可迭代对象：</p>
<ul>
<li>在面向对象开发中，我们可以通过class定义一个自己的类，这个类可以创建很多的对象：</li>
<li>如果我们也希望自己的类创建出来的对象默认是可迭代的，那么在设计类的时候我们就可以添加上 @@iterator 方法；</li>
</ul>
</li>
<li><p>案例：创建一个classroom的类</p>
<ul>
<li>教室中有自己的位置、名称、当前教室的学生；</li>
<li>这个教室可以进来新学生（push）；</li>
<li>创建的教室对象是可迭代对象；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="迭代器的中断"><a href="#迭代器的中断" class="headerlink" title="迭代器的中断"></a>迭代器的中断</h3><ul>
<li>迭代器在某些情况下会在没有完全迭代的情况下中断：<ul>
<li>比如遍历的过程中通过break、return、throw中断了循环操作；</li>
<li>比如在解构的时候，没有解构所有的值；</li>
</ul>
</li>
<li>那么这个时候我们想要监听中断的话，可以添加return方法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="什么是生成器"><a href="#什么是生成器" class="headerlink" title="什么是生成器"></a>什么是生成器</h3><ul>
<li><p>生成器是ES6中新增的一种函数控制、使用的方案，它可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等。</p>
<ul>
<li>平时我们会编写很多的函数，这些函数终止的条件通常是返回值或者发生了异常。</li>
</ul>
</li>
<li><p>生成器函数也是一个函数，但是和普通的函数有一些区别：</p>
<ul>
<li>首先，生成器函数需要在function的后面加一个符号：*</li>
<li>其次，生成器函数可以通过yield关键字来控制函数的执行流程：</li>
<li>最后，生成器函数的返回值是一个Generator（生成器）：<ul>
<li>生成器事实上是一种特殊的迭代器；</li>
<li>MDN：Instead, they return a special type of iterator, called a Generator</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="生成器函数执行"><a href="#生成器函数执行" class="headerlink" title="生成器函数执行"></a>生成器函数执行</h3><ul>
<li>我们发现下面的生成器函数foo的执行体压根没有执行，它只是返回了一个生成器对象。<ul>
<li>那么我们如何可以让它执行函数中的东西呢？调用next即可；</li>
<li>我们之前学习迭代器时，知道迭代器的next是会有返回值的；</li>
<li>但是我们很多时候不希望next返回的是一个undefined，这个时候我们可以通过yield来返回结果；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="next函数"><a href="#next函数" class="headerlink" title="next函数"></a>next函数</h3><ul>
<li>函数既然可以暂停来分段执行，那么函数应该是可以传递参数的，我们是否可以给每个分段来传递参数呢？<ul>
<li>答案是可以的；</li>
<li>我们在调用next函数的时候，可以给它传递参数，那么这个参数会作为上一个yield语句的返回值；</li>
<li>注意：也就是说我们是为本次的函数代码块执行提供了一个值；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="return函数"><a href="#return函数" class="headerlink" title="return函数"></a>return函数</h3><ul>
<li>还有一个可以给生成器函数传递参数的方法是通过return函数：<ul>
<li>return传值后这个生成器函数就会结束，之后调用next不会继续生成值了；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="throw函数"><a href="#throw函数" class="headerlink" title="throw函数"></a>throw函数</h3><ul>
<li>除了给生成器函数内部传递参数之外，也可以给生成器函数内部抛出异常：<ul>
<li>抛出异常后我们可以在生成器函数中捕获异常；</li>
<li>但是在catch语句中不能继续yield新的值了，但是可以在catch语句外使用yield继续中断函数的执行；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生成器替代迭代器"><a href="#生成器替代迭代器" class="headerlink" title="生成器替代迭代器"></a>生成器替代迭代器</h3><ul>
<li>我们发现生成器是一种特殊的迭代器，那么在某些情况下我们可以使用生成器来替代迭代器：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>事实上我们还可以使用yield*来生产一个可迭代对象：<ul>
<li>这个时候相当于是一种yield的语法糖，只不过会依次迭代这个可迭代对象，每次迭代其中的一个值；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生成器实现"><a href="#生成器实现" class="headerlink" title="生成器实现"></a>生成器实现</h3><ul>
<li>在之前的自定义类迭代中，我们也可以换成生成器：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>既然生成器是一个迭代器，那么我们可以对其进行如下的操作：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="异步处理方案"><a href="#异步处理方案" class="headerlink" title="异步处理方案"></a>异步处理方案</h3><ul>
<li>学完了我们前面的Promise、生成器等，我们目前来看一下异步代码的最终处理方案。</li>
<li>案例需求：<ul>
<li>我们需要向服务器发送网络请求获取数据，一共需要发送三次请求；</li>
<li>第二次的请求url依赖于第一次的结果；</li>
<li>第三次的请求url依赖于第二次的结果；</li>
<li>依次类推；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Generator方案"><a href="#Generator方案" class="headerlink" title="Generator方案"></a>Generator方案</h3><ul>
<li>但是上面的代码其实看起来也是阅读性比较差的，有没有办法可以继续来对上面的代码进行优化呢？</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>目前我们的写法有两个问题：<ul>
<li>第一，我们不能确定到底需要调用几层的Promise关系；</li>
<li>第二，如果还有其他需要这样执行的函数，我们应该如何操作呢？</li>
</ul>
</li>
<li>所以，我们可以封装一个工具函数execGenerator自动执行生成器函数：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><h3 id="异步函数-async-function"><a href="#异步函数-async-function" class="headerlink" title="异步函数 async function"></a>异步函数 async function</h3><ul>
<li>async关键字用于声明一个异步函数：</li>
<li>async是asynchronous单词的缩写，异步、非同步；</li>
<li>sync是synchronous单词的缩写，同步、同时；</li>
<li>async异步函数可以有很多中写法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="异步函数的执行流程"><a href="#异步函数的执行流程" class="headerlink" title="异步函数的执行流程"></a>异步函数的执行流程</h3><ul>
<li><p>异步函数的内部代码执行过程和普通的函数是一致的，默认情况下也是会被同步执行。</p>
</li>
<li><p>异步函数有返回值时，和普通函数会有区别：</p>
<ul>
<li>情况一：异步函数也可以有返回值，但是异步函数的返回值相当于被包裹到Promise.resolve中；</li>
<li>情况二：如果我们的异步函数的返回值是Promise，状态由会由Promise决定；</li>
<li>情况三：如果我们的异步函数的返回值是一个对象并且实现了thenable，那么会由对象的then方法来决定；</li>
</ul>
</li>
<li><p>如果我们在async中抛出了异常，那么程序它并不会像普通函数一样报错，而是会作为Promise的reject来传递；</p>
</li>
</ul>
<h3 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h3><ul>
<li><p>async函数另外一个特殊之处就是可以在它内部使用await关键字，而普通函数中是不可以的。</p>
</li>
<li><p>await关键字有什么特点呢？</p>
<ul>
<li>通常使用await是后面会跟上一个表达式，这个表达式会返回一个Promise；</li>
<li>那么await会等到Promise的状态变成fulfilled状态，之后继续执行异步函数；</li>
</ul>
</li>
<li><p>如果await后面是一个普通的值，那么会直接返回这个值；</p>
</li>
<li><p>如果await后面是一个thenable的对象，那么会根据对象的then方法调用来决定后续的值；</p>
</li>
<li><p>如果await后面的表达式，返回的Promise是reject的状态，那么会将这个reject结果直接作为函数的Promise的reject值；</p>
</li>
</ul>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="进程和线程-1"><a href="#进程和线程-1" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul>
<li>线程和进程是操作系统中的两个概念：<ul>
<li>进程（process）：计算机已经运行的程序，是操作系统管理程序的一种方式；</li>
<li>线程（thread）：操作系统能够运行运算调度的最小单位，通常情况下它被包含在进程中；</li>
</ul>
</li>
<li>听起来很抽象，这里还是给出我的解释：<ul>
<li>进程：我们可以认为，启动一个应用程序，就会默认启动一个进程（也可能是多个进程）；</li>
<li>线程：每一个进程中，都会启动至少一个线程用来执行程序中的代码，这个线程被称之为主线程；</li>
<li>所以我们也可以说进程是线程的容器；</li>
</ul>
</li>
<li>再用一个形象的例子解释：<ul>
<li>操作系统类似于一个大工厂；</li>
<li>工厂中里有很多车间，这个车间就是进程；</li>
<li>每个车间可能有一个以上的工人在工厂，这个工人就是线程；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/bef31c8e60a046099bab2d697dfe556d" alt="1674722890059"></p>
<h3 id="操作系统的工作方式"><a href="#操作系统的工作方式" class="headerlink" title="操作系统的工作方式"></a>操作系统的工作方式</h3><ul>
<li>操作系统是如何做到同时让多个进程（边听歌、边写代码、边查阅资料）同时工作呢？</li>
<li>这是因为CPU的运算速度非常快，它可以快速的在多个进程之间迅速的切换；</li>
<li>当我们进程中的线程获取到时间片时，就可以快速执行我们编写的代码；</li>
<li>对于用户来说是感受不到这种快速的切换的；</li>
<li>你可以在Mac的活动监视器或者Windows的资源管理器中查看到很多进程：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/9f3475fcb0514b98a92ec335af54652e" alt="1674722932898"></p>
<h3 id="浏览器中的JS线程"><a href="#浏览器中的JS线程" class="headerlink" title="浏览器中的JS线程"></a>浏览器中的JS线程</h3><ul>
<li>我们经常会说JavaScript是单线程（可以开启workers）的，但是JavaScript的线程应该有自己的容器进程：浏览器或者Node。</li>
<li>浏览器是一个进程吗，它里面只有一个线程吗？</li>
<li>目前多数的浏览器其实都是多进程的，当我们打开一个tab页面时就会开启一个新的进程，这是为了防止一个页面卡死而造成所有页面无法响应，整个浏览器需要强制退出；</li>
<li>每个进程中又有很多的线程，其中包括执行JavaScript代码的线程；</li>
<li>JavaScript的代码执行是在一个单独的线程中执行的：</li>
<li>这就意味着JavaScript的代码，在同一个时刻只能做一件事；</li>
<li>如果这件事是非常耗时的，就意味着当前的线程就会被阻塞；</li>
<li>所以真正耗时的操作，实际上并不是由JavaScript线程在执行的：</li>
<li>浏览器的每个进程是多线程的，那么其他线程可以来完成这个耗时的操作；</li>
<li>比如网络请求、定时器，我们只需要在特性的时候执行应该有的回调即可；</li>
</ul>
<h2 id="浏览器的事件循环"><a href="#浏览器的事件循环" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h2><h3 id="浏览器的事件循环-1"><a href="#浏览器的事件循环-1" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h3><ul>
<li>如果在执行JavaScript代码的过程中，有异步操作呢？</li>
<li>中间我们插入了一个setTimeout的函数调用；</li>
<li>这个函数被放到入调用栈中，执行会立即结束，并不会阻塞后续代码的执行；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7b073eaa828044b19177c77e70a456f9" alt="1674723346457"></p>
<h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><ul>
<li>但是事件循环中并非只维护着一个队列，事实上是有两个队列：</li>
<li>宏任务队列（macrotask queue）：ajax、setTimeout、setInterval、DOM监听、UI Rendering等</li>
<li>微任务队列（microtask queue）：Promise的then回调、 Mutation Observer API、queueMicrotask()等</li>
<li>那么事件循环对于两个队列的优先级是怎么样的呢？<ul>
<li>1.main script中的代码优先执行（编写的顶层script代码）；</li>
<li>2.在执行任何一个宏任务之前（不是队列，是一个宏任务），都会先查看微任务队列中是否有任务需要执行<ul>
<li>	也就是宏任务执行之前，必须保证微任务队列是空的；</li>
<li>	如果不为空，那么就优先执行微任务队列中的任务（回调）；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Node的事件循环"><a href="#Node的事件循环" class="headerlink" title="Node的事件循环"></a>Node的事件循环</h2><h3 id="Node的事件循环-1"><a href="#Node的事件循环-1" class="headerlink" title="Node的事件循环"></a>Node的事件循环</h3><ul>
<li>浏览器中的EventLoop是根据HTML5定义的规范来实现的，不同的浏览器可能会有不同的实现，而Node中是由libuv实现的。</li>
<li>这里我们来给出一个Node的架构图：</li>
<li>我们会发现libuv中主要维护了一个EventLoop和worker threads（线程池）；</li>
<li>EventLoop负责调用系统的一些其他操作：文件的IO、Network、child-processes等</li>
<li>libuv是一个多平台的专注于异步IO的库，它最初是为Node开发的，但是现在也被使用到Luvit、Julia、pyuv等其他地方；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/bfda607c7ebd4810a12320bde4644024"></p>
<h3 id="Node事件循环的阶段"><a href="#Node事件循环的阶段" class="headerlink" title="Node事件循环的阶段"></a>Node事件循环的阶段</h3><ul>
<li>我们最前面就强调过，事件循环像是一个桥梁，是连接着应用程序的JavaScript和系统调用之间的通道：</li>
<li>无论是我们的文件IO、数据库、网络IO、定时器、子进程，在完成对应的操作后，都会将对应的结果和回调函数放到事件循环（任务队列）中；</li>
<li>事件循环会不断的从任务队列中取出对应的事件（回调函数）来执行；</li>
<li>但是一次完整的事件循环Tick分成很多个阶段：</li>
<li>定时器（Timers）：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。</li>
<li>待定回调（Pending Callback）：对某些系统操作（如TCP错误类型）执行回调，比如TCP连接时接收到ECONNREFUSED。</li>
<li>idle, prepare：仅系统内部使用。</li>
<li>轮询（Poll）：检索新的 I&#x2F;O 事件；执行与 I&#x2F;O 相关的回调；</li>
<li>检测（check）：setImmediate() 回调函数在这里执行。</li>
<li>关闭的回调函数：一些关闭的回调函数，如：socket.on(‘close’, …)。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/881320fd0355461ab0139d36c50f806d" alt="1674723568788"></p>
<h3 id="宏任务和微任务-1"><a href="#宏任务和微任务-1" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><ul>
<li>我们会发现从一次事件循环的Tick来说，Node的事件循环更复杂，它也分为微任务和宏任务：</li>
<li>宏任务（macrotask）：setTimeout、setInterval、IO事件、setImmediate、close事件；</li>
<li>微任务（microtask）：Promise的then回调、process.nextTick、queueMicrotask；</li>
<li>但是，Node中的事件循环不只是 微任务队列和 宏任务队列：</li>
<li>微任务队列：<ul>
<li>	next tick queue：process.nextTick；</li>
<li>	other queue：Promise的then回调、queueMicrotask；</li>
</ul>
</li>
<li>宏任务队列：<ul>
<li>	timer queue：setTimeout、setInterval；</li>
<li>	poll queue：IO事件；</li>
<li>	check queue：setImmediate；</li>
<li>	close queue：close事件；</li>
</ul>
</li>
</ul>
<h3 id="Node事件循环顺序"><a href="#Node事件循环顺序" class="headerlink" title="Node事件循环顺序"></a>Node事件循环顺序</h3><ul>
<li>所以，在每一次事件循环的tick中，会按照如下顺序来执行代码：</li>
<li>next tick microtask queue；</li>
<li>other microtask queue；</li>
<li>timer queue；</li>
<li>poll queue；</li>
<li>check queue；</li>
<li>close queue；</li>
</ul>
<h3 id="常见面试题-1"><a href="#常见面试题-1" class="headerlink" title="常见面试题"></a>常见面试题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="错误处理方案"><a href="#错误处理方案" class="headerlink" title="错误处理方案"></a>错误处理方案</h2><h3 id="错误处理方案-1"><a href="#错误处理方案-1" class="headerlink" title="错误处理方案"></a>错误处理方案</h3><ul>
<li>开发中我们会封装一些工具函数，封装之后给别人使用：<ul>
<li>在其他人使用的过程中，可能会传递一些参数；</li>
<li>对于函数来说，需要对这些参数进行验证，否则可能得到的是我们不想要的结果；</li>
</ul>
</li>
<li>很多时候我们可能验证到不是希望得到的参数时，就会直接return：<ul>
<li>但是return存在很大的弊端：调用者不知道是因为函数内部没有正常执行，还是执行结果就是一个undefined；</li>
<li>事实上，正确的做法应该是如果没有通过某些验证，那么应该让外界知道函数内部报错了；</li>
</ul>
</li>
<li>如何可以让一个函数告知外界自己内部出现了错误呢？<ul>
<li>通过throw关键字，抛出一个异常；</li>
</ul>
</li>
<li>throw语句：<ul>
<li>throw语句用于抛出一个用户自定义的异常；</li>
<li>当遇到throw语句时，当前的函数执行会被停止（throw后面的语句不会执行）；</li>
</ul>
</li>
<li>如果我们执行代码，就会报错，拿到错误信息的时候我们可以及时的去修正代码。</li>
</ul>
<h3 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h3><ul>
<li><p>throw表达式就是在throw后面可以跟上一个表达式来表示具体的异常信息：</p>
</li>
<li><p>throw关键字可以跟上哪些类型呢？</p>
</li>
<li><p>基本数据类型：比如number、string、Boolean</p>
</li>
<li><p>对象类型：对象类型可以包含更多的信息</p>
</li>
<li><p>但是每次写这么长的对象又有点麻烦，所以我们可以创建一个类</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Error类型"><a href="#Error类型" class="headerlink" title="Error类型"></a>Error类型</h3><ul>
<li>事实上，JavaScript已经给我们提供了一个Error类，我们可以直接创建这个类的对象：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Error包含三个属性：<ul>
<li>messsage：创建Error对象时传入的message；</li>
<li>name：Error的名称，通常和类的名称一致；</li>
<li>stack：整个Error的错误信息，包括函数的调用栈，当我们直接打印Error对象时，打印的就是stack；</li>
</ul>
</li>
<li>Error有一些自己的子类：<ul>
<li>RangeError：下标值越界时使用的错误类型；</li>
<li>SyntaxError：解析语法错误时使用的错误类型；</li>
<li>TypeError：出现类型错误时，使用的错误类型；</li>
</ul>
</li>
</ul>
<h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><ul>
<li>我们会发现在之前的代码中，一个函数抛出了异常，调用它的时候程序会被强制终止：</li>
<li>这是因为如果我们在调用一个函数时，这个函数抛出了异常，但是我们并没有对这个异常进行处理，那么这个异常会继续传递到上一个函数调用中；</li>
<li>而如果到了最顶层（全局）的代码中依然没有对这个异常的处理代码，这个时候就会报错并且终止程序的运行；</li>
<li>我们先来看一下这段代码的异常传递过程：</li>
<li>foo函数在被执行时会抛出异常，也就是我们的bar函数会拿到这个异常；</li>
<li>但是bar函数并没有对这个异常进行处理，那么这个异常就会被继续传递到调用bar函数的函数，也就是test函数；</li>
<li>但是test函数依然没有处理，就会继续传递到我们的全局代码逻辑中；</li>
<li>依然没有被处理，这个时候程序会终止执行，后续代码都不会再执行了；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h3><ul>
<li>但是很多情况下当出现异常时，我们并不希望程序直接推出，而是希望可以正确的处理异常：</li>
<li>这个时候我们就可以使用try catch</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6c2fb967d1cf4d399477f301fe25c34c" alt="1674723910194"></p>
<ul>
<li>在ES10（ES2019）中，catch后面绑定的error可以省略。</li>
<li>当然，如果有一些必须要执行的代码，我们可以使用finally来执行：</li>
<li>finally表示最终一定会被执行的代码结构；</li>
<li>注意：如果try和finally中都有返回值，那么会使用finally当中的返回值；</li>
</ul>
<h2 id="本地存储Storage"><a href="#本地存储Storage" class="headerlink" title="本地存储Storage"></a>本地存储Storage</h2><h3 id="认识Storage"><a href="#认识Storage" class="headerlink" title="认识Storage"></a>认识Storage</h3><ul>
<li>WebStorage主要提供了一种机制，可以让浏览器提供一种比cookie更直观的key、value存储方式：</li>
<li>localStorage：本地存储，提供的是一种永久性的存储方法，在关闭掉网页重新打开时，存储的内容依然保留；</li>
<li>sessionStorage：会话存储，提供的是本次会话的存储，在关闭掉会话时，存储的内容会被清除；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/e47161e747d24ec5b42634993d59d241" alt="1674723980844"></p>
<ul>
<li>我们会发现localStorage和sessionStorage看起来非常的相似。</li>
<li>那么它们有什么区别呢？<ul>
<li>验证一：关闭网页后重新打开，localStorage会保留，而sessionStorage会被删除；</li>
<li>验证二：在页面内实现跳转，localStorage会保留，sessionStorage也会保留；</li>
<li>验证三：在页面外实现跳转（打开新的网页），localStorage会保留，sessionStorage不会被保留；</li>
</ul>
</li>
</ul>
<h3 id="Storage常见方法和属性"><a href="#Storage常见方法和属性" class="headerlink" title="Storage常见方法和属性"></a>Storage常见方法和属性</h3><ul>
<li>Storage有如下的属性和方法：<ul>
<li>属性：<ul>
<li>Storage.length：只读属性</li>
<li>	返回一个整数，表示存储在Storage对象中的数据项数量；</li>
</ul>
</li>
<li>方法：<ul>
<li>Storage.key(index)：该方法接受一个数值n作为参数，返回存储中的第n个key名称；</li>
<li>Storage.getItem()：该方法接受一个key作为参数，并且返回key对应的value；</li>
<li>Storage.setItem()：该方法接受一个key和value，并且将会把key和value添加到存储中。<ul>
<li>	如果key存储，则更新其对应的值；</li>
</ul>
</li>
<li>Storage.removeItem()：该方法接受一个key作为参数，并把该key从存储中删除；</li>
<li>Storage.clear()：该方法的作用是清空存储中的所有key；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="正则表达式-空"><a href="#正则表达式-空" class="headerlink" title="正则表达式(空)"></a>正则表达式(空)</h2><h2 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h2><h3 id="认识防抖和节流函数"><a href="#认识防抖和节流函数" class="headerlink" title="认识防抖和节流函数"></a>认识防抖和节流函数</h3><ul>
<li><p>防抖和节流的概念其实最早并不是出现在软件工程中，防抖是出现在电子元件中，节流出现在流体流动中</p>
<ul>
<li>而JavaScript是事件驱动的，大量的操作会触发事件，加入到事件队列中处理。</li>
<li>而对于某些频繁的事件处理会造成性能的损耗，我们就可以通过防抖和节流来限制事件频繁的发生；</li>
</ul>
</li>
<li><p>防抖和节流函数目前已经是前端实际开发中两个非常重要的函数，也是面试经常被问到的面试题。</p>
</li>
<li><p>但是很多前端开发者面对这两个功能，有点摸不着头脑：</p>
<ul>
<li>某些开发者根本无法区分防抖和节流有什么区别（面试经常会被问到）；</li>
<li>某些开发者可以区分，但是不知道如何应用；</li>
<li>某些开发者会通过一些第三方库来使用，但是不知道内部原理，更不会编写；</li>
</ul>
</li>
<li><p>接下来我们会一起来学习防抖和节流函数：</p>
<ul>
<li>我们不仅仅要区分清楚防抖和节流两者的区别，也要明白在实际工作中哪些场景会用到；</li>
<li>并且我会带着大家一点点来编写一个自己的防抖和节流的函数，不仅理解原理，也学会自己来编写；</li>
</ul>
</li>
</ul>
<h3 id="认识防抖debounce函数"><a href="#认识防抖debounce函数" class="headerlink" title="认识防抖debounce函数"></a>认识防抖debounce函数</h3><ul>
<li>我们用一副图来理解一下它的过程：<ul>
<li>当事件触发时，相应的函数并不会立即触发，而是会等待一定的时间；</li>
<li>当事件密集触发时，函数的触发会被频繁的推迟；</li>
<li>只有等待了一段时间也没有事件触发，才会真正的执行响应函数；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d21ac09c082c47a896924fc27a1108b5" alt="1674724232907"></p>
<ul>
<li>防抖的应用场景很多:<ul>
<li>输入框中频繁的输入内容，搜索或者提交信息;</li>
<li>频繁的点击按钮，触发某个事件;</li>
<li>监听浏览器滚动事件，完成某些特定操作;</li>
<li>用户缩放浏览器的resize事件;</li>
</ul>
</li>
</ul>
<h3 id="防抖函数的案例"><a href="#防抖函数的案例" class="headerlink" title="防抖函数的案例"></a>防抖函数的案例</h3><ul>
<li>我们都遇到过这样的场景，在某个搜索框中输入自己想要搜索的内容：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f80110f394024a1a854b0bd2b3cabb76" alt="1674724643150"></p>
<ul>
<li>比如想要搜索一个MacBook：<ul>
<li>当我输入m时，为了更好的用户体验，通常会出现对应的联想内容，这些联想内容通常是保存在服务器的，所以需要一次网络请求；</li>
<li>当继续输入ma时，再次发送网络请求；</li>
<li>那么macbook一共需要发送7次网络请求；</li>
<li>这大大损耗我们整个系统的性能，无论是前端的事件处理，还是对于服务器的压力;</li>
</ul>
</li>
<li>但是我们需要这么多次的网络请求吗？<ul>
<li>不需要，正确的做法应该是在合适的情况下再发送网络请求；</li>
<li>比如如果用户快速的输入一个macbook，那么只是发送一次网络请求；</li>
<li>比如如果用户是输入一个m想了一会儿，这个时候m确实应该发送一次网络请求；</li>
<li>也就是我们应该监听用户在某个时间，比如500ms内，没有再次触发时间时，再发送网络请求；</li>
</ul>
</li>
<li>这就是防抖的操作：只有在某个时间内，没有再次触发某个函数时，才真正的调用这个函数；</li>
</ul>
<h4 id="案例准备"><a href="#案例准备" class="headerlink" title="案例准备"></a>案例准备</h4><ul>
<li>我们通过一个搜索框来延迟防抖函数的实现过程：<ul>
<li>监听input的输入，通过打印模拟网络请求</li>
</ul>
</li>
<li>测试发现快速输入一个macbook共发送了7次请求，显示我们需要对它进行防抖操作：</li>
</ul>
<h4 id="Underscore库的介绍"><a href="#Underscore库的介绍" class="headerlink" title="Underscore库的介绍"></a>Underscore库的介绍</h4><ul>
<li>事实上我们可以通过一些第三方库来实现防抖操作：<ul>
<li>lodash</li>
<li>underscore</li>
</ul>
</li>
<li>这里使用underscore<ul>
<li>我们可以理解成lodash是underscore的升级版，它更重量级，功能也更多；</li>
<li>但是目前我看到underscore还在维护，lodash已经很久没有更新了；</li>
</ul>
</li>
<li>Underscore的官网： <a href="https://underscorejs.org/">https://underscorejs.org/</a></li>
<li>Underscore的安装有很多种方式：<ul>
<li>下载Underscore，本地引入；</li>
<li>通过CDN直接引入；</li>
<li>通过包管理工具（npm）管理安装；</li>
</ul>
</li>
<li>这里我们直接通过CDN：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;scriptsrc=&quot;https://cdn.jsdelivr.net/npm/underscore@1.13.1/underscore-umd-min.js&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="认识节流throttle函数"><a href="#认识节流throttle函数" class="headerlink" title="认识节流throttle函数"></a>认识节流throttle函数</h3><ul>
<li>我们用一副图来理解一下节流的过程<ul>
<li>当事件触发时，会执行这个事件的响应函数；</li>
<li>如果这个事件会被频繁触发，那么节流函数会按照一定的频率来执行函数；</li>
<li>不管在这个中间有多少次触发这个事件，执行函数的频繁总是固定的；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/d869b21a37ef43d8b4327bac0b57215d" alt="1674724371890"></p>
<ul>
<li>节流的应用场景:<ul>
<li>监听页面的滚动事件;</li>
<li>鼠标移动事件;</li>
<li>用户频繁点击按钮操作;游戏中的一些设计;</li>
</ul>
</li>
</ul>
<h3 id="节流函数的应用场景"><a href="#节流函数的应用场景" class="headerlink" title="节流函数的应用场景"></a>节流函数的应用场景</h3><ul>
<li><p>很多人都玩过类似于飞机大战的游戏</p>
</li>
<li><p>在飞机大战的游戏中，我们按下空格会发射一个子弹：</p>
<ul>
<li>很多飞机大战的游戏中会有这样的设定，即使按下的频率非常快，子弹也会保持一定的频率来发射；</li>
<li>比如1秒钟只能发射一次，即使用户在这1秒钟按下了10次，子弹会保持发射一颗的频率来发射；</li>
<li>但是事件是触发了10次的，响应的函数只触发了一次；</li>
</ul>
</li>
<li><p>生活中防抖的例子：</p>
<ul>
<li>比如说有一天我上完课，我说大家有什么问题来问我，我会等待五分钟的时间。</li>
<li>如果在五分钟的时间内，没有同学问我问题，那么我就下课了；<ul>
<li>在此期间，a同学过来问问题，并且帮他解答，解答完后，我会再次等待五分钟的时间看有没有其他同学问问题；</li>
<li>如果我等待超过了5分钟，就点击了下课（才真正执行这个时间）；</li>
</ul>
</li>
</ul>
</li>
<li><p>生活中节流的例子：</p>
<ul>
<li>比如说有一天我上完课，我说大家有什么问题来问我，但是在一个5分钟之内，不管有多少同学来问问题，我只会解答一个问题；</li>
<li>如果在解答完一个问题后，5分钟之后还没有同学问问题，那么就下课；</li>
</ul>
</li>
</ul>
<h3 id="自定义防抖节流函数"><a href="#自定义防抖节流函数" class="headerlink" title="自定义防抖节流函数"></a>自定义防抖节流函数</h3><ul>
<li>我们按照如下思路来实现：<ul>
<li>防抖基本功能实现：可以实现防抖效果</li>
<li>优化一：优化参数和this指向</li>
<li>优化二：优化取消操作（增加取消功能）</li>
<li>优化三：优化立即执行效果（第一次立即执行）</li>
<li>优化四：优化返回值</li>
</ul>
</li>
<li>我们按照如下思路来实现：<ul>
<li>节流函数的基本实现：可以实现节流效果</li>
<li>优化一：节流最后一次也可以执行</li>
<li>优化二：优化添加取消功能</li>
<li>优化三：优化返回值问题</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义深拷贝函数"><a href="#自定义深拷贝函数" class="headerlink" title="自定义深拷贝函数"></a>自定义深拷贝函数</h3><ul>
<li>前面我们已经学习了对象相互赋值的一些关系，分别包括：<ul>
<li>引入的赋值：指向同一个对象，相互之间会影响；</li>
<li>对象的浅拷贝：只是浅层的拷贝，内部引入对象时，依然会相互影响；</li>
<li>对象的深拷贝：两个对象不再有任何关系，不会相互影响；</li>
</ul>
</li>
<li>前面我们已经可以通过一种方法来实现深拷贝了：JSON.parse<ul>
<li>这种深拷贝的方式其实对于函数、Symbol等是无法处理的；</li>
<li>并且如果存在对象的循环引用，也会报错的；</li>
</ul>
</li>
<li>自定义深拷贝函数：<ul>
<li>1.自定义深拷贝的基本功能；</li>
<li>2.对Symbol的key进行处理；</li>
<li>3.其他数据类型的值进程处理：数组、函数、Symbol、Set、Map；</li>
<li>4.对循环引用的处理；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义事件总线"><a href="#自定义事件总线" class="headerlink" title="自定义事件总线"></a>自定义事件总线</h3><ul>
<li>自定义事件总线属于一种观察者模式，其中包括三个角色：<ul>
<li>发布者（Publisher）：发出事件（Event）；</li>
<li>订阅者（Subscriber）：订阅事件（Event），并且会进行响应（Handler）；</li>
<li>事件总线（EventBus）：无论是发布者还是订阅者都是通过事件总线作为中台的；</li>
</ul>
</li>
<li>当然我们可以选择一些第三方的库：<ul>
<li>Vue2默认是带有事件总线的功能；</li>
<li>Vue3中推荐一些第三方库，比如mitt；</li>
</ul>
</li>
<li>当然我们也可以实现自己的事件总线：<ul>
<li>事件的监听方法on；</li>
<li>事件的发射方法emit；</li>
<li>事件的取消监听off；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>flex弹性布局</title>
    <url>/2024/01/09/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/103_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/10304_Flex/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="flex-弹性布局"><a href="#flex-弹性布局" class="headerlink" title="flex 弹性布局"></a>flex 弹性布局</h1><h2 id="认识-flexbox"><a href="#认识-flexbox" class="headerlink" title="认识 flexbox"></a>认识 flexbox</h2><ul>
<li>Flexbox 翻译为弹性盒子:<ul>
<li>弹性盒子是一种用于按行或按列布局元素的一维布局方法 ;</li>
<li>元素可以膨胀以填充额外的空间, 收缩以适应更小的空间;</li>
<li>通常我们使用 Flexbox 来进行布局的方案称之为 flex 布局(flex layout);</li>
</ul>
</li>
<li>flex 布局是目前 web 开发中使用最多的布局方案：<ul>
<li>flex 布局（Flexible 布局，弹性布局）;</li>
<li>目前特别在移动端可以说已经完全普及;</li>
<li>在 PC 端也几乎已经完全普及和使用, 只有非常少数的网站依然在用浮动来布局</li>
</ul>
</li>
</ul>
<h2 id="与传统布局的对比"><a href="#与传统布局的对比" class="headerlink" title="与传统布局的对比"></a>与传统布局的对比</h2><ul>
<li><p>传统布局</p>
<ul>
<li>兼容性好</li>
<li>布局繁琐</li>
<li>局限性，不能在移动端很好的布局</li>
</ul>
</li>
<li><p>flex 弹性布局</p>
<ul>
<li>操作方便，布局极为简单，移动端应用很广泛</li>
<li>PC 端浏览器支持情况较差</li>
<li>IE 11 或更低版本，不支持或仅部分支持</li>
</ul>
</li>
<li><p>建议：</p>
<ul>
<li>如果是 PC 端页面布局，我们还是传统布局。</li>
<li>如果是移动端或者不考虑兼容性问题的 PC 端页面布局，我们还是使用 flex 弹性布局</li>
</ul>
</li>
</ul>
<h2 id="flex-布局初体验"><a href="#flex-布局初体验" class="headerlink" title="flex 布局初体验"></a>flex 布局初体验</h2><p><img src="https://s1.vika.cn/space/2023/02/26/1a5797a10cc84dae91561595a2f3a001" alt="1656553355551"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 01 给 div 只需要添加 “display：flex” 即可 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fac090</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 02 span 直接给宽度和高度，背景颜色，还有蓝色边框*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#95b3d7</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#116ddd</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-布局原理"><a href="#flex-布局原理" class="headerlink" title="flex 布局原理"></a>flex 布局原理</h2><ul>
<li><p>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</p>
</li>
<li><p><strong>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</strong></p>
</li>
<li><p>伸缩布局 &#x3D; 弹性布局 &#x3D; 伸缩盒布局 &#x3D; 弹性盒布局 &#x3D; flex 布局</p>
</li>
<li><p>采用 Flex 布局的元素，称为 <strong>Flex 伸缩容器</strong>（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 <strong>Flex 伸缩项</strong>（flex item），简称”项目”。</p>
<ul>
<li>体验中 div 就是 flex 父容器。</li>
<li>体验中 span 就是 子容器 ,也叫 flex 项目</li>
<li>子容器可以横向排列也可以纵向排列</li>
</ul>
</li>
<li><p>总结 flex 布局原理：</p>
<ul>
<li>就是通过给父盒子添加 flex 属性，来控制子盒子的位置和排列方式</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/101eac6b5771471aa7c713f3f8350221" alt="1656553831510"></p>
<h2 id="flex-布局父元素常见属性"><a href="#flex-布局父元素常见属性" class="headerlink" title="flex 布局父元素常见属性"></a>flex 布局父元素常见属性</h2><ul>
<li><p>以下由 6 个属性是对父元素设置的</p>
<ul>
<li><p><strong>flex-direction</strong>：设置主轴的方向</p>
</li>
<li><p><strong>justify-content</strong>：设置主轴上的子元素排列方式</p>
</li>
<li><p><strong>flex-wrap</strong>：设置子元素是否换行</p>
</li>
<li><p><strong>align-content</strong>：设置侧轴上的子元素的排列方式（多行）</p>
</li>
<li><p><strong>align-items</strong>：设置侧轴上的子元素排列方式（单行）</p>
</li>
<li><p><strong>flex-flow</strong>：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</p>
</li>
</ul>
</li>
</ul>
<h2 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h2><ul>
<li>01 主轴与侧轴<ul>
<li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和 y 轴<ul>
<li>默认主轴方向就是 x 轴方向，水平向右</li>
<li>默认侧轴方向就是 y 轴方向，水平向下</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a69f0458ce5a4433999c05a829c811c9" alt="1656554108426"></p>
<ul>
<li>02 属性值<ul>
<li>flex-direction 属性决定主轴的方向（即项目的排列方向）</li>
<li>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/79a128a05f924139a389d27a8c6deeb6" alt="1656554168421"></p>
<ul>
<li>在伸缩布局中，默认情况下水平方向是主轴，默认情况下主轴的起点在伸缩容器的最左边,默认情况下所有的伸缩项都是从主轴的起点开始排版的, 但是我们也可以通过属性来修改主轴的起点的位置<ul>
<li><strong>flex-direction: 用于修改主轴起点的位置</strong></li>
<li><strong>row: 起点在伸缩容器的最左边，终点在伸缩容器的最右边.从左至右的排版，默认的取值</strong></li>
<li><strong>row-reverse: 起点在伸缩容器的最右边，终点在伸缩容器的最左边，从右至左的排版</strong></li>
<li><strong>column: 起点在伸缩容器的最顶部，终点在伸缩容器的最底部，从上至下的排版</strong><ul>
<li>注意点:在伸缩布局中主轴和侧轴永远都是十字交叉的，只要主轴的方向发生了变化，侧轴也会发生变化</li>
</ul>
</li>
<li><strong>column-reverse: 起点在伸缩容器的最底部，终点在伸缩容器的最顶部，从下至上的排版</strong></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row; <span class="comment">/* 伸缩项从左到右排列 默认项 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row-reverse; <span class="comment">/* 伸缩项从右到左排列 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column; <span class="comment">/* 设置主轴为 y 轴,伸缩项从上到下排列 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column-reverse; <span class="comment">/* 设置主轴为 y 轴,伸缩项从下到上排列 */</span></span><br></pre></td></tr></table></figure>

<h2 id="justify-content-主轴元素排列"><a href="#justify-content-主轴元素排列" class="headerlink" title="justify-content 主轴元素排列"></a>justify-content 主轴元素排列</h2><ul>
<li><strong>justify-content 属性定义了项目在主轴上的对齐方式</strong></li>
<li>注意： 使用这个属性之前一定要确定好主轴是哪个</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/8ae75e7d4c834a9bb2ae63670c902f5c" alt="1656554254171"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row; <span class="comment">/* 主轴为 x 轴*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-start; <span class="comment">/* 伸缩项从左到右排列 类似于左对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end; <span class="comment">/* 伸缩项从右到左排列 类似于右对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center; <span class="comment">/* 居中对齐 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between; <span class="comment">/* 两端贴边,再平分剩余空间 类似于两端对齐 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-around; <span class="comment">/* 平分剩余空间 */</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-wrap-子元素换行"><a href="#flex-wrap-子元素换行" class="headerlink" title="flex-wrap 子元素换行"></a>flex-wrap 子元素换行</h2><ul>
<li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap 属性定义，flex 布局中默认是不换行的。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/dd36735cd10f4bd5b9ccf0f6b9d23696" alt="1656554319839"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.默认情况下如果伸缩容器的一行放不下所有的伸缩项，那么系统会自动等比压缩所有的伸缩项</span></span><br><span class="line"><span class="comment">2.在伸缩容器中有一个叫做 flex-wrap 属性，专门用于控制放不下是否需要换行的</span></span><br><span class="line"><span class="comment">默认的取值:</span></span><br><span class="line"><span class="comment">	flex-wrap : 不换行</span></span><br><span class="line"><span class="comment">	wrap : 放不下就换行而不是等比压缩</span></span><br><span class="line"><span class="comment">	wrap-reverse : 放不下就换行，以行为单位进行反转*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap-reverse;</span><br></pre></td></tr></table></figure>

<h2 id="align-items-侧轴元素排列-单行"><a href="#align-items-侧轴元素排列-单行" class="headerlink" title="align-items 侧轴元素排列(单行)"></a>align-items 侧轴元素排列(单行)</h2><ul>
<li>该属性是控制子项在侧轴（默认是 y 轴）上的排列方式 在子项为单项（单行）的时候使用</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/aea6e1c21d7342ce8b23f085ebd3956e" alt="1656554369596"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 告诉浏览器排版好的伸缩项需要和侧轴的起点对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start;</span><br><span class="line"><span class="attribute">align-items</span>: flex-end;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* baseline:让所有伸缩项中的基线在一条直线上对齐*/</span></span><br><span class="line"><span class="attribute">align-items</span>: baseline;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* stretch (拉伸对齐/等高对齐):</span></span><br><span class="line"><span class="comment">让所有的伸缩项的高度变为侧轴的高度</span></span><br><span class="line"><span class="comment">注意点:</span></span><br><span class="line"><span class="comment">	如果需要设置为拉伸对齐，那么伸缩项不能设置高度,如果伸缩项设置了高度，那么拉伸对齐就会失效 */</span></span><br><span class="line"><span class="attribute">align-items</span>: stretch;</span><br></pre></td></tr></table></figure>

<h2 id="align-content-侧轴元素排列-多行"><a href="#align-content-侧轴元素排列-多行" class="headerlink" title="align-content 侧轴元素排列(多行)"></a>align-content 侧轴元素排列(多行)</h2><ul>
<li>设置子项在侧轴上的排列方式,并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/a687a5a6c5044189b9bf3597d8e814ac" alt="1656554491124"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在伸缩容器中有一个叫做 align-content 的属性，是专门用于设置换行之后的对齐方式的</span></span><br><span class="line"><span class="comment">注意点:只有伸缩项发生了换行这个属性才有效</span></span><br><span class="line"><span class="comment">		flex-start: 换行之后和侧轴的起点对齐，一行接一行</span></span><br><span class="line"><span class="comment">		flex-end: 换行之后和侧轴的终点对齐，将所有换行之后的内容当做一个整体来操作</span></span><br><span class="line"><span class="comment">		center: 换行之后和侧轴的中点对齐</span></span><br><span class="line"><span class="comment">		space-between: 换行之后在侧轴上两端对齐</span></span><br><span class="line"><span class="comment">		space-around: 换行之后在侧轴上环绕对齐</span></span><br><span class="line"><span class="comment">		stretch: 以行为单位进行拉伸，拉伸的部分以空白填充，保证拉伸之后所有的行加起来能够填满侧轴</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">align-content</span>: flex-start;</span><br><span class="line"><span class="attribute">align-content</span>: flex-end;</span><br><span class="line"><span class="attribute">align-content</span>: center;</span><br><span class="line"><span class="attribute">align-content</span>: space-between;</span><br><span class="line"><span class="attribute">align-content</span>: space-around;</span><br><span class="line"><span class="attribute">align-content</span>: stretch;</span><br></pre></td></tr></table></figure>

<h2 id="align-content-和-align-items-区别"><a href="#align-content-和-align-items-区别" class="headerlink" title="align-content 和 align-items 区别"></a>align-content 和 align-items 区别</h2><ul>
<li><strong>align-items 适用于单行情况</strong>下， 只有上对齐、下对齐、居中和 拉伸</li>
<li><strong>align-content 适应于换行（多行）的情况</strong>下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li>
<li>总结: 就是<strong>单行找 align-items 多行找 align-content</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/8ad07c1ea32448609f78d5efcb3c52b6" alt="1656554620130"></p>
<h2 id="flex-flow-复合属性"><a href="#flex-flow-复合属性" class="headerlink" title="flex-flow 复合属性"></a>flex-flow 复合属性</h2><ul>
<li>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br></pre></td></tr></table></figure>

<ul>
<li>flex-direction：设置主轴的方向</li>
<li>flex-wrap：设置子元素是否换行</li>
<li>flex-flow：复合属性，<strong>相当于同时设置了 flex-direction 和 flex-wrap</strong></li>
</ul>
<h2 id="flex-布局子项常见属性"><a href="#flex-布局子项常见属性" class="headerlink" title="flex 布局子项常见属性"></a>flex 布局子项常见属性</h2><ul>
<li>flex 子项目占的份数</li>
<li>align-self 控制子项自己在侧轴的排列方式</li>
<li>order 属性定义子项的排列顺序（前后顺序）</li>
</ul>
<h2 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h2><ul>
<li>flex 属性定义子项目分配剩余空间，用 flex 来表示占多少份数。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="align-self-子项在侧轴的排列"><a href="#align-self-子项在侧轴的排列" class="headerlink" title="align-self 子项在侧轴的排列"></a>align-self 子项在侧轴的排列</h2><ul>
<li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</li>
<li>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">/* 设置自己在侧轴上的排列方式 */</span></span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果在伸缩容器中通过 align-items:来控制伸缩项的对齐方式，是一次性控制所有伸缩项的对齐方式,如果想单独的控制某一个伸缩项在侧轴上的对齐方式，那么需要将控制对齐方式的属性写到伸缩项中 */</span></span><br><span class="line"><span class="comment">/* align-items:写到伸缩容器中, 控制所有伸缩项 */</span></span><br><span class="line"><span class="comment">/* align-self:写到伸缩项中, 控制编写对应代码的那个伸缩项 */</span></span><br><span class="line"><span class="comment">/* align-self:的取值和 align-items 的取值是一样的，只是控制的范围和书写的位置不同而已 */</span></span><br><span class="line"><span class="attribute">align-self</span>: flex-start;</span><br><span class="line"><span class="attribute">align-self</span>: flex-end;</span><br><span class="line"><span class="attribute">align-self</span>: center;</span><br></pre></td></tr></table></figure>

<h2 id="order-定义项目的排列顺序"><a href="#order-定义项目的排列顺序" class="headerlink" title="order 定义项目的排列顺序"></a>order 定义项目的排列顺序</h2><ul>
<li>数值越小，排列越靠前，默认为 0。属于伸缩项的属性</li>
<li>注意：和 z-index 不一样。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	默认情况下每一个伸缩项都有一个 order 属性，用于决定排序的先后顺序默认情况下所有伸缩项的 order 属性的取值都是 0</span></span><br><span class="line"><span class="comment">	我们可以通过修改 order 属性的取值来实现伸缩项的排序</span></span><br><span class="line"><span class="comment">	排序的规则:从小到大的排序，越小的显示在越前面，越大的显示在越后面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-grow-扩充属性"><a href="#flex-grow-扩充属性" class="headerlink" title="flex-grow 扩充属性"></a>flex-grow 扩充属性</h2><ul>
<li><p><strong>在伸缩项中有一个 flex-grow 属性，用于控制当所有伸缩项的宽度总和小于伸缩容器宽度的时候如何扩充自己，以便于所有伸缩项宽度的总和能够填满整个伸缩容器</strong></p>
</li>
<li><p>默认情况下 flex-grow 的取值是 0，表示我们设置的宽度是多少就按照多少来显示，不进行任何的扩充</p>
</li>
<li><p>注意点:</p>
<ul>
<li>只有当所有伸缩项的宽度总和小于伸缩容器宽度的时候, flex-grow 这个属性才有效</li>
</ul>
</li>
<li><p>flex-grow 扩充的公式</p>
<ul>
<li>1 利用伸缩容器宽度 – 所有伸缩项的总宽度 &#x3D; 剩余空间<ul>
<li>600 - 300 &#x3D; 300</li>
</ul>
</li>
<li>2 利用剩余空间 &#x2F; 所有需要扩充份数的总和 &#x3D; 每一份的大小<ul>
<li>300 &#x2F; (1 + 4 + 8)&#x3D; 23.07</li>
</ul>
</li>
<li>3 利用当前伸缩项的宽度＋需要的份数的宽度<ul>
<li>第一个伸缩项 &#x3D;100 + (1 * 23.07) &#x3D; 123.07</li>
<li>第二个伸缩项 &#x3D;100 + (4 * 23.07) &#x3D; 192.28</li>
<li>第三个伸缩项 &#x3D;100 + (8* 23.07) &#x3D; 284.56</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-grow</span>: <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-grow</span>: <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<h2 id="flex-shrink-缩小属性"><a href="#flex-shrink-缩小属性" class="headerlink" title="flex-shrink 缩小属性"></a>flex-shrink 缩小属性</h2><ul>
<li><p><strong>在伸缩项中有一个 flex-shrink 属性，用于控制当所有伸缩项的宽度总和大于伸缩容器宽度的时候如何缩小自己，以便于所有伸缩项宽度的总和能够填满整个伸缩容器</strong></p>
</li>
<li><p>默认情况下 flex-shrink 的取值是 1，表示当所有伸缩项宽度的总和大于伸缩容器宽度的时候等比缩小自己</p>
</li>
<li><p>注意点:</p>
<ul>
<li>只有当所有伸缩项的宽度总和大于伸缩容器宽度的时候, lex-shrink 这个属性才有效</li>
</ul>
</li>
<li><p>flex-shrink 扩充的公式</p>
<ul>
<li>1 利用所有伸缩项的宽度总和 – 伸缩容器宽度 &#x3D; 溢出的宽度<ul>
<li>900- 600 &#x3D; 300</li>
</ul>
</li>
<li>2 计算权重值<ul>
<li>利用每一个伸缩项需要的份数 * 当前伸缩项的宽度然后再相加, 1 * 300 + 4 _ 300 + 8_ 300 &#x3D; 3900</li>
</ul>
</li>
<li>3 计算每个伸缩项需要缩小的范围<ul>
<li>溢出的宽度 * 当前伸缩项的宽度 * 当前伸缩项需要的份数 &#x2F; 权重值 300 * 300 *1&#x2F;3900 &#x3D; 23.07</li>
<li>第一个伸缩项宽度 &#x3D; 300 - 23.07 &#x3D; 276.9 300 _ 300_ 4&#x2F;3900 &#x3D; 92.3</li>
<li>第二个伸缩项宽度 &#x3D; 300 - 92.3 &#x3D; 207.6</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">8</span>; <span class="comment">/* 值越大,缩小越狠 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意点:<ul>
<li>1 如果没有指定 flex-grow 属性，或者 flex-grow 的值是 0，那么当前的伸缩项不会被扩充</li>
<li>2 如果 flex-shrink 的值是 0，那么当前的伸缩项不会被缩小</li>
<li>3 注意点<ul>
<li>前面所写的注释都是说宽度扩充或者宽度缩小，但是这种说法是不严谨的也有可能扩充和缩小的是高度，到底是宽度还是高度是由主轴决定的, 扩充和缩小的是主轴方向上的值</li>
<li>也就是说如果主轴是水平方向的，那么扩充和缩小的就是宽度, 也就是说如果主轴是垂直方向的，那么扩充和缩小的就是高度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="flex-basis-设置宽度"><a href="#flex-basis-设置宽度" class="headerlink" title="flex-basis 设置宽度"></a>flex-basis 设置宽度</h2><ul>
<li>1 在伸缩布局中可以通过 flex-basis 属性设置伸缩项的宽度<ul>
<li>注意点: flex-basis 只有在伸缩布局中才有效</li>
</ul>
</li>
<li>2 在伸缩布局中如果通过 flex-basis 设置了宽度，那么再通过 width 设置宽度就会无效, 也就是说 flex-basis 的优先级要高于 width 的优先级</li>
<li>3 在伸缩布局中如果同时通过 flex-basis 和 width 设置了宽度，而且一个设置的是 auto,一个设置的是具体的值,那么会按照具体的值来显示</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-basis</span>: <span class="number">100px</span>; <span class="comment">/*同时设置 width 和 flex-basis,会以 flex-basis 为准*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 同时设置 width 和 flex-basis,会以 具体值的 为准 */</span></span><br><span class="line"><span class="attribute">flex-basis</span>: auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-basis</span>: <span class="number">300px</span>; <span class="comment">/* 同时设置 width 和 flex-basis ,会以 具体值的 为准 */</span></span><br><span class="line"><span class="attribute">width</span>: auto;</span><br></pre></td></tr></table></figure>

<h2 id="伸缩项属性连写"><a href="#伸缩项属性连写" class="headerlink" title="伸缩项属性连写"></a>伸缩项属性连写</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* flex:扩充缩小宽度; */</span></span><br><span class="line"><span class="comment">/* 默认值: flex:0 1 auto; */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">200px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="携程网案例"><a href="#携程网案例" class="headerlink" title="携程网案例"></a>携程网案例</h2><ul>
<li><p>技术选型</p>
<ul>
<li>方案：我们采取单独制作移动页面方案</li>
<li>技术：布局采取 flex 布局</li>
</ul>
</li>
<li><p>设置视口标签以及引入初始化样式</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no,</span></span></span><br><span class="line"><span class="string"><span class="tag">initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/normalize.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常用初始化样式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">14px</span>/<span class="number">1.5</span> Tahoma, <span class="string">&#x27;Lucida Grande&#x27;</span>, Verdana, <span class="string">&#x27;Microsoft</span></span><br><span class="line"><span class="string">    Yahei&#x27;</span>, STXihei, hei;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>常见模块命名</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/c4db1f35f13042b1b9b157c7ce45d39d" alt="1656555457323"></p>
<p><img src="https://s1.vika.cn/space/2023/02/26/f2a8bac22752479382d40e44bfcfa0dc" alt="1656555469979"></p>
<ul>
<li>常见 flex 布局思路</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b8f1cbbcfde44beabfd333c87502b64f" alt="1656555519273"></p>
<ul>
<li>背景线性渐变</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6ecd1382f101484cb5a3e77aae308117" alt="1656555584915"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* background: linear-gradient(起始方向, 颜色1, 颜色2, ...); */</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, red, blue);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, red, blue);</span><br></pre></td></tr></table></figure>

<ul>
<li>背景渐变必须添加浏览器私有前缀</li>
<li>起始方向可以是： 方位名词 或者 度数 ， 如果省略默认就是 top</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>axios</title>
    <url>/2024/01/20/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/203_Axios/20301_Axios/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# axios

<h2 id="HTTP-相关"><a href="#HTTP-相关" class="headerlink" title="HTTP 相关"></a>HTTP 相关</h2><h3 id="MDN-文档"><a href="#MDN-文档" class="headerlink" title="MDN 文档"></a>MDN 文档</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p>
</blockquote>
<h3 id="HTTP-请求基本过程"><a href="#HTTP-请求基本过程" class="headerlink" title="HTTP 请求基本过程"></a>HTTP 请求基本过程</h3><p><img src="https://s1.vika.cn/space/2023/02/26/d64a49eada014403a327aa46d7eb9cd5" alt="1657174160694"></p>
<ul>
<li>01 浏览器端向服务器发送 HTTP 请求(请求报文)</li>
<li>02 后台服务器接收到请求后,处理请求，向浏览器端返回 HTTP 响应(响应报文)</li>
<li>03 浏览器端接收到响应，解析<strong>显示响应体</strong>或<strong>调用回调函数</strong></li>
</ul>
<h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ul>
<li>格式 : method url</li>
<li>例如 : GET &#x2F;product_detail?id&#x3D;2 或 POST &#x2F;login</li>
</ul>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><ul>
<li>Host: <a href="http://www.baidu.come/">www.baidu.come</a></li>
<li>Cookie: BAIDUID&#x3D;AD3B0FA706E; BIDUPSID&#x3D;AD3BOFA706;</li>
<li>Content-Type: application&#x2F;x-www-form-urlencoded 或者 application&#x2F;json</li>
</ul>
<h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><ul>
<li>username&#x3D;tom&amp;pwd&#x3D;123</li>
<li>{“username”: “tom”, “pwd”: 123}</li>
<li>get 请求没有请求体</li>
</ul>
<h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><ul>
<li>格式: status statusText</li>
<li>例如: 200 OK 或 404 Not Found</li>
</ul>
<h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><ul>
<li>Cortent-Type: text&#x2F;html;charset&#x3D;utf-8</li>
<li>Set-Cookie: BD_CK_SAM&#x3D;1;path&#x3D;&#x2F;</li>
</ul>
<h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><ul>
<li>html&#x2F;ljson&#x2F;js&#x2F;css&#x2F;图片..</li>
</ul>
<h3 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h3><ul>
<li>200 OK 请求成功。一般用于 GET 与 POST 请求</li>
<li>201 Created 已创建。成功请求并创建了新的资源</li>
<li>401 Unauthorized 未授权 &#x2F; 请求要求用户的身份认证</li>
<li>404 Not Found 服务器无法根据客户端的请求找到资源</li>
<li>500 Internal Server Error 服务器内部错误，无法完成请求</li>
</ul>
<h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ul>
<li><p>01 GET (索取) : 从服匀器端读取数据—–查(R)</p>
</li>
<li><p>02 POST (交差) : 向服务器端添加新数据——增(C)</p>
</li>
<li><p>03 PUT : 更新服务器端已存在的数据——-改(U)</p>
</li>
<li><p>04 DELETE : 删除服务器端数据———删(D)</p>
</li>
</ul>
<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><h4 id="query-参数"><a href="#query-参数" class="headerlink" title="query 参数"></a>query 参数</h4><ul>
<li>01 参数包含在请求地址中，格式为: &#x2F;xxxx?name&#x3D;tom&amp;age&#x3D;18</li>
<li>02 敏感数据不要用 query 参数，因为参数是地址的一部分，比较危险,比如用户密码。</li>
<li>03 备注: query 参数又称<strong>查询字符串参数</strong>，编码方式为 urlencoded</li>
</ul>
<h4 id="params-参数"><a href="#params-参数" class="headerlink" title="params 参数"></a>params 参数</h4><ul>
<li><p>01 参数包含在请求地址中，格式: <a href="http://localhost:3000/add_person/tom/18">http://localhost:3000/add_person/tom/18</a></p>
</li>
<li><p>02 敏感数据不要用 params 参数，因为参数是地址的一部分，比较危险。比如用户密码。</p>
</li>
</ul>
<h4 id="请求体参数"><a href="#请求体参数" class="headerlink" title="请求体参数"></a>请求体参数</h4><ul>
<li><p>01 参数包含在请求体中，可通过浏览器开发工具查看</p>
</li>
<li><p>02 常用的两种格式:</p>
<ul>
<li>格式一: urlencoded 格式</li>
<li>例如: name&#x3D;tom&amp;age&#x3D;18</li>
<li>对应请求头:Content-Type: application&#x2F;x-www-form-urlencoded</li>
</ul>
</li>
<li><p>格式二: json 格式</p>
<ul>
<li>例如: {“name”: “tom”, “age”: 12}</li>
<li>对应请求头: Content-Type: application&#x2F;jsone</li>
</ul>
</li>
</ul>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul>
<li><strong>01 GET 请求不能携带请求体参数，因为 GET 请求没有请求体。</strong></li>
<li>02 理论上一次请求可以随意使用上述 3 种类型参数中的任何一种，甚至一次请求的 3 个参数可以用 3 种形式携带，但一般不这样做。</li>
<li>03 一般来说我们有一些“约定俗成”的规矩:<ul>
<li>(1) 例如 form 表单发送 post 请求时:自动使用请求体参数，用 urlencoded 编码。</li>
<li>(2) 例如 jQuery 发送 ajax-post 请求时:自动使用请求体参数，用 urlencoded 编码。</li>
</ul>
</li>
<li>04 开发中请求到底发给谁?用什么请求方式?携带什么参数?—-要参考项目的 API 接口</li>
</ul>
<h2 id="API-相关"><a href="#API-相关" class="headerlink" title="API 相关"></a>API 相关</h2><h3 id="API-分类"><a href="#API-分类" class="headerlink" title="API 分类"></a>API 分类</h3><ul>
<li>01 REST API<ul>
<li>restful 风格的 API</li>
<li>发送请求进行 CRUD , 哪个操作由请求方式来决定</li>
<li>同一个请求路径可以进行多个操作</li>
<li>请求方式会用到 GET &#x2F; POST &#x2F; PUT &#x2F; DELETE</li>
</ul>
</li>
<li>02 非 REST API<ul>
<li>restless 风格的 API</li>
<li>请求方式不决定请求的 CRUD 操作</li>
<li>一个请求路径只对应—个操作</li>
<li>一般只有 GET &#x2F; POST</li>
</ul>
</li>
</ul>
<h3 id="json-server-的使用"><a href="#json-server-的使用" class="headerlink" title="json-server 的使用"></a>json-server 的使用</h3><ul>
<li><ol>
<li>安装 json-server</li>
</ol>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>启动服务,会默认创建 db.json 文件</li>
</ol>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">json-server --watch db.json</span><br></pre></td></tr></table></figure>

<h3 id="postman-测试接口"><a href="#postman-测试接口" class="headerlink" title="postman 测试接口"></a>postman 测试接口</h3><ul>
<li>略</li>
</ul>
<h3 id="一般-http-请求与-ajax-请求"><a href="#一般-http-请求与-ajax-请求" class="headerlink" title="一般 http 请求与 ajax 请求"></a>一般 http 请求与 ajax 请求</h3><ul>
<li>01 ajax 请求是一种特别的 http 请求</li>
<li>02 对服务器端来说，没有任何区别，区别在浏览器端</li>
<li>03 浏览器端发请求: 只有 XHR 或 fetch 发出的才是 ajax 请求，其它所有的都是非 ajax 请求</li>
<li>04 浏览器端接收到响应<ul>
<li>(1) 一般请求:浏览器一般会直接显示响应体数据，也就是我们常说的自动刷新 &#x2F; 跳转页面</li>
<li>(2) ajax 请求:浏览器不会对界面进行任何更新操作，只是调用监视的回调函数并传入响应相关数据</li>
</ul>
</li>
</ul>
<h2 id="03-axios"><a href="#03-axios" class="headerlink" title="03 axios"></a>03 axios</h2><h3 id="axios-是什么"><a href="#axios-是什么" class="headerlink" title="axios 是什么"></a>axios 是什么</h3><ul>
<li>01 前端最流行的 ajax 请求库</li>
<li>02 react &#x2F; vue 官方都推荐使用 axios 发 ajax 请求</li>
<li>03 文档: <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></li>
</ul>
<h3 id="axios-特点"><a href="#axios-特点" class="headerlink" title="axios 特点"></a>axios 特点</h3><ul>
<li>01 基本 promise 的异步 ajax 请求库</li>
<li>02 浏览器端 &#x2F; node 端都可以使用</li>
<li>03 支持请求 &#x2F; 响应拦截器</li>
<li>04 支持请求取消</li>
<li>05 请求 &#x2F; 响应数据转换</li>
<li>06 批量发送多个请求</li>
</ul>
<h3 id="使用-axios-发起-ajax-请求"><a href="#使用-axios-发起-ajax-请求" class="headerlink" title="使用 axios 发起 ajax 请求"></a>使用 axios 发起 ajax 请求</h3><ul>
<li><p>01 axios 调用的返回值是 Promise 实例对象。</p>
</li>
<li><p>02 成功的值叫 response，失败的值叫 error</p>
</li>
<li><p>03 axios 成功的值是一个 axios 封装的 response 对象，服务器返回的真正数据在 response.data 中</p>
</li>
<li><p>完整写法:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.0.0-alpha.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 发送get请求-不携带参数</span></span></span><br><span class="line"><span class="language-javascript">    btn1.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:5000/persons&#x27;</span>, <span class="comment">//请求地址</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">//请求方法</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 成功时执行的回调</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 失败时执行的回调</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, error)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>精简写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn1.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 精简写法</span></span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/persons&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, response.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>精简写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn1.<span class="property">onclick</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 精简写法</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/persons&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="携带-query-参数发-get-请求"><a href="#携带-query-参数发-get-请求" class="headerlink" title="携带 query 参数发 get 请求"></a>携带 query 参数发 get 请求</h3><ul>
<li>完整写法:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn2.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 完整版 --  携带参数</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:5000/person&#x27;</span>, <span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">    <span class="attr">params</span>: &#123; <span class="attr">id</span>: personId.<span class="property">value</span> &#125;, <span class="comment">// 此处写的是 params，但携带的是query参数, params参数在url中拼接</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>精简写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn2.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 精简版</span></span><br><span class="line">  <span class="comment">// 此处写的是params，但携带的是query参数,params参数在url中拼接</span></span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/person&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="attr">id</span>: personId.<span class="property">value</span> &#125; &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="携带请求体参数发起-post-请求"><a href="#携带请求体参数发起-post-请求" class="headerlink" title="携带请求体参数发起 post 请求"></a>携带请求体参数发起 post 请求</h3><ul>
<li><p>axios 底层把 post 请求也封装成了复杂请求,在真正发起请求之前,会发起嗅探请求</p>
</li>
<li><p>完整写法:</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn3.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 完整版 --  携带参数</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:5000/person&#x27;</span>, <span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">    <span class="comment">// data: &#123; name: personName.value, age: personAge.value &#125; //携带请求体参数,json 编码</span></span><br><span class="line">    <span class="attr">data</span>: <span class="string">`name=<span class="subst">$&#123;personName.value&#125;</span>&amp;age=<span class="subst">$&#123;personAge.value&#125;</span>`</span>, <span class="comment">// 携带请求体参数,urlencoded 编码</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>精简写法:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn3.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 精简版</span></span><br><span class="line">  <span class="comment">// 携带请求体参数,用 json编码   如要使用 urlencoded编码,第二个参数直接用字符串模板拼串即可</span></span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/person&#x27;</span>, &#123; <span class="attr">name</span>: personName.<span class="property">value</span>, <span class="attr">age</span>: personAge.<span class="property">value</span> &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="携带请求体参数发起-PUT-请求"><a href="#携带请求体参数发起-PUT-请求" class="headerlink" title="携带请求体参数发起 PUT 请求"></a>携带请求体参数发起 PUT 请求</h3><ul>
<li>完整写法:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn4.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 完整版 --  携带参数</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:5000/person&#x27;</span>, <span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: personUpdateID.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">name</span>: personUpdateName.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">age</span>: personUpdateAge.<span class="property">value</span>,</span><br><span class="line">    &#125;, <span class="comment">//携带请求体参数,json编码</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>精简写法:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn4.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 精简版</span></span><br><span class="line">  <span class="comment">// 携带请求体参数,用 json编码   使用 urlencoded编码,第二个参数直接用字符串模板拼串即可</span></span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">put</span>(<span class="string">&#x27;http://localhost:5000/person&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: personUpdateID.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">name</span>: personUpdateName.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">age</span>: personUpdateAge.<span class="property">value</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="携带-params-参数发起-delete-请求"><a href="#携带-params-参数发起-delete-请求" class="headerlink" title="携带 params 参数发起 delete 请求"></a>携带 params 参数发起 delete 请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn5.<span class="property">click</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`http://localhost:5000/person/<span class="subst">$&#123;personDeleteId.value&#125;</span>`</span>, <span class="comment">//请求地址,携带params参数</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="axios-的常用配置项"><a href="#axios-的常用配置项" class="headerlink" title="axios 的常用配置项"></a>axios 的常用配置项</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 axios 配置默认属性</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2000</span> <span class="comment">// 超时时间</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span> = &#123; <span class="attr">token</span>: <span class="string">&#x27;a15g1eg51d854ge5151eged&#x27;</span> &#125; <span class="comment">// 请求头</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:5000&#x27;</span> <span class="comment">// 基础url</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// axios 的完整配置项,默认配置项会合并到这里</span></span><br><span class="line">btn6.<span class="property">click</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/person`</span>, <span class="comment">//请求地址,携带params参数</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">    <span class="comment">// params: &#123; a: 1, b: 2 &#125;, // 配置 query 参数</span></span><br><span class="line">    <span class="comment">// data: &#123; c: 3, d: 4 &#125;, // 配置请求体参数(json编码)</span></span><br><span class="line">    <span class="comment">// data: &quot;e=5&amp;f=6&quot;, // 配置请求体参数(urlencoded编码)</span></span><br><span class="line">    <span class="comment">// timeout: 2000, // 超时时间</span></span><br><span class="line">    <span class="comment">// header: &#123; demo: 123 &#125;,// 配置请求头</span></span><br><span class="line">    <span class="comment">// responseType: &quot;json&quot;, // 配置响应数据的格式(不写默认也是json)</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 成功时的回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失败时的回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="axios-的-create-方法"><a href="#axios-的-create-方法" class="headerlink" title="axios 的 create 方法"></a>axios 的 create 方法</h3><ul>
<li><p>axios.create( config)</p>
</li>
<li><p>01 根据指定配置创建一个新的 axios ，也就是每个新 axios 都有自己的配置</p>
</li>
<li><p>02 新 axios 只是没有取消请求和批量发请求的方法,其它所有语法都是一致的</p>
</li>
<li><p>03 为什么要设计这个语法?</p>
<ul>
<li>需求:项目中有部分接口需要的配置与另一部分接口需要的配置不太一样</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios2 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">2000</span>, <span class="comment">// 超时时间</span></span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="attr">token</span>: <span class="string">&#x27;a15g1eg51d854ge5151eged&#x27;</span> &#125;, <span class="comment">// 请求头</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">// 基础url</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个配置会进行合并</span></span><br><span class="line">btn7.<span class="property">click</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">axios2</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/person`</span>, <span class="comment">//请求地址url</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><ul>
<li>01 请求拦截器是什么?<ul>
<li><strong>在真正发请求前执行的一个回调函数</strong></li>
</ul>
</li>
<li>02 请求拦截器的作用:<ul>
<li>对所有的请求做统一的处理: 比如 <strong>追加请求头、追加参数、界面 loading 提示</strong>等等</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">token</span> = <span class="string">&#x27;a2g6e1g51dge48g51&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">btn8.<span class="property">click</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`http://localhost:5000/person`</span>, <span class="comment">//请求地址url</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><ul>
<li>01 响应拦截器是什么?<ul>
<li>得到响应之后执行的一组回调函数</li>
</ul>
</li>
<li>02 响应拦截器作用:<ul>
<li>若请求成功，对成功的数据进行处理, 若请求失败,对失败进行统一的操作</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器成功的回调&#x27;</span>, res)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// axios 将响应状态不是 2 开头的默认为失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器失败的回调&#x27;</span>, err)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">btn9.<span class="property">click</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`http://localhost:5000/person`</span>, <span class="comment">//请求地址url</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器成功的回调&#x27;</span>, res)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// axios 将响应状态不是2开头的默认为失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器失败的回调&#x27;</span>, err)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">btn9.<span class="property">click</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/persons&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CancelToken</span> &#125; = axios <span class="comment">// CancelToken 能为一次请求&quot;打标识&quot;</span></span><br><span class="line"><span class="keyword">let</span> cancel</span><br><span class="line"></span><br><span class="line">btn10.<span class="property">click</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`http://localhost:5000/person`</span>,</span><br><span class="line">    <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// c 是一个函数,调用c就可以取消本次请求</span></span><br><span class="line">      cancel = c</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">btn11.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">cancel</span>(<span class="string">&#x27;我是取消请求的提示信息,任性取消,就是不要数据了~~&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用户主动取消请求,会走 then 中的失败回调</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CancelToken</span>, isCancel &#125; = axios <span class="comment">// CancelToken 能为一次请求&quot;打标识&quot;</span></span><br><span class="line"><span class="keyword">let</span> cancel</span><br><span class="line"></span><br><span class="line">btn10.<span class="property">click</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (cancel) &#123;</span><br><span class="line">    <span class="title function_">cancel</span>()</span><br><span class="line">  &#125; <span class="comment">//防止重复请求</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`http://localhost:5000/person`</span>,</span><br><span class="line">    <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// c 是一个函数,调用c就可以取消本次请求</span></span><br><span class="line">      cancel = c</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 用户主动取消请求,也会走失败时的回调</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">        <span class="comment">// 如果进入了判断,说明是用户主动取消的请求</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户取消了请求,原因是:&#x27;</span>, error.<span class="property">message</span>) <span class="comment">// error.message 为取消请求的提示信息</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err) <span class="comment">//err为服务器返回的错误对象</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">btn11.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">cancel</span>(<span class="string">&#x27;我是取消请求的提示信息,任性取消,就是不要数据了~~&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求拦截器中取消请求"><a href="#请求拦截器中取消请求" class="headerlink" title="请求拦截器中取消请求"></a>请求拦截器中取消请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CancelToken</span>, isCancel &#125; = axios <span class="comment">// CancelToken 能为一次请求&quot;打标识&quot;</span></span><br><span class="line"><span class="keyword">let</span> cancel</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (cancel) &#123;</span><br><span class="line">    <span class="title function_">cancel</span>(<span class="string">&#x27;取消了&#x27;</span>) <span class="comment">// 取消请求,避免重复请求</span></span><br><span class="line">  &#125;</span><br><span class="line">  config.<span class="property">cancelToken</span> = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    cancel = c</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器成功的回调&#x27;</span>, res)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">      <span class="comment">// 如果进入了判断,说明是用于主动取消的请求</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户取消了请求,原因是:&#x27;</span>, error.<span class="property">message</span>) <span class="comment">//error.message 为取消请求的提示信息</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, err) <span class="comment">//err为服务器返回的错误对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发起请求</span></span><br><span class="line">btn10.<span class="property">click</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/persons&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="批量发起请求"><a href="#批量发起请求" class="headerlink" title="批量发起请求"></a>批量发起请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  axios.<span class="title function_">all</span>([axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/persons1&#x27;</span>), axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/persons2&#x27;</span>), axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:5000/persons3&#x27;</span>)]).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 返回的全部数据会放在一个数组中</span></span><br><span class="line">      <span class="comment">// 如果有一个请求有延时,则会等待,当所有数据都回来时,才会一起返回数据</span></span><br><span class="line">      <span class="comment">// 底层调用的是 Promise.all() 方法</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="生成-api-文档的工具"><a href="#生成-api-文档的工具" class="headerlink" title="生成 api 文档的工具"></a>生成 api 文档的工具</h3><ul>
<li>api-doc</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2024/01/19/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/202_Promise/20201_Promise/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# Promise\_入门到自定义

<p><img src="https://s1.vika.cn/space/2023/02/26/1aac60b7b54c455dab11922a089bc9c4"></p>
<p><img src="https://s1.vika.cn/space/2023/02/26/6f1d2c8d12b842ddb3be70e715359c3e"></p>
<h2 id="Promise-介绍与使用"><a href="#Promise-介绍与使用" class="headerlink" title="Promise 介绍与使用"></a>Promise 介绍与使用</h2><h3 id="Promise-是什么"><a href="#Promise-是什么" class="headerlink" title="Promise 是什么"></a>Promise 是什么</h3><ul>
<li><p>抽象表达:</p>
<ul>
<li><p>Promise 是一门新的技术( ES6 规范)</p>
</li>
<li><p>Promise 是 <strong>JS 中进行异步编程的新解决方案</strong>(例如: fs 文件操作,数据库操作, ajax ,定时器等)</p>
<ul>
<li>备注：旧方案是单纯使用回调函数</li>
</ul>
</li>
</ul>
</li>
<li><p>具体表达:</p>
<ul>
<li>从语法上来说: Promise 是一个构造函数</li>
<li>从功能上来说: Promise 对象用来封装一个异步操作并可以获取其成功 &#x2F; 失败的结果值</li>
</ul>
</li>
</ul>
<h3 id="为什么使用-Promise"><a href="#为什么使用-Promise" class="headerlink" title="为什么使用 Promise"></a>为什么使用 Promise</h3><ul>
<li><p>01 <strong>指定回调函数的方式更加灵活</strong></p>
<ul>
<li>旧的 : 必须在启动异步任务前指定</li>
<li>Promise: 启动异步任务 &#x3D;&gt; 返回 Promie 实例对象 &#x3D;&gt; 给 Promise 实例对象绑定回调函数 (甚至可以在异步任务结束后指定)</li>
</ul>
</li>
<li><p>02 <strong>支持链式调用 , 可以解决回调地狱问题</strong></p>
<ul>
<li>什么是回调地狱<ul>
<li><strong>回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</strong></li>
<li>回调地狱,例如:</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/25eb8a940d7744348b4d520a8fef409d" alt="1654504833819"></p>
<ul>
<li>回调地狱的缺点<ul>
<li>不便于阅读</li>
<li>不便于异常处理</li>
</ul>
</li>
<li>解决方案<ul>
<li>promise 链式调用</li>
</ul>
</li>
<li>终极解决方案<ul>
<li>async &#x2F; await</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Promise-初体验"><a href="#Promise-初体验" class="headerlink" title="Promise 初体验"></a>Promise 初体验</h2><h3 id="抽奖案例-利用函数回调实现"><a href="#抽奖案例-利用函数回调实现" class="headerlink" title="抽奖案例_利用函数回调实现"></a>抽奖案例_利用函数回调实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Promise初体验<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>点击抽奖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*需求:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            点击按钮,2s后显示是否中奖(30%概率中奖)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            若中奖弹出恭喜恭喜，奖品为10元劳斯莱斯优惠券</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            若未中奖弹出再接再厉</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//00 生成随机函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">rand</span>(<span class="params">m, n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (n - m + <span class="number">1</span>) + m - <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 获取元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//02.1 开启定时器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//02.2 获取一个 1 - 100 的随机数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> n = <span class="title function_">rand</span>(<span class="number">1</span>, <span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//02.3 判断 中奖率</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (n &lt;= <span class="number">30</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;恭喜恭喜，奖品为10元劳斯莱斯优惠券&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;再接再厉&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="抽奖案例-利用-Promise-实现"><a href="#抽奖案例-利用-Promise-实现" class="headerlink" title="抽奖案例_利用 Promise 实现"></a>抽奖案例_利用 Promise 实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Promise初体验<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>点击抽奖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*需求:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        点击按钮,2s后显示是否中奖(30%概率中奖)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        若中奖弹出恭喜恭喜，奖品为10元劳斯莱斯优惠券</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        若未中奖弹出再接再厉</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 生成随机函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">rand</span>(<span class="params">m, n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (n - m + <span class="number">1</span>) + m - <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//参数一: resolve 解决 函数类型 成功时的回调</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//参数二: reject 拒绝 函数类型 失败时的回调</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//03 获取一个 1 - 100 的随机数</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> n = <span class="title function_">rand</span>(<span class="number">1</span>, <span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//04 判断 中奖率</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (n &lt;= <span class="number">30</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resolve</span>(n) <span class="comment">//将Promise实例对象的状态设置为 成功,并传递成功时的参数</span></span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">reject</span>(n) <span class="comment">//将Promise实例对象的状态设置为 失败,并传递失败时的参数</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//05 调用 then 方法:</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   Promise实例对象p的状态为成功时执行第一个回调,失败则执行第二个回调,回调中的形参用于接收参数</span></span></span><br><span class="line"><span class="language-javascript">      p.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;恭喜恭喜，奖品为10元劳斯莱斯优惠券&#x27;</span> + value)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;再接再厉&#x27;</span> + reason)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-读取文件"><a href="#Promise-读取文件" class="headerlink" title="Promise 读取文件"></a>Promise 读取文件</h3><h4 id="回调函数形式读取文件"><a href="#回调函数形式读取文件" class="headerlink" title="回调函数形式读取文件"></a>回调函数形式读取文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求:读取同文件夹下的 ./resource/contant.txt 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//00 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//01 回调函数形式 读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/contant.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//02 判断是否读取出错,出错则抛出异常 err:错误对象</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//03 若成功读取到文件  data:读取到数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Promise-方法读取文件"><a href="#Promise-方法读取文件" class="headerlink" title="Promise 方法读取文件"></a>Promise 方法读取文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//00 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//01 Promise方法读取文件</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/contant.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//02 判断是否读取出错,出错则抛出异常 err:错误对象</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//03 若成功读取到文件  data:读取到数据</span></span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//04 调用 then 方法</span></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Promise-发送-ajax-请求"><a href="#Promise-发送-ajax-请求" class="headerlink" title="Promise 发送 ajax 请求"></a>Promise 发送 ajax 请求</h3><h4 id="原生-JS-写法"><a href="#原生-JS-写法" class="headerlink" title="原生 JS 写法"></a>原生 JS 写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>005_发送Ajax请求_函数回调<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>点击抽奖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 获取元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 绑定点击事件,发送ajax请求获取数据</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//1.创建ajax对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//2.初始化</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//3.发送</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//4.处理响应结果</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//判断响应状态码</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取到响应结果</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//输出响应状态码</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Primse-写法"><a href="#Primse-写法" class="headerlink" title="Primse 写法"></a>Primse 写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Promise发送ajax请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>点击抽奖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 获取元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 绑定点击事件,发送ajax请求获取数据</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建ajax对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.初始化</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.发送</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.处理响应结果</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//判断响应状态码</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//获取到响应结果</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//输出响应状态码</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">reject</span>(xhr.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//03 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">      p.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="封装一个方法读取文件"><a href="#封装一个方法读取文件" class="headerlink" title="封装一个方法读取文件"></a>封装一个方法读取文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 需求:</span></span><br><span class="line"><span class="comment"> * 封装一个函数用于读取文件内容</span></span><br><span class="line"><span class="comment"> * 参数:path 文件路径</span></span><br><span class="line"><span class="comment"> * 返回:Promise实例对象</span></span><br><span class="line"><span class="comment"> *  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//01 函数封装</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mineReadFile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFile</span>(path, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//判断</span></span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 调用方法</span></span><br><span class="line"><span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/contant.txt&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="util-promisify-方法"><a href="#util-promisify-方法" class="headerlink" title="util.promisify 方法"></a>util.promisify 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01 引入util模块  fs模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 util.promisify方法返回一个新的函数</span></span><br><span class="line"><span class="keyword">let</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//03 读取文件</span></span><br><span class="line"><span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/contant.txt&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="封装一个方法发送-ajax-请求"><a href="#封装一个方法发送-ajax-请求" class="headerlink" title="封装一个方法发送 ajax 请求"></a>封装一个方法发送 ajax 请求</h3><ul>
<li>封装一个方法,发送 ajax 请求:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 函数封装</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendAJAX</span>(<span class="params">url</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//将响应结果设置为json格式</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.初始化</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.发送</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.处理结果</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//判断成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">reject</span>(xhr.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//https://api.apiopen.top/getJoke</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sendAJAX</span>(<span class="string">&#x27;https://api.github.com/search/users?q=jquery&#x27;</span>).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-API"><a href="#Promise-API" class="headerlink" title="Promise API"></a>Promise API</h2><h3 id="Promise-的状态"><a href="#Promise-的状态" class="headerlink" title="Promise 的状态"></a>Promise 的状态</h3><ul>
<li>Promise 的状态:</li>
<li>Promise 的状态就是实例对象中的一个属性( PromiseState )</li>
<li>共有三种状态: <strong>pending 未决定的 resolved &#x2F; fullfilled 成功 rejected 失败</strong><ul>
<li><strong>状态只能由 pending 变为 resolved</strong></li>
<li><strong>状态只能由 pending 变为 rejected</strong></li>
</ul>
</li>
<li>说明 : 状态的改变只有这 2 种, 且<strong>一个 promise 对象的状态只能改变一次</strong><ul>
<li>无论变为成功还是失败 , 都会有一个结果数据</li>
<li>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</li>
</ul>
</li>
</ul>
<h3 id="Promise-对象的值"><a href="#Promise-对象的值" class="headerlink" title="Promise 对象的值"></a>Promise 对象的值</h3><ul>
<li>实例对象中的另一个属性『<strong>PromiseResult</strong>』</li>
<li><strong>保存着异步任务『成功&#x2F;失败』的结果</strong></li>
<li>resolve</li>
<li>reject</li>
</ul>
<h3 id="Promise-的工作流程"><a href="#Promise-的工作流程" class="headerlink" title="Promise 的工作流程"></a>Promise 的工作流程</h3><p><img src="https://s1.vika.cn/space/2023/02/26/47c80266fa1e471e88a8b151430627f5" alt="1654509929533"></p>
<h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><ul>
<li>Promise 构造函数: Promise (executor);<ul>
<li>(1) executor 函数:执行器( resolve, reject) &#x3D;&gt;{ }</li>
<li>(2) resolve 函数:内部定义成功时我们调用的函数: (value) &#x3D;&gt;{ }</li>
<li>(3) reject 函数:内部定义失败时我们调用的函数 (reason) &#x3D;&gt; { }</li>
</ul>
</li>
<li>说明: <strong>executor 称为执行器</strong>, 会在 Promise 内部立即同步调用,异步操作在执行器中执行</li>
</ul>
<h3 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h3><ul>
<li>Promise.prototype.then 方法 : (onResolved, onRejected) &#x3D;&gt; {}<ul>
<li>(1) onResolved 函数 : 成功的回调函数 (value) &#x3D;&gt; {}</li>
<li>(2) onRejected 函数 : 失败的回调函数 (reason) &#x3D;&gt; {}</li>
<li>说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调, 返回一个新的 promise 对象</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建 Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//执行器 会在 Promise内部立即同步调用 ,异步操作在执行器中执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// resolve(123) //改为成功状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">reject</span>(<span class="number">456</span>) <span class="comment">//改为失败状态</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   then方法:指定用于得到成功回调或者失败回调,只有一个回调会被执行   返回一个新的promise对象</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//成功时的回调,只能是成功状态执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//失败时的回调,只能是失败状态执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reason) <span class="comment">//456</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch 方法"></a>catch 方法</h3><ul>
<li>Promise.prototype.catch 方法 : (onRejected) &#x3D;&gt; {}</li>
<li>(1) onRejected 函数 : 失败的回调函数 (reason) &#x3D;&gt; {}</li>
<li>(2) 说明: then() 的语法糖 , 相当于 : then(undefined, onRejected)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建 Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//执行器 会在 Promise内部立即同步调用 ,异步操作在执行器中执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//resolve(123) //成功</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">reject</span>(<span class="number">456</span>) <span class="comment">//失败</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用then和catch方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//then方法:指定用于得到成功回调和得到失败回调,返回一个新的promise对象</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//成功时的回调,只能是成功状态执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//失败时的回调,只能是失败状态执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(reason) <span class="comment">// 456</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="resolve-方法"><a href="#resolve-方法" class="headerlink" title="resolve 方法"></a>resolve 方法</h3><ul>
<li><p>Promise.resolve 方法 : (value) &#x3D;&gt; { }</p>
<ul>
<li>value: 成功的数据或 promise 对象</li>
<li>说明: 返回一个成功 &#x2F; 失败的 promise 对象</li>
</ul>
</li>
<li><p>resolve 方法属于 Promise 构造函数的方法,不是 Promise 实例对象的方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01 调用Promise构造函数的resolve方法</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">515</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1) <span class="comment">//fulfilled 515</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果传入的参数为非Promise类型的对象，则返回的结果为成功promise对象</span></span><br><span class="line"><span class="comment">//如果传入的参数为 Promise对象，则参数的结果决定了resolve 的结果</span></span><br><span class="line"><span class="comment">//  传入的参数状态为成功,则结果的状态为成功,值为成功的值</span></span><br><span class="line"><span class="comment">//  传入的参数状态为失败,则结果的状态为失败,值为错误对象</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(123)  //fulfilled 123</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>) <span class="comment">//rejected error</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reason) <span class="comment">//error   02</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2) <span class="comment">//rejected error  01</span></span><br></pre></td></tr></table></figure>

<h3 id="reject-方法"><a href="#reject-方法" class="headerlink" title="reject 方法"></a>reject 方法</h3><ul>
<li><p>Promise.reject 方法 : (reason) &#x3D;&gt; { }</p>
<ul>
<li>reason: 失败的原因</li>
<li>说明: 返回一个失败的 promise 对象</li>
</ul>
</li>
<li><p>reject 方法属于 Promise 构造函数的方法,不是 Promise 实例对象的方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reject方法:返回一个失败的 promise对象,不管传入的参数是什么</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">123</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1) <span class="comment">//状态:rejected 值:123  返回的是一个失败状态的Promise实例对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若传入一个Promise对象对象</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//返回的是一个失败状态的 Promise 对象,值为传递进来的 Promise 实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2) <span class="comment">//状态:rejected 值:传入的Promise实例对象,该对象的状态为 fulfilled ,值为 OK</span></span><br></pre></td></tr></table></figure>

<h3 id="all-方法"><a href="#all-方法" class="headerlink" title="all 方法"></a>all 方法</h3><ul>
<li>Promise.all 方法 : ( promises ) &#x3D;&gt; {}<ul>
<li>promises: 包含 n 个 promise 实例对象的数组</li>
<li>说明: 返回一个新的 promise, 只有所有的 promise 实例对象的状态都是成功才是成功 , 只要有一个失败了就直接失败</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let p3 = Promise.resolve(&quot;oh Yeah&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;err&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用Promise的all方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//all方法:参数为数组,数组中的每一项为一个Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//返回一个新的 promise 实例对象, 只有当所有的 promise 都是成功状态时才成功 , 只要有一个失败了就直接失败</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//成功的值为: 所有成功的 Promise 实例对象的值组成的数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//失败的值为: 失败的那个 Promise 实例对象失败的值,如果有多个失败的 promise,则值为数组最左边的失败的 promise 的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p4, p3])</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 状态:rejected 值: err</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="race-方法"><a href="#race-方法" class="headerlink" title="race 方法"></a>race 方法</h3><ul>
<li>Promise.race 方法 : ( promises) &#x3D;&gt; { }<ul>
<li>promises: 包含 n 个 promise 实例对象的数组</li>
<li>说明: 返回一个新的 promise 实例对象, 第一个完成的 promise 的结果状态就是最终的结果状态</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;oh Yeah&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用race方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//race方法:</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//参数为一个数组,数组的每一项为Promise实例对象,返回一个promise</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//返回的promise对象的状态和值,由数组中最先改变状态的Promise实例对象决定</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//返回值是一个新的 promise, 值和状态就是第一个完成状态改变的promise实例对象的值和状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]) <span class="comment">//fulfilled OK</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-关键问题"><a href="#Promise-关键问题" class="headerlink" title="Promise 关键问题"></a>Promise 关键问题</h2><h3 id="改变-Promise-实例对象的状态"><a href="#改变-Promise-实例对象的状态" class="headerlink" title="改变 Promise 实例对象的状态"></a>改变 Promise 实例对象的状态</h3><ul>
<li>如何改变 promise 的状态<ul>
<li>(1) resolve(value): 如果当前是 pending 就会变为 resolved</li>
<li>(2) reject(reason): 如果当前是 pending 就会变为 rejected</li>
<li>(3) 抛出异常 : 如果当前是 pending 就会变为 rejected</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//1.resolve方法 //状态由 pending -&gt; fulfilled(resolved)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//resolve(&quot;OK&quot;) //&#123;&lt;fulfilled&gt;: &#x27;OK&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//2.reject方法 //状态由 pending -&gt; rejected</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//reject(&#x27;error&#x27;)  //&#123;&lt;rejected&gt;: &#x27;error&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//3.抛出错误  //状态由 pending -&gt; rejected</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span> <span class="comment">//&#123;&lt;rejected&gt;: &#x27;error&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-指定多个-then-回调"><a href="#Promise-指定多个-then-回调" class="headerlink" title="Promise 指定多个 then 回调"></a>Promise 指定多个 then 回调</h3><ul>
<li>一个 promise 指定多个成功 &#x2F; 失败回调函数 , 都会调用吗<ul>
<li><strong>当 promise 改变为对应状态时都会调用</strong></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//1.resolve方法 //状态由 pending -&gt; fulfilled(resolved)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>) <span class="comment">//&#123;&lt;fulfilled&gt;: &#x27;OK&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// reject(&quot;err&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 指定多个then回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//可以指定多个回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//只有当Promise实例对象的状态改变时,才会指定then方法中的回调,状态不改变不会执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//指定回调1</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//指定回调2</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="改变状态和指定回调的顺序"><a href="#改变状态和指定回调的顺序" class="headerlink" title="改变状态和指定回调的顺序"></a>改变状态和指定回调的顺序</h3><ul>
<li>改变 promise 状态和指定回调函数谁先谁后<ul>
<li>(1) 都有可能 , 正常情况下是先指定回调再改变状态 , 但也可以先改状态再指定回调</li>
<li>(2) 如何先改状态再指定回调<ul>
<li>① 在执行器中直接调用 resolve() &#x2F; reject()</li>
<li>② 延迟更长时间才调用 then()</li>
</ul>
</li>
<li>(3) 什么时候才能得到数据<ul>
<li>① 如果先指定的回调 , 那当状态发生改变时 , 回调函数就会调用 , 得到数据</li>
<li>② 如果先改变的状态 , 那当指定回调时 , 回调函数就会调用 , 得到数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.当执行器中是同步任务时,会先改变状态,再指定回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.当执行器中是异步任务时,会先指定回调,再改变状态,改变状态后,再执行回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//指定回调</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.当执行器中是同步任务时,会先改变状态,再指定回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.当执行器中是异步任务时,会先指定回调,再改变状态,改变状态后,再执行回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//指定回调</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="then-方法的返回值"><a href="#then-方法的返回值" class="headerlink" title="then 方法的返回值"></a>then 方法的返回值</h3><ul>
<li>promise.then() 返回的新 promise 实例对象的结果状态由什么决定 ?<ul>
<li>(1) 简单表达 : 由 then() 指定的回调函数执行的结果决定</li>
<li>(2) 详细表达 :<ul>
<li>① 如果抛出异常 , 新 promise 变为 rejected , reason 为抛出的异常</li>
<li>② 如果返回的是非 promise 的任意值 , 新 promise 变为 resolved, value 为返回的值</li>
<li>③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//then方法的返回值 返回一个新的Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//1.不写return语句</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//默认返回一个成功的Promise实例对象 值为undefined</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(value);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//2.return一个非Promise类型的对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//返回的是一个成功的Promise实例对象,值为return的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return 510</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//3.return一个Promise类型的对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//返回值是一个Promise实例对象,状态和值就是return的Promise对象的状态和值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="number">456</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="then-方法的链式调用"><a href="#then-方法的链式调用" class="headerlink" title="then 方法的链式调用"></a>then 方法的链式调用</h3><ul>
<li>promise 如何串连多个操作任务<ul>
<li>(1) promise 的 then() 返回一个新的 promise, 可以写成 then() 的链式调用</li>
<li>(2) 通过 then 的链式调用串连多个同步 &#x2F; 异步任务</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="number">456</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">//456</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// undefined 因为上一个 then 方法的返回值是一个非promise类型的成功 promise 实例对象,值为 undefined</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="异常穿透"><a href="#异常穿透" class="headerlink" title="异常穿透"></a>异常穿透</h3><ul>
<li>promise 异常传透<ul>
<li>(1) 当使用 promise 的 then 链式调用时 , 可以在最后指定失败的回调 ,</li>
<li>(2) 前面任何操作出了异常 , 都会传到最后失败的回调中处理</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// reject(&quot;err&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="number">123</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="string">&#x27;出错啦~&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="中断-Promise-链"><a href="#中断-Promise-链" class="headerlink" title="中断 Promise 链"></a>中断 Promise 链</h3><ul>
<li>有且只有一种方法 返回一个未定状态的 Promise 实例对象</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">///01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="number">123</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 123 后面的 then 不再执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//中断Promise链 有且只有一种方法 返回一个未定状态的Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">456</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-自定义封装"><a href="#Promise-自定义封装" class="headerlink" title="Promise 自定义封装"></a>Promise 自定义封装</h2><h3 id="搭建初始结构"><a href="#搭建初始结构" class="headerlink" title="搭建初始结构"></a>搭建初始结构</h3><ul>
<li><ol start="0">
<li>内置 Promise 实现的功能</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//01 创建Promise实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 调用then方法</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol>
<li>创建<strong>promise.js</strong>文件,声明构造函数和添加 then 方法</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="resolve-和-reject-方法的定义"><a href="#resolve-和-reject-方法的定义" class="headerlink" title="resolve 和 reject 方法的定义"></a>resolve 和 reject 方法的定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">  <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="resolve-和-reject-方法的实现"><a href="#resolve-和-reject-方法的实现" class="headerlink" title="resolve 和 reject 方法的实现"></a>resolve 和 reject 方法的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">//03.1 添加属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//03.2 保存实例对象的this的值</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//03.3 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="comment">//03.4 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//03.5 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="comment">//03.6 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">  <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理抛出异常改变状态"><a href="#处理抛出异常改变状态" class="headerlink" title="处理抛出异常改变状态"></a>处理抛出异常改变状态</h3><ul>
<li>添加 <code>try..catch..</code> 处理抛出异常</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">//03.1 添加属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//03.2 保存实例对象的this的值</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//03.3 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="comment">//03.4 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//03.5 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="comment">//03.6 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//04.1 添加 try..catch.. 处理抛出异常</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-的状态只能改变一次"><a href="#Promise-的状态只能改变一次" class="headerlink" title="Promise 的状态只能改变一次"></a>Promise 的状态只能改变一次</h3><ul>
<li>在 resolve 和 reject 方法中判断状态是否等于 pending,如果不是 pending 状态,直接结束方法的执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">//03.1 添加属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//03.2 保存实例对象的this的值</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.1 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.3 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="comment">//03.4 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.2 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.5 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="comment">//03.6 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//04.1 添加 try..catch.. 处理抛出异常</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加-then-方法执行回调"><a href="#添加-then-方法执行回调" class="headerlink" title="添加 then 方法执行回调"></a>添加 then 方法执行回调</h3><ul>
<li>判断状态是否等于 fulfilled 和 rejected,并分别调用传入 then 方法的两个回调</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异步任务回调的执行"><a href="#异步任务回调的执行" class="headerlink" title="异步任务回调的执行"></a>异步任务回调的执行</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">//03.1 添加属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//03.2 保存实例对象的this的值</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//07.1 声明一个属性,用于存储then方法成功和失败的回调</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">callback</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.1 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.3 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="comment">//03.4 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="comment">//07.4 调用成功的回调</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">callback</span>.<span class="property">onResolved</span>) &#123;</span><br><span class="line">      that.<span class="property">callback</span>.<span class="title function_">onResolved</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.2 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.5 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="comment">//03.6 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="comment">//07.5 调用失败的回调</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">callback</span>.<span class="property">onRejected</span>) &#123;</span><br><span class="line">      that.<span class="property">callback</span>.<span class="title function_">onRejected</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//04.1 添加 try..catch.. 处理抛出异常</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = &#123;</span><br><span class="line">      onResolved,</span><br><span class="line">      onRejected,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指定多个回调的实现"><a href="#指定多个回调的实现" class="headerlink" title="指定多个回调的实现"></a>指定多个回调的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">//03.1 添加属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//03.2 保存实例对象的this的值</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//07.1 声明一个属性,用于存储then方法成功和失败的回调</span></span><br><span class="line">  <span class="comment">//08.1 将callback的类型改为一个数组</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">callbacks</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.1 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.3 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="comment">//03.4 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="comment">//07.4 调用成功的回调</span></span><br><span class="line">    <span class="comment">//08.3 遍历数组,调用成功的回调</span></span><br><span class="line">    that.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item.<span class="title function_">onResolved</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.2 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.5 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="comment">//03.6 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="comment">//07.5 调用失败的回调</span></span><br><span class="line">    <span class="comment">//08.4 遍历数组,调用失败的回调</span></span><br><span class="line">    that.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item.<span class="title function_">onRejected</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//04.1 添加 try..catch.. 处理抛出异常</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">    <span class="comment">//08.2 将回调函数添加到数组中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      onResolved,</span><br><span class="line">      onRejected,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步状态修改-then-返回结果"><a href="#同步状态修改-then-返回结果" class="headerlink" title="同步状态修改 then 返回结果"></a>同步状态修改 then 返回结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//09.1 return一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//09.6 添加try..catch..处理抛出异常</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//09.2 获取回调函数的执行结果</span></span><br><span class="line">        <span class="keyword">let</span> result = <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">        <span class="comment">//09.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          <span class="comment">//09.5 如果是Promise类型的对象</span></span><br><span class="line">          result.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(v)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">reject</span>(r)</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//09.4 结果的状态为成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">      <span class="comment">//08.2 将回调函数添加到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        onResolved,</span><br><span class="line">        onRejected,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异步状态修改-then-返回结果"><a href="#异步状态修改-then-返回结果" class="headerlink" title="异步状态修改 then 返回结果"></a>异步状态修改 then 返回结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//10.1 获取到this的值</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//09.1 return一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//09.6 添加try..catch..处理抛出异常</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//09.2 获取回调函数的执行结果</span></span><br><span class="line">        <span class="keyword">let</span> result = <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">        <span class="comment">//09.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          <span class="comment">//09.5 如果是Promise类型的对象</span></span><br><span class="line">          result.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(v)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">reject</span>(r)</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//09.4 结果的状态为成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">      <span class="comment">//08.2 将回调函数添加到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">onResolved</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">//10.6 添加try..catch..处理抛出异常</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//10.2 执行成功的回调,获取执行结果</span></span><br><span class="line">            <span class="keyword">let</span> result = <span class="title function_">onResolved</span>(self.<span class="property">PromiseResult</span>)</span><br><span class="line">            <span class="comment">//10.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">              result.<span class="title function_">then</span>(</span><br><span class="line">                <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="title function_">resolve</span>(v)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="title function_">reject</span>(r)</span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(result)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onRejected</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">//10.7 添加try..catch..处理抛出异常</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//10.4 执行失败的回调,获取执行结果</span></span><br><span class="line">            <span class="keyword">let</span> result = <span class="title function_">onRejected</span>(self.<span class="property">PromiseResult</span>)</span><br><span class="line">            <span class="comment">//10.5 判断结果是否是Promise的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">              result.<span class="title function_">then</span>(</span><br><span class="line">                <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="title function_">resolve</span>(v)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="title function_">reject</span>(r)</span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(result)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="then-方法的完善"><a href="#then-方法的完善" class="headerlink" title="then 方法的完善"></a>then 方法的完善</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//11.1 添加try..catch..处理抛出异常</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//11.2 获取函数执行的结果</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">    <span class="comment">//11.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">      result.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(v)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数封装:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//10.1 获取到this的值</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//09.1 return一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//11.4 函数封装</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>) &#123;</span><br><span class="line">      <span class="comment">//09.6 添加try..catch..处理抛出异常</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//09.2 获取回调函数的执行结果</span></span><br><span class="line">        <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>)</span><br><span class="line">        <span class="comment">//09.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          <span class="comment">//09.5 如果是Promise类型的对象</span></span><br><span class="line">          result.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(v)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">reject</span>(r)</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//09.4 结果的状态为成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(onResolved) <span class="comment">//11.5 调用函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(onRejected) <span class="comment">//11.6 调用函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">      <span class="comment">//08.2 将回调函数添加到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">onResolved</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onResolved) <span class="comment">//11.7 调用函数</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onRejected</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onRejected) <span class="comment">//11.8 调用函数</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="catch-异常穿透-值传递"><a href="#catch-异常穿透-值传递" class="headerlink" title="catch&#x2F;异常穿透&#x2F;值传递"></a>catch&#x2F;异常穿透&#x2F;值传递</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//10.1 获取到this的值</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//12.2 判断回调函数参数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    onRejected = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//12.3 判断回调函数参数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    onResolved = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//09.1 return一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//11.4 函数封装</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>) &#123;</span><br><span class="line">      <span class="comment">//09.6 添加try..catch..处理抛出异常</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//09.2 获取回调函数的执行结果</span></span><br><span class="line">        <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>)</span><br><span class="line">        <span class="comment">//09.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          <span class="comment">//09.5 如果是Promise类型的对象</span></span><br><span class="line">          result.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(v)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">reject</span>(r)</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//09.4 结果的状态为成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(onResolved)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(onRejected)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">      <span class="comment">//08.2 将回调函数添加到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">onResolved</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onResolved)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onRejected</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onRejected)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//12.1 添加catch方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加-resolve-方法"><a href="#添加-resolve-方法" class="headerlink" title="添加 resolve 方法"></a>添加 resolve 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//13.1 添加resolve方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">//返回Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">      value.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(v)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//状态设置为成功</span></span><br><span class="line">      <span class="title function_">resolve</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加-reject-方法"><a href="#添加-reject-方法" class="headerlink" title="添加 reject 方法"></a>添加 reject 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//14.1 添加reject方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">  <span class="comment">//返回Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下用于测试:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br></pre></td></tr></table></figure>

<h3 id="添加-all-方法"><a href="#添加-all-方法" class="headerlink" title="添加 all 方法"></a>添加 all 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//15.1 添加all方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//声明变量</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      promises[i].<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">          <span class="comment">//每个promise对象都成功</span></span><br><span class="line">          count++</span><br><span class="line">          <span class="comment">//将当前promise对象成功的结果存入到数组中</span></span><br><span class="line">          arr[i] = v</span><br><span class="line">          <span class="comment">//判断</span></span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="comment">//修改状态</span></span><br><span class="line">            <span class="title function_">resolve</span>(arr)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加-race-方法"><a href="#添加-race-方法" class="headerlink" title="添加 race 方法"></a>添加 race 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//16.1 添加race方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      promises[i].<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//修改返回对象的状态为「 成功」</span></span><br><span class="line">          <span class="title function_">resolve</span>(v)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//修改返回对象的状态为「 失败」</span></span><br><span class="line">          <span class="title function_">reject</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下用于测试:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&quot;OK&quot;)</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用race方法</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="then-方法回调的异步执行"><a href="#then-方法回调的异步执行" class="headerlink" title="then 方法回调的异步执行"></a>then 方法回调的异步执行</h3><ul>
<li>添加了定时器</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//01.1 声明构造函数 形参executor:构造器函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="comment">//03.1 添加属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//03.2 保存实例对象的this的值</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//07.1 声明一个属性,用于存储then方法成功和失败的回调</span></span><br><span class="line">  <span class="comment">//08.1 将callback的类型改为一个数组</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">callbacks</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.1 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.3 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="comment">//03.4 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="comment">//07.4 调用成功的回调</span></span><br><span class="line">    <span class="comment">//08.3 遍历数组,调用成功的回调</span></span><br><span class="line">    <span class="comment">//17.1 添加定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      that.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        item.<span class="title function_">onResolved</span>(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//05.2 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//03.5 修改对象的状态(PromiseState)</span></span><br><span class="line">    that.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="comment">//03.6 修改对象的结果值(PromiseResult)</span></span><br><span class="line">    that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="comment">//07.5 调用失败的回调</span></span><br><span class="line">    <span class="comment">//08.4 遍历数组,调用失败的回调</span></span><br><span class="line">    <span class="comment">//17.2 添加定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      that.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        item.<span class="title function_">onRejected</span>(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//04.1 添加 try..catch.. 处理抛出异常</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.2 添加then方法 两个形参:都是函数类型</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//10.1 获取到this的值</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//12.2 判断回调函数参数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      onRejected = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> reason</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//12.3 判断回调函数参数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      onResolved = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//09.1 return一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//11.4 函数封装</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>) &#123;</span><br><span class="line">      <span class="comment">//09.6 添加try..catch..处理抛出异常</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//09.2 获取回调函数的执行结果</span></span><br><span class="line">        <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>)</span><br><span class="line">        <span class="comment">//09.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          <span class="comment">//09.5 如果是Promise类型的对象</span></span><br><span class="line">          result.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(v)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">reject</span>(r)</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//09.4 结果的状态为成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//17.3 添加定时器</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(onResolved)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//17.4 添加定时器</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(onRejected)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">      <span class="comment">//08.2 将回调函数添加到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">onResolved</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onResolved)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onRejected</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onRejected)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//12.1 添加catch方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//13.1 添加resolve方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">//返回Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">      value.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(v)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//状态设置为成功</span></span><br><span class="line">      <span class="title function_">resolve</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//14.1 添加reject方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">  <span class="comment">//返回Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//15.1 添加all方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//声明变量</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      promises[i].<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">          <span class="comment">//每个promise对象都成功</span></span><br><span class="line">          count++</span><br><span class="line">          <span class="comment">//将当前promise对象成功的结果存入到数组中</span></span><br><span class="line">          arr[i] = v</span><br><span class="line">          <span class="comment">//判断</span></span><br><span class="line">          <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="comment">//修改状态</span></span><br><span class="line">            <span class="title function_">resolve</span>(arr)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//16.1 添加race方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      promises[i].<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//修改返回对象的状态为「 成功」</span></span><br><span class="line">          <span class="title function_">resolve</span>(v)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//修改返回对象的状态为「 失败」</span></span><br><span class="line">          <span class="title function_">reject</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="class-类的封装"><a href="#class-类的封装" class="headerlink" title="class 类的封装"></a>class 类的封装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">//03.1 添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//03.2 保存实例对象的this的值</span></span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//07.1 声明一个属性,用于存储then方法成功和失败的回调</span></span><br><span class="line">    <span class="comment">//08.1 将callback的类型改为一个数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//02.1 定义resolve方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="comment">//05.1 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">      <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//03.3 修改对象的状态(PromiseState)</span></span><br><span class="line">      that.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">      <span class="comment">//03.4 修改对象的结果值(PromiseResult)</span></span><br><span class="line">      that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">      <span class="comment">//07.4 调用成功的回调</span></span><br><span class="line">      <span class="comment">//08.3 遍历数组,调用成功的回调</span></span><br><span class="line">      <span class="comment">//17.1 添加定时器</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        that.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          item.<span class="title function_">onResolved</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//02.2 定义reject方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="comment">//05.2 判断状态是否等于pending  Promise的状态只能改变一次</span></span><br><span class="line">      <span class="keyword">if</span> (that.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//03.5 修改对象的状态(PromiseState)</span></span><br><span class="line">      that.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">      <span class="comment">//03.6 修改对象的结果值(PromiseResult)</span></span><br><span class="line">      that.<span class="property">PromiseResult</span> = data</span><br><span class="line"></span><br><span class="line">      <span class="comment">//07.5 调用失败的回调</span></span><br><span class="line">      <span class="comment">//08.4 遍历数组,调用失败的回调</span></span><br><span class="line">      <span class="comment">//17.2 添加定时器</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        that.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          item.<span class="title function_">onRejected</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//04.1 添加 try..catch.. 处理抛出异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//02.3 同步调用执行器函数</span></span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//then方法封装</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolved, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">//10.1 获取到this的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//12.2 判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onRejected = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//12.3 判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onResolved = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//09.1 return一个Promise实例对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//11.4 函数封装</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="comment">//09.6 添加try..catch..处理抛出异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//09.2 获取回调函数的执行结果</span></span><br><span class="line">          <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>)</span><br><span class="line">          <span class="comment">//09.3 判断结果是否是Promise的实例对象</span></span><br><span class="line">          <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">            <span class="comment">//09.5 如果是Promise类型的对象</span></span><br><span class="line">            result.<span class="title function_">then</span>(</span><br><span class="line">              <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v)</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(r)</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//09.4 结果的状态为成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//06.1 调用then方法成功时的回调函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//17.3 添加定时器</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onResolved)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//06.2 调用then方法失败时的回调函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//17.4 添加定时器</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>(onRejected)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//07.2 判断pending状态</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//07.3 保存回调函数</span></span><br><span class="line">        <span class="comment">//08.2 将回调函数添加到数组中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">onResolved</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(onResolved)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onRejected</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(onRejected)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//catch方法</span></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//resolve方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">//返回Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">        value.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(v)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//状态设置为成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//reject方法</span></span><br><span class="line">  <span class="keyword">static</span> reject = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">//返回Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(reason)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//all方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//声明变量</span></span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> arr = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        promises[i].<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">            <span class="comment">//每个promise对象都成功</span></span><br><span class="line">            count++</span><br><span class="line">            <span class="comment">//将当前promise对象成功的结果存入到数组中</span></span><br><span class="line">            arr[i] = v</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="comment">//修改状态</span></span><br><span class="line">              <span class="title function_">resolve</span>(arr)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//race方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        promises[i].<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//修改返回对象的状态为「 成功」</span></span><br><span class="line">            <span class="title function_">resolve</span>(v)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//修改返回对象的状态为「 失败」</span></span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h2><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><ul>
<li>会将函数的返回值包装成一个 promise 实例对象,状态和值由函数的返回值决定</li>
<li>promise 对象的结果由 async 函数执行的返回值决定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//01 如果返回值是一个非Promise类型的数据,则返回的是一个成功的Promise,值为返回的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return 520</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//02 如果返回的是一个Promise对象,则状态和值有返回的Promise决定</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return new Promise((resolve,rejece) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   // resolve(&quot;123&quot;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   rejece(&quot;error&quot;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//03 抛出异常 ,则返回的是一个失败的Promise,值为抛出的异常值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="title function_">main</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// Promise &#123;&lt;rejected&gt;: &#x27;error&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><ul>
<li><strong>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</strong><ul>
<li><strong>await 右侧的表达式如果是一个成功状态的 promise 实例对象, 则 await 返回的就是 promise 成功时的值</strong></li>
<li><strong>await 右侧的表达式如果是一个失败状态的 promise 实例对象, 则 await 返回的就是 promise 失败时的值</strong></li>
</ul>
</li>
<li>如果表达式是其它值, 直接将此值作为 await 的返回值</li>
<li><strong>await 必须写在 async 函数中, 但 async 函数中可以没有 await</strong></li>
<li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过<code>try...catch </code>捕获处理</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// resolve(123)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//01 await右边是Promise时,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  如果是成功的Promise,则返回的是成功时的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  如果是失败的Promise,则直接抛出异常</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// let res = await p;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(res);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//02 await右边为其他类型的数据时,直接返回该数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// let res = await 20;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(res);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//03 await右边为失败的Promise时,直接抛出异常</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  通过try..catch..捕获异常  e为失败的Promise的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> res = <span class="keyword">await</span> p</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">main</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="async-和-await-的结合"><a href="#async-和-await-的结合" class="headerlink" title="async 和 await 的结合"></a>async 和 await 的结合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:读取 ./resource文件夹下的  1.txt  2.txt 3.txt 这三个文件的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数的方式</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/1.txt&#x27;</span>, <span class="function">(<span class="params">err, data1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/2.txt&#x27;</span>, <span class="function">(<span class="params">err, data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./resource/3.txt&#x27;</span>, <span class="function">(<span class="params">err, data3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data1 + data2 + data3)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:读取 ./resource 文件夹下的  1.txt  2.txt 3.txt 这三个文件的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//async 与 await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//读取第一个文件的内容</span></span><br><span class="line">    <span class="keyword">let</span> data1 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/12.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> data2 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/2.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> data3 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&#x27;./resource/3.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1 + data2 + data3) <span class="comment">//你好啊,李银河</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h3 id="async-和-await-发起-ajax-请求"><a href="#async-和-await-发起-ajax-请求" class="headerlink" title="async 和 await 发起 ajax 请求"></a>async 和 await 发起 ajax 请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击获取段子<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 封装一个方法,用于发起 ajax 请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendAJAX</span>(<span class="params">url</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//处理结果</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//判断成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//成功的结果</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">reject</span>(xhr.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//段子接口地址 https://api.apiopen.top/getJoke</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取段子信息</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> duanzi = <span class="keyword">await</span> <span class="title function_">sendAJAX</span>(<span class="string">&#x27;https://api.github.com/search/users?q=jquery&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 因为 await 右边的函数调用后返回的是一个成功的Promise实例对象,直接获取到了该Promise实例对象的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(duanzi)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>Fetch</title>
    <url>/2024/01/21/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/204_Fetch/20401_Fetch/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# 两小时入门 fetch

<h2 id="fetch-基本认知"><a href="#fetch-基本认知" class="headerlink" title="fetch 基本认知"></a>fetch 基本认知</h2><h3 id="以前请求方式"><a href="#以前请求方式" class="headerlink" title="以前请求方式"></a>以前请求方式</h3><ul>
<li><p><strong>思考：</strong> 以前开发中如何向服务器请求数据的？</p>
</li>
<li><p>方法一：通过 <code>Ajax</code> 向服务器请求数据，而 <code>Ajax</code> 本质就是使用 <code>XMLHttpRequest</code> 对象实现的</p>
<blockquote>
<p>可以实现，但是代码写起来很麻烦</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建一个xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2、设置请求方式和请求地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks?name=zs&amp;age=18&#x27;</span>)</span><br><span class="line"><span class="comment">// 3、发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">// 4.监听load事件获取响应结果</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：通过 <code>axios</code> 实现的代码精简不少，但是 axios 底层仍然是基于 <code>XMLHttpRequest</code> 对象实现的，本质不变，只是进行了 <code>promise</code> 封装</p>
</li>
</ul>
<p><strong>那么目前除了使用 <code>XMLHttpRequest</code> 发送请求之外，还有没有其他方式呢？</strong></p>
<ul>
<li>有，就是 fetch</li>
</ul>
<h3 id="什么是-fetch"><a href="#什么是-fetch" class="headerlink" title="什么是 fetch"></a>什么是 fetch</h3><ul>
<li><p><code>Fetch</code> 被称之为下一代 <code>Ajax</code> 技术，内部采用 <code>Promise</code> 方式来处理数据</p>
<blockquote>
<p>可以直接.then 即可</p>
</blockquote>
</li>
<li><p>API 语法简洁明了，比 <code>XMLHttpRequest </code> 更加简单易用</p>
</li>
<li><p>采用了模块化设计，API 分散于多个对象中（如：Response 对象、Request 对象、Header 对象）</p>
</li>
<li><p>通过数据流（ Stream 对象）处理数据，可以分块读取，有利于提高网站性能，对于大文件或者网速慢的场景极为有用</p>
</li>
</ul>
<p><strong>兼容性：浏览器支持程度如何？</strong></p>
<ul>
<li>最新统计（<a href="https://caniuse.com/?search=fetch">下图所示</a>）：fetch 可以支持到 <code>96.83%</code> 的用户端，除了 IE，主流浏览器都已兼容</li>
<li>注意点：不兼容 IE</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/cbee6ab3e62a48b9a71a65c9a2d40333" alt="image-20220706110840005"></p>
<h2 id="fetch-如何使用"><a href="#fetch-如何使用" class="headerlink" title="fetch 如何使用"></a>fetch 如何使用</h2><ul>
<li>【博客文档推荐】<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html">https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html</a></li>
</ul>
</li>
</ul>
<h3 id="fetch-发送基本-get-请求"><a href="#fetch-发送基本-get-请求" class="headerlink" title="fetch 发送基本 get 请求"></a>fetch 发送基本 get 请求</h3><p><strong>介绍：</strong></p>
<ul>
<li>如果 fetch() 只接收了一个 url 字符串 参数，表示默认向该网址发送 get 请求，会返回一个 Promise 对象</li>
<li>如果需要设置 get 的参数，直接拼接到 url 地址上即可</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url)</span><br><span class="line">  .<span class="title function_">then</span>(...)</span><br><span class="line">  .<span class="title function_">catch</span>(...)</span><br></pre></td></tr></table></figure>

<h4 id="fetch-发送基本的-get-请求"><a href="#fetch-发送基本的-get-请求" class="headerlink" title="fetch 发送基本的 get 请求"></a>fetch 发送基本的 get 请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口地址：http://ajax-base-api-t.itheima.net/api/getbooks</span></span><br><span class="line"><span class="comment">// 请求方式：get</span></span><br><span class="line"><span class="comment">// 查询参数(可选)：</span></span><br><span class="line"><span class="comment">//   1、id:需要查询的图书id</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 得到的res，是一个Response对象，需要通过特定方法获取其中内容</span></span><br><span class="line">    <span class="comment">// res.json() 是一个异步操作，表示取出所有的内容，将其转换成JSON对象</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// json : 获取经过 res.json() 处理过之后的数据 ——》正常通过ajax获取的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用-async-await-改写"><a href="#使用-async-await-改写" class="headerlink" title="使用 async-await 改写"></a>使用 async-await 改写</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口地址：http://ajax-base-api-t.itheima.net/api/getbooks</span></span><br><span class="line"><span class="comment">// 请求方式：get</span></span><br><span class="line"><span class="comment">// 查询参数(可选)：</span></span><br><span class="line"><span class="comment">//   1、id:需要查询的图书id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、把代码封装成async异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 通过try...catch语法处理async-await成功和失败的情况</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 1.1 先获取Response对象 ,此时 res 就是一个Response对象</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>)</span><br><span class="line">    <span class="comment">// 1.2 通过 res.json() 取出 response 对象中的数据</span></span><br><span class="line">    <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json) <span class="comment">// &#123;status: 200, msg: &#x27;获取图书列表成功&#x27;, data: Array(6)&#125;</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 捕获错误信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>() <span class="comment">// 2. 函数调用</span></span><br></pre></td></tr></table></figure>

<h4 id="添加查询参数"><a href="#添加查询参数" class="headerlink" title="添加查询参数"></a>添加查询参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、如果需要通过get请求设置查询参数如何实现？</span></span><br><span class="line"><span class="comment">//    可以通过地址栏拼接查询参数完成</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 通过try...catch语法处理async-await成功和失败的情况</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 先获取Response对象</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks?id=1&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="comment">// 通过res.json() 取出response对象中的数据</span></span><br><span class="line">    <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 捕获错误信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData1</span>()</span><br></pre></td></tr></table></figure>

<h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><p>fetch 请求成功以后，得到的是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response">Response 对象</a>。它是对应服务器的 HTTP 响应。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">ok</span>) <span class="comment">// 返回一个布尔类型，表示请求是否成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">status</span>) <span class="comment">// 响应状态码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">statusText</span>) <span class="comment">// 返回状态的文本信息（例如：请求成功之后，服务器返回ok）</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">url</span>) <span class="comment">// 请求的地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure>

<h4 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h4><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">res.ok</td>
<td align="center">返回一个布尔类型，表示请求是否成功</td>
</tr>
<tr>
<td align="center">res.status</td>
<td align="center">返回一个数字，表示 HTTP 回应的状态码（例如：200，表示以请求成功）</td>
</tr>
<tr>
<td align="center">res.statusText</td>
<td align="center">返回状态的文本信息（例如：请求成功之后，服务器返回 ok）</td>
</tr>
<tr>
<td align="center">res.url</td>
<td align="center">返回请求的 url 地址</td>
</tr>
</tbody></table>
<p><img src="https://s1.vika.cn/space/2023/02/26/2ae077d34d6f458b934e0fa2cc2a1273" alt="image-20220706124501802"></p>
<h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><p>Response 对象根据服务器返回的不同类型的数据，提供了不同的读取方法。</p>
<p>其中最常用的就是 <code>res.json()</code></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>res.json()</strong></td>
<td align="center"><strong>得到 JSON 对象</strong></td>
</tr>
<tr>
<td align="center">res.text()</td>
<td align="center">得到文本字符串</td>
</tr>
<tr>
<td align="center">res.blob()</td>
<td align="center">得到二进制 Blob 对象</td>
</tr>
<tr>
<td align="center">res.formData()</td>
<td align="center">得到 FormData 表单对象</td>
</tr>
<tr>
<td align="center">res.arrayBuffer()</td>
<td align="center">得到二进制 ArrayBuffer 对象</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">ok</span>) <span class="comment">// 返回一个布尔类型，表示请求是否成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">status</span>) <span class="comment">// 响应状态码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">statusText</span>) <span class="comment">// 返回状态的文本信息（例如：请求成功之后，服务器返回ok）</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">url</span>) <span class="comment">// 请求的地址</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>() <span class="comment">// 得到 json 对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json) <span class="comment">// &#123;status: 200, msg: &#x27;获取图书列表成功&#x27;, data: Array(8)&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure>

<h3 id="fetch-配置参数"><a href="#fetch-配置参数" class="headerlink" title="fetch 配置参数"></a>fetch 配置参数</h3><h4 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h4><p>fetch 的第一个参数是 <code>url</code> ，此外还可以接收第二个参数，作为配置对象，可以自定义发出的 HTTP 请求</p>
<p>比如：<code>fetch(url,options)</code></p>
<p>其中：post、put、patch 用法类似，咱们这边以 post 为例演示</p>
<p><strong>配置参数介绍：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;请求方式，比如：post、delete、put&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>：<span class="string">&#x27;数据格式&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>:<span class="string">&#x27;post请求体数据&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="fetch-发送-post-请求"><a href="#fetch-发送-post-请求" class="headerlink" title="fetch 发送 post 请求"></a>fetch 发送 post 请求</h4><blockquote>
<p>咱们这边以开发中用的较多的 JSON 格式的情况为例</p>
</blockquote>
<p><strong>基本语法 1：</strong>json 格式（常用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试接口（新增操作）：</span></span><br><span class="line"><span class="comment">// 接口地址：http://ajax-base-api-t.itheima.net/api/addbook</span></span><br><span class="line"><span class="comment">// 请求方式：post</span></span><br><span class="line"><span class="comment">// 请求体参数：</span></span><br><span class="line"><span class="comment">//  1、书名：bookname</span></span><br><span class="line"><span class="comment">//  2、作者：author</span></span><br><span class="line"><span class="comment">//  3、出版社：publisher</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// post发送：json格式</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">bookname</span>: <span class="string">&#x27;魔法书之如何快速学好前端666666&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;茵蒂克丝&#x27;</span>,</span><br><span class="line">    <span class="attr">publisher</span>: <span class="string">&#x27;格兰芬多&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/addbook&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="comment">// 请求方法</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="comment">// 请求头</span></span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj), <span class="comment">// 请求体参数,携带的是字符串格式的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json) <span class="comment">// &#123;status: 201, msg: &#x27;添加图书成功&#x27;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>()</span><br></pre></td></tr></table></figure>

<p><strong>基本语法 2：</strong> x-www-form-urlencoded 格式（了解）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;foo=bar&amp;lorem=ipsum&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add1</span>()</span><br></pre></td></tr></table></figure>

<p><strong>基本语法 3：</strong>formData 格式（了解）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(form),</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add2</span>()</span><br></pre></td></tr></table></figure>

<h2 id="fetch-请求函数封装"><a href="#fetch-请求函数封装" class="headerlink" title="fetch 请求函数封装"></a>fetch 请求函数封装</h2><p>原生 fetch 虽然已经支持 promise 了，相比 XMLHttpRequest 已然好用了很多，但是参数还是需要自己处理，比较麻烦</p>
<p><strong>比如：</strong></p>
<ul>
<li><p>get delete 的请求参数，要在地址栏拼接</p>
</li>
<li><p>put patch post 的请求参数，要转 json 设置请求头</p>
</li>
<li><p>所以实际工作，我们还是会对 fetch 二次封装</p>
</li>
</ul>
<p><strong>目标效果：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送get请求、delete请求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;......&#125;</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送post请求、put请求、patch请求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;......&#125;</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>封装之后代码如下：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">http</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; method, url, params, data &#125; = obj <span class="comment">// 解构</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有params参数</span></span><br><span class="line">  <span class="comment">// 1、如果有params参数，则把params对象转换成 key=value&amp;key=value的形式，并且拼接到url之后</span></span><br><span class="line">  <span class="comment">// 2、如果没有params参数，则不管</span></span><br><span class="line">  <span class="keyword">if</span> (params) &#123;</span><br><span class="line">    <span class="comment">// 把对象转换成 key=value&amp;key=value 的方法</span></span><br><span class="line">    <span class="comment">// 固定写法：new URLSearchParams(obj).toString()</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(params).<span class="title function_">toString</span>()</span><br><span class="line">    <span class="comment">// 拼接到url上</span></span><br><span class="line">    url += <span class="string">&#x27;?&#x27;</span> + str</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最终的结果</span></span><br><span class="line">  <span class="keyword">let</span> res</span><br><span class="line">  <span class="comment">// 判断是否有data参数，如果有，则需要设置给body，否则不需要设置</span></span><br><span class="line">  <span class="keyword">if</span> (data) &#123;</span><br><span class="line">    <span class="comment">// 如果有data参数，此时直接设置</span></span><br><span class="line">    res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">      <span class="attr">method</span>: method, <span class="comment">// 请求方法</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="comment">// 请求头</span></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="comment">// 请求体参数,字符串类型</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试代码1：</span></span><br><span class="line"><span class="comment">// 请求方式：get</span></span><br><span class="line"><span class="comment">// 接口地址：http://ajax-base-api-t.itheima.net/api/getbooks</span></span><br><span class="line"><span class="comment">// 查询参数(可选)：</span></span><br><span class="line"><span class="comment">//   1、id:需要查询的图书id</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result1 = <span class="keyword">await</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试代码2：</span></span><br><span class="line"><span class="comment">// 请求方式：post</span></span><br><span class="line"><span class="comment">// 接口地址：http://ajax-base-api-t.itheima.net/api/addbook</span></span><br><span class="line"><span class="comment">// 请求体参数：</span></span><br><span class="line"><span class="comment">//  1、书名：bookname</span></span><br><span class="line"><span class="comment">//  2、作者：author</span></span><br><span class="line"><span class="comment">//  3、出版社：publisher</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result2 = <span class="keyword">await</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/addbook&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">bookname</span>: <span class="string">&#x27;魔法书111666&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>: <span class="string">&#x27;嘻嘻&#x27;</span>,</span><br><span class="line">      <span class="attr">publisher</span>: <span class="string">&#x27;哈哈哈&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>()</span><br></pre></td></tr></table></figure>

<h2 id="fetch-实战-图书管理案例"><a href="#fetch-实战-图书管理案例" class="headerlink" title="fetch 实战 - 图书管理案例"></a>fetch 实战 - 图书管理案例</h2><h3 id="实例展示"><a href="#实例展示" class="headerlink" title="实例展示"></a>实例展示</h3><p><img src="https://s1.vika.cn/space/2023/02/26/75472cac27794989858c812fa9ac0bca" alt="image-20220706143918308"></p>
<h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">获取所有图书：</span><br><span class="line">    <span class="number">1</span>、接口地址：<span class="attr">http</span>:<span class="comment">//ajax-base-api-t.itheima.net/api/getbooks</span></span><br><span class="line">    <span class="number">2</span>、请求方式：get</span><br><span class="line"></span><br><span class="line">添加图书:</span><br><span class="line">    <span class="number">1</span>、接口地址：<span class="attr">http</span>:<span class="comment">//ajax-base-api-t.itheima.net/api/addbook</span></span><br><span class="line">    <span class="number">2</span>、请求方式：post</span><br><span class="line">    <span class="number">3</span>、请求体参数：</span><br><span class="line">        <span class="number">1</span>、bookname：图书的名称</span><br><span class="line">        <span class="number">2</span>、author：作者</span><br><span class="line">        <span class="number">3</span>、publisher：出版社</span><br><span class="line"></span><br><span class="line">删除图书：</span><br><span class="line">    <span class="number">1</span>、接口地址：<span class="attr">http</span>:<span class="comment">//ajax-base-api-t.itheima.net/api/delbook</span></span><br><span class="line">    <span class="number">2</span>、请求方式：<span class="keyword">delete</span></span><br><span class="line">    <span class="number">3</span>、查询参数：</span><br><span class="line">        <span class="number">1</span>、id：需要删除图片的id</span><br></pre></td></tr></table></figure>

<h3 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap-v4.6.0.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 栅格系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 栅格系统中的一行 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 左侧的表格，占了 8 列 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-striped table-dark table-hover text-center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 表头行 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 表格中的每一行 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link btn-sm&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 右侧的添加区域，占了 4 列 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 添加图书的卡片 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card text-white bg-secondary sticky-top&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span>添加新图书<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;card-body bg-light&quot;</span> <span class="attr">id</span>=<span class="string">&quot;addForm&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 书名 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入图书名称&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookname&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 作者 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入作者名字&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 出版社 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入出版社名称&quot;</span> <span class="attr">name</span>=<span class="string">&quot;publisher&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 添加按钮 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-dark&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染功能"><a href="#渲染功能" class="headerlink" title="渲染功能"></a>渲染功能</h3><ul>
<li><strong>步骤：</strong><ol>
<li>把渲染的代码封装成函数</li>
<li>通过封装好的 http 函数，获取所有图书数据</li>
<li>遍历返回的图书数组，每遍历一项，就创建一个 tr 出来，拼接成完整字符串再一起添加到 tbody 中去</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面一打开需要首屏加载</span></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把渲染的代码封装成函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取数据</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> htmlStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">// 遍历数组，每遍历一项，就创建一个tr出来，拼接成完整字符串再一起添加到tbody中去</span></span><br><span class="line">  res.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(item)</span></span><br><span class="line">    htmlStr += <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;tr&gt;</span></span><br><span class="line"><span class="string">            &lt;th scope=&quot;row&quot;&gt;<span class="subst">$&#123;item.id&#125;</span>&lt;/th&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;item.bookname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;item.author&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;item.publisher&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;</span></span><br><span class="line"><span class="string">              &lt;button type=&quot;button&quot; class=&quot;btn btn-link btn-sm&quot; data-id=&quot;<span class="subst">$&#123;item.id&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                删除</span></span><br><span class="line"><span class="string">              &lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(htmlStr)</span></span><br><span class="line">  <span class="comment">// 把拼接好的数据，设置到tbody中去</span></span><br><span class="line">  tbody.<span class="property">innerHTML</span> = htmlStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><ul>
<li><strong>步骤：</strong><ol>
<li>给 form 注册 submit 事件</li>
<li>阻止浏览器默认行为（提交的默认跳转功能）</li>
<li>通过 serialize 插件获取表单数据(<a href="https://github.com/defunctzombie/form-serialize.git">https://github.com/defunctzombie/form-serialize.git</a>)</li>
<li>通过封装好的 http 函数发送数据给服务器</li>
<li>判断 res 的 status 是否成功<ol>
<li>如果成功，此时重新渲染，并且重置表单</li>
<li>如果不成功，弹框提示错误信息即可</li>
</ol>
</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/form-serialize.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单提交功能</span></span><br><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">//  阻止浏览器默认行为</span></span><br><span class="line">  e.<span class="title function_">preventDefault</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取表单数据——》通过serialize插件获取</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">serialize</span>(form, &#123; <span class="attr">hash</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把获取的表单数据，发送给服务器</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/addbook&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: result,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过res的status判断是否添加成功</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">201</span>) &#123;</span><br><span class="line">    <span class="comment">// 重新渲染</span></span><br><span class="line">    <span class="title function_">render</span>()</span><br><span class="line">    <span class="comment">// 重置表单</span></span><br><span class="line">    form.<span class="title function_">reset</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不成功，弹框提示错误信息即可</span></span><br><span class="line">    <span class="title function_">alert</span>(res.<span class="property">msg</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ul>
<li><strong>步骤：</strong><ol>
<li>利用事件委托，给 tbody 注册点击事件</li>
<li>判断 e.target.tagName 是不是按钮</li>
<li>如果是按钮，则通过封装好的 http 函数发送请求删除数据</li>
<li>此时需要知道删除的这一项的 id，则再渲染 button 时就可以把 id 添加到 dom 结构上</li>
<li>判断是否删除成功，如果删除成功，则需要重新加载</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除功能——》利用事件委托</span></span><br><span class="line">tbody.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断如果点击的是按钮，才进行删除</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;BUTTON&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/delbook&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// console.log(res)</span></span><br><span class="line">    <span class="comment">// 判断如果删除成功，此时需要重新加载</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title function_">render</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h2>]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>ModuleJS</title>
    <url>/2024/01/23/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/206_%E6%A8%A1%E5%9D%97%E5%8C%96/20601_ModuleJS/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# JavaScript 模块化

<h2 id="模块化简介"><a href="#模块化简介" class="headerlink" title="模块化简介"></a>模块化简介</h2><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><ul>
<li><p>01 将一个复杂的程序依据一定的规则拆分成单个文件，并最终组合在一起</p>
</li>
<li><p>02 这些拆分的文件就是模块，模块内部数据是私有的，只是向外部暴露一些方法与外部其它模块通信</p>
</li>
</ul>
<h3 id="为什么需要模块化"><a href="#为什么需要模块化" class="headerlink" title="为什么需要模块化"></a>为什么需要模块化</h3><ul>
<li><p>01 降低复杂度，提高解耦性</p>
</li>
<li><p>02 避免命名冲突</p>
</li>
<li><p>03 更好的分离,按需加载</p>
</li>
<li><p>04 更高复用性，高可维护性</p>
</li>
</ul>
<h3 id="模块化带来的问题"><a href="#模块化带来的问题" class="headerlink" title="模块化带来的问题"></a>模块化带来的问题</h3><ul>
<li>01 请求过多</li>
<li>02 依赖模糊</li>
<li>03 难以维护</li>
</ul>
<h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><ul>
<li>前言:<ul>
<li>一个大的项目必定会使用模块化技术，使用模块化就会使用相应的模块化规范，现在比较流行的模块化规范有以下 2 种: <strong>CommonJS、ES6</strong></li>
</ul>
</li>
</ul>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><h3 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h3><ul>
<li><p>01 官网:<a href="http://wiki.commonjs.org/wiki/Modulese">http://wiki.commonjs.org/wiki/Modulese</a></p>
</li>
<li><p>02 每个文件都是一个模块。</p>
</li>
<li><p>03 CommonJS 模块化的代码既可在服务端运行，也可在浏览器端运行</p>
</li>
<li><p>04 服务器端: 模块化的代码可直接运行。</p>
</li>
<li><p>05 浏览器端: 模块化的代码要经过 Browserify (<a href="http://browserify.org)编译/">http://browserify.org）编译</a>.</p>
</li>
</ul>
<h3 id="暴露语法"><a href="#暴露语法" class="headerlink" title="暴露语法"></a>暴露语法</h3><ul>
<li><p>01 <code>module.exports = value</code></p>
</li>
<li><p>02 <code>exports.xxx = value</code></p>
</li>
<li><p>03 内置关系:</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/36aeba6b4c974e8386e464145b59eca3" alt="1657265465957"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span> === <span class="variable language_">module</span>.<span class="property">exports</span>) <span class="comment">// true  node环境下</span></span><br></pre></td></tr></table></figure>

<h3 id="引入语法"><a href="#引入语法" class="headerlink" title="引入语法"></a>引入语法</h3><ul>
<li>01 引入第三方模块 : <code>require(xxx)</code> , xxx 为模块名</li>
<li>02 引入自定义模块 : <code>require(xxx)</code> , xxx 为模块文件的路径</li>
</ul>
<h3 id="module-exports-暴露"><a href="#module-exports-暴露" class="headerlink" title="module.exports 暴露"></a>module.exports 暴露</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 module.exports 暴露</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">showData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">showMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入自定义模块</span></span><br><span class="line"><span class="keyword">const</span> module1 = <span class="built_in">require</span>(<span class="string">&#x27;./module1.js&#x27;</span>)</span><br><span class="line">module1.<span class="title function_">showData</span>() <span class="comment">// atguigu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在导入的同时进行解构</span></span><br><span class="line"><span class="keyword">const</span> &#123; showData &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./module1.js&#x27;</span>)</span><br><span class="line"><span class="title function_">showData</span>() <span class="comment">// atguigu</span></span><br></pre></td></tr></table></figure>

<h3 id="exports-暴露"><a href="#exports-暴露" class="headerlink" title="exports 暴露"></a>exports 暴露</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 exports 暴露</span></span><br><span class="line"><span class="comment">// module.exports 和 exports 不能混用，若混用了，以 module.exports 为准</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sub</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入自定义模块</span></span><br><span class="line"><span class="keyword">const</span> module2 = <span class="built_in">require</span>(<span class="string">&#x27;./module2.js&#x27;</span>)</span><br><span class="line">module2.<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 30</span></span><br><span class="line">module2.<span class="title function_">sub</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// -10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在导入的同时进行解构</span></span><br><span class="line"><span class="keyword">const</span> &#123; sum, sub &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./module2.js&#x27;</span>)</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 30</span></span><br><span class="line"><span class="title function_">sub</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// -10</span></span><br></pre></td></tr></table></figure>

<h3 id="引入第三方模块"><a href="#引入第三方模块" class="headerlink" title="引入第三方模块"></a>引入第三方模块</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入第三方模块</span></span><br><span class="line"><span class="keyword">const</span> uniq = <span class="built_in">require</span>(<span class="string">&#x27;uniq&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniq</span>(arr)) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="browserify-包的使用"><a href="#browserify-包的使用" class="headerlink" title="browserify 包的使用"></a>browserify 包的使用</h3><ul>
<li>01 browserify 的作用 : <strong>将 commonJS 规范的代码,编译成浏览器能识别解析的代码</strong></li>
<li>02 安装 browserify :</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install browserify -g</span><br></pre></td></tr></table></figure>

<ul>
<li>03 执行命令将 commonJS 规范的代码进行编译:<ul>
<li>会自动打包依赖</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">browserify ./app.js -o ./build.js</span><br></pre></td></tr></table></figure>

<ul>
<li>04 在浏览器端引入生成的 build.js 文件即可</li>
</ul>
<h2 id="ES6-模块化规范"><a href="#ES6-模块化规范" class="headerlink" title="ES6 模块化规范"></a>ES6 模块化规范</h2><h3 id="ES6-模块化规范-1"><a href="#ES6-模块化规范-1" class="headerlink" title="ES6 模块化规范"></a>ES6 模块化规范</h3><ul>
<li>01 每个文件都是一个模块。</li>
<li>02 要借助 Babel 和 Browserify 依次编译代码，才能在浏览器端运行。</li>
<li>03 Babel 中文网 : <a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a></li>
</ul>
<h3 id="暴露模块方式"><a href="#暴露模块方式" class="headerlink" title="暴露模块方式"></a>暴露模块方式</h3><ul>
<li>01 分别暴露: <code>export 暴露内容</code></li>
<li>02 统一暴露: <code>export &#123;暴露内容1，暴露内容2&#125;</code></li>
<li>03 默认暴露: <code>export defalut 暴露内容:</code></li>
</ul>
<h3 id="引入模块方式"><a href="#引入模块方式" class="headerlink" title="引入模块方式"></a>引入模块方式</h3><ul>
<li>01 方法 1: <code>import &#123;xxx,yyy&#125; from &#39;/module1&#39;</code></li>
<li>02 方法 2: <code>import module3 from &#39;/module3&#39;</code></li>
</ul>
<h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><ul>
<li>若使用分别暴露、统一暴露的方式暴露内容，那么就要用 方法 1 引入。</li>
<li>若使用默认暴露的方式暴露内容，那么就要用 方法 2 引入。</li>
</ul>
<h3 id="分别暴露与导入"><a href="#分别暴露与导入" class="headerlink" title="分别暴露与导入"></a>分别暴露与导入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> data = <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> msg = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">showData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">showMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入分别暴露模块 使用方式一导入   此处不是解构赋值,因为右边不是对象,也没有赋值操作</span></span><br><span class="line"><span class="keyword">import</span> &#123; showData, showMsg, data, msg &#125; <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span></span><br><span class="line"><span class="title function_">showData</span>()</span><br><span class="line"><span class="title function_">showMsg</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入分别暴露模块时,如果命名冲突,可以如下进行重命名,即可解决命名冲突问题</span></span><br><span class="line"><span class="keyword">import</span> &#123; data <span class="keyword">as</span> data2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./module2.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入分别暴露模块时,可以打包引入, 此时 module1 是一个对象</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> module1 <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span></span><br><span class="line">module1.<span class="title function_">showData</span>()</span><br><span class="line">module1.<span class="title function_">showMsg</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(module1.<span class="property">data</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(module1.<span class="property">msg</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>编译的过程如下: <code>仅作了解,后面脚手架会解决这繁琐的过程</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备相关的依赖包  ES6 -&gt; ES5</span></span><br><span class="line"><span class="comment">//  01 全局安装 : babel-cli 和 Browserify</span></span><br><span class="line"><span class="comment">//  npm install babel-cli browserify -g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  02 局部安装 babel-preset-es2015</span></span><br><span class="line"><span class="comment">//  npm install babel-preset-es2015</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  03 定义 .babelrc 文件</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;presets&quot; : [&quot;es2015&quot;]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  04 编译文件</span></span><br><span class="line"><span class="comment">// babel ./ -d ./build</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  05 将生成的文件,再次编译成浏览器能识别的代码</span></span><br><span class="line"><span class="comment">// browserify ./app.js -o ./build.js</span></span><br></pre></td></tr></table></figure>

<h3 id="统一暴露与导入"><a href="#统一暴露与导入" class="headerlink" title="统一暴露与导入"></a>统一暴露与导入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统一暴露</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一暴露(简写,常用)</span></span><br><span class="line"><span class="keyword">export</span> &#123; data, msg, showData, showMsg &#125;</span><br><span class="line"><span class="comment">// 统一暴露(完整写法,不常用)  在导入的时候就进行重命名,此时导入的是重命名后的变量</span></span><br><span class="line"><span class="comment">// export &#123; data as data, msg as msg, showData as showData, showMsg as showMsg &#125;;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入统一暴露模块 使用方式一导入   此处不是解构赋值,因为右边不是对象,也没有赋值操作</span></span><br><span class="line"><span class="keyword">import</span> &#123; showData, showMsg, data, msg &#125; <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span></span><br><span class="line"><span class="title function_">showData</span>()</span><br><span class="line"><span class="title function_">showMsg</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入统一暴露模块时,如果命名冲突,可以如下进行重命名,即可解决命名冲突问题</span></span><br><span class="line"><span class="keyword">import</span> &#123; data <span class="keyword">as</span> data2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./module2.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入统一暴露模块时,可以打包引入 , 此时 module1 是一个对象</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> module1 <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span></span><br><span class="line">module1.<span class="title function_">showData</span>()</span><br><span class="line">module1.<span class="title function_">showMsg</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(module1.<span class="property">data</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(module1.<span class="property">msg</span>)</span><br></pre></td></tr></table></figure>

<h3 id="默认暴露与导入"><a href="#默认暴露与导入" class="headerlink" title="默认暴露与导入"></a>默认暴露与导入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认暴露 适用于只暴露一个数据,一个模块不能有多个默认暴露,否则报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;wc&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者  二选一  一个模块不能有多个默认暴露,否则报错</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;旺财&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> dog</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入默认暴露模块</span></span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&#x27;./module4.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog)</span><br></pre></td></tr></table></figure>

<h3 id="同时使用多种暴露与导入"><a href="#同时使用多种暴露与导入" class="headerlink" title="同时使用多种暴露与导入"></a>同时使用多种暴露与导入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> teacher1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;强哥&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> teacher2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;歌神&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> stu1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;李银河&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> stu2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;张学友&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; stu1, stu2 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">school</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;宏福科技园&#x27;</span>,</span><br><span class="line">  <span class="attr">subjects</span>: [<span class="string">&#x27;前端&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;大数据&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入多种暴露方式的模块</span></span><br><span class="line"><span class="keyword">import</span> module5, &#123; teacher1, teacher2, stu1, stu2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./module5&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(module5)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu2)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>Ajax</title>
    <url>/2024/01/18/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/201_Ajax/20101_Ajax/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# Ajax

<h2 id="前端数据请求方式"><a href="#前端数据请求方式" class="headerlink" title="前端数据请求方式"></a>前端数据请求方式</h2><h3 id="前后端分离的优势"><a href="#前后端分离的优势" class="headerlink" title="前后端分离的优势"></a>前后端分离的优势</h3><ul>
<li>早期的网页都是通过后端渲染来完成的：服务器端渲染（SSR，server side render）：<ul>
<li>客户端发出请求 -&gt; 服务端接收请求并返回相应 HTML 文档 -&gt; 页面刷新，客户端加载新的 HTML 文档；</li>
</ul>
</li>
<li>服务器端渲染的缺点：<ul>
<li>当用户点击页面中的某个按钮向服务器发送请求时，页面本质上只是一些数据发生了变化，而此时服务器却要将重绘的整个页面再返回给浏览器加载，这显然有悖于程序员的“DRY（ Don‘t repeat yourself ）”原则；</li>
<li>而且明明只是一些数据的变化却迫使服务器要返回整个 HTML 文档，这本身也会给网络带宽带来不必要的开销。</li>
</ul>
</li>
<li>有没有办法在页面数据变动时，只向服务器请求新的数据，并且在阻止页面刷新的情况下，动态的替换页面中展示的数据呢？<ul>
<li>答案正是“AJAX”。</li>
</ul>
</li>
<li>AJAX 是“Asynchronous JavaScript And XML”的缩写(异步的 JavaScript 和 XML)，是一种实现 无页面刷新 获取服务器数据的技术。<ul>
<li>AJAX 最吸引人的就是它的“异步”特性，也就是说它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。</li>
</ul>
</li>
<li>你可以使用 AJAX 最主要的两个特性做下列事：<ul>
<li>在不重新加载页面的情况下发送请求给服务器；</li>
<li>接受并使用从服务器发来的数据。</li>
</ul>
</li>
</ul>
<h3 id="服务器端渲染"><a href="#服务器端渲染" class="headerlink" title="服务器端渲染"></a>服务器端渲染</h3><p><img src="https://s1.vika.cn/space/2023/02/26/7e28c9fbc5d24cb7804533f0fe874756" alt="1674728934891"></p>
<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p><img src="https://s1.vika.cn/space/2023/02/26/367fb930abb94c04951560312866f652" alt="1674728953119"></p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="什么是-HTTP"><a href="#什么是-HTTP" class="headerlink" title="什么是 HTTP"></a>什么是 HTTP</h3><ul>
<li>什么是 HTTP 呢？我们来看一下维基百科的解释：<ul>
<li>超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议；</li>
<li>HTTP 是万维网的数据通信的基础，设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法；</li>
<li>通过 HTTP 或者 HTTPS 协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识；</li>
</ul>
</li>
<li>HTTP 是一个客户端（用户）和服务端（网站）之间请求和响应的标准。<ul>
<li>通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个 HTTP 请求到服务器上指定端口（默认端口为 80）；<ul>
<li>我们称这个客户端为用户代理程序（user agent）；</li>
</ul>
</li>
<li>响应的服务器上存储着一些资源，比如 HTML 文件和图像。<ul>
<li>我们称这个响应服务器为源服务器（origin server）；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/52fe6ee49d1f4c178f44fc87252d8927" alt="1674729029900"></p>
<h3 id="网页资源的获取"><a href="#网页资源的获取" class="headerlink" title="网页资源的获取"></a>网页资源的获取</h3><ul>
<li>我们网页中的资源通常是被放在 Web 资源服务器中，由浏览器自动发送 HTTP 请求来获取、解析、展示的。</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/ccecd9b8cbb249688403f5fddd59288e" alt="1674729083189"></p>
<ul>
<li>目前我们页面中很多数据是动态展示的：<ul>
<li>比如页面中的数据展示、搜索数据、表单验证等等，也是通过在 JavaScript 中发送 HTTP 请求获取的；</li>
</ul>
</li>
</ul>
<h3 id="HTTP-的组成"><a href="#HTTP-的组成" class="headerlink" title="HTTP 的组成"></a>HTTP 的组成</h3><ul>
<li>一次 HTTP 请求主要包括：请求（Request）和响应（Response）</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/68e98bababec4009b5aa577343d74218" alt="1674729144022"></p>
<h3 id="HTTP-的版本"><a href="#HTTP-的版本" class="headerlink" title="HTTP 的版本"></a>HTTP 的版本</h3><ul>
<li>HTTP&#x2F;0.9<ul>
<li>发布于 1991 年；</li>
<li>只支持 GET 请求方法获取文本数据，当时主要是为了获取 HTML 页面内容；</li>
</ul>
</li>
<li>HTTP&#x2F;1.0<ul>
<li>发布于 1996 年；</li>
<li>支持 POST、HEAD 等请求方法，支持请求头、响应头等，支持更多种数据类型(不再局限于文本数据) ；</li>
<li>但是浏览器的每次请求都需要与服务器建立一个 TCP 连接，请求处理完成后立即断开 TCP 连接，每次建立连接增加了性能损耗；</li>
</ul>
</li>
<li>HTTP&#x2F;1.1(目前使用最广泛的版本)<ul>
<li>发布于 1997 年；</li>
<li>增加了 PUT、DELETE 等请求方法；</li>
<li>采用持久连接(Connection: keep-alive)，多个请求可以共用同一个 TCP 连接；</li>
</ul>
</li>
<li>2015 年，HTTP&#x2F;2.0</li>
<li>2018 年，HTTP&#x2F;3.0</li>
</ul>
<h3 id="HTTP-的请求方式"><a href="#HTTP-的请求方式" class="headerlink" title="HTTP 的请求方式"></a>HTTP 的请求方式</h3><ul>
<li>在 RFC 中定义了一组请求方式，来表示要对给定资源执行的操作：<ul>
<li>GET：GET 方法请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据。</li>
<li>HEAD：HEAD 方法请求一个与 GET 请求的响应相同的响应，但没有响应体。<ul>
<li>比如在准备下载一个文件前，先获取文件的大小，再决定是否进行下载；</li>
</ul>
</li>
<li>POST：POST 方法用于将实体提交到指定的资源。</li>
<li>PUT：PUT 方法用请求有效载荷（payload）替换目标资源的所有当前表示；</li>
<li>DELETE：DELETE 方法删除指定的资源；</li>
<li>PATCH：PATCH 方法用于对资源应部分修改；</li>
<li>CONNECT：CONNECT 方法建立一个到目标资源标识的服务器的隧道，通常用在代理服务器，网页开发很少用到。</li>
<li>TRACE：TRACE 方法沿着到目标资源的路径执行一个消息环回测试。</li>
</ul>
</li>
<li>在开发中使用最多的是 GET、POST 请求；<ul>
<li>在后续的后台管理项目中，我们也会使用 PATCH、DELETE 请求；</li>
</ul>
</li>
</ul>
<h3 id="HTTP-Request-Header"><a href="#HTTP-Request-Header" class="headerlink" title="HTTP Request Header"></a>HTTP Request Header</h3><ul>
<li>在 request 对象的 header 中也包含很多有用的信息，客户端会默认传递过来一些信息：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/f079608d1d2042288011ccc15a7ddcfd" alt="1674729279756"></p>
<ul>
<li><p>content-type 是这次请求携带的数据的类型：</p>
<ul>
<li>application&#x2F;x-www-form-urlencoded：表示数据被编码成以 ‘&amp;’ 分隔的键 - 值对，同时以 ‘&#x3D;’ 分隔键和值</li>
<li>application&#x2F;json：表示是一个 json 类型；</li>
<li>text&#x2F;plain：表示是文本类型；</li>
<li>application&#x2F;xml：表示是 xml 类型；</li>
<li>multipart&#x2F;form-data：表示是上传文件；</li>
</ul>
</li>
<li><p>content-length：文件的大小长度</p>
</li>
<li><p>keep-alive：</p>
<ul>
<li>http 是基于 TCP 协议的，但是通常在进行一次请求和响应结束后会立刻中断；</li>
<li>在 http1.0 中，如果想要继续保持连接：<ul>
<li>浏览器需要在请求头中添加 connection: keep-alive；</li>
<li>服务器需要在响应头中添加 connection:keey-alive；</li>
<li>当客户端再次放请求时，就会使用同一个连接，直接一方中断连接；</li>
</ul>
</li>
<li>在 http1.1 中，所有连接默认是 connection: keep-alive 的；<ul>
<li>不同的 Web 服务器会有不同的保持 keep-alive 的时间；</li>
<li>Node 中默认是 5s 中；</li>
</ul>
</li>
</ul>
</li>
<li><p>accept-encoding：告知服务器，客户端支持的文件压缩格式，比如 js 文件可以使用 gzip 编码，对应 .gz 文件；</p>
</li>
<li><p>accept：告知服务器，客户端可接受文件的格式类型；</p>
</li>
<li><p>user-agent：客户端相关的信息；</p>
</li>
</ul>
<h3 id="HTTP-响应状态码"><a href="#HTTP-响应状态码" class="headerlink" title="HTTP 响应状态码"></a>HTTP 响应状态码</h3><ul>
<li>Http 状态码（Http Status Code）是用来表示 Http 响应状态的数字代码：<ul>
<li>Http 状态码非常多，可以根据不同的情况，给客户端返回不同的状态码；</li>
<li>MDN 响应码解析地址：<a href="https://developer.mozilla.org/zh-CN/docs/web/http/status">https://developer.mozilla.org/zh-CN/docs/web/http/status</a></li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/4ae47a29ee944dd8b24cac8b6b9c1353" alt="1674729430423"></p>
<h3 id="HTTP-Response-Header"><a href="#HTTP-Response-Header" class="headerlink" title="HTTP Response Header"></a>HTTP Response Header</h3><ul>
<li>响应的 header 中包括一些服务器给客户端的信息：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/6853e12f30194a0db4d5cd7c96024b29" alt="1674729486298"></p>
<h2 id="Ajax-简介"><a href="#Ajax-简介" class="headerlink" title="Ajax 简介"></a>Ajax 简介</h2><ul>
<li>AJAX 全称为 Asynchronous Javascript And XML，就是异步的 JS 和 XML。</li>
<li>通过 AJAX 可以在浏览器中向服务器发送异步请求, 最大的优势:<strong>页面无刷新获取数据</strong>。</li>
<li>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</li>
</ul>
<h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h2><ul>
<li>XML : 可扩展标记语言。</li>
<li>XML 被设计用来传输和存储数据。</li>
<li>XML 和 HTML 类似,不同的是 HTML 中都是预定义标签,而 XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例如: 用XML表示一个学生数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 现在已经被JSON取代了</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Ajax-的优缺点"><a href="#Ajax-的优缺点" class="headerlink" title="Ajax 的优缺点"></a>Ajax 的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><strong>可以无需刷新页面而与服务器端进行通信。</strong></li>
<li><strong>允许你根据用户事件来更新部分页面内容。</strong></li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><strong>没有浏览历史，不能回退;</strong></li>
<li><strong>存在跨域问题;</strong></li>
<li><strong>SEO 搜索引擎优化不友好;</strong> 比如:爬虫爬不到,但不是绝对爬不到</li>
</ul>
<h2 id="Ajax-的基本使用"><a href="#Ajax-的基本使用" class="headerlink" title="Ajax 的基本使用"></a>Ajax 的基本使用</h2><h3 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h3><ul>
<li><strong>XMLHttpRequest</strong>，AJAX 的所有操作都是通过该对象进行的。</li>
</ul>
<h3 id="搭建测试服务器"><a href="#搭建测试服务器" class="headerlink" title="搭建测试服务器"></a>搭建测试服务器</h3><ol>
<li>项目初始化:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装 express</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>搭建测试服务器</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_get!!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功,8080端口监听中~~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动服务器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>nodemon 工具的使用</li>
</ol>
<ul>
<li><p>01 安装: <strong>npm install nodemon</strong></p>
</li>
<li><p>02 用 nodemon 启动服务 : <strong>nodemon server.js</strong></p>
</li>
</ul>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li><strong>server.js</strong> : 暴露静态资源,不用考虑跨域问题</li>
</ol>
<ul>
<li>访问方式: <code>http://127.0.0.1:8080/01_ajax小试牛刀.html</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 app 实例对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;/src&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应 get 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_get!!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功,8080端口监听中~~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用步骤</li>
</ol>
<ul>
<li>需求: 点击按钮,发起 ajax 请求,将返回的数据放到 div 中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ajax小试牛刀<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我发送请求(原生js-ajax-get)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取DOM元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 创建 xhr 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 指定发送请求的 method  url</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3. 发送请求</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 4. 接收响应</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span></span><br><span class="line"><span class="language-javascript">          content.<span class="property">innerHTML</span> = <span class="string">`&lt;h3&gt;<span class="subst">$&#123;xhr.response&#125;</span>&lt;/h3&gt;`</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XHR-的-5-种状态"><a href="#XHR-的-5-种状态" class="headerlink" title="XHR 的 5 种状态"></a>XHR 的 5 种状态</h3><ul>
<li>xhr 内部有 5 种状态，值分别为：0、1、2、3、4<ul>
<li>0: 实例出来的那一刻状态就是 0，初始状态。</li>
<li>1：open 已经调用了，但是 send 还没有调用，此时可以<strong>修改请求头内容</strong>。</li>
<li>2：send 已经调用了，已经无法修改请求头</li>
<li>3：已经回来一部分数据了，小的数据会在此阶段一次性接收完毕，较大的数据有待进一步接收，<strong>响应头已经回来了</strong>。</li>
<li>4：<strong>数据全部接收完毕</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 接收响应</span></span><br><span class="line"><span class="comment">// onreadystatechange: xhr 的状态改变时调用, 每改变一次,就会执行一次回调</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* if(xhr.readyState === 1)&#123;</span></span><br><span class="line"><span class="comment">          xhr.setRequestHeader(&#x27;demo&#x27;,123) //配置请求头</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">  <span class="comment">/* if(xhr.readyState === 2)&#123;</span></span><br><span class="line"><span class="comment">          xhr.setRequestHeader(&#x27;demo&#x27;,123) //配置请求头报错</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3时接收到的数据&#x27;</span>, xhr.<span class="property">response</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3时接收到的响应头&#x27;</span>, xhr.<span class="title function_">getAllResponseHeaders</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">    content.<span class="property">innerHTML</span> = <span class="string">`&lt;h3&gt;<span class="subst">$&#123;xhr.response&#125;</span>&lt;/h3&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Ajax-请求携带参数"><a href="#Ajax-请求携带参数" class="headerlink" title="Ajax 请求携带参数"></a>Ajax 请求携带参数</h2><h3 id="get-请求携带参数"><a href="#get-请求携带参数" class="headerlink" title="get 请求携带参数"></a>get 请求携带参数</h3><h4 id="携带-query-参数"><a href="#携带-query-参数" class="headerlink" title="携带 query 参数"></a>携带 query 参数</h4><ul>
<li>客户端发请求时携带 query 参数:<ul>
<li>形如：key&#x3D;value&amp;key&#x3D;value 就是 query 参数的 urlencoded 编码形式</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get?name=老六&amp;age=18&#x27;</span>) <span class="comment">//携带query参数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求时获取到请求携带的 query 参数:<ul>
<li>形如：&#x2F;xx&#x2F;xxx&#x2F;老刘&#x2F;18 就是 params 参数</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 get 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>) <span class="comment">//获取query参数</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_get!!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="携带-params-参数"><a href="#携带-params-参数" class="headerlink" title="携带 params 参数"></a>携带 params 参数</h4><ul>
<li>客户端发请求时携带 params 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get2/老六/18&#x27;</span>) <span class="comment">//携带query参数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求时获取到请求携带的 params 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 get 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get2/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>) <span class="comment">//获取 params 参数</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test2_get!!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="post-请求携带参数"><a href="#post-请求携带参数" class="headerlink" title="post 请求携带参数"></a>post 请求携带参数</h3><h4 id="携带-query-参数-1"><a href="#携带-query-参数-1" class="headerlink" title="携带 query 参数"></a>携带 query 参数</h4><ul>
<li>客户端发请求时携带 query 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post?name=老六&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求时获取到请求携带的 query 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 post 请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>) <span class="comment">//获取 query 参数</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_post&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="携带-params-参数-1"><a href="#携带-params-参数-1" class="headerlink" title="携带 params 参数"></a>携带 params 参数</h4><ul>
<li>客户端发请求时携带 params 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post/老六/18&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求时获取到请求携带的 params 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 post 请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>) <span class="comment">//获取 params 参数</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_post&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="携带请求体参数-1"><a href="#携带请求体参数-1" class="headerlink" title="携带请求体参数(1)"></a>携带请求体参数(1)</h4><ul>
<li>客户端发请求时<strong>携带 urlencoded 形式的 请求体 参数</strong>:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加响应头用于标识携带请求体参数的编码形式-urlencoded</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=老六&amp;age=18&#x27;</span>) <span class="comment">// post 请求携带 urlencoded 编码形式的请求体参数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求时获取到请求携带的 urlencoded 形式的 请求体 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用中间件解析 urlencoded 编码形式的请求体参数</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应 post 请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>) <span class="comment">//获取 body 参数</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_post&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="携带请求体参数-2"><a href="#携带请求体参数-2" class="headerlink" title="携带请求体参数(2)"></a>携带请求体参数(2)</h4><ul>
<li>客户端发请求时<strong>携带 json 形式的 请求体 参数:</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加响应头用于标识携带请求体参数的编码形式-json</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 发送请求</span></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老六&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person)) <span class="comment">// post 请求携带 json 请求体参数,类型必须是字符串类型</span></span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求时获取到请求携带的 json 形式的 请求体 参数:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用中间件解析 json 编码形式的请求体参数</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应 post 请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>) <span class="comment">//获取 body 参数</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_post&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Ajax-解析-json-数据"><a href="#Ajax-解析-json-数据" class="headerlink" title="Ajax 解析 json 数据"></a>Ajax 解析 json 数据</h2><ul>
<li><ol>
<li>客户端发请求</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取DOM元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加事件监听</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 创建xhr 实例对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/get_person&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responseType 用于指定返回数据的格式,获取到的响应就是从后台返回的字符串形式的json经过转换后的json数据</span></span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 发送请求</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 接收响应</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = xhr.<span class="property">response</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>服务端 <strong>server.js</strong> 响应请求,返回一个 json 形式的数据</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 get 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/get_person&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人请求了 get_person&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老王&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;nv&#x27;</span> &#125;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person)) <span class="comment">// 将 json 数据转为字符串形式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="请求异常与超时处理"><a href="#请求异常与超时处理" class="headerlink" title="请求异常与超时处理"></a>请求异常与超时处理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取DOM元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加事件监听</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 创建xhr 实例对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/get_person&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responseType 用于指定返回数据的格式</span></span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 发送请求</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求异常时调用</span></span><br><span class="line">  xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;当前网络不稳定,请稍后再试~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超时时间,比如服务器端加个定时器,5s后才返回数据</span></span><br><span class="line">  xhr.<span class="property">timeout</span> = <span class="number">2000</span></span><br><span class="line">  <span class="comment">// 超时回调</span></span><br><span class="line">  xhr.<span class="property">ontimeout</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;网速不给力啊,请切换网络再次尝试~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 接收响应</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = xhr.<span class="property">response</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><ul>
<li><ol>
<li>点击按钮取消请求:</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取消请求 需要将前面的按钮的 xhr 定义为一个全局变量</span></span><br><span class="line">btn2.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  xhr.<span class="title function_">abort</span>() <span class="comment">//取消请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>或者可以直接在 发送请求 后面直接 取消请求,</li>
</ol>
<ul>
<li>此时的状态是:<ul>
<li>如果来得及取消请求,那么请求就到不了服务器</li>
<li>如果来不及取消请求,那么请求可以到达服务器,服务器作出响应,但是浏览器会拦截响应,使得响应回不到浏览器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">//取消请求</span></span><br><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure>

<h2 id="避免多次重复请求"><a href="#避免多次重复请求" class="headerlink" title="避免多次重复请求"></a>避免多次重复请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr</span><br><span class="line"><span class="keyword">let</span> isLoading  <span class="comment">// 用于判断是否正在发送请求</span></span><br><span class="line"><span class="comment">// 添加事件监听</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isLoading) xhr.<span class="title function_">abort</span>() <span class="comment">//取消上一次请求</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 创建xhr 实例对象</span></span><br><span class="line">  xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 接收响应</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)) &#123;</span><br><span class="line">      isLoading = <span class="literal">false</span> <span class="comment">//响应全部回来时改为false</span></span><br><span class="line">      <span class="keyword">const</span> result = xhr.<span class="property">response</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 指定发送请求的 method  url 参数</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/get_person&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responseType 用于指定返回数据的格式</span></span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 发送请求</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">  isLoading = <span class="literal">true</span> <span class="comment">// 数据还没有完全回来时,改为true,用于控制取消请求</span></span><br></pre></td></tr></table></figure>

<h2 id="jQuery-封装的-ajax"><a href="#jQuery-封装的-ajax" class="headerlink" title="jQuery 封装的 ajax"></a>jQuery 封装的 ajax</h2><h3 id="jquery-发送-get-请求"><a href="#jquery-发送-get-请求" class="headerlink" title="jquery 发送 get 请求"></a>jquery 发送 get 请求</h3><ul>
<li>完整写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn1 = $(<span class="string">&#x27;#btn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn1.<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用jquery发送ajax请求,完整写法</span></span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>, <span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">//请求方法 不写默认是get请求</span></span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">school</span>: <span class="string">&#x27;atguigu&#x27;</span> &#125;, <span class="comment">//携带的 query 参数</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">//配置响应数据格式</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>, <span class="comment">// 超时时间</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//成功时的回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result, responseText, xhr)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">(<span class="params">xhr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//失败和超时都会执行该回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr, <span class="string">&#x27;请求出错了~&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>精简写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn1.<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用jquery发送ajax请求,精简写法</span></span><br><span class="line">  $.<span class="title function_">get</span>(</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">school</span>: <span class="string">&#x27;atguigu&#x27;</span> &#125;,</span><br><span class="line">    <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//成功时的回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result, responseText, xhr)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;json&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 get 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jquery_get&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人请求了 test_jquery_get&#x27;</span>, request.<span class="property">query</span>)</span><br><span class="line">  <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老王&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;nv&#x27;</span> &#125;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="jquery-发送-post-请求"><a href="#jquery-发送-post-请求" class="headerlink" title="jquery 发送 post 请求"></a>jquery 发送 post 请求</h3><ul>
<li>完整写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn2.<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用jquery发送ajax请求,完整写法</span></span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>, <span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">//请求方法</span></span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">school</span>: <span class="string">&#x27;atguigu&#x27;</span> &#125;, <span class="comment">//携带的 query 参数</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">//配置响应数据格式</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>, <span class="comment">// 超时时间</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//成功时的回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result, responseText, xhr)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">(<span class="params">xhr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//失败和超时都会执行该回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr, <span class="string">&#x27;请求出错了~&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>精简写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn2.<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用jquery发送ajax请求,精简写法</span></span><br><span class="line">  $.<span class="title function_">post</span>(</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">school</span>: <span class="string">&#x27;atguigu&#x27;</span> &#125;,</span><br><span class="line">    <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//成功时的回调</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result, responseText, xhr)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;json&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>服务端 <strong>server.js</strong> 响应请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用中间件解析 urlencoded 编码形式的请求体参数</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应 post 请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_jquery_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人请求了 test_jquery_post&#x27;</span>, request.<span class="property">body</span>) <span class="comment">// 获取请求中携带的参数</span></span><br><span class="line">  <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老王&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;nv&#x27;</span> &#125;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="跨域和同源策略"><a href="#跨域和同源策略" class="headerlink" title="跨域和同源策略"></a>跨域和同源策略</h2><h3 id="为什么存在跨域问题"><a href="#为什么存在跨域问题" class="headerlink" title="为什么存在跨域问题"></a>为什么存在跨域问题</h3><ul>
<li>原因是浏览器为了安全，而采用的同源策略( Same origin policy )</li>
<li>跨越的产生: 存在跨越的情况下,浏览器的 ajax 引擎会对服务器返回的数据进行拦截</li>
</ul>
<h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><ul>
<li><p>01 同源策略是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略</p>
</li>
<li><p>02 web 是构建在同源策略基础之上的，<code>浏览器只是针对同源策略的一种实现</code></p>
</li>
<li><p>03 所谓同源是指 : <strong>协议 , 域名（IP），端口 必须要完全相同</strong></p>
<ul>
<li>即:协议、域名（IP）、端口都相同，才能算是在同一个域里,只要有一个或多个不同,就算跨域。</li>
</ul>
</li>
<li><p>规则举例如下:(假设已有网站地址为: <code>http://study.cn</code>)</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/11764e20eee8460180476e5026740b56" alt="1657162721849"></p>
<h3 id="非同源受到的限制"><a href="#非同源受到的限制" class="headerlink" title="非同源受到的限制"></a>非同源受到的限制</h3><ul>
<li>01 Cookie 不能读取;</li>
<li>02 DOM 无法获得;</li>
<li>03 Ajax 请求能发送,但是浏览器不能获取到返回的数据</li>
</ul>
<h2 id="JSONP-解决跨域"><a href="#JSONP-解决跨域" class="headerlink" title="JSONP 解决跨域"></a>JSONP 解决跨域</h2><h3 id="JSONP-是什么"><a href="#JSONP-是什么" class="headerlink" title="JSONP 是什么"></a>JSONP 是什么</h3><ul>
<li>JSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，<strong>只支持 get 请求</strong>。</li>
</ul>
<h3 id="JSONP-的实现原理"><a href="#JSONP-的实现原理" class="headerlink" title="JSONP 的实现原理"></a>JSONP 的实现原理</h3><ul>
<li><p>在网页有一些标签天生具有跨域能力，比如: <strong>img link iframe script</strong> 等标签发起的请求不受同源策略的限制。</p>
</li>
<li><p>JSONP 就是利用了 script 标签发送请求不受同源策略的限制的特点。</p>
</li>
<li><p>form xhr 浏览器地址栏 img script 标签,都是发起的请求都是 get 请求</p>
</li>
<li><p>利用 JSONP 绕开 xhr , 借助 script 标签发起请求,避免同源策略的限制</p>
</li>
</ul>
<h3 id="JSONP-解决跨域的过程"><a href="#JSONP-解决跨域的过程" class="headerlink" title="JSONP 解决跨域的过程"></a>JSONP 解决跨域的过程</h3><ul>
<li><ol>
<li>客户端点击按钮时发起请求,传递一个回调名传递给服务器</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 创建节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> scriptNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 给节点指定 src 属性(请求地址)</span></span></span><br><span class="line"><span class="language-javascript">      scriptNode.<span class="property">src</span> = <span class="string">&#x27;http://localhost:8080/test_jsonp?callback=demo&#x27;</span> <span class="comment">// 传递一个回调名传递给服务器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3. 将节点放入页面</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(scriptNode)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 4. 调用方法,获取到服务器返回的数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">demo</span> = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 5. 移除已经使用过的script节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(scriptNode)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>服务端 **server.js ** 作出响应,将传递来的回调,携带数据,返回给客户端</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 get 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人请求了 test_jsonp&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; callback &#125; = request.<span class="property">query</span> <span class="comment">// 从请求参数中解构出 callback 变量</span></span><br><span class="line">  <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老王&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;nv&#x27;</span> &#125;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>) <span class="comment">// 将要返回给客户端的数据作为函数的形参传递给函数,并整体返回给客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="jQuery-封装的-JSONP"><a href="#jQuery-封装的-JSONP" class="headerlink" title="jQuery 封装的 JSONP"></a>jQuery 封装的 JSONP</h3><ul>
<li><ol>
<li>客户端点击按钮时,调用 getJSON 方法, 发起请求</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = $(<span class="string">&#x27;#btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      $.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://localhost:8080/test_jsonp?callback=?&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>服务端 <strong>server.js</strong> 作出响应,将传递来的回调,携带数据,返回给客户端</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 get 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人请求了 test_jsonp&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; callback &#125; = request.<span class="property">query</span> <span class="comment">// 从请求参数中解构出 callback 变量</span></span><br><span class="line">  <span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老王&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;nv&#x27;</span> &#125;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="CORS-解决跨域"><a href="#CORS-解决跨域" class="headerlink" title="CORS 解决跨域"></a>CORS 解决跨域</h2><h3 id="CORS-是什么"><a href="#CORS-是什么" class="headerlink" title="CORS 是什么"></a>CORS 是什么</h3><ul>
<li>CORS (Cross-Origin Resource Sharing)，<strong>跨域资源共享</strong>。<strong>CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理,支持常见的所有请求</strong></li>
</ul>
<h3 id="CORS-解决跨域-1"><a href="#CORS-解决跨域-1" class="headerlink" title="CORS 解决跨域"></a>CORS 解决跨域</h3><ul>
<li><ol>
<li>客户端仅发起请求,跨域问题在服务端解决</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取DOM元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 创建xhr 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 指定发送请求的 method  url 参数</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3. 发送请求</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 4. 接收响应</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> result = xhr.<span class="property">response</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getAllResponseHeaders</span>()) <span class="comment">// 获取到响应头</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>服务端 <strong>server.js</strong> 作出响应,并设置响应头解决跨越</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 get 请求  query参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>) <span class="comment">// 获取query参数</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>) <span class="comment">//参数二写成 * 号,就是允许所有网站访问</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>) <span class="comment">// 暴露所有响应头</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_get!!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="PUT-请求的跨域问题解决"><a href="#PUT-请求的跨域问题解决" class="headerlink" title="PUT 请求的跨域问题解决"></a>PUT 请求的跨域问题解决</h3><ul>
<li><ol>
<li>客户端仅发起请求,跨域问题在服务端解决</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取DOM元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加事件监听</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 创建xhr 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 指定发送请求的 method  url 参数</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_put&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3. 发送请求</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 4. 接收响应</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> result = xhr.<span class="property">response</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getAllResponseHeaders</span>()) <span class="comment">// 获取到响应头</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>服务端 <strong>server.js</strong> 作出响应,并设置响应头解决跨越,以及作出预请求的响应</li>
</ol>
<ul>
<li><strong>get &#x2F; post 请求也叫简单请求</strong></li>
<li><strong>put &#x2F; delete 请求也叫复杂请求,在真正发起请求之前,会发起一个嗅探请求,也叫预请求</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应 put 请求,并解决put请求的跨域</span></span><br><span class="line"><span class="comment">// app.options 用于响应 put/delete 请求的嗅探请求,嗅探请求也叫预请求</span></span><br><span class="line">app.<span class="title function_">options</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  response.<span class="title function_">send</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_put&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="利用中间件解决跨域"><a href="#利用中间件解决跨域" class="headerlink" title="利用中间件解决跨域"></a>利用中间件解决跨域</h3><ul>
<li><ol>
<li>安装 cors 中间件</li>
</ol>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install cors</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>服务端 <strong>server.js</strong> 使用中间件即可,无需其他配置</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 导入中间件</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="连续解构赋值"><a href="#连续解构赋值" class="headerlink" title="连续解构赋值"></a>连续解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连续解构赋值和重命名</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">b</span>: &#123; c &#125;,</span><br><span class="line">&#125; = obj <span class="comment">//连续解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">b</span>: &#123; <span class="attr">c</span>: value &#125;,</span><br><span class="line">&#125; = obj <span class="comment">//连续解构赋值和重命名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="浏览器的协商缓存"><a href="#浏览器的协商缓存" class="headerlink" title="浏览器的协商缓存"></a>浏览器的协商缓存</h3><ul>
<li>01 发起一次请求后,获得服务器返回的数据,返回的状态码为 200</li>
<li>02 当在 url 没变的情况下,再次发起请求,服务器接收到了请求,但是服务器数据也没变,此时返回的状态码为 304</li>
<li>03 此时浏览器就会走缓存,去拿上一次请求得来的数据<ul>
<li>(协商缓存大概过程:浏览器去问服务器,数据变了没有,服务器说数据没变,就返回 304 状态码,浏览器就去自己缓存里拿上一次的数据)<ul>
<li>如果服务器的数据变了,就返回新的数据,响应状态码为 200</li>
</ul>
</li>
<li>浏览器和服务器协商</li>
</ul>
</li>
<li>除了 get &#x2F; post &#x2F; head 请求外,其他都算是复杂请求,复杂请求都会有一个预请求,预请求成功,才会发起真正的请求</li>
</ul>
<h3 id="IE-的-get-请求缓存问题"><a href="#IE-的-get-请求缓存问题" class="headerlink" title="IE 的 get 请求缓存问题"></a>IE 的 get 请求缓存问题</h3><ul>
<li>IE 浏览器的强缓存机制:<ul>
<li>发起一次请求后,获得服务器返回的数据, 返回的状态码为 200</li>
<li>当在 url 没变的情况下,再次发起请求,IE 浏览器会直接走缓存,服务器也收不到请求,即使服务器数据变了<ul>
<li>IE 会直接走缓存,不会再与服务器协商</li>
</ul>
</li>
</ul>
</li>
<li>解决方法:<ul>
<li>可以在请求 url 后面携带参数, 比如:<strong>携带当前时间戳</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/get_person?t=&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br></pre></td></tr></table></figure>

<ul>
<li>IE 浏览器下的 post 请求不存在该问题</li>
</ul>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2024/01/22/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/205_Git/20501_Git/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
# Git 版本控制

<h2 id="版本控制的起源"><a href="#版本控制的起源" class="headerlink" title="版本控制的起源"></a>版本控制的起源</h2><ul>
<li><p>现在的软件项目通常是由一个研发小组共同分析、设计、编码、维护以及测试的</p>
</li>
<li><p>针对团队开发需要解决以下问题：</p>
<ul>
<li>备份多个版本，费空间，费时间</li>
<li>难于恢复至以前正确版本</li>
<li>容易引发 BUG</li>
<li>解决代码冲突困难</li>
<li>代码管理混乱</li>
<li>难于追溯问题代码的修改人和修改时间</li>
<li>无法进行权限控制</li>
<li>项目版本发布困难</li>
</ul>
</li>
<li><p>源代码管理工具就是为了解决上述问题应运而生的</p>
</li>
</ul>
<h2 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h2><ul>
<li><p>什么是版本控制？</p>
<ul>
<li>版本控制的英文是 Version control；</li>
<li>是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程；</li>
<li>版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步；</li>
</ul>
</li>
<li><p><strong>简单来说，版本控制在软件开发中，可以帮助程序员进行代码的追踪、维护、控制等等一系列的操作。</strong></p>
</li>
<li><p>是一种记录若干文件内容变化，以便将来查阅特定版本修订情况的系统</p>
</li>
<li><p>如果是开发团队中的一员，使用版本控制是强制性的！</p>
<ul>
<li>如果是单人开发，也强烈建议现在就开始使用版本控制!</li>
</ul>
</li>
<li><p>使用版本控制可以：</p>
<ul>
<li>不会对现有工作造成任何损害</li>
<li>不会增加工作量</li>
<li>添加新的功能拓展时，会变得更加容易</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/b37e762b3bf0472599974d43a76714c4" alt="1667206077757"></p>
<h2 id="版本控制的功能"><a href="#版本控制的功能" class="headerlink" title="版本控制的功能"></a>版本控制的功能</h2><ul>
<li>对于我们日常开发，我们常常面临如下一些问题，通过版本控制可以很好的解决：<ul>
<li><strong>不同版本的存储管理</strong>：<ul>
<li>一个项目会不断进行版本的迭代，来修复之前的一些问题、增加新的功能、需求，甚至包括项目的重构；</li>
<li>如果我们通过手动来维护一系列的项目备份，简直是一场噩梦；</li>
</ul>
</li>
<li><strong>重大版本的备份维护</strong>：<ul>
<li>对于很多重大的版本，我们会进行备份管理；</li>
</ul>
</li>
<li><strong>恢复之前的项目版本</strong>：<ul>
<li>当我们开发过程中发生一些严重的问题时，想要恢复之前的操作或者回到之前某个版本；</li>
</ul>
</li>
<li><strong>记录项目的点点滴滴</strong>：<ul>
<li>如果我们每一个功能的修改、bug 的修复、新的需求更改都需要记录下来，版本控制可以很好的解决；</li>
</ul>
</li>
<li><strong>多人开发的代码合并</strong>：<ul>
<li>项目中通常都是多人开发，将多人代码进行合并，并且在出现冲突时更好的进行处理；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="常见版本控制工具"><a href="#常见版本控制工具" class="headerlink" title="常见版本控制工具"></a>常见版本控制工具</h2><h3 id="版本控制工具发展"><a href="#版本控制工具发展" class="headerlink" title="版本控制工具发展"></a>版本控制工具发展</h3><ul>
<li><p>版本控制的史前时代（没有版本控制）：</p>
<ul>
<li>人们通常通过文件备份的方式来进行管理，再通过 diff 命令来对比两个文件的差异；</li>
</ul>
</li>
<li><p><strong>CVS</strong>（Concurrent Versions System）</p>
</li>
<li><p>第一个被大规模使用的版本控制工具，诞生于 1985 年；</p>
<ul>
<li>由荷兰阿姆斯特丹 VU 大学的 Dick Grune 教授实现的，也算是 SVN 的前身（SVN 的出现就是为了取代 CVS 的）。</li>
</ul>
</li>
<li><p><strong>SVN</strong>（Subversion）</p>
<ul>
<li>因其命令行工具名为 svn 因此通常被简称为 SVN；</li>
<li>SVN 由 CollabNet 公司于 2000 年资助并发起开发，目的是取代 CVS，对 CVS 进行了很多的优化；</li>
<li>SVN 和 CVS 一样，也属于集中式版本控制工具；</li>
<li>SVN 在早期公司开发中使用率非常高，但是目前已经被 Git 取代；</li>
</ul>
</li>
<li><p><strong>GIT</strong> 分布式版本控制之伟大作品</p>
<ul>
<li>早期的时候，Linux 社区使用的是 BitKeeper 来进行版本控制；</li>
<li>但是因为一些原因，BitKeeper 想要收回对 Linux 社区的免费授权；</li>
<li>于是 Linus 用了大概一周的时间，开发了 Git 用来取代 BitKeeper；</li>
<li>Linus 完成了 Git 的核心设计，在之后 Linus 功成身退，将 Git 交由另外一个 Git 的主要贡献者 Junio C Hamano 来维护；</li>
<li>GIT:一款<code>分布式</code>源代码管理工具，目前国内企业几乎都已经完成了从 SVN 到 GIT 的转换</li>
</ul>
</li>
</ul>
<h3 id="Git-和-SVN-的对比"><a href="#Git-和-SVN-的对比" class="headerlink" title="Git 和 SVN 的对比"></a>Git 和 SVN 的对比</h3><ul>
<li><p>速度</p>
<ul>
<li>在很多情况下，git 的速度远远比 SVN 快</li>
</ul>
</li>
<li><p>结构</p>
<ul>
<li>SVN 是集中式管理，git 是分布式管理</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>SVN 使用分支比较笨拙，git 可以轻松拥有无限个分支</li>
<li>SVN 必须联网才能正常工作，git 支持本地版本控制工作</li>
<li>旧版本的 SVN 会在每一个目录置放一个 .svn，git 只会在根目录拥有一个 .git</li>
</ul>
</li>
</ul>
<h2 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h2><ul>
<li>CVS 和 SVN 都是是属于集中式版本控制系统（Centralized Version Control Systems，简称 CVCS）<ul>
<li>它们的主要特点是单一的集中管理的服务器，保存所有文件的修订版本；</li>
<li>协同开发人员通过客户端连接到这台服务器，取出最新的文件或者提交更新；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/85df0cd371e349a2bbbfa2f4830d48e6" alt="1667206511407"></p>
<ul>
<li>这种做法带来了许多好处，特别是相较于老式的本地管理来说，每个人都可以在一定程度上看到项目中的其他人正在做些什么。</li>
<li>但是集中式版本控制也有一个核心的问题：中央服务器不能出现故障：<ul>
<li>如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作；</li>
<li>如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据；</li>
</ul>
</li>
</ul>
<h2 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h2><ul>
<li><p>Git 是属于分布式版本控制系统（Distributed Version Control System，简称 DVCS）</p>
<ul>
<li>客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录；</li>
<li>这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复；</li>
<li>因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份；</li>
</ul>
</li>
<li><p>目前在公司开发中我们都是使用 Git 来管理项目的，所以接下来我们会重点学习 Git 的各种用法；</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/4f125bde539b4c7db122df1ce52f4135" alt="1667206627680"></p>
<ul>
<li>分布式和集中式的区别<ul>
<li>在集中式下, 开发者只能将代码提交到服务器, 在分布式下, 开发者可以本地提交</li>
<li>在集中式下, 只有远程服务器上有代码数据库, 在分布式下, 每个开发者机器上都有一个代码数据库</li>
</ul>
</li>
</ul>
<h2 id="Git-和-GitHub-的区别"><a href="#Git-和-GitHub-的区别" class="headerlink" title="Git 和 GitHub 的区别"></a>Git 和 GitHub 的区别</h2><ul>
<li>git 是版本控制软件，一般用来做代码版本控制</li>
<li>github 是一个免费版本控制仓库，是国内外很多开源项目的集中地，其本体是一个 git 服务器</li>
</ul>
<h2 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h2><ul>
<li><p>GIT 是一款自由和开源的<code>分布式</code>版本控制系统，用于<code>敏捷高效</code>地处理任何或小或大的项目</p>
</li>
<li><p>在世界上所有的分布式版本控制工具中，<code>git是最快、最简单、最流行的</code></p>
</li>
<li><p>是 Linux 之父李纳斯的第二个伟大作品</p>
<ul>
<li>2005 年由于 BitKeeper 软件公司对 Linux 社区停止了免费使用权。</li>
<li>Linus 为了辅助 Linux 内核的开发(管理源代码),迫不得己自己开发了一个分布式版本控制工具，从而 Git 诞生了</li>
</ul>
</li>
</ul>
<h2 id="Git-的工作原理"><a href="#Git-的工作原理" class="headerlink" title="Git 的工作原理"></a>Git 的工作原理</h2><h3 id="Git-的工作原理-1"><a href="#Git-的工作原理-1" class="headerlink" title="Git 的工作原理"></a>Git 的工作原理</h3><ul>
<li><p>如果想学好 GIT 必须先了解 GIT 的工作原理</p>
</li>
<li><p><strong>工作区(Working Directory):</strong> 仓库文件夹里面, 除了<code>.git目录</code>以外的内容,(工作区:就是包含有 .git 文件夹 的文件夹)</p>
</li>
<li><p><strong>版本库(Repository):</strong>.git 目录, 用于存储记录版本信息</p>
<ul>
<li>版本库中的<strong>暂缓区(staga):</strong></li>
<li>版本库中的<strong>分支(master):</strong> git 自动创建的第一个分支</li>
<li>版本库中的**HEAD 指针:**用于指向当前分支</li>
</ul>
</li>
</ul>
<h3 id="git-add-和-git-commit-作用"><a href="#git-add-和-git-commit-作用" class="headerlink" title="git add 和 git commit 作用"></a>git add 和 git commit 作用</h3><ul>
<li><strong>git add: 把文件修改添加到暂缓区</strong></li>
<li><strong>git commit: 把暂缓区的所有内容提交到当前 HEAD 指针指向的分支</strong></li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/1abd9d302a944721b7fc957d3b8e1d36"></p>
<p><img src="https://s1.vika.cn/space/2023/02/26/bc8cfeac38214c5292022aac8ef66c26" alt="1648955104954"></p>
<h2 id="Git-的使用环境"><a href="#Git-的使用环境" class="headerlink" title="Git 的使用环境"></a>Git 的使用环境</h2><h3 id="下载安装-Git"><a href="#下载安装-Git" class="headerlink" title="下载安装 Git"></a>下载安装 Git</h3><ul>
<li>电脑上要想使用 Git，我们需要先对 Git 进行安装：<ul>
<li>Git 的官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
<li>根据自己的操作系统下载 Git 即可；</li>
</ul>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7ed65812acca4c99945e83955d753602" alt="1667206728681"></p>
<ul>
<li><p>在 window 操作系统按照默认配置全局安装即可；</p>
</li>
<li><p>验证 Git 是否安装成功:</p>
<ul>
<li>终端中输入指令<code>git --version</code> ,回车,显示 Git 版本即为安装成功</li>
<li>在文件夹中,右键菜单中出现 <code>Git GUI Here</code>和<code>Git Bash Here</code>这两个选项,即为安装成功</li>
</ul>
</li>
</ul>
<h3 id="Bash–CMD–GUI-区别"><a href="#Bash–CMD–GUI-区别" class="headerlink" title="Bash–CMD–GUI 区别"></a>Bash–CMD–GUI 区别</h3><ul>
<li>Bash，Unix shell 的一种，Linux 与 Mac OS X 都将它作为默认 shell。<ul>
<li>Git Bash 就是一个 shell，是 Windows 下的命令行工具，可以执行 Linux 命令；</li>
<li>Git Bash 是基于 CMD 的，在 CMD 的基础上增添一些新的命令与功能；</li>
<li>所以建议在使用的时候，用 Bash 更加方便；</li>
</ul>
</li>
<li>Git CMD<ul>
<li>命令行提示符（CMD）是 Windows 操作系统上的命令行解释程序；</li>
<li>当你在 Windows 上安装 git 并且习惯使用命令行时，可以使用 cmd 来运行 git 命令；</li>
</ul>
</li>
<li>Git GUI<ul>
<li>基本上针对那些不喜欢黑屏（即命令行）编码的人；</li>
<li>它提供了一个图形用户界面来运行 git 命令；</li>
</ul>
</li>
<li>上课演练的方式：<ul>
<li>在 Git Bash 中演练 Git 的常见操作；</li>
</ul>
</li>
</ul>
<h2 id="Git-的使用-单人开发"><a href="#Git-的使用-单人开发" class="headerlink" title="Git 的使用-单人开发"></a>Git 的使用-单人开发</h2><h3 id="帮助手册"><a href="#帮助手册" class="headerlink" title="帮助手册"></a>帮助手册</h3><ul>
<li>在 Git 中输入: <code>git help</code> ,通过 git 指令查看帮助手册<ul>
<li>查看其他指令的做法：git help 其他指令</li>
</ul>
</li>
</ul>
<h3 id="添加全局配置信息"><a href="#添加全局配置信息" class="headerlink" title="添加全局配置信息"></a>添加全局配置信息</h3><ul>
<li><p>既然已经在系统上安装了 Git，你会需要做几件事来定制你的 Git 环境：</p>
<ul>
<li>每台计算机上只需要配置一次，程序升级时会保留配置信息；</li>
<li>你可以在任何时候再次通过运行命令来修改它们；</li>
</ul>
</li>
<li><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量：</p>
<ul>
<li>&#x2F;etc&#x2F;gitconfig 文件：包含系统上每一个用户及他们仓库的通用配置<ul>
<li>如果在执行 git config 时带上 –system 选项，那么它就会读写该文件中的配置变量；</li>
<li>由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。（开发中通常不修改）</li>
</ul>
</li>
<li>~&#x2F;.gitconfig 或 C&#x2F;用户&#x2F;coderwhy&#x2F;.gitconfig 文件：只针对当前用户<ul>
<li>你可以传递 –global 选项让 Git 读写此文件，这会对你系统上 所有 的仓库生效；</li>
</ul>
</li>
<li>当前使用仓库的 Git 目录中的 config 文件（即 .git&#x2F;config）：针对该仓库<ul>
<li>你可以传递 –local 选项让 Git 强制读写此文件，虽然默认情况下用的就是它；</li>
</ul>
</li>
</ul>
</li>
<li><p>查看当前的所有配置信息：<code>git config -l</code></p>
</li>
<li><p>在项目开发中必须要添加以下两个配置项,不然会挨打</p>
<ul>
<li>在 Git 中输入 <code>git config user.name &quot;123@qq.com&quot;</code> 添加用户名为 <a href="mailto:&#x31;&#x32;&#x33;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;">&#x31;&#x32;&#x33;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a> 的全局配置信息</li>
<li>在 Git 中输入 <code>git config user.email &quot;123@qq.com&quot;</code> 添加邮箱信息为 <a href="mailto:&#49;&#50;&#x33;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;">&#49;&#50;&#x33;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a> 的全局配置信息</li>
</ul>
</li>
</ul>
<h3 id="删除全局配置信息"><a href="#删除全局配置信息" class="headerlink" title="删除全局配置信息"></a>删除全局配置信息</h3><ul>
<li>在 Git 中输入<code>git config --global --unset user.name</code> 即可删除指定的 user.name 全局配置信息</li>
</ul>
<h3 id="git-的别名"><a href="#git-的别名" class="headerlink" title="git 的别名"></a>git 的别名</h3><ul>
<li>Git 并不会在你输入部分命令时自动推断出你想要的命令：<ul>
<li>如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。</li>
</ul>
</li>
<li>例如 : <code>git config --global alias.co checkout</code> , 配置 checkout 的快捷指令为 co</li>
</ul>
<h3 id="仓库克隆"><a href="#仓库克隆" class="headerlink" title="仓库克隆"></a>仓库克隆</h3><ul>
<li>从 Git 远程仓库克隆到本地 : <code>git clone https://github.com/coderwhy/hy-react-web-music.git</code></li>
<li><code>git config credential.helper</code> 出现 <code>manager-core</code></li>
</ul>
<h3 id="仓库初始化"><a href="#仓库初始化" class="headerlink" title="仓库初始化"></a>仓库初始化</h3><ul>
<li>该命令将创建一个名为 .git 的子目录(这个子目录默认是隐藏的) , 这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的核心；</li>
<li>但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪；<ul>
<li>在 Git 中输入 <strong>git init</strong> 进行仓库初始化(个人仓库) ,使用 Git 仓库前,必须要先初始化仓库</li>
<li>在 Git 中输入 <strong>git config -l</strong> 查看当前所有的配置信息</li>
<li>在 Git 中输入 <strong>clear</strong> ,清空屏幕</li>
</ul>
</li>
</ul>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><ul>
<li><p>现在我们的电脑上已经有一个 Git 仓库：</p>
<ul>
<li>在实际开发中，你需要将某些文件交由这个 Git 仓库来管理；</li>
<li>并且我们之后会修改文件的内容，当达成某一个目标时，想要记录下来这次操作，就会将它提交到仓库中；</li>
</ul>
</li>
<li><p>那么我们需要对文件来划分不同的状态，以确定这个文件是否已经归于 Git 仓库的管理：</p>
<ul>
<li>未跟踪：默认情况下，Git 仓库下的文件也没有添加到 Git 仓库管理中，我们需要通过 add 命令来操作；</li>
<li>已跟踪：添加到 Git 仓库管理的文件处于已跟踪状态，Git 可以对其进行各种跟踪管理；</li>
</ul>
</li>
<li><p>在 Git 中输入 <code>git status</code> ：查文件的状态, 文件名为红色的文件,就是该文件未添加到暂存区,即没有被跟踪</p>
<ul>
<li>查看某个文件的状态：<code>git status 文件名</code></li>
<li>查看当前路径所有文件的状态：<code>git status</code></li>
<li>也可以使用更加简洁的状态信息 :<ul>
<li><code>git status -S</code></li>
<li><code>git status --short</code></li>
</ul>
</li>
</ul>
</li>
<li><p>已跟踪的文件又可以进行细分状态划分：</p>
<ul>
<li>staged：暂缓区中的文件状态；</li>
<li>Unmodified：commit 命令，可以将 staged 中文件提交到 Git 仓库</li>
<li>Modified：修改了某个文件后，会处于 Modified 状态；</li>
</ul>
</li>
<li><p>在工作时，你可以选择性地将这些修改过的文件放入暂存区；</p>
</li>
<li><p>然后提交所有已暂存的修改，如此反复；</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/20542e5ccad44e39b4aa8cdf17366262" alt="1667211310311"></p>
<h3 id="添加到暂缓区"><a href="#添加到暂缓区" class="headerlink" title="添加到暂缓区"></a>添加到暂缓区</h3><ul>
<li>在 Git 中输入<code>git add </code> 指令, 将工作区的文件保存到暂缓区<ul>
<li>保存单个文件到暂缓区：<code>git add 文件名</code> 如:<code>git add index.js</code> ,开始跟踪一个文件<ul>
<li>如果我们已经跟踪了某一个文件，这个时候修改了文件也需要重新添加到暂存区中；</li>
</ul>
</li>
<li>保存当前路径的所有文件到暂缓区：<code>git add .</code>（注意，最后是一个点 . ）</li>
</ul>
</li>
<li>在 Git 中输入 <code>git status</code> ：查文件的状态 文件名为绿色的文件,就是该文件已经添加到暂存区</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/05/14/103e4f6170d649bebcaaf83d082986ca" alt="image-20230514093332872"></p>
<p><img src="https://s1.vika.cn/space/2023/05/14/97127ee3f4654c90a6afb8125adf217d" alt="image-20230514093908351"></p>
<h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><h4 id="提交单个-多个文件"><a href="#提交单个-多个文件" class="headerlink" title="提交单个&#x2F;多个文件"></a>提交单个&#x2F;多个文件</h4><ul>
<li>在 Git 中通过 <code>git commit</code>指令将暂缓区的文件提交到当前分支(默认 head 指针指向 master 主分支)<ul>
<li>提交某个文件到分支：<code>git commit -m &quot;注释&quot; 文件名</code> 如: <code>git commit -m &quot;初始化仓库 添加main.js&quot; main.js</code></li>
<li>保存当前路径的所有文件到分支：<code>git commit -m ”注释”</code> 如 <code>git commit -m &quot;初始化仓库 添加main.js&quot;</code></li>
<li>如果我们修改文件的 add 操作，加上 commit 的操作有点繁琐，那么可以将两个命令结合来使用：<code>git commit -a -m &quot;修改了bbb文件&quot;</code></li>
</ul>
</li>
<li>在 Git 中输入 <code>git status</code> ：查文件的状态 没有再输出文件名,说明所有文件已经被 Git 管理</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/05/14/b6eeb15f74f84f93aacab2de19cd9566" alt="image-20230514094348383"></p>
<h4 id="修改最近一次提交信息"><a href="#修改最近一次提交信息" class="headerlink" title="修改最近一次提交信息"></a>修改最近一次提交信息</h4><ul>
<li>修改最近一次的提交信息 : <strong>git commit –amend -m “要修改并提交的新的提交信息”</strong><ul>
<li>该操作会生成一个全新的 commit 对象,修改最近一次的提交信息 , 状态码也会更新</li>
</ul>
</li>
<li>注意点:<ul>
<li>不是写一句代码就 add commit 一次，应该是完成一个功能后再 add commit</li>
<li>commit -m 时,注释一定要认真编写，与当前提交内容保持一致，否则要挨打</li>
</ul>
</li>
</ul>
<h4 id="合并提交时落下的文件"><a href="#合并提交时落下的文件" class="headerlink" title="合并提交时落下的文件"></a>合并提交时落下的文件</h4><ul>
<li>将提交时落下的文件合并到最近一次提交 : <ul>
<li><strong>git commit –amend –no-edit</strong> <ul>
<li>把某个改动并入<code>最近一次的 commit</code> , 落下的文件,也要先添加到暂存区,提交时才能合并进去</li>
<li><code>--no-edit</code> 的意思是不要编辑 commit 信息</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="忽略某些文件不追踪"><a href="#忽略某些文件不追踪" class="headerlink" title="忽略某些文件不追踪"></a>忽略某些文件不追踪</h4><ul>
<li><p>新增 <code>.gitignore</code> 文件,在该文件中写上不需要追踪的文件或文件夹名称,再将该文件提交到版本库即可,后续章节有详细讲解</p>
</li>
<li><p>git 操作流程图:</p>
</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/7a9a0559e40d47c8a533ffda0cda8388" alt="1667211351849"></p>
<h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><h4 id="查看文件被修改的内容"><a href="#查看文件被修改的内容" class="headerlink" title="查看文件被修改的内容"></a>查看文件被修改的内容</h4><ul>
<li><p><code>git diff</code> ：查看文件最新改动的地方</p>
<ul>
<li>查看某个文件的最新改动的地方：<code>git diff 文件名</code></li>
<li>查看当前路径所有文件最新改动的地方：<code>git diff</code></li>
</ul>
</li>
<li><p>在 Git 中输入<code>git diff main.js</code>,即可查看指定文件 main.js 被修改了那些内容</p>
<ul>
<li>被绿色标记的代码,就是新增的代码</li>
<li>需要重新添加到暂缓区和重新提交到当前分支,才能重新被 git 管理</li>
</ul>
</li>
</ul>
<h4 id="查看文件的修改日志"><a href="#查看文件的修改日志" class="headerlink" title="查看文件的修改日志"></a>查看文件的修改日志</h4><ul>
<li><p>查看单个文件的修改历史</p>
<ul>
<li>在 Git 中输入<code>git log main.js</code> 查看指定文件的修改历史</li>
</ul>
</li>
<li><p>查看当前路径所有文件的修改日志</p>
<ul>
<li>在 Git 中输入<code>git log</code> 查看所有文件的修改历史</li>
</ul>
</li>
<li><p>查看指定人员的修改历史记录 : <strong>git log –author&#x3D;”289 snail”</strong></p>
<ul>
<li>注意 : 所有人员名字中包含查找的关键字(比如查找 snail ),则(snail , 289 snail )也会被查找出来</li>
</ul>
</li>
<li><p>查找提交信息中的是否包含指定关键字: <strong>git log –grep&#x3D;”首页”</strong></p>
</li>
<li><p>在 Git 中输入<code>git log --pretty=online</code> 在一行显示查看的所有文件的修改历史</p>
</li>
<li><p>简略查看所有的修改历史</p>
<ul>
<li>在 Git 中输入<code>git reflog</code> 简略查看所有文件的修改历史,如: ( head 指针指向的是当前版本)</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2659505</span> (<span class="variable constant_">HEAD</span> -&gt; master) <span class="variable constant_">HEAD</span>@&#123;<span class="number">0</span>&#125;: <span class="attr">commit</span>: 给main.<span class="property">js</span>添加输出语句</span><br><span class="line">a359aab <span class="variable constant_">HEAD</span>@&#123;<span class="number">1</span>&#125;: <span class="attr">commit</span>: 添加home.<span class="property">js</span></span><br><span class="line">3a9d1df <span class="variable constant_">HEAD</span>@&#123;<span class="number">2</span>&#125;: commit (initial): 初始化仓库 添加main.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用一行的方式查看简单的日志信息：<code>git log ––pretty=oneline</code></li>
<li>查看最近的 N 次修改：<code>git log –N</code>（N 是一个整数）</li>
</ul>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><h4 id="回到上一个版本"><a href="#回到上一个版本" class="headerlink" title="回到上一个版本"></a>回到上一个版本</h4><ul>
<li>在 Git 中输入<code>git reset --hard HEAD^</code> 即可回退到上一个版本</li>
<li><code>git reset</code>：版本回退（建议加上––hard 参数，git 支持无限次后悔）<ul>
<li>回退到上一个版本：<code>git reset ––hard HEAD^</code></li>
<li>回退到上上一个版本：<code>git reset ––hard HEAD^^</code></li>
<li>回退到上 N 个版本：<code>git reset ––hard HEAD~N（N是一个整数）</code></li>
<li>回退到任意一个版本：<code>git reset ––hard 版本号（版本号用7位即可）</code></li>
</ul>
</li>
</ul>
<h4 id="恢复到指定版本"><a href="#恢复到指定版本" class="headerlink" title="恢复到指定版本"></a>恢复到指定版本</h4><ul>
<li>在 Git 中输入<code>git reset --hard 版本号</code> 即可恢复到指定版本号的版本,如:<code>git reset --hard 2659505</code>,版本号在简略查看修改历史中显示</li>
</ul>
<h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><ul>
<li><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。</p>
<ul>
<li>通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等；</li>
<li>我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式；</li>
</ul>
</li>
<li><p>在实际开发中，这个文件通常不需要手动创建，在必须的时候添加自己的忽略内容即可；</p>
</li>
<li><p>比如右侧是创建的 Vue 项目自动创建的忽略文件：</p>
<ul>
<li>包括一些不需要提交的文件、文件夹；</li>
<li>包括本地环境变量文件；</li>
<li>包括一些日志文件；</li>
<li>包括一些编辑器自动生成的文件；</li>
</ul>
</li>
<li><p>在 Git 中输入 <code>touch .gitignore</code> 即可在当前目录添加忽略文件</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">##               表示此为注释,将被<span class="title class_">Git</span>忽略</span><br><span class="line">*.<span class="property">a</span>             表示忽略所有 .<span class="property">a</span> 结尾的文件</span><br><span class="line">!lib.<span class="property">a</span>          表示但lib.<span class="property">a</span>除外</span><br><span class="line">/<span class="variable constant_">TODO</span>           表示仅仅忽略项目根目录下的 <span class="variable constant_">TODO</span> 文件，不包括 subdir/<span class="variable constant_">TODO</span></span><br><span class="line">build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；</span><br><span class="line">doc<span class="comment">/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span></span><br><span class="line"><span class="comment">/bin:           表示忽略根目录下的bin文件</span></span><br><span class="line"><span class="comment">/*.c:           表示忽略cat.c，不忽略 build/cat.c</span></span><br><span class="line"><span class="comment">debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj</span></span><br><span class="line"><span class="comment">**/</span><span class="attr">foo</span>:         表示忽略/foo,a/foo,a/b/foo等</span><br><span class="line">a<span class="comment">/**/</span><span class="attr">b</span>:         表示忽略a/b, a/x/b,a/x/y/b等</span><br><span class="line">!<span class="regexp">/bin/</span>run.<span class="property">sh</span>    表示不忽略bin目录下的run.<span class="property">sh</span>文件</span><br><span class="line">*.<span class="property">log</span>:          表示忽略所有 .<span class="property">log</span> 文件</span><br><span class="line">config.<span class="property">php</span>:     表示忽略当前路径的 config.<span class="property">php</span> 文件</span><br><span class="line"></span><br><span class="line">/mtk/           表示过滤整个文件夹</span><br><span class="line">*.<span class="property">zip</span>           表示过滤所有.<span class="property">zip</span>文件</span><br><span class="line">/mtk/<span class="keyword">do</span>.<span class="property">c</span>       表示过滤某个具体文件</span><br><span class="line"></span><br><span class="line">被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。</span><br><span class="line"></span><br><span class="line">需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：</span><br><span class="line">!*.<span class="property">zip</span></span><br><span class="line">!<span class="regexp">/mtk/</span>one.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line">唯一的区别就是规则开头多了一个感叹号，<span class="title class_">Git</span>会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？</span><br><span class="line">想象一个场景：假如我们只需要管理/mtk/目录中的one.<span class="property">txt</span>文件，这个目录中的其他文件都不需要管理，那么.<span class="property">gitignore</span>规则应写为：：</span><br><span class="line">/mtk<span class="comment">/*</span></span><br><span class="line"><span class="comment">!/mtk/one.txt</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！</span></span><br><span class="line"><span class="comment">注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">还有一些规则如下：</span></span><br><span class="line"><span class="comment">fd1/*</span></span><br><span class="line"><span class="comment">说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/fd1/*</span></span><br><span class="line"><span class="comment">说明：忽略根目录下的 /fd1/ 目录的全部内容；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">!.gitignore</span></span><br><span class="line"><span class="comment">!/fw/</span></span><br><span class="line"><span class="comment">/fw/*</span></span><br><span class="line"><span class="comment">!/fw/bin/</span></span><br><span class="line"><span class="comment">!/fw/sf/</span></span><br><span class="line"><span class="comment">说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。</span></span><br></pre></td></tr></table></figure>

<h3 id="单人开发总结"><a href="#单人开发总结" class="headerlink" title="单人开发总结"></a>单人开发总结</h3><ul>
<li><p>单人流程:</p>
<ul>
<li><p>01 准备工作(只做一次):</p>
<ul>
<li>1 创建一个工作区</li>
<li>2 在工作区中的打开 git 终端</li>
<li>3 通过 <strong>git init</strong> 指令, 初始化版本库</li>
<li>4 通过 <strong>git config user.name “姓名”</strong> 和 <strong>git config user.email “邮箱”</strong> 设置用户名和邮箱(不设置要挨骂)</li>
<li>5.通过 <strong>git config -l</strong> 查看设置情况</li>
</ul>
</li>
<li><p>02 开发阶段(反复执行)</p>
<ul>
<li><p>1 编写代码</p>
</li>
<li><p>2 通过 <strong>git add 文件名称</strong> 和<strong>git add .</strong> 添加到版本库的暂缓区中</p>
</li>
<li><p>3 通过 <strong>git commit -m “说明”</strong> 将暂缓区的文件添加到 HEAD 指针指向的分支中 (默认只有一个分支, master 分支, 也称之为主分支)</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>注意点:</p>
</li>
<li><p>1 不是写一句代码就 add commit 一次, 应该是完成一个功能后再 add commit</p>
</li>
<li><p>2 commit 时,注释一定要认真编写, 与当前提交内容保持一致, 否则要挨骂</p>
</li>
<li><p>单人使用 Git 管理项目好处:</p>
<ul>
<li>1 可以通过 <strong>git status</strong> 查看哪些文件没有被管理, 修改了哪些文件 红色(没有被管理或者被修改了)、绿色(在暂缓区)</li>
<li>2 可以通过 <strong>git diff</strong> 查看具体修改了哪些代码</li>
<li>3 可以通过 <strong>git log</strong> &#x2F; <strong>git reflog</strong> 查看项目演变历史</li>
<li>4 可以通过 <strong>git reset –hard 版本号</strong> 在任意版本之间切换</li>
<li>5 无需备份多个文件, 每次 commit 提交 Git 会自动备份</li>
</ul>
</li>
</ul>
<h2 id="Git-的使用-团队开发"><a href="#Git-的使用-团队开发" class="headerlink" title="Git 的使用-团队开发"></a>Git 的使用-团队开发</h2><h3 id="管理员创建远程库"><a href="#管理员创建远程库" class="headerlink" title="管理员创建远程库"></a>管理员创建远程库</h3><ul>
<li><p>一、项目管理员在远程服务器上创建一个共享版本库</p>
<ul>
<li><p>1 项目负责人打开远程的服务器, 然后创建一个工作区</p>
</li>
<li><p>2 在远程的服务器上打开工作区, 在工作区中打开 Git 终端工具</p>
</li>
<li><p>3 在 Git 终端工具中输入指令 <code>git init --bare</code></p>
</li>
<li><p>4 经过以上几步, 就代表远程服务器上的共享版本库已经创建好了</p>
</li>
</ul>
</li>
</ul>
<h3 id="开发人员下载远程库"><a href="#开发人员下载远程库" class="headerlink" title="开发人员下载远程库"></a>开发人员下载远程库</h3><ul>
<li>二、开发人员下载远程版本库<ul>
<li>1 开发人员在自己的电脑上打开 Git 终端工具</li>
<li>2 从远程的服务器上下载当前项目的共享版本库 <code>git clone 远程服务器共享版本库地址</code></li>
<li>3 和单人开发使用 Git 的区别: 单人开发是自己创建版本库, 而多人开发是从远程服务器下载版本库</li>
</ul>
</li>
</ul>
<h3 id="进入开发阶段"><a href="#进入开发阶段" class="headerlink" title="进入开发阶段"></a>进入开发阶段</h3><ul>
<li><p>三、进入开发阶段</p>
</li>
<li><p>和单人开发一样</p>
<ul>
<li><p>1 设置用户名和邮箱</p>
<ul>
<li>在 Git 中输入 <code>git config user.name &quot;123@qq.com&quot;</code> 添加用户名为 <a href="mailto:&#49;&#50;&#51;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#49;&#50;&#51;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;</a> 的全局配置信息</li>
<li>在 Git 中输入 <code>git config user.email &quot;123@qq.com&quot;</code> 添加邮箱信息为 <a href="mailto:&#x31;&#x32;&#51;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#x31;&#x32;&#51;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a> 的全局配置信息</li>
<li>或者设置当前 git 仓库的用户名和邮箱 : <code>git config --local user.name &quot;xiaoming&quot;</code> , <code>git config --local user.email &quot;xiaoming@163.com</code> , 这样在提交代码时，Git 就知道是谁提交的了。</li>
</ul>
</li>
<li><p>2 编写代码</p>
</li>
<li><p>3 添加到暂缓区</p>
<ul>
<li><p>保存单个文件到暂缓区：<code>git add 文件名</code> 如:<code>git add index.js</code></p>
</li>
<li><p>保存当前路径的所有文件到暂缓区：<code>git add .</code>（注意，最后是一个点 . ）</p>
</li>
</ul>
</li>
<li><p>4 添加到 HEADER 指针指向的分支</p>
<ul>
<li>提交某个文件到分支：<code>git commit -m ”注释” 文件名</code> 如:<code>git commit -m &quot;初始化仓库 添加main.js&quot; main.js</code></li>
<li>保存当前路径的所有文件到分支：<code>git commit -m ”注释”</code> 如<code>git commit -m &quot;初始化仓库 添加main.js&quot;</code></li>
</ul>
</li>
<li><p>5 注意点:</p>
<ul>
<li><p>commit 是将编写好的代码提交到本地的版本库, 所以此时其它的开发人员还拿不到我们提交的代码的</p>
</li>
<li><p>如果想让其它开发人员也能拿到我们提交的代码, 还必须将编写好的代码提交到远程的服务器</p>
</li>
</ul>
</li>
<li><p>6 将代码提交到远程的服务器 <strong>git push</strong></p>
</li>
<li><p>7 其它的开发人员只需要通过 <strong>git pull</strong> 就可以拿到更新的代码了</p>
</li>
</ul>
</li>
</ul>
<h3 id="开发注意点"><a href="#开发注意点" class="headerlink" title="开发注意点"></a>开发注意点</h3><ul>
<li>多人开发使用 Git 注意点:<ul>
<li>1 不能将不能运行的代码提交到本地和远程服务器(切记一定不能)</li>
<li>2 如果服务器上有其它开发人员的更新内容, 那么我们不能直接通过<code>git push</code>将我们的代码提交到服务器</li>
<li>3 如果服务器上有其它开发人员更新的内容, 我们必须先将其它开发人员更新的内容,<code>git pull</code>更新到本地之后, 才能通过 push 提交我们的内容</li>
<li>4 如何我们更新的内容和其它同事更新的内容有冲突(修改了同一个文件的同一行代码), 这个时候需要我们自己手动修改冲突, 修改完冲突之后才能将代码提交到远程服务器</li>
</ul>
</li>
</ul>
<h3 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h3><ul>
<li>开发技巧:<ul>
<li>只要开发完了一个功能就要立即提交代码, 因为在企业开发中谁后提交谁就负责解决冲突, 谁的工作量就会变大</li>
</ul>
</li>
</ul>
<h2 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul>
<li><p>一、如何查看有多少个分支?</p>
<ul>
<li>1 通过 <code>git branch</code> 指令就可以查看当前版本库中有多少个分支</li>
</ul>
</li>
<li><p>注意点:</p>
<ul>
<li><p>1 如果当前的版本库是空的, 那么无法查看</p>
</li>
<li><p>2 如果通过<code>git branch</code>指令查看当前版本库中有多少个分支, 输出的内容中哪一个分支前面有*号,就代表当前的 HEADER 指针指向哪一个分支, 我们提交的代码就会提交到指向的分支中</p>
</li>
</ul>
</li>
</ul>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li>二、如何创建一个分支<ul>
<li>1 通过 <strong>git branch 分支名称</strong> 来创建一个新的分支,如:<code>git branch Dev</code></li>
</ul>
</li>
<li>注意点:<ul>
<li>在哪个分支中创建了新的分支, 那么创建出来的新的分支就会继承当前分支的所有状态</li>
</ul>
</li>
<li>例如:<ul>
<li>在 master 分支中做了两个操作, 然后在 master 分支中创建了 Dev 分支,那么创建出来的 Dev 分支就会继承 master 分支中的这两个操作</li>
</ul>
</li>
<li>注意点:<ul>
<li>一旦分支被创建出来之后, 分支就是独立的, 分支之间不会相互影响</li>
</ul>
</li>
</ul>
<h3 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h3><ul>
<li>指令 : <code>git branch -m 旧分支名 新分支名</code><ul>
<li>例如 : <code>git branch -m snail dev</code></li>
</ul>
</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li>三、如何切换分支<ul>
<li>通过 <strong>git switch 分支名称</strong> 来修改 HEADER 指针的指向,如:<code>git switch Dev</code> <ul>
<li>或者 <code>git checkout Dev</code> 都可以</li>
</ul>
</li>
<li>通过 <strong>git switch -b 分支名称</strong> 来创建新分支并切换到新的分支: <ul>
<li>如果这个分支本来就存在，git 会提示该分支已经存在; </li>
<li>如果不存在，git 会创建改分支后再切换过去。</li>
</ul>
</li>
<li>注意点: <ul>
<li>只要 HEADER 指针的指向发生了改变, 那么 commit 的代码就会发生改变,</li>
<li>HEADER 指针指向谁 commit 提交的代码就提交到谁里面</li>
<li>切换的分支要是已经存在,切换的分支不存在会报错</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="提交分支"><a href="#提交分支" class="headerlink" title="提交分支"></a>提交分支</h3><ul>
<li><p>四、如何将分支提交到远程服务器</p>
<ul>
<li><p>1 通过 <code>git branch -r</code> 来查看远程服务器上有多少个分支</p>
</li>
<li><p>2 首先需要在本地切换到新建的分支中, 然后通过 <code>git push</code> 指令提交新建的分支到远程的服务器<code>git push --set-upstream origin Dev</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li><p>五、如何合并分支</p>
<ul>
<li>可以通过 <strong>git merge 分支名称</strong> 来合并分支</li>
<li>例如:<ul>
<li>在 master 分支中执行 <code>git merge Dev</code> 就代表需要将 Dev 分支中的代码都合并到 master 分支中</li>
</ul>
</li>
<li>例如:<ul>
<li>在 Dev 分支中执行 <code>git merge master</code> 就代表需要将 master 分支中的代码都合并到 Dev 分支中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul>
<li>六、如何删除分支<ul>
<li>1 可以通过 <strong>git branch -d 分支名称</strong> 来删除本地的分支,如:<code>git branch -d Dev</code><ul>
<li>注意: 要先切换到其他分支,才可以删除指定分支, 不能自杀</li>
</ul>
</li>
<li>2 可以通过 <strong>git push origin –delete 分支名称</strong> 来删除远程服务器的分支,如:<code>git push origin --delete Dev</code></li>
</ul>
</li>
</ul>
<h2 id="Gitflow-工作流程"><a href="#Gitflow-工作流程" class="headerlink" title="Gitflow 工作流程"></a>Gitflow 工作流程</h2><ul>
<li>Gitflow 工作中的 6 条分支:</li>
</ul>
<p><img src="https://s1.vika.cn/space/2023/02/26/2eeaf51701a4417383d75efbf5255d4c" alt="1648979739975"></p>
<h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p><img src="https://s1.vika.cn/space/2023/02/26/8f1747b637cf4f5abbfa4d352d5d5b31" alt="1648980014697"></p>
<ul>
<li>一、准备阶段:<ul>
<li>1 初始化远程工作区和共享版本库</li>
<li>2 项目经理初始化项目, 并在 master 定制标记<ul>
<li>在 <code>git push</code>之前,可以用过<code>git tab -a v0.1 -m &quot;初始化项目&quot; </code>添加标记,通过<code>git tab</code>查看标记</li>
</ul>
</li>
<li>3 将 master 分支提交到远程服务器<ul>
<li><code>git push</code></li>
</ul>
</li>
<li>4 项目经理基于 master 分支创建 develop 分支<ul>
<li><code>git branch Develop</code></li>
</ul>
</li>
<li>5 项目经理将新建的分支提交到远程的服务器<ul>
<li>切换到新建的分支:<code>git switch Develop</code></li>
<li>将分支提交到远程服务器: <code>git push</code></li>
</ul>
</li>
<li>6 项目经理给开发人员分配工作任务</li>
</ul>
</li>
</ul>
<h3 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h3><p><img src="https://s1.vika.cn/space/2023/02/26/558b97599c7e48c1b5152fd296feae70" alt="1648981284800"></p>
<ul>
<li>二、开发阶段<ul>
<li>1 开发人员基于 develop 分支创建功能分支</li>
<li>2 开发人员在自己的分支上 add commit push</li>
<li>3 开发完成告诉项目经理, 由项目经理审核代码并合并代码到 develop</li>
</ul>
</li>
</ul>
<h3 id="准备上线阶段"><a href="#准备上线阶段" class="headerlink" title="准备上线阶段"></a>准备上线阶段</h3><p><img src="https://s1.vika.cn/space/2023/02/26/84b37dd3b4d14164b5913306fa6f9aaf" alt="1649071631064"></p>
<ul>
<li>三、准备上线阶段<ul>
<li>1 项目经理基于 develop 分支创建 release 分支</li>
<li>2 测试人员获取 release 分支代码进行测试</li>
<li>3 发现 bug 由开发人员基于 release 分支创建 bugfix 分支进行修复</li>
<li>4 修复完成后重新合并到 release 分支</li>
<li>5 将测试和修复完所有 bug 的最终代码合并到 master 分支和 develop 分支</li>
</ul>
</li>
</ul>
<h3 id="正式上线阶段"><a href="#正式上线阶段" class="headerlink" title="正式上线阶段"></a>正式上线阶段</h3><p><img src="https://s1.vika.cn/space/2023/02/26/ed3edcfa3c3b437e9028b9a41b91a3f0" alt="1649072034897"></p>
<ul>
<li>三、正式上线阶段<ul>
<li>1 项目经理给 master 分支制定标记</li>
<li>2 项目经理将标记提交到远程服务器:<code>git push origin v1.0</code></li>
<li>3 项目完成上线</li>
</ul>
</li>
</ul>
<h3 id="项目上线之后"><a href="#项目上线之后" class="headerlink" title="项目上线之后"></a>项目上线之后</h3><p><img src="https://s1.vika.cn/space/2023/02/26/319e0bf70e164bebbfa2f8fab28c5888" alt="1649072219097"></p>
<ul>
<li>四、上线之后<ul>
<li>1 项目上线后如果出现了紧急 bug</li>
<li>2 基于 master 分支创建 hotfix 分支, 在该分支上修复 bug</li>
<li>3 修复完成后重新合并到 master 分支和 develop 分支</li>
<li>4 项目经理在 master 分支定制标记</li>
</ul>
</li>
</ul>
<h2 id="Gitee-的使用"><a href="#Gitee-的使用" class="headerlink" title="Gitee 的使用"></a>Gitee 的使用</h2><h3 id="Gitee-的注册与登陆"><a href="#Gitee-的注册与登陆" class="headerlink" title="Gitee 的注册与登陆"></a>Gitee 的注册与登陆</h3><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><h3 id="配置-SSH-公钥"><a href="#配置-SSH-公钥" class="headerlink" title="配置 SSH 公钥"></a>配置 SSH 公钥</h3><ul>
<li>1 生成 SSH 公钥</li>
<li>在 Git 中输入 <code>ssh-keygen -t ed25519 -C &quot;xxxxx@xxxxx.com&quot;</code>,三次回车,即可生成公钥(后面的邮箱仅作为标识)</li>
<li>2 查看 SSH 公钥</li>
<li>在<code>C:\Users\online289\.ssh</code>目录中的 <code>id_ed25519.pub</code> 文件中查看生成的 SSH 公钥</li>
<li>3 添加 SSH 公钥</li>
<li>将生成的公钥复制,在 Gitee 中设置&#x2F;SSH 公钥中添加公钥</li>
<li>4 在终端中输入<code>ssh -T git@gitee.com</code>, 出现 hai~xxx 即配置完成</li>
</ul>
<h3 id="Git-的全局配置"><a href="#Git-的全局配置" class="headerlink" title="Git 的全局配置"></a>Git 的全局配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加全局配置,必须添加,否则会挨骂</span></span><br><span class="line">git config --global user.name &quot;骑蜗牛去流浪&quot;</span><br><span class="line">git config --global user.email &quot;1234567890@qq.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库"></a>创建 git 仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir vue3-black-horse-rabbit-fresh # 创建项目目录</span><br><span class="line">cd vue3-black-horse-rabbit-fresh # 进入项目目录</span><br><span class="line">git init # 仓库初始化</span><br><span class="line">touch README.md # 创建 README.md 文件</span><br><span class="line">git add README.md # 将 README.md 文件添加到暂存区</span><br><span class="line">git commit -m &quot;first commit&quot; # 提交到本地仓库</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加并连接远程仓库 , origin 是远程仓库的别名</span></span><br><span class="line">git remote add origin https://gitee.com/online289/vue3-black-horse-rabbit-fresh.git </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把本地仓库主分支推到远程仓库主分支</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 master 分支的内容推向远端的 origin 位置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 origin 远端服务器上，如果 master 分支不存在，则创建一个名为 master 的分支</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果远端服务器上已存在 master 分支，则会把远端 master 分支更新到最新进度</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入-u 参数，下次再执行git push 命令时,就会用 master 分支作为默认的远端节点推送上去</span></span><br><span class="line">git push -u origin &quot;master&quot; </span><br></pre></td></tr></table></figure>

<h3 id="已有仓库连接远程库"><a href="#已有仓库连接远程库" class="headerlink" title="已有仓库连接远程库"></a>已有仓库连接远程库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd existing_git_repo # 进入项目</span><br><span class="line">git remote add origin https://gitee.com/online289/vue3-black-horse-rabbit-fresh.git # 连接远程仓库</span><br><span class="line">git push -u origin &quot;master&quot; # 提交到远程库master分支</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端开发</category>
      </categories>
  </entry>
</search>
